/*!
 * jQuery JavaScript Library v1.11.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-17T15:27Z
 */

/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */

/*! jQuery UI - v1.11.1 - 2014-08-13
* http://jqueryui.com
* Includes: core.js, widget.js, mouse.js, position.js, accordion.js, autocomplete.js, button.js, datepicker.js, dialog.js, draggable.js, droppable.js, effect.js, effect-blind.js, effect-bounce.js, effect-clip.js, effect-drop.js, effect-explode.js, effect-fade.js, effect-fold.js, effect-highlight.js, effect-puff.js, effect-pulsate.js, effect-scale.js, effect-shake.js, effect-size.js, effect-slide.js, effect-transfer.js, menu.js, progressbar.js, resizable.js, selectable.js, selectmenu.js, slider.js, sortable.js, spinner.js, tabs.js, tooltip.js
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */

/*!
 * jQuery UI Core 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */

/*!
 * jQuery UI Widget 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/jQuery.widget/
 */

/*!
 * jQuery UI Mouse 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/mouse/
 */

/*!
 * jQuery UI Position 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */

/*!
 * jQuery UI Accordion 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/accordion/
 */

/*!
 * jQuery UI Menu 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/menu/
 */

/*!
 * jQuery UI Autocomplete 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/autocomplete/
 */

/*!
 * jQuery UI Button 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/button/
 */

/*!
 * jQuery UI Datepicker 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/datepicker/
 */

/*!
 * jQuery UI Draggable 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/draggable/
 */

/*!
 * jQuery UI Resizable 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/resizable/
 */

/*!
 * jQuery UI Dialog 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/dialog/
 */

/*!
 * jQuery UI Droppable 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/droppable/
 */

/*!
 * jQuery UI Effects 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/effects-core/
 */

/*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */

/*!
 * jQuery UI Effects Blind 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/blind-effect/
 */

/*!
 * jQuery UI Effects Bounce 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/bounce-effect/
 */

/*!
 * jQuery UI Effects Clip 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/clip-effect/
 */

/*!
 * jQuery UI Effects Drop 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/drop-effect/
 */

/*!
 * jQuery UI Effects Explode 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/explode-effect/
 */

/*!
 * jQuery UI Effects Fade 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/fade-effect/
 */

/*!
 * jQuery UI Effects Fold 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/fold-effect/
 */

/*!
 * jQuery UI Effects Highlight 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/highlight-effect/
 */

/*!
 * jQuery UI Effects Size 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/size-effect/
 */

/*!
 * jQuery UI Effects Scale 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/scale-effect/
 */

/*!
 * jQuery UI Effects Puff 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/puff-effect/
 */

/*!
 * jQuery UI Effects Pulsate 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/pulsate-effect/
 */

/*!
 * jQuery UI Effects Shake 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/shake-effect/
 */

/*!
 * jQuery UI Effects Slide 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/slide-effect/
 */

/*!
 * jQuery UI Effects Transfer 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/transfer-effect/
 */

/*!
 * jQuery UI Progressbar 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/progressbar/
 */

/*!
 * jQuery UI Selectable 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/selectable/
 */

/*!
 * jQuery UI Selectmenu 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/selectmenu
 */

/*!
 * jQuery UI Slider 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/slider/
 */

/*!
 * jQuery UI Sortable 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/sortable/
 */

/*!
 * jQuery UI Spinner 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/spinner/
 */

/*!
 * jQuery UI Tabs 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/tabs/
 */

/*!
 * jQuery UI Tooltip 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/tooltip/
 */

/*
 evol.colorpicker 3.2.1
 ColorPicker widget for jQuery UI

 https://github.com/evoluteur/colorpicker
 (c) 2015 Olivier Giulieri

 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 */

function isOnScreen(el) {
    var viewport = {
        top: 0,
        left: 0
    };
    viewport.right = window.screen.width;
    viewport.bottom = window.screen.height - 100;
    var width = 222, height = 285;
    $doc = $(document);
    var bounds = $(el).offset(), right = bounds.left - $doc.scrollLeft() + width, bottom = bounds.top - $doc.scrollTop() + height;
    return !(bounds.left < viewport.left || right > viewport.right || bounds.top < viewport.top || bottom > viewport.bottom);
}

!function(global, factory) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = global.document ? factory(global, !0) : function(w) {
        if (!w.document) throw new Error("jQuery requires a window with a document");
        return factory(w);
    } : factory(global);
}("undefined" != typeof window ? window : this, function(window, noGlobal) {
    function isArraylike(obj) {
        var length = obj.length, type = jQuery.type(obj);
        return "function" === type || jQuery.isWindow(obj) ? !1 : 1 === obj.nodeType && length ? !0 : "array" === type || 0 === length || "number" == typeof length && length > 0 && length - 1 in obj;
    }
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) return jQuery.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
        });
        if (qualifier.nodeType) return jQuery.grep(elements, function(elem) {
            return elem === qualifier !== not;
        });
        if ("string" == typeof qualifier) {
            if (risSimple.test(qualifier)) return jQuery.filter(qualifier, elements, not);
            qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function(elem) {
            return jQuery.inArray(elem, qualifier) >= 0 !== not;
        });
    }
    function sibling(cur, dir) {
        do cur = cur[dir]; while (cur && 1 !== cur.nodeType);
        return cur;
    }
    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
            object[flag] = !0;
        });
        return object;
    }
    function detach() {
        if (document.addEventListener) {
            document.removeEventListener("DOMContentLoaded", completed, !1);
            window.removeEventListener("load", completed, !1);
        } else {
            document.detachEvent("onreadystatechange", completed);
            window.detachEvent("onload", completed);
        }
    }
    function completed() {
        if (document.addEventListener || "load" === event.type || "complete" === document.readyState) {
            detach();
            jQuery.ready();
        }
    }
    function dataAttr(elem, key, data) {
        if (void 0 === data && 1 === elem.nodeType) {
            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);
            if ("string" == typeof data) {
                try {
                    data = "true" === data ? !0 : "false" === data ? !1 : "null" === data ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {}
                jQuery.data(elem, key, data);
            } else data = void 0;
        }
        return data;
    }
    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) if (("data" !== name || !jQuery.isEmptyObject(obj[name])) && "toJSON" !== name) return !1;
        return !0;
    }
    function internalData(elem, name, data, pvt) {
        if (jQuery.acceptData(elem)) {
            var ret, thisCache, internalKey = jQuery.expando, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
            if (id && cache[id] && (pvt || cache[id].data) || void 0 !== data || "string" != typeof name) {
                id || (id = isNode ? elem[internalKey] = deletedIds.pop() || jQuery.guid++ : internalKey);
                cache[id] || (cache[id] = isNode ? {} : {
                    toJSON: jQuery.noop
                });
                ("object" == typeof name || "function" == typeof name) && (pvt ? cache[id] = jQuery.extend(cache[id], name) : cache[id].data = jQuery.extend(cache[id].data, name));
                thisCache = cache[id];
                if (!pvt) {
                    thisCache.data || (thisCache.data = {});
                    thisCache = thisCache.data;
                }
                void 0 !== data && (thisCache[jQuery.camelCase(name)] = data);
                if ("string" == typeof name) {
                    ret = thisCache[name];
                    null == ret && (ret = thisCache[jQuery.camelCase(name)]);
                } else ret = thisCache;
                return ret;
            }
        }
    }
    function internalRemoveData(elem, name, pvt) {
        if (jQuery.acceptData(elem)) {
            var thisCache, i, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
            if (cache[id]) {
                if (name) {
                    thisCache = pvt ? cache[id] : cache[id].data;
                    if (thisCache) {
                        if (jQuery.isArray(name)) name = name.concat(jQuery.map(name, jQuery.camelCase)); else if (name in thisCache) name = [ name ]; else {
                            name = jQuery.camelCase(name);
                            name = name in thisCache ? [ name ] : name.split(" ");
                        }
                        i = name.length;
                        for (;i--; ) delete thisCache[name[i]];
                        if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) return;
                    }
                }
                if (!pvt) {
                    delete cache[id].data;
                    if (!isEmptyDataObject(cache[id])) return;
                }
                isNode ? jQuery.cleanData([ elem ], !0) : support.deleteExpando || cache != cache.window ? delete cache[id] : cache[id] = null;
            }
        }
    }
    function returnTrue() {
        return !0;
    }
    function returnFalse() {
        return !1;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }
    function createSafeFragment(document) {
        var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment();
        if (safeFrag.createElement) for (;list.length; ) safeFrag.createElement(list.pop());
        return safeFrag;
    }
    function getAll(context, tag) {
        var elems, elem, i = 0, found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== strundefined ? context.querySelectorAll(tag || "*") : void 0;
        if (!found) for (found = [], elems = context.childNodes || context; null != (elem = elems[i]); i++) !tag || jQuery.nodeName(elem, tag) ? found.push(elem) : jQuery.merge(found, getAll(elem, tag));
        return void 0 === tag || tag && jQuery.nodeName(context, tag) ? jQuery.merge([ context ], found) : found;
    }
    function fixDefaultChecked(elem) {
        rcheckableType.test(elem.type) && (elem.defaultChecked = elem.checked);
    }
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(11 !== content.nodeType ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
    }
    function disableScript(elem) {
        elem.type = (null !== jQuery.find.attr(elem, "type")) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        match ? elem.type = match[1] : elem.removeAttribute("type");
        return elem;
    }
    function setGlobalEval(elems, refElements) {
        for (var elem, i = 0; null != (elem = elems[i]); i++) jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
    }
    function cloneCopyEvent(src, dest) {
        if (1 === dest.nodeType && jQuery.hasData(src)) {
            var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
            if (events) {
                delete curData.handle;
                curData.events = {};
                for (type in events) for (i = 0, l = events[type].length; l > i; i++) jQuery.event.add(dest, type, events[type][i]);
            }
            curData.data && (curData.data = jQuery.extend({}, curData.data));
        }
    }
    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;
        if (1 === dest.nodeType) {
            nodeName = dest.nodeName.toLowerCase();
            if (!support.noCloneEvent && dest[jQuery.expando]) {
                data = jQuery._data(dest);
                for (e in data.events) jQuery.removeEvent(dest, e, data.handle);
                dest.removeAttribute(jQuery.expando);
            }
            if ("script" === nodeName && dest.text !== src.text) {
                disableScript(dest).text = src.text;
                restoreScript(dest);
            } else if ("object" === nodeName) {
                dest.parentNode && (dest.outerHTML = src.outerHTML);
                support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML) && (dest.innerHTML = src.innerHTML);
            } else if ("input" === nodeName && rcheckableType.test(src.type)) {
                dest.defaultChecked = dest.checked = src.checked;
                dest.value !== src.value && (dest.value = src.value);
            } else "option" === nodeName ? dest.defaultSelected = dest.selected = src.defaultSelected : ("input" === nodeName || "textarea" === nodeName) && (dest.defaultValue = src.defaultValue);
        }
    }
    function actualDisplay(name, doc) {
        var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], "display");
        elem.detach();
        return display;
    }
    function defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            if ("none" === display || !display) {
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write();
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function() {
                var condition = conditionFn();
                if (null != condition) {
                    if (!condition) return (this.get = hookFn).apply(this, arguments);
                    delete this.get;
                }
            }
        };
    }
    function vendorPropName(style, name) {
        if (name in style) return name;
        for (var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length; i--; ) {
            name = cssPrefixes[i] + capName;
            if (name in style) return name;
        }
        return origName;
    }
    function showHide(elements, show) {
        for (var display, elem, hidden, values = [], index = 0, length = elements.length; length > index; index++) {
            elem = elements[index];
            if (elem.style) {
                values[index] = jQuery._data(elem, "olddisplay");
                display = elem.style.display;
                if (show) {
                    values[index] || "none" !== display || (elem.style.display = "");
                    "" === elem.style.display && isHidden(elem) && (values[index] = jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName)));
                } else {
                    hidden = isHidden(elem);
                    (display && "none" !== display || !hidden) && jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
                }
            }
        }
        for (index = 0; length > index; index++) {
            elem = elements[index];
            elem.style && (show && "none" !== elem.style.display && "" !== elem.style.display || (elem.style.display = show ? values[index] || "" : "none"));
        }
        return elements;
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        for (var i = extra === (isBorderBox ? "border" : "content") ? 4 : "width" === name ? 1 : 0, val = 0; 4 > i; i += 2) {
            "margin" === extra && (val += jQuery.css(elem, extra + cssExpand[i], !0, styles));
            if (isBorderBox) {
                "content" === extra && (val -= jQuery.css(elem, "padding" + cssExpand[i], !0, styles));
                "margin" !== extra && (val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", !0, styles));
            } else {
                val += jQuery.css(elem, "padding" + cssExpand[i], !0, styles);
                "padding" !== extra && (val += jQuery.css(elem, "border" + cssExpand[i] + "Width", !0, styles));
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = !0, val = "width" === name ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = support.boxSizing && "border-box" === jQuery.css(elem, "boxSizing", !1, styles);
        if (0 >= val || null == val) {
            val = curCSS(elem, name, styles);
            (0 > val || null == val) && (val = elem.style[name]);
            if (rnumnonpx.test(val)) return val;
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
            val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
    }
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    function createFxNow() {
        setTimeout(function() {
            fxNow = void 0;
        });
        return fxNow = jQuery.now();
    }
    function genFx(type, includeWidth) {
        var which, attrs = {
            height: type
        }, i = 0;
        includeWidth = includeWidth ? 1 : 0;
        for (;4 > i; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        includeWidth && (attrs.opacity = attrs.width = type);
        return attrs;
    }
    function createTween(value, prop, animation) {
        for (var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]), index = 0, length = collection.length; length > index; index++) if (tween = collection[index].call(animation, prop, value)) return tween;
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = jQuery._data(elem, "fxshow");
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (null == hooks.unqueued) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    hooks.unqueued || oldfire();
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                anim.always(function() {
                    hooks.unqueued--;
                    jQuery.queue(elem, "fx").length || hooks.empty.fire();
                });
            });
        }
        if (1 === elem.nodeType && ("height" in props || "width" in props)) {
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
            display = jQuery.css(elem, "display");
            checkDisplay = "none" === display ? jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;
            "inline" === checkDisplay && "none" === jQuery.css(elem, "float") && (support.inlineBlockNeedsLayout && "inline" !== defaultDisplay(elem.nodeName) ? style.zoom = 1 : style.display = "inline-block");
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            support.shrinkWrapBlocks() || anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || "toggle" === value;
                if (value === (hidden ? "hide" : "show")) {
                    if ("show" !== value || !dataShow || void 0 === dataShow[prop]) continue;
                    hidden = !0;
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            } else display = void 0;
        }
        if (jQuery.isEmptyObject(orig)) "inline" === ("none" === display ? defaultDisplay(elem.nodeName) : display) && (style.display = display); else {
            dataShow ? "hidden" in dataShow && (hidden = dataShow.hidden) : dataShow = jQuery._data(elem, "fxshow", {});
            toggle && (dataShow.hidden = !hidden);
            hidden ? jQuery(elem).show() : anim.done(function() {
                jQuery(elem).hide();
            });
            anim.done(function() {
                var prop;
                jQuery._removeData(elem, "fxshow");
                for (prop in orig) jQuery.style(elem, prop, orig[prop]);
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = "width" === prop || "height" === prop ? 1 : 0;
                    }
                }
            }
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) if (!(index in props)) {
                    props[index] = value[index];
                    specialEasing[index] = easing;
                }
            } else specialEasing[name] = easing;
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function() {
            delete tick.elem;
        }), tick = function() {
            if (stopped) return !1;
            for (var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length; length > index; index++) animation.tweens[index].run(percent);
            deferred.notifyWith(elem, [ animation, percent, remaining ]);
            if (1 > percent && length) return remaining;
            deferred.resolveWith(elem, [ animation ]);
            return !1;
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(!0, {
                specialEasing: {}
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function(gotoEnd) {
                var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) return this;
                stopped = !0;
                for (;length > index; index++) animation.tweens[index].run(1);
                gotoEnd ? deferred.resolveWith(elem, [ animation, gotoEnd ]) : deferred.rejectWith(elem, [ animation, gotoEnd ]);
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (;length > index; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) return result;
        }
        jQuery.map(props, createTween, animation);
        jQuery.isFunction(animation.opts.start) && animation.opts.start.call(elem, animation);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
            if ("string" != typeof dataTypeExpression) {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
            if (jQuery.isFunction(func)) for (;dataType = dataTypes[i++]; ) if ("+" === dataType.charAt(0)) {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func);
            } else (structure[dataType] = structure[dataType] || []).push(func);
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        function inspect(dataType) {
            var selected;
            inspected[dataType] = !0;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if ("string" == typeof dataTypeOrTransport && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return !1;
                }
                return seekingTransport ? !(selected = dataTypeOrTransport) : void 0;
            });
            return selected;
        }
        var inspected = {}, seekingTransport = structure === transports;
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    function ajaxExtend(target, src) {
        var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) void 0 !== src[key] && ((flatOptions[key] ? target : deep || (deep = {}))[key] = src[key]);
        deep && jQuery.extend(!0, target, deep);
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        for (var firstDataType, ct, finalDataType, type, contents = s.contents, dataTypes = s.dataTypes; "*" === dataTypes[0]; ) {
            dataTypes.shift();
            void 0 === ct && (ct = s.mimeType || jqXHR.getResponseHeader("Content-Type"));
        }
        if (ct) for (type in contents) if (contents[type] && contents[type].test(ct)) {
            dataTypes.unshift(type);
            break;
        }
        if (dataTypes[0] in responses) finalDataType = dataTypes[0]; else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                firstDataType || (firstDataType = type);
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            finalDataType !== dataTypes[0] && dataTypes.unshift(finalDataType);
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) for (conv in s.converters) converters[conv.toLowerCase()] = s.converters[conv];
        current = dataTypes.shift();
        for (;current; ) {
            s.responseFields[current] && (jqXHR[s.responseFields[current]] = response);
            !prev && isSuccess && s.dataFilter && (response = s.dataFilter(response, s.dataType));
            prev = current;
            current = dataTypes.shift();
            if (current) if ("*" === current) current = prev; else if ("*" !== prev && prev !== current) {
                conv = converters[prev + " " + current] || converters["* " + current];
                if (!conv) for (conv2 in converters) {
                    tmp = conv2.split(" ");
                    if (tmp[1] === current) {
                        conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                        if (conv) {
                            if (conv === !0) conv = converters[conv2]; else if (converters[conv2] !== !0) {
                                current = tmp[0];
                                dataTypes.unshift(tmp[1]);
                            }
                            break;
                        }
                    }
                }
                if (conv !== !0) if (conv && s["throws"]) response = conv(response); else try {
                    response = conv(response);
                } catch (e) {
                    return {
                        state: "parsererror",
                        error: conv ? e : "No conversion from " + prev + " to " + current
                    };
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) jQuery.each(obj, function(i, v) {
            traditional || rbracket.test(prefix) ? add(prefix, v) : buildParams(prefix + "[" + ("object" == typeof v ? i : "") + "]", v, traditional, add);
        }); else if (traditional || "object" !== jQuery.type(obj)) add(prefix, obj); else for (name in obj) buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
    }
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    }
    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {}
    }
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : 9 === elem.nodeType ? elem.defaultView || elem.parentWindow : !1;
    }
    var deletedIds = [], slice = deletedIds.slice, concat = deletedIds.concat, push = deletedIds.push, indexOf = deletedIds.indexOf, class2type = {}, toString = class2type.toString, hasOwn = class2type.hasOwnProperty, support = {}, version = "1.11.2", jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
    }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function(all, letter) {
        return letter.toUpperCase();
    };
    jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        selector: "",
        length: 0,
        toArray: function() {
            return slice.call(this);
        },
        get: function(num) {
            return null != num ? 0 > num ? this[num + this.length] : this[num] : slice.call(this);
        },
        pushStack: function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret;
        },
        each: function(callback, args) {
            return jQuery.each(this, callback, args);
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function() {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(i) {
            var len = this.length, j = +i + (0 > i ? len : 0);
            return this.pushStack(j >= 0 && len > j ? [ this[j] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor(null);
        },
        push: push,
        sort: deletedIds.sort,
        splice: deletedIds.splice
    };
    jQuery.extend = jQuery.fn.extend = function() {
        var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = !1;
        if ("boolean" == typeof target) {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        "object" == typeof target || jQuery.isFunction(target) || (target = {});
        if (i === length) {
            target = this;
            i--;
        }
        for (;length > i; i++) if (null != (options = arguments[i])) for (name in options) {
            src = target[name];
            copy = options[name];
            if (target !== copy) if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                if (copyIsArray) {
                    copyIsArray = !1;
                    clone = src && jQuery.isArray(src) ? src : [];
                } else clone = src && jQuery.isPlainObject(src) ? src : {};
                target[name] = jQuery.extend(deep, clone, copy);
            } else void 0 !== copy && (target[name] = copy);
        }
        return target;
    };
    jQuery.extend({
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(msg) {
            throw new Error(msg);
        },
        noop: function() {},
        isFunction: function(obj) {
            return "function" === jQuery.type(obj);
        },
        isArray: Array.isArray || function(obj) {
            return "array" === jQuery.type(obj);
        },
        isWindow: function(obj) {
            return null != obj && obj == obj.window;
        },
        isNumeric: function(obj) {
            return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
        },
        isEmptyObject: function(obj) {
            var name;
            for (name in obj) return !1;
            return !0;
        },
        isPlainObject: function(obj) {
            var key;
            if (!obj || "object" !== jQuery.type(obj) || obj.nodeType || jQuery.isWindow(obj)) return !1;
            try {
                if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) return !1;
            } catch (e) {
                return !1;
            }
            if (support.ownLast) for (key in obj) return hasOwn.call(obj, key);
            for (key in obj) ;
            return void 0 === key || hasOwn.call(obj, key);
        },
        type: function(obj) {
            return null == obj ? obj + "" : "object" == typeof obj || "function" == typeof obj ? class2type[toString.call(obj)] || "object" : typeof obj;
        },
        globalEval: function(data) {
            data && jQuery.trim(data) && (window.execScript || function(data) {
                window.eval.call(window, data);
            })(data);
        },
        camelCase: function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },
        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        each: function(obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) if (isArray) for (;length > i; i++) {
                value = callback.apply(obj[i], args);
                if (value === !1) break;
            } else for (i in obj) {
                value = callback.apply(obj[i], args);
                if (value === !1) break;
            } else if (isArray) for (;length > i; i++) {
                value = callback.call(obj[i], i, obj[i]);
                if (value === !1) break;
            } else for (i in obj) {
                value = callback.call(obj[i], i, obj[i]);
                if (value === !1) break;
            }
            return obj;
        },
        trim: function(text) {
            return null == text ? "" : (text + "").replace(rtrim, "");
        },
        makeArray: function(arr, results) {
            var ret = results || [];
            null != arr && (isArraylike(Object(arr)) ? jQuery.merge(ret, "string" == typeof arr ? [ arr ] : arr) : push.call(ret, arr));
            return ret;
        },
        inArray: function(elem, arr, i) {
            var len;
            if (arr) {
                if (indexOf) return indexOf.call(arr, elem, i);
                len = arr.length;
                i = i ? 0 > i ? Math.max(0, len + i) : i : 0;
                for (;len > i; i++) if (i in arr && arr[i] === elem) return i;
            }
            return -1;
        },
        merge: function(first, second) {
            for (var len = +second.length, j = 0, i = first.length; len > j; ) first[i++] = second[j++];
            if (len !== len) for (;void 0 !== second[j]; ) first[i++] = second[j++];
            first.length = i;
            return first;
        },
        grep: function(elems, callback, invert) {
            for (var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert; length > i; i++) {
                callbackInverse = !callback(elems[i], i);
                callbackInverse !== callbackExpect && matches.push(elems[i]);
            }
            return matches;
        },
        map: function(elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
            if (isArray) for (;length > i; i++) {
                value = callback(elems[i], i, arg);
                null != value && ret.push(value);
            } else for (i in elems) {
                value = callback(elems[i], i, arg);
                null != value && ret.push(value);
            }
            return concat.apply([], ret);
        },
        guid: 1,
        proxy: function(fn, context) {
            var args, proxy, tmp;
            if ("string" == typeof context) {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            if (jQuery.isFunction(fn)) {
                args = slice.call(arguments, 2);
                proxy = function() {
                    return fn.apply(context || this, args.concat(slice.call(arguments)));
                };
                proxy.guid = fn.guid = fn.guid || jQuery.guid++;
                return proxy;
            }
        },
        now: function() {
            return +new Date();
        },
        support: support
    });
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    var Sizzle = function(window) {
        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
            (context ? context.ownerDocument || context : preferredDoc) !== document && setDocument(context);
            context = context || document;
            results = results || [];
            nodeType = context.nodeType;
            if ("string" != typeof selector || !selector || 1 !== nodeType && 9 !== nodeType && 11 !== nodeType) return results;
            if (!seed && documentIsHTML) {
                if (11 !== nodeType && (match = rquickExpr.exec(selector))) if (m = match[1]) {
                    if (9 === nodeType) {
                        elem = context.getElementById(m);
                        if (!elem || !elem.parentNode) return results;
                        if (elem.id === m) {
                            results.push(elem);
                            return results;
                        }
                    } else if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                        results.push(elem);
                        return results;
                    }
                } else {
                    if (match[2]) {
                        push.apply(results, context.getElementsByTagName(selector));
                        return results;
                    }
                    if ((m = match[3]) && support.getElementsByClassName) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                    }
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = 1 !== nodeType && selector;
                    if (1 === nodeType && "object" !== context.nodeName.toLowerCase()) {
                        groups = tokenize(selector);
                        (old = context.getAttribute("id")) ? nid = old.replace(rescape, "\\$&") : context.setAttribute("id", nid);
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        for (;i--; ) groups[i] = nid + toSelector(groups[i]);
                        newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        newSelector = groups.join(",");
                    }
                    if (newSelector) try {
                        push.apply(results, newContext.querySelectorAll(newSelector));
                        return results;
                    } catch (qsaError) {} finally {
                        old || context.removeAttribute("id");
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        function createCache() {
            function cache(key, value) {
                keys.push(key + " ") > Expr.cacheLength && delete cache[keys.shift()];
                return cache[key + " "] = value;
            }
            var keys = [];
            return cache;
        }
        function markFunction(fn) {
            fn[expando] = !0;
            return fn;
        }
        function assert(fn) {
            var div = document.createElement("div");
            try {
                return !!fn(div);
            } catch (e) {
                return !1;
            } finally {
                div.parentNode && div.parentNode.removeChild(div);
                div = null;
            }
        }
        function addHandle(attrs, handler) {
            for (var arr = attrs.split("|"), i = attrs.length; i--; ) Expr.attrHandle[arr[i]] = handler;
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
            if (diff) return diff;
            if (cur) for (;cur = cur.nextSibling; ) if (cur === b) return -1;
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return "input" === name && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return ("input" === name || "button" === name) && elem.type === type;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    for (var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length; i--; ) seed[j = matchIndexes[i]] && (seed[j] = !(matches[j] = seed[j]));
                });
            });
        }
        function testContext(context) {
            return context && "undefined" != typeof context.getElementsByTagName && context;
        }
        function setFilters() {}
        function toSelector(tokens) {
            for (var i = 0, len = tokens.length, selector = ""; len > i; i++) selector += tokens[i].value;
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && "parentNode" === dir, doneName = done++;
            return combinator.first ? function(elem, context, xml) {
                for (;elem = elem[dir]; ) if (1 === elem.nodeType || checkNonElements) return matcher(elem, context, xml);
            } : function(elem, context, xml) {
                var oldCache, outerCache, newCache = [ dirruns, doneName ];
                if (xml) {
                    for (;elem = elem[dir]; ) if ((1 === elem.nodeType || checkNonElements) && matcher(elem, context, xml)) return !0;
                } else for (;elem = elem[dir]; ) if (1 === elem.nodeType || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});
                    if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) return newCache[2] = oldCache[2];
                    outerCache[dir] = newCache;
                    if (newCache[2] = matcher(elem, context, xml)) return !0;
                }
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                for (var i = matchers.length; i--; ) if (!matchers[i](elem, context, xml)) return !1;
                return !0;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            for (var i = 0, len = contexts.length; len > i; i++) Sizzle(selector, contexts[i], results);
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            for (var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = null != map; len > i; i++) if ((elem = unmatched[i]) && (!filter || filter(elem, context, xml))) {
                newUnmatched.push(elem);
                mapped && map.push(i);
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            postFilter && !postFilter[expando] && (postFilter = setMatcher(postFilter));
            postFinder && !postFinder[expando] && (postFinder = setMatcher(postFinder, postSelector));
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [ context ] : context, []), matcherIn = !preFilter || !seed && selector ? elems : condense(elems, preMap, preFilter, context, xml), matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                matcher && matcher(matcherIn, matcherOut, context, xml);
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    for (;i--; ) (elem = temp[i]) && (matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem));
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            for (;i--; ) (elem = matcherOut[i]) && temp.push(matcherIn[i] = elem);
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        for (;i--; ) (elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1 && (seed[temp] = !(results[temp] = elem));
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    postFinder ? postFinder(null, results, matcherOut, xml) : push.apply(results, matcherOut);
                }
            });
        }
        function matcherFromTokens(tokens) {
            for (var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, !0), matchAnyContext = addCombinator(function(elem) {
                return indexOf(checkContext, elem) > -1;
            }, implicitRelative, !0), matchers = [ function(elem, context, xml) {
                var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                checkContext = null;
                return ret;
            } ]; len > i; i++) if (matcher = Expr.relative[tokens[i].type]) matchers = [ addCombinator(elementMatcher(matchers), matcher) ]; else {
                matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                if (matcher[expando]) {
                    j = ++i;
                    for (;len > j && !Expr.relative[tokens[j].type]; j++) ;
                    return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                        value: " " === tokens[i - 2].type ? "*" : ""
                    })).replace(rtrim, "$1"), matcher, j > i && matcherFromTokens(tokens.slice(i, j)), len > j && matcherFromTokens(tokens = tokens.slice(j)), len > j && toSelector(tokens));
                }
                matchers.push(matcher);
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find.TAG("*", outermost), dirrunsUnique = dirruns += null == contextBackup ? 1 : Math.random() || .1, len = elems.length;
                outermost && (outermostContext = context !== document && context);
                for (;i !== len && null != (elem = elems[i]); i++) {
                    if (byElement && elem) {
                        j = 0;
                        for (;matcher = elementMatchers[j++]; ) if (matcher(elem, context, xml)) {
                            results.push(elem);
                            break;
                        }
                        outermost && (dirruns = dirrunsUnique);
                    }
                    if (bySet) {
                        (elem = !matcher && elem) && matchedCount--;
                        seed && unmatched.push(elem);
                    }
                }
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                    j = 0;
                    for (;matcher = setMatchers[j++]; ) matcher(unmatched, setMatched, context, xml);
                    if (seed) {
                        if (matchedCount > 0) for (;i--; ) unmatched[i] || setMatched[i] || (setMatched[i] = pop.call(results));
                        setMatched = condense(setMatched);
                    }
                    push.apply(results, setMatched);
                    outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1 && Sizzle.uniqueSort(results);
                }
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function(a, b) {
            a === b && (hasDuplicate = !0);
            return 0;
        }, MAX_NEGATIVE = 1 << 31, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function(list, elem) {
            for (var i = 0, len = list.length; len > i; i++) if (list[i] === elem) return i;
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", identifier = characterEncoding.replace("w", "w#"), attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + characterEncoding + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + characterEncoding + ")"),
            CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
            TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g, runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function(_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 65536;
            return high !== high || escapedWhitespace ? escaped : 0 > high ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, 1023 & high | 56320);
        }, unloadHandler = function() {
            setDocument();
        };
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function(target, els) {
                    push_native.apply(target, slice.call(els));
                } : function(target, els) {
                    for (var j = target.length, i = 0; target[j++] = els[i++]; ) ;
                    target.length = j - 1;
                }
            };
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function(elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? "HTML" !== documentElement.nodeName : !1;
        };
        setDocument = Sizzle.setDocument = function(node) {
            var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc === document || 9 !== doc.nodeType || !doc.documentElement) return document;
            document = doc;
            docElem = doc.documentElement;
            parent = doc.defaultView;
            parent && parent !== parent.top && (parent.addEventListener ? parent.addEventListener("unload", unloadHandler, !1) : parent.attachEvent && parent.attachEvent("onunload", unloadHandler));
            documentIsHTML = !isXML(doc);
            support.attributes = assert(function(div) {
                div.className = "i";
                return !div.getAttribute("className");
            });
            support.getElementsByTagName = assert(function(div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });
            support.getElementsByClassName = rnative.test(doc.getElementsByClassName);
            support.getById = assert(function(div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.find.ID = function(id, context) {
                    if ("undefined" != typeof context.getElementById && documentIsHTML) {
                        var m = context.getElementById(id);
                        return m && m.parentNode ? [ m ] : [];
                    }
                };
                Expr.filter.ID = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            } else {
                delete Expr.find.ID;
                Expr.filter.ID = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = "undefined" != typeof elem.getAttributeNode && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
            }
            Expr.find.TAG = support.getElementsByTagName ? function(tag, context) {
                return "undefined" != typeof context.getElementsByTagName ? context.getElementsByTagName(tag) : support.qsa ? context.querySelectorAll(tag) : void 0;
            } : function(tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if ("*" === tag) {
                    for (;elem = results[i++]; ) 1 === elem.nodeType && tmp.push(elem);
                    return tmp;
                }
                return results;
            };
            Expr.find.CLASS = support.getElementsByClassName && function(className, context) {
                return documentIsHTML ? context.getElementsByClassName(className) : void 0;
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(doc.querySelectorAll)) {
                assert(function(div) {
                    docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\f]' msallowcapture=''><option selected=''></option></select>";
                    div.querySelectorAll("[msallowcapture^='']").length && rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    div.querySelectorAll("[selected]").length || rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    div.querySelectorAll("[id~=" + expando + "-]").length || rbuggyQSA.push("~=");
                    div.querySelectorAll(":checked").length || rbuggyQSA.push(":checked");
                    div.querySelectorAll("a#" + expando + "+*").length || rbuggyQSA.push(".#.+[+~]");
                });
                assert(function(div) {
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("name", "D");
                    div.querySelectorAll("[name=d]").length && rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    div.querySelectorAll(":enabled").length || rbuggyQSA.push(":enabled", ":disabled");
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) && assert(function(div) {
                support.disconnectedMatch = matches.call(div, "div");
                matches.call(div, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
            });
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                var adown = 9 === a.nodeType ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !(!bup || 1 !== bup.nodeType || !(adown.contains ? adown.contains(bup) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(bup)));
            } : function(a, b) {
                if (b) for (;b = b.parentNode; ) if (b === a) return !0;
                return !1;
            };
            sortOrder = hasCompare ? function(a, b) {
                if (a === b) {
                    hasDuplicate = !0;
                    return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) return compare;
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                return 1 & compare || !support.sortDetached && b.compareDocumentPosition(a) === compare ? a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ? -1 : b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0 : 4 & compare ? -1 : 1;
            } : function(a, b) {
                if (a === b) {
                    hasDuplicate = !0;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [ a ], bp = [ b ];
                if (!aup || !bup) return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                if (aup === bup) return siblingCheck(a, b);
                cur = a;
                for (;cur = cur.parentNode; ) ap.unshift(cur);
                cur = b;
                for (;cur = cur.parentNode; ) bp.unshift(cur);
                for (;ap[i] === bp[i]; ) i++;
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return doc;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            (elem.ownerDocument || elem) !== document && setDocument(elem);
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) try {
                var ret = matches.call(elem, expr);
                if (ret || support.disconnectedMatch || elem.document && 11 !== elem.document.nodeType) return ret;
            } catch (e) {}
            return Sizzle(expr, document, null, [ elem ]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
            (context.ownerDocument || context) !== document && setDocument(context);
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            (elem.ownerDocument || elem) !== document && setDocument(elem);
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
            return void 0 !== val ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                for (;elem = results[i++]; ) elem === results[i] && (j = duplicates.push(i));
                for (;j--; ) results.splice(duplicates[j], 1);
            }
            sortInput = null;
            return results;
        };
        getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (nodeType) {
                if (1 === nodeType || 9 === nodeType || 11 === nodeType) {
                    if ("string" == typeof elem.textContent) return elem.textContent;
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) ret += getText(elem);
                } else if (3 === nodeType || 4 === nodeType) return elem.nodeValue;
            } else for (;node = elem[i++]; ) ret += getText(node);
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                    "~=" === match[2] && (match[3] = " " + match[3] + " ");
                    return match.slice(0, 4);
                },
                CHILD: function(match) {
                    match[1] = match[1].toLowerCase();
                    if ("nth" === match[1].slice(0, 3)) {
                        match[3] || Sizzle.error(match[0]);
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * ("even" === match[3] || "odd" === match[3]));
                        match[5] = +(match[7] + match[8] || "odd" === match[3]);
                    } else match[3] && Sizzle.error(match[0]);
                    return match;
                },
                PSEUDO: function(match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr.CHILD.test(match[0])) return null;
                    if (match[3]) match[2] = match[4] || match[5] || ""; else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, !0)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                TAG: function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return "*" === nodeNameSelector ? function() {
                        return !0;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                CLASS: function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                        return pattern.test("string" == typeof elem.className && elem.className || "undefined" != typeof elem.getAttribute && elem.getAttribute("class") || "");
                    });
                },
                ATTR: function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (null == result) return "!=" === operator;
                        if (!operator) return !0;
                        result += "";
                        return "=" === operator ? result === check : "!=" === operator ? result !== check : "^=" === operator ? check && 0 === result.indexOf(check) : "*=" === operator ? check && result.indexOf(check) > -1 : "$=" === operator ? check && result.slice(-check.length) === check : "~=" === operator ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : "|=" === operator ? result === check || result.slice(0, check.length + 1) === check + "-" : !1;
                    };
                },
                CHILD: function(type, what, argument, first, last) {
                    var simple = "nth" !== type.slice(0, 3), forward = "last" !== type.slice(-4), ofType = "of-type" === what;
                    return 1 === first && 0 === last ? function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                        if (parent) {
                            if (simple) {
                                for (;dir; ) {
                                    node = elem;
                                    for (;node = node[dir]; ) if (ofType ? node.nodeName.toLowerCase() === name : 1 === node.nodeType) return !1;
                                    start = dir = "only" === type && !start && "nextSibling";
                                }
                                return !0;
                            }
                            start = [ forward ? parent.firstChild : parent.lastChild ];
                            if (forward && useCache) {
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                for (;node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop(); ) if (1 === node.nodeType && ++diff && node === elem) {
                                    outerCache[type] = [ dirruns, nodeIndex, diff ];
                                    break;
                                }
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) diff = cache[1]; else for (;node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop(); ) if ((ofType ? node.nodeName.toLowerCase() === name : 1 === node.nodeType) && ++diff) {
                                useCache && ((node[expando] || (node[expando] = {}))[type] = [ dirruns, diff ]);
                                if (node === elem) break;
                            }
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                PSEUDO: function(pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    if (fn[expando]) return fn(argument);
                    if (fn.length > 1) {
                        args = [ pseudo, pseudo, "", argument ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            for (var idx, matched = fn(seed, argument), i = matched.length; i--; ) {
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                not: markFunction(function(selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                        for (var elem, unmatched = matcher(seed, null, xml, []), i = seed.length; i--; ) (elem = unmatched[i]) && (seed[i] = !(matches[i] = elem));
                    }) : function(elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                has: markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                contains: markFunction(function(text) {
                    text = text.replace(runescape, funescape);
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                lang: markFunction(function(lang) {
                    ridentifier.test(lang || "") || Sizzle.error("unsupported lang: " + lang);
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                            elemLang = elemLang.toLowerCase();
                            return elemLang === lang || 0 === elemLang.indexOf(lang + "-");
                        } while ((elem = elem.parentNode) && 1 === elem.nodeType);
                        return !1;
                    };
                }),
                target: function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                root: function(elem) {
                    return elem === docElem;
                },
                focus: function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                enabled: function(elem) {
                    return elem.disabled === !1;
                },
                disabled: function(elem) {
                    return elem.disabled === !0;
                },
                checked: function(elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return "input" === nodeName && !!elem.checked || "option" === nodeName && !!elem.selected;
                },
                selected: function(elem) {
                    elem.parentNode && elem.parentNode.selectedIndex;
                    return elem.selected === !0;
                },
                empty: function(elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) if (elem.nodeType < 6) return !1;
                    return !0;
                },
                parent: function(elem) {
                    return !Expr.pseudos.empty(elem);
                },
                header: function(elem) {
                    return rheader.test(elem.nodeName);
                },
                input: function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                button: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return "input" === name && "button" === elem.type || "button" === name;
                },
                text: function(elem) {
                    var attr;
                    return "input" === elem.nodeName.toLowerCase() && "text" === elem.type && (null == (attr = elem.getAttribute("type")) || "text" === attr.toLowerCase());
                },
                first: createPositionalPseudo(function() {
                    return [ 0 ];
                }),
                last: createPositionalPseudo(function(matchIndexes, length) {
                    return [ length - 1 ];
                }),
                eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [ 0 > argument ? argument + length : argument ];
                }),
                even: createPositionalPseudo(function(matchIndexes, length) {
                    for (var i = 0; length > i; i += 2) matchIndexes.push(i);
                    return matchIndexes;
                }),
                odd: createPositionalPseudo(function(matchIndexes, length) {
                    for (var i = 1; length > i; i += 2) matchIndexes.push(i);
                    return matchIndexes;
                }),
                lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    for (var i = 0 > argument ? argument + length : argument; --i >= 0; ) matchIndexes.push(i);
                    return matchIndexes;
                }),
                gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    for (var i = 0 > argument ? argument + length : argument; ++i < length; ) matchIndexes.push(i);
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos.nth = Expr.pseudos.eq;
        for (i in {
            radio: !0,
            checkbox: !0,
            file: !0,
            password: !0,
            image: !0
        }) Expr.pseudos[i] = createInputPseudo(i);
        for (i in {
            submit: !0,
            reset: !0
        }) Expr.pseudos[i] = createButtonPseudo(i);
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) return parseOnly ? 0 : cached.slice(0);
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            for (;soFar; ) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    match && (soFar = soFar.slice(match[0].length) || soFar);
                    groups.push(tokens = []);
                }
                matched = !1;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: type,
                        matches: match
                    });
                    soFar = soFar.slice(matched.length);
                }
                if (!matched) break;
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        compile = Sizzle.compile = function(selector, match) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                match || (match = tokenize(selector));
                i = match.length;
                for (;i--; ) {
                    cached = matcherFromTokens(match[i]);
                    cached[expando] ? setMatchers.push(cached) : elementMatchers.push(cached);
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                cached.selector = selector;
            }
            return cached;
        };
        select = Sizzle.select = function(selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = "function" == typeof selector && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (1 === match.length) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && "ID" === (token = tokens[0]).type && support.getById && 9 === context.nodeType && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find.ID(token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) return results;
                    compiled && (context = context.parentNode);
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
                for (;i--; ) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) break;
                    if ((find = Expr.find[type]) && (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context))) {
                        tokens.splice(i, 1);
                        selector = seed.length && toSelector(tokens);
                        if (!selector) {
                            push.apply(results, seed);
                            return results;
                        }
                        break;
                    }
                }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function(div1) {
            return 1 & div1.compareDocumentPosition(document.createElement("div"));
        });
        assert(function(div) {
            div.innerHTML = "<a href='#'></a>";
            return "#" === div.firstChild.getAttribute("href");
        }) || addHandle("type|href|height|width", function(elem, name, isXML) {
            return isXML ? void 0 : elem.getAttribute(name, "type" === name.toLowerCase() ? 1 : 2);
        });
        support.attributes && assert(function(div) {
            div.innerHTML = "<input/>";
            div.firstChild.setAttribute("value", "");
            return "" === div.firstChild.getAttribute("value");
        }) || addHandle("value", function(elem, name, isXML) {
            return isXML || "input" !== elem.nodeName.toLowerCase() ? void 0 : elem.defaultValue;
        });
        assert(function(div) {
            return null == div.getAttribute("disabled");
        }) || addHandle(booleans, function(elem, name, isXML) {
            var val;
            return isXML ? void 0 : elem[name] === !0 ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        });
        return Sizzle;
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    var rneedsContext = jQuery.expr.match.needsContext, rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, risSimple = /^.[^:#\[\.,]*$/;
    jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        not && (expr = ":not(" + expr + ")");
        return 1 === elems.length && 1 === elem.nodeType ? jQuery.find.matchesSelector(elem, expr) ? [ elem ] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return 1 === elem.nodeType;
        }));
    };
    jQuery.fn.extend({
        find: function(selector) {
            var i, ret = [], self = this, len = self.length;
            if ("string" != typeof selector) return this.pushStack(jQuery(selector).filter(function() {
                for (i = 0; len > i; i++) if (jQuery.contains(self[i], this)) return !0;
            }));
            for (i = 0; len > i; i++) jQuery.find(selector, self[i], ret);
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], !1));
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], !0));
        },
        is: function(selector) {
            return !!winnow(this, "string" == typeof selector && rneedsContext.test(selector) ? jQuery(selector) : selector || [], !1).length;
        }
    });
    var rootjQuery, document = window.document, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function(selector, context) {
        var match, elem;
        if (!selector) return this;
        if ("string" == typeof selector) {
            match = "<" === selector.charAt(0) && ">" === selector.charAt(selector.length - 1) && selector.length >= 3 ? [ null, selector, null ] : rquickExpr.exec(selector);
            if (!match || !match[1] && context) return !context || context.jquery ? (context || rootjQuery).find(selector) : this.constructor(context).find(selector);
            if (match[1]) {
                context = context instanceof jQuery ? context[0] : context;
                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, !0));
                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) for (match in context) jQuery.isFunction(this[match]) ? this[match](context[match]) : this.attr(match, context[match]);
                return this;
            }
            elem = document.getElementById(match[2]);
            if (elem && elem.parentNode) {
                if (elem.id !== match[2]) return rootjQuery.find(selector);
                this.length = 1;
                this[0] = elem;
            }
            this.context = document;
            this.selector = selector;
            return this;
        }
        if (selector.nodeType) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;
        }
        if (jQuery.isFunction(selector)) return "undefined" != typeof rootjQuery.ready ? rootjQuery.ready(selector) : selector(jQuery);
        if (void 0 !== selector.selector) {
            this.selector = selector.selector;
            this.context = selector.context;
        }
        return jQuery.makeArray(selector, this);
    };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
    };
    jQuery.extend({
        dir: function(elem, dir, until) {
            for (var matched = [], cur = elem[dir]; cur && 9 !== cur.nodeType && (void 0 === until || 1 !== cur.nodeType || !jQuery(cur).is(until)); ) {
                1 === cur.nodeType && matched.push(cur);
                cur = cur[dir];
            }
            return matched;
        },
        sibling: function(n, elem) {
            for (var r = []; n; n = n.nextSibling) 1 === n.nodeType && n !== elem && r.push(n);
            return r;
        }
    });
    jQuery.fn.extend({
        has: function(target) {
            var i, targets = jQuery(target, this), len = targets.length;
            return this.filter(function() {
                for (i = 0; len > i; i++) if (jQuery.contains(this, targets[i])) return !0;
            });
        },
        closest: function(selectors, context) {
            for (var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || "string" != typeof selectors ? jQuery(selectors, context || this.context) : 0; l > i; i++) for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : 1 === cur.nodeType && jQuery.find.matchesSelector(cur, selectors))) {
                matched.push(cur);
                break;
            }
            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
        },
        index: function(elem) {
            return elem ? "string" == typeof elem ? jQuery.inArray(this[0], jQuery(elem)) : jQuery.inArray(elem.jquery ? elem[0] : elem, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add: function(selector, context) {
            return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function(selector) {
            return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && 11 !== parent.nodeType ? parent : null;
        },
        parents: function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function(elem) {
            return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until);
            "Until" !== name.slice(-5) && (selector = until);
            selector && "string" == typeof selector && (ret = jQuery.filter(selector, ret));
            if (this.length > 1) {
                guaranteedUnique[name] || (ret = jQuery.unique(ret));
                rparentsprev.test(name) && (ret = ret.reverse());
            }
            return this.pushStack(ret);
        };
    });
    var rnotwhite = /\S+/g, optionsCache = {};
    jQuery.Callbacks = function(options) {
        options = "string" == typeof options ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, firingLength, firingIndex, firingStart, list = [], stack = !options.once && [], fire = function(data) {
            memory = options.memory && data;
            fired = !0;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = !0;
            for (;list && firingLength > firingIndex; firingIndex++) if (list[firingIndex].apply(data[0], data[1]) === !1 && options.stopOnFalse) {
                memory = !1;
                break;
            }
            firing = !1;
            list && (stack ? stack.length && fire(stack.shift()) : memory ? list = [] : self.disable());
        }, self = {
            add: function() {
                if (list) {
                    var start = list.length;
                    !function add(args) {
                        jQuery.each(args, function(_, arg) {
                            var type = jQuery.type(arg);
                            "function" === type ? options.unique && self.has(arg) || list.push(arg) : arg && arg.length && "string" !== type && add(arg);
                        });
                    }(arguments);
                    if (firing) firingLength = list.length; else if (memory) {
                        firingStart = start;
                        fire(memory);
                    }
                }
                return this;
            },
            remove: function() {
                list && jQuery.each(arguments, function(_, arg) {
                    for (var index; (index = jQuery.inArray(arg, list, index)) > -1; ) {
                        list.splice(index, 1);
                        if (firing) {
                            firingLength >= index && firingLength--;
                            firingIndex >= index && firingIndex--;
                        }
                    }
                });
                return this;
            },
            has: function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !(!list || !list.length);
            },
            empty: function() {
                list = [];
                firingLength = 0;
                return this;
            },
            disable: function() {
                list = stack = memory = void 0;
                return this;
            },
            disabled: function() {
                return !list;
            },
            lock: function() {
                stack = void 0;
                memory || self.disable();
                return this;
            },
            locked: function() {
                return !stack;
            },
            fireWith: function(context, args) {
                if (list && (!fired || stack)) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    firing ? stack.push(args) : fire(args);
                }
                return this;
            },
            fire: function() {
                self.fireWith(this, arguments);
                return this;
            },
            fired: function() {
                return !!fired;
            }
        };
        return self;
    };
    jQuery.extend({
        Deferred: function(func) {
            var tuples = [ [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ], [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ], [ "notify", "progress", jQuery.Callbacks("memory") ] ], state = "pending", promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                then: function() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(i, tuple) {
                            var fn = jQuery.isFunction(fns[i]) && fns[i];
                            deferred[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                returned && jQuery.isFunction(returned.promise) ? returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify) : newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments);
                            });
                        });
                        fns = null;
                    }).promise();
                },
                promise: function(obj) {
                    return null != obj ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                promise[tuple[1]] = list.add;
                stateString && list.add(function() {
                    state = stateString;
                }, tuples[1 ^ i][2].disable, tuples[2][2].lock);
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            func && func.call(deferred, deferred);
            return deferred;
        },
        when: function(subordinate) {
            var progressValues, progressContexts, resolveContexts, i = 0, resolveValues = slice.call(arguments), length = resolveValues.length, remaining = 1 !== length || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = 1 === remaining ? subordinate : jQuery.Deferred(), updateFunc = function(i, contexts, values) {
                return function(value) {
                    contexts[i] = this;
                    values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                    values === progressValues ? deferred.notifyWith(contexts, values) : --remaining || deferred.resolveWith(contexts, values);
                };
            };
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (;length > i; i++) resolveValues[i] && jQuery.isFunction(resolveValues[i].promise) ? resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues)) : --remaining;
            }
            remaining || deferred.resolveWith(resolveContexts, resolveValues);
            return deferred.promise();
        }
    });
    var readyList;
    jQuery.fn.ready = function(fn) {
        jQuery.ready.promise().done(fn);
        return this;
    };
    jQuery.extend({
        isReady: !1,
        readyWait: 1,
        holdReady: function(hold) {
            hold ? jQuery.readyWait++ : jQuery.ready(!0);
        },
        ready: function(wait) {
            if (wait === !0 ? !--jQuery.readyWait : !jQuery.isReady) {
                if (!document.body) return setTimeout(jQuery.ready);
                jQuery.isReady = !0;
                if (!(wait !== !0 && --jQuery.readyWait > 0)) {
                    readyList.resolveWith(document, [ jQuery ]);
                    if (jQuery.fn.triggerHandler) {
                        jQuery(document).triggerHandler("ready");
                        jQuery(document).off("ready");
                    }
                }
            }
        }
    });
    jQuery.ready.promise = function(obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            if ("complete" === document.readyState) setTimeout(jQuery.ready); else if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", completed, !1);
                window.addEventListener("load", completed, !1);
            } else {
                document.attachEvent("onreadystatechange", completed);
                window.attachEvent("onload", completed);
                var top = !1;
                try {
                    top = null == window.frameElement && document.documentElement;
                } catch (e) {}
                top && top.doScroll && !function doScrollCheck() {
                    if (!jQuery.isReady) {
                        try {
                            top.doScroll("left");
                        } catch (e) {
                            return setTimeout(doScrollCheck, 50);
                        }
                        detach();
                        jQuery.ready();
                    }
                }();
            }
        }
        return readyList.promise(obj);
    };
    var i, strundefined = "undefined";
    for (i in jQuery(support)) break;
    support.ownLast = "0" !== i;
    support.inlineBlockNeedsLayout = !1;
    jQuery(function() {
        var val, div, body, container;
        body = document.getElementsByTagName("body")[0];
        if (body && body.style) {
            div = document.createElement("div");
            container = document.createElement("div");
            container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
            body.appendChild(container).appendChild(div);
            if (typeof div.style.zoom !== strundefined) {
                div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";
                support.inlineBlockNeedsLayout = val = 3 === div.offsetWidth;
                val && (body.style.zoom = 1);
            }
            body.removeChild(container);
        }
    });
    !function() {
        var div = document.createElement("div");
        if (null == support.deleteExpando) {
            support.deleteExpando = !0;
            try {
                delete div.test;
            } catch (e) {
                support.deleteExpando = !1;
            }
        }
        div = null;
    }();
    jQuery.acceptData = function(elem) {
        var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()], nodeType = +elem.nodeType || 1;
        return 1 !== nodeType && 9 !== nodeType ? !1 : !noData || noData !== !0 && elem.getAttribute("classid") === noData;
    };
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
    jQuery.extend({
        cache: {},
        noData: {
            "applet ": !0,
            "embed ": !0,
            "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        hasData: function(elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem);
        },
        data: function(elem, name, data) {
            return internalData(elem, name, data);
        },
        removeData: function(elem, name) {
            return internalRemoveData(elem, name);
        },
        _data: function(elem, name, data) {
            return internalData(elem, name, data, !0);
        },
        _removeData: function(elem, name) {
            return internalRemoveData(elem, name, !0);
        }
    });
    jQuery.fn.extend({
        data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (void 0 === key) {
                if (this.length) {
                    data = jQuery.data(elem);
                    if (1 === elem.nodeType && !jQuery._data(elem, "parsedAttrs")) {
                        i = attrs.length;
                        for (;i--; ) if (attrs[i]) {
                            name = attrs[i].name;
                            if (0 === name.indexOf("data-")) {
                                name = jQuery.camelCase(name.slice(5));
                                dataAttr(elem, name, data[name]);
                            }
                        }
                        jQuery._data(elem, "parsedAttrs", !0);
                    }
                }
                return data;
            }
            return "object" == typeof key ? this.each(function() {
                jQuery.data(this, key);
            }) : arguments.length > 1 ? this.each(function() {
                jQuery.data(this, key, value);
            }) : elem ? dataAttr(elem, key, jQuery.data(elem, key)) : void 0;
        },
        removeData: function(key) {
            return this.each(function() {
                jQuery.removeData(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = jQuery._data(elem, type);
                data && (!queue || jQuery.isArray(data) ? queue = jQuery._data(elem, type, jQuery.makeArray(data)) : queue.push(data));
                return queue || [];
            }
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
                jQuery.dequeue(elem, type);
            };
            if ("inprogress" === fn) {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                "fx" === type && queue.unshift("inprogress");
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            !startLength && hooks && hooks.empty.fire();
        },
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    jQuery._removeData(elem, type + "queue");
                    jQuery._removeData(elem, key);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;
            if ("string" != typeof type) {
                data = type;
                type = "fx";
                setter--;
            }
            return arguments.length < setter ? jQuery.queue(this[0], type) : void 0 === data ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                "fx" === type && "inprogress" !== queue[0] && jQuery.dequeue(this, type);
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                --count || defer.resolveWith(elements, [ elements ]);
            };
            if ("string" != typeof type) {
                obj = type;
                type = void 0;
            }
            type = type || "fx";
            for (;i--; ) {
                tmp = jQuery._data(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, cssExpand = [ "Top", "Right", "Bottom", "Left" ], isHidden = function(elem, el) {
        elem = el || elem;
        return "none" === jQuery.css(elem, "display") || !jQuery.contains(elem.ownerDocument, elem);
    }, access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, length = elems.length, bulk = null == key;
        if ("object" === jQuery.type(key)) {
            chainable = !0;
            for (i in key) jQuery.access(elems, fn, i, key[i], !0, emptyGet, raw);
        } else if (void 0 !== value) {
            chainable = !0;
            jQuery.isFunction(value) || (raw = !0);
            if (bulk) if (raw) {
                fn.call(elems, value);
                fn = null;
            } else {
                bulk = fn;
                fn = function(elem, key, value) {
                    return bulk.call(jQuery(elem), value);
                };
            }
            if (fn) for (;length > i; i++) fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
        return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
    }, rcheckableType = /^(?:checkbox|radio)$/i;
    !function() {
        var input = document.createElement("input"), div = document.createElement("div"), fragment = document.createDocumentFragment();
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        support.leadingWhitespace = 3 === div.firstChild.nodeType;
        support.tbody = !div.getElementsByTagName("tbody").length;
        support.htmlSerialize = !!div.getElementsByTagName("link").length;
        support.html5Clone = "<:nav></:nav>" !== document.createElement("nav").cloneNode(!0).outerHTML;
        input.type = "checkbox";
        input.checked = !0;
        fragment.appendChild(input);
        support.appendChecked = input.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(!0).lastChild.defaultValue;
        fragment.appendChild(div);
        div.innerHTML = "<input type='radio' checked='checked' name='t'/>";
        support.checkClone = div.cloneNode(!0).cloneNode(!0).lastChild.checked;
        support.noCloneEvent = !0;
        if (div.attachEvent) {
            div.attachEvent("onclick", function() {
                support.noCloneEvent = !1;
            });
            div.cloneNode(!0).click();
        }
        if (null == support.deleteExpando) {
            support.deleteExpando = !0;
            try {
                delete div.test;
            } catch (e) {
                support.deleteExpando = !1;
            }
        }
    }();
    !function() {
        var i, eventName, div = document.createElement("div");
        for (i in {
            submit: !0,
            change: !0,
            focusin: !0
        }) {
            eventName = "on" + i;
            if (!(support[i + "Bubbles"] = eventName in window)) {
                div.setAttribute(eventName, "t");
                support[i + "Bubbles"] = div.attributes[eventName].expando === !1;
            }
        }
        div = null;
    }();
    var rformElems = /^(?:input|select|textarea)$/i, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn, special, eventHandle, handleObj, handlers, type, namespaces, origType, elemData = jQuery._data(elem);
            if (elemData) {
                if (handler.handler) {
                    handleObjIn = handler;
                    handler = handleObjIn.handler;
                    selector = handleObjIn.selector;
                }
                handler.guid || (handler.guid = jQuery.guid++);
                (events = elemData.events) || (events = elemData.events = {});
                if (!(eventHandle = elemData.handle)) {
                    eventHandle = elemData.handle = function(e) {
                        return typeof jQuery === strundefined || e && jQuery.event.triggered === e.type ? void 0 : jQuery.event.dispatch.apply(eventHandle.elem, arguments);
                    };
                    eventHandle.elem = elem;
                }
                types = (types || "").match(rnotwhite) || [ "" ];
                t = types.length;
                for (;t--; ) {
                    tmp = rtypenamespace.exec(types[t]) || [];
                    type = origType = tmp[1];
                    namespaces = (tmp[2] || "").split(".").sort();
                    if (type) {
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        special = jQuery.event.special[type] || {};
                        handleObj = jQuery.extend({
                            type: type,
                            origType: origType,
                            data: data,
                            handler: handler,
                            guid: handler.guid,
                            selector: selector,
                            needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                            namespace: namespaces.join(".")
                        }, handleObjIn);
                        if (!(handlers = events[type])) {
                            handlers = events[type] = [];
                            handlers.delegateCount = 0;
                            special.setup && special.setup.call(elem, data, namespaces, eventHandle) !== !1 || (elem.addEventListener ? elem.addEventListener(type, eventHandle, !1) : elem.attachEvent && elem.attachEvent("on" + type, eventHandle));
                        }
                        if (special.add) {
                            special.add.call(elem, handleObj);
                            handleObj.handler.guid || (handleObj.handler.guid = handler.guid);
                        }
                        selector ? handlers.splice(handlers.delegateCount++, 0, handleObj) : handlers.push(handleObj);
                        jQuery.event.global[type] = !0;
                    }
                }
                elem = null;
            }
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp, origCount, t, events, special, handlers, type, namespaces, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem);
            if (elemData && (events = elemData.events)) {
                types = (types || "").match(rnotwhite) || [ "" ];
                t = types.length;
                for (;t--; ) {
                    tmp = rtypenamespace.exec(types[t]) || [];
                    type = origType = tmp[1];
                    namespaces = (tmp[2] || "").split(".").sort();
                    if (type) {
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        handlers = events[type] || [];
                        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                        origCount = j = handlers.length;
                        for (;j--; ) {
                            handleObj = handlers[j];
                            if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || "**" === selector && handleObj.selector)) {
                                handlers.splice(j, 1);
                                handleObj.selector && handlers.delegateCount--;
                                special.remove && special.remove.call(elem, handleObj);
                            }
                        }
                        if (origCount && !handlers.length) {
                            special.teardown && special.teardown.call(elem, namespaces, elemData.handle) !== !1 || jQuery.removeEvent(elem, type, elemData.handle);
                            delete events[type];
                        }
                    } else for (type in events) jQuery.event.remove(elem, type + types[t], handler, selector, !0);
                }
                if (jQuery.isEmptyObject(events)) {
                    delete elemData.handle;
                    jQuery._removeData(elem, "events");
                }
            }
        },
        trigger: function(event, data, elem, onlyHandlers) {
            var handle, ontype, cur, bubbleType, special, tmp, i, eventPath = [ elem || document ], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            if (3 !== elem.nodeType && 8 !== elem.nodeType && !rfocusMorph.test(type + jQuery.event.triggered)) {
                if (type.indexOf(".") >= 0) {
                    namespaces = type.split(".");
                    type = namespaces.shift();
                    namespaces.sort();
                }
                ontype = type.indexOf(":") < 0 && "on" + type;
                event = event[jQuery.expando] ? event : new jQuery.Event(type, "object" == typeof event && event);
                event.isTrigger = onlyHandlers ? 2 : 3;
                event.namespace = namespaces.join(".");
                event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
                event.result = void 0;
                event.target || (event.target = elem);
                data = null == data ? [ event ] : jQuery.makeArray(data, [ event ]);
                special = jQuery.event.special[type] || {};
                if (onlyHandlers || !special.trigger || special.trigger.apply(elem, data) !== !1) {
                    if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                        bubbleType = special.delegateType || type;
                        rfocusMorph.test(bubbleType + type) || (cur = cur.parentNode);
                        for (;cur; cur = cur.parentNode) {
                            eventPath.push(cur);
                            tmp = cur;
                        }
                        tmp === (elem.ownerDocument || document) && eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                    }
                    i = 0;
                    for (;(cur = eventPath[i++]) && !event.isPropagationStopped(); ) {
                        event.type = i > 1 ? bubbleType : special.bindType || type;
                        handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
                        handle && handle.apply(cur, data);
                        handle = ontype && cur[ontype];
                        if (handle && handle.apply && jQuery.acceptData(cur)) {
                            event.result = handle.apply(cur, data);
                            event.result === !1 && event.preventDefault();
                        }
                    }
                    event.type = type;
                    if (!onlyHandlers && !event.isDefaultPrevented() && (!special._default || special._default.apply(eventPath.pop(), data) === !1) && jQuery.acceptData(elem) && ontype && elem[type] && !jQuery.isWindow(elem)) {
                        tmp = elem[ontype];
                        tmp && (elem[ontype] = null);
                        jQuery.event.triggered = type;
                        try {
                            elem[type]();
                        } catch (e) {}
                        jQuery.event.triggered = void 0;
                        tmp && (elem[ontype] = tmp);
                    }
                    return event.result;
                }
            }
        },
        dispatch: function(event) {
            event = jQuery.event.fix(event);
            var i, ret, handleObj, matched, j, handlerQueue = [], args = slice.call(arguments), handlers = (jQuery._data(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            event.delegateTarget = this;
            if (!special.preDispatch || special.preDispatch.call(this, event) !== !1) {
                handlerQueue = jQuery.event.handlers.call(this, event, handlers);
                i = 0;
                for (;(matched = handlerQueue[i++]) && !event.isPropagationStopped(); ) {
                    event.currentTarget = matched.elem;
                    j = 0;
                    for (;(handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped(); ) if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (void 0 !== ret && (event.result = ret) === !1) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                    }
                }
                special.postDispatch && special.postDispatch.call(this, event);
                return event.result;
            }
        },
        handlers: function(event, handlers) {
            var sel, handleObj, matches, i, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || "click" !== event.type)) for (;cur != this; cur = cur.parentNode || this) if (1 === cur.nodeType && (cur.disabled !== !0 || "click" !== event.type)) {
                matches = [];
                for (i = 0; delegateCount > i; i++) {
                    handleObj = handlers[i];
                    sel = handleObj.selector + " ";
                    void 0 === matches[sel] && (matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [ cur ]).length);
                    matches[sel] && matches.push(handleObj);
                }
                matches.length && handlerQueue.push({
                    elem: cur,
                    handlers: matches
                });
            }
            delegateCount < handlers.length && handlerQueue.push({
                elem: this,
                handlers: handlers.slice(delegateCount)
            });
            return handlerQueue;
        },
        fix: function(event) {
            if (event[jQuery.expando]) return event;
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            fixHook || (this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {});
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            for (;i--; ) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }
            event.target || (event.target = originalEvent.srcElement || document);
            3 === event.target.nodeType && (event.target = event.target.parentNode);
            event.metaKey = !!event.metaKey;
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(event, original) {
                null == event.which && (event.which = null != original.charCode ? original.charCode : original.keyCode);
                return event;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(event, original) {
                var body, eventDoc, doc, button = original.button, fromElement = original.fromElement;
                if (null == event.pageX && null != original.clientX) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                !event.relatedTarget && fromElement && (event.relatedTarget = fromElement === event.target ? original.toElement : fromElement);
                event.which || void 0 === button || (event.which = 1 & button ? 1 : 2 & button ? 3 : 4 & button ? 2 : 0);
                return event;
            }
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) try {
                        this.focus();
                        return !1;
                    } catch (e) {}
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return !1;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if (jQuery.nodeName(this, "input") && "checkbox" === this.type && this.click) {
                        this.click();
                        return !1;
                    }
                },
                _default: function(event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(event) {
                    void 0 !== event.result && event.originalEvent && (event.originalEvent.returnValue = event.result);
                }
            }
        },
        simulate: function(type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: !0,
                originalEvent: {}
            });
            bubble ? jQuery.event.trigger(e, null, elem) : jQuery.event.dispatch.call(elem, e);
            e.isDefaultPrevented() && event.preventDefault();
        }
    };
    jQuery.removeEvent = document.removeEventListener ? function(elem, type, handle) {
        elem.removeEventListener && elem.removeEventListener(type, handle, !1);
    } : function(elem, type, handle) {
        var name = "on" + type;
        if (elem.detachEvent) {
            typeof elem[name] === strundefined && (elem[name] = null);
            elem.detachEvent(name, handle);
        }
    };
    jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) return new jQuery.Event(src, props);
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || void 0 === src.defaultPrevented && src.returnValue === !1 ? returnTrue : returnFalse;
        } else this.type = src;
        props && jQuery.extend(this, props);
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = !0;
    };
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            e && (e.preventDefault ? e.preventDefault() : e.returnValue = !1);
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e) {
                e.stopPropagation && e.stopPropagation();
                e.cancelBubble = !0;
            }
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            e && e.stopImmediatePropagation && e.stopImmediatePropagation();
            this.stopPropagation();
        }
    };
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    support.submitBubbles || (jQuery.event.special.submit = {
        setup: function() {
            if (jQuery.nodeName(this, "form")) return !1;
            jQuery.event.add(this, "click._submit keypress._submit", function(e) {
                var elem = e.target, form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : void 0;
                if (form && !jQuery._data(form, "submitBubbles")) {
                    jQuery.event.add(form, "submit._submit", function(event) {
                        event._submit_bubble = !0;
                    });
                    jQuery._data(form, "submitBubbles", !0);
                }
            });
        },
        postDispatch: function(event) {
            if (event._submit_bubble) {
                delete event._submit_bubble;
                this.parentNode && !event.isTrigger && jQuery.event.simulate("submit", this.parentNode, event, !0);
            }
        },
        teardown: function() {
            if (jQuery.nodeName(this, "form")) return !1;
            jQuery.event.remove(this, "._submit");
        }
    });
    support.changeBubbles || (jQuery.event.special.change = {
        setup: function() {
            if (rformElems.test(this.nodeName)) {
                if ("checkbox" === this.type || "radio" === this.type) {
                    jQuery.event.add(this, "propertychange._change", function(event) {
                        "checked" === event.originalEvent.propertyName && (this._just_changed = !0);
                    });
                    jQuery.event.add(this, "click._change", function(event) {
                        this._just_changed && !event.isTrigger && (this._just_changed = !1);
                        jQuery.event.simulate("change", this, event, !0);
                    });
                }
                return !1;
            }
            jQuery.event.add(this, "beforeactivate._change", function(e) {
                var elem = e.target;
                if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
                    jQuery.event.add(elem, "change._change", function(event) {
                        !this.parentNode || event.isSimulated || event.isTrigger || jQuery.event.simulate("change", this.parentNode, event, !0);
                    });
                    jQuery._data(elem, "changeBubbles", !0);
                }
            });
        },
        handle: function(event) {
            var elem = event.target;
            return this !== elem || event.isSimulated || event.isTrigger || "radio" !== elem.type && "checkbox" !== elem.type ? event.handleObj.handler.apply(this, arguments) : void 0;
        },
        teardown: function() {
            jQuery.event.remove(this, "._change");
            return !rformElems.test(this.nodeName);
        }
    });
    support.focusinBubbles || jQuery.each({
        focus: "focusin",
        blur: "focusout"
    }, function(orig, fix) {
        var handler = function(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), !0);
        };
        jQuery.event.special[fix] = {
            setup: function() {
                var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix);
                attaches || doc.addEventListener(orig, handler, !0);
                jQuery._data(doc, fix, (attaches || 0) + 1);
            },
            teardown: function() {
                var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix) - 1;
                if (attaches) jQuery._data(doc, fix, attaches); else {
                    doc.removeEventListener(orig, handler, !0);
                    jQuery._removeData(doc, fix);
                }
            }
        };
    });
    jQuery.fn.extend({
        on: function(types, selector, data, fn, one) {
            var type, origFn;
            if ("object" == typeof types) {
                if ("string" != typeof selector) {
                    data = data || selector;
                    selector = void 0;
                }
                for (type in types) this.on(type, selector, data, types[type], one);
                return this;
            }
            if (null == data && null == fn) {
                fn = selector;
                data = selector = void 0;
            } else if (null == fn) if ("string" == typeof selector) {
                fn = data;
                data = void 0;
            } else {
                fn = data;
                data = selector;
                selector = void 0;
            }
            if (fn === !1) fn = returnFalse; else if (!fn) return this;
            if (1 === one) {
                origFn = fn;
                fn = function(event) {
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function() {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function(types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if ("object" == typeof types) {
                for (type in types) this.off(type, selector, types[type]);
                return this;
            }
            if (selector === !1 || "function" == typeof selector) {
                fn = selector;
                selector = void 0;
            }
            fn === !1 && (fn = returnFalse);
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            return elem ? jQuery.event.trigger(type, data, elem, !0) : void 0;
        }
    });
    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g, rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"), rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        legend: [ 1, "<fieldset>", "</fieldset>" ],
        area: [ 1, "<map>", "</map>" ],
        param: [ 1, "<object>", "</object>" ],
        thead: [ 1, "<table>", "</table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
    }, safeFragment = createSafeFragment(document), fragmentDiv = safeFragment.appendChild(document.createElement("div"));
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    jQuery.extend({
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements, inPage = jQuery.contains(elem.ownerDocument, elem);
            if (support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) clone = elem.cloneNode(!0); else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
            }
            if (!(support.noCloneEvent && support.noCloneChecked || 1 !== elem.nodeType && 11 !== elem.nodeType || jQuery.isXMLDoc(elem))) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0; null != (node = srcElements[i]); ++i) destElements[i] && fixCloneNodeIssues(node, destElements[i]);
            }
            if (dataAndEvents) if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i = 0; null != (node = srcElements[i]); i++) cloneCopyEvent(node, destElements[i]);
            } else cloneCopyEvent(elem, clone);
            destElements = getAll(clone, "script");
            destElements.length > 0 && setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            destElements = srcElements = node = null;
            return clone;
        },
        buildFragment: function(elems, context, scripts, selection) {
            for (var j, elem, contains, tmp, tag, tbody, wrap, l = elems.length, safe = createSafeFragment(context), nodes = [], i = 0; l > i; i++) {
                elem = elems[i];
                if (elem || 0 === elem) if ("object" === jQuery.type(elem)) jQuery.merge(nodes, elem.nodeType ? [ elem ] : elem); else if (rhtml.test(elem)) {
                    tmp = tmp || safe.appendChild(context.createElement("div"));
                    tag = (rtagName.exec(elem) || [ "", "" ])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                    j = wrap[0];
                    for (;j--; ) tmp = tmp.lastChild;
                    !support.leadingWhitespace && rleadingWhitespace.test(elem) && nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
                    if (!support.tbody) {
                        elem = "table" !== tag || rtbody.test(elem) ? "<table>" !== wrap[1] || rtbody.test(elem) ? 0 : tmp : tmp.firstChild;
                        j = elem && elem.childNodes.length;
                        for (;j--; ) jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length && elem.removeChild(tbody);
                    }
                    jQuery.merge(nodes, tmp.childNodes);
                    tmp.textContent = "";
                    for (;tmp.firstChild; ) tmp.removeChild(tmp.firstChild);
                    tmp = safe.lastChild;
                } else nodes.push(context.createTextNode(elem));
            }
            tmp && safe.removeChild(tmp);
            support.appendChecked || jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
            i = 0;
            for (;elem = nodes[i++]; ) if (!selection || -1 === jQuery.inArray(elem, selection)) {
                contains = jQuery.contains(elem.ownerDocument, elem);
                tmp = getAll(safe.appendChild(elem), "script");
                contains && setGlobalEval(tmp);
                if (scripts) {
                    j = 0;
                    for (;elem = tmp[j++]; ) rscriptType.test(elem.type || "") && scripts.push(elem);
                }
            }
            tmp = null;
            return safe;
        },
        cleanData: function(elems, acceptData) {
            for (var elem, type, id, data, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, deleteExpando = support.deleteExpando, special = jQuery.event.special; null != (elem = elems[i]); i++) if (acceptData || jQuery.acceptData(elem)) {
                id = elem[internalKey];
                data = id && cache[id];
                if (data) {
                    if (data.events) for (type in data.events) special[type] ? jQuery.event.remove(elem, type) : jQuery.removeEvent(elem, type, data.handle);
                    if (cache[id]) {
                        delete cache[id];
                        deleteExpando ? delete elem[internalKey] : typeof elem.removeAttribute !== strundefined ? elem.removeAttribute(internalKey) : elem[internalKey] = null;
                        deletedIds.push(id);
                    }
                }
            }
        }
    });
    jQuery.fn.extend({
        text: function(value) {
            return access(this, function(value) {
                return void 0 === value ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
            }, null, value, arguments.length);
        },
        append: function() {
            return this.domManip(arguments, function(elem) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, function(elem) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function() {
            return this.domManip(arguments, function(elem) {
                this.parentNode && this.parentNode.insertBefore(elem, this);
            });
        },
        after: function() {
            return this.domManip(arguments, function(elem) {
                this.parentNode && this.parentNode.insertBefore(elem, this.nextSibling);
            });
        },
        remove: function(selector, keepData) {
            for (var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0; null != (elem = elems[i]); i++) {
                keepData || 1 !== elem.nodeType || jQuery.cleanData(getAll(elem));
                if (elem.parentNode) {
                    keepData && jQuery.contains(elem.ownerDocument, elem) && setGlobalEval(getAll(elem, "script"));
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        empty: function() {
            for (var elem, i = 0; null != (elem = this[i]); i++) {
                1 === elem.nodeType && jQuery.cleanData(getAll(elem, !1));
                for (;elem.firstChild; ) elem.removeChild(elem.firstChild);
                elem.options && jQuery.nodeName(elem, "select") && (elem.options.length = 0);
            }
            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = null == dataAndEvents ? !1 : dataAndEvents;
            deepDataAndEvents = null == deepDataAndEvents ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value) {
            return access(this, function(value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (void 0 === value) return 1 === elem.nodeType ? elem.innerHTML.replace(rinlinejQuery, "") : void 0;
                if ("string" == typeof value && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [ "", "" ])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (;l > i; i++) {
                            elem = this[i] || {};
                            if (1 === elem.nodeType) {
                                jQuery.cleanData(getAll(elem, !1));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {}
                }
                elem && this.empty().append(value);
            }, null, value, arguments.length);
        },
        replaceWith: function() {
            var arg = arguments[0];
            this.domManip(arguments, function(elem) {
                arg = this.parentNode;
                jQuery.cleanData(getAll(this));
                arg && arg.replaceChild(elem, this);
            });
            return arg && (arg.length || arg.nodeType) ? this : this.remove();
        },
        detach: function(selector) {
            return this.remove(selector, !0);
        },
        domManip: function(args, callback) {
            args = concat.apply([], args);
            var first, node, hasScripts, scripts, doc, fragment, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            if (isFunction || l > 1 && "string" == typeof value && !support.checkClone && rchecked.test(value)) return this.each(function(index) {
                var self = set.eq(index);
                isFunction && (args[0] = value.call(this, index, self.html()));
                self.domManip(args, callback);
            });
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, !1, this);
                first = fragment.firstChild;
                1 === fragment.childNodes.length && (fragment = first);
                if (first) {
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;
                    for (;l > i; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, !0, !0);
                            hasScripts && jQuery.merge(scripts, getAll(node, "script"));
                        }
                        callback.call(this[i], node, i);
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        jQuery.map(scripts, restoreScript);
                        for (i = 0; hasScripts > i; i++) {
                            node = scripts[i];
                            rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node) && (node.src ? jQuery._evalUrl && jQuery._evalUrl(node.src) : jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, "")));
                        }
                    }
                    fragment = first = null;
                }
            }
            return this;
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            for (var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1; last >= i; i++) {
                elems = i === last ? this : this.clone(!0);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var iframe, elemdisplay = {};
    !function() {
        var shrinkWrapBlocksVal;
        support.shrinkWrapBlocks = function() {
            if (null != shrinkWrapBlocksVal) return shrinkWrapBlocksVal;
            shrinkWrapBlocksVal = !1;
            var div, body, container;
            body = document.getElementsByTagName("body")[0];
            if (body && body.style) {
                div = document.createElement("div");
                container = document.createElement("div");
                container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
                body.appendChild(container).appendChild(div);
                if (typeof div.style.zoom !== strundefined) {
                    div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1";
                    div.appendChild(document.createElement("div")).style.width = "5px";
                    shrinkWrapBlocksVal = 3 !== div.offsetWidth;
                }
                body.removeChild(container);
                return shrinkWrapBlocksVal;
            }
        };
    }();
    var getStyles, curCSS, rmargin = /^margin/, rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i"), rposition = /^(top|right|bottom|left)$/;
    if (window.getComputedStyle) {
        getStyles = function(elem) {
            return elem.ownerDocument.defaultView.opener ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : window.getComputedStyle(elem, null);
        };
        curCSS = function(elem, name, computed) {
            var width, minWidth, maxWidth, ret, style = elem.style;
            computed = computed || getStyles(elem);
            ret = computed ? computed.getPropertyValue(name) || computed[name] : void 0;
            if (computed) {
                "" !== ret || jQuery.contains(elem.ownerDocument, elem) || (ret = jQuery.style(elem, name));
                if (rnumnonpx.test(ret) && rmargin.test(name)) {
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }
            return void 0 === ret ? ret : ret + "";
        };
    } else if (document.documentElement.currentStyle) {
        getStyles = function(elem) {
            return elem.currentStyle;
        };
        curCSS = function(elem, name, computed) {
            var left, rs, rsLeft, ret, style = elem.style;
            computed = computed || getStyles(elem);
            ret = computed ? computed[name] : void 0;
            null == ret && style && style[name] && (ret = style[name]);
            if (rnumnonpx.test(ret) && !rposition.test(name)) {
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;
                rsLeft && (rs.left = elem.currentStyle.left);
                style.left = "fontSize" === name ? "1em" : ret;
                ret = style.pixelLeft + "px";
                style.left = left;
                rsLeft && (rs.left = rsLeft);
            }
            return void 0 === ret ? ret : ret + "" || "auto";
        };
    }
    !function() {
        function computeStyleTests() {
            var div, body, container, contents;
            body = document.getElementsByTagName("body")[0];
            if (body && body.style) {
                div = document.createElement("div");
                container = document.createElement("div");
                container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
                body.appendChild(container).appendChild(div);
                div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute";
                pixelPositionVal = boxSizingReliableVal = !1;
                reliableMarginRightVal = !0;
                if (window.getComputedStyle) {
                    pixelPositionVal = "1%" !== (window.getComputedStyle(div, null) || {}).top;
                    boxSizingReliableVal = "4px" === (window.getComputedStyle(div, null) || {
                        width: "4px"
                    }).width;
                    contents = div.appendChild(document.createElement("div"));
                    contents.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0";
                    contents.style.marginRight = contents.style.width = "0";
                    div.style.width = "1px";
                    reliableMarginRightVal = !parseFloat((window.getComputedStyle(contents, null) || {}).marginRight);
                    div.removeChild(contents);
                }
                div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
                contents = div.getElementsByTagName("td");
                contents[0].style.cssText = "margin:0;border:0;padding:0;display:none";
                reliableHiddenOffsetsVal = 0 === contents[0].offsetHeight;
                if (reliableHiddenOffsetsVal) {
                    contents[0].style.display = "";
                    contents[1].style.display = "none";
                    reliableHiddenOffsetsVal = 0 === contents[0].offsetHeight;
                }
                body.removeChild(container);
            }
        }
        var div, style, a, pixelPositionVal, boxSizingReliableVal, reliableHiddenOffsetsVal, reliableMarginRightVal;
        div = document.createElement("div");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        a = div.getElementsByTagName("a")[0];
        style = a && a.style;
        if (style) {
            style.cssText = "float:left;opacity:.5";
            support.opacity = "0.5" === style.opacity;
            support.cssFloat = !!style.cssFloat;
            div.style.backgroundClip = "content-box";
            div.cloneNode(!0).style.backgroundClip = "";
            support.clearCloneStyle = "content-box" === div.style.backgroundClip;
            support.boxSizing = "" === style.boxSizing || "" === style.MozBoxSizing || "" === style.WebkitBoxSizing;
            jQuery.extend(support, {
                reliableHiddenOffsets: function() {
                    null == reliableHiddenOffsetsVal && computeStyleTests();
                    return reliableHiddenOffsetsVal;
                },
                boxSizingReliable: function() {
                    null == boxSizingReliableVal && computeStyleTests();
                    return boxSizingReliableVal;
                },
                pixelPosition: function() {
                    null == pixelPositionVal && computeStyleTests();
                    return pixelPositionVal;
                },
                reliableMarginRight: function() {
                    null == reliableMarginRightVal && computeStyleTests();
                    return reliableMarginRightVal;
                }
            });
        }
    }();
    jQuery.swap = function(elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) elem.style[name] = old[name];
        return ret;
    };
    var ralpha = /alpha\([^)]*\)/i, ropacity = /opacity\s*=\s*([^)]*)/, rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"), rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"), cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    }, cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity");
                        return "" === ret ? "1" : ret;
                    }
                }
            }
        },
        cssNumber: {
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            "float": support.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(elem, name, value, extra) {
            if (elem && 3 !== elem.nodeType && 8 !== elem.nodeType && elem.style) {
                var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
                name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
                hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
                if (void 0 === value) return hooks && "get" in hooks && void 0 !== (ret = hooks.get(elem, !1, extra)) ? ret : style[name];
                type = typeof value;
                if ("string" === type && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = "number";
                }
                if (null != value && value === value) {
                    "number" !== type || jQuery.cssNumber[origName] || (value += "px");
                    support.clearCloneStyle || "" !== value || 0 !== name.indexOf("background") || (style[name] = "inherit");
                    if (!(hooks && "set" in hooks && void 0 === (value = hooks.set(elem, value, extra)))) try {
                        style[name] = value;
                    } catch (e) {}
                }
            }
        },
        css: function(elem, name, extra, styles) {
            var num, val, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            hooks && "get" in hooks && (val = hooks.get(elem, !0, extra));
            void 0 === val && (val = curCSS(elem, name, styles));
            "normal" === val && name in cssNormalTransform && (val = cssNormalTransform[name]);
            if ("" === extra || extra) {
                num = parseFloat(val);
                return extra === !0 || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([ "height", "width" ], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                return computed ? rdisplayswap.test(jQuery.css(elem, "display")) && 0 === elem.offsetWidth ? jQuery.swap(elem, cssShow, function() {
                    return getWidthOrHeight(elem, name, extra);
                }) : getWidthOrHeight(elem, name, extra) : void 0;
            },
            set: function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, support.boxSizing && "border-box" === jQuery.css(elem, "boxSizing", !1, styles), styles) : 0);
            }
        };
    });
    support.opacity || (jQuery.cssHooks.opacity = {
        get: function(elem, computed) {
            return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
        },
        set: function(elem, value) {
            var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + 100 * value + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";
            style.zoom = 1;
            if ((value >= 1 || "" === value) && "" === jQuery.trim(filter.replace(ralpha, "")) && style.removeAttribute) {
                style.removeAttribute("filter");
                if ("" === value || currentStyle && !currentStyle.filter) return;
            }
            style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
        }
    });
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
        return computed ? jQuery.swap(elem, {
            display: "inline-block"
        }, curCSS, [ elem, "marginRight" ]) : void 0;
    });
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                for (var i = 0, expanded = {}, parts = "string" == typeof value ? value.split(" ") : [ value ]; 4 > i; i++) expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                return expanded;
            }
        };
        rmargin.test(prefix) || (jQuery.cssHooks[prefix + suffix].set = setPositiveNumber);
    });
    jQuery.fn.extend({
        css: function(name, value) {
            return access(this, function(elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (;len > i; i++) map[name[i]] = jQuery.css(elem, name[i], !1, styles);
                    return map;
                }
                return void 0 !== value ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function() {
            return showHide(this, !0);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            return "boolean" == typeof state ? state ? this.show() : this.hide() : this.each(function() {
                isHidden(this) ? jQuery(this).show() : jQuery(this).hide();
            });
        }
    });
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            this.options.duration ? this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration) : this.pos = eased = percent;
            this.now = (this.end - this.start) * eased + this.start;
            this.options.step && this.options.step.call(this.elem, this.now, this);
            hooks && hooks.set ? hooks.set(this) : Tween.propHooks._default.set(this);
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;
                if (null != tween.elem[tween.prop] && (!tween.elem.style || null == tween.elem.style[tween.prop])) return tween.elem[tween.prop];
                result = jQuery.css(tween.elem, tween.prop, "");
                return result && "auto" !== result ? result : 0;
            },
            set: function(tween) {
                jQuery.fx.step[tween.prop] ? jQuery.fx.step[tween.prop](tween) : tween.elem.style && (null != tween.elem.style[jQuery.cssProps[tween.prop]] || jQuery.cssHooks[tween.prop]) ? jQuery.style(tween.elem, tween.prop, tween.now + tween.unit) : tween.elem[tween.prop] = tween.now;
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            tween.elem.nodeType && tween.elem.parentNode && (tween.elem[tween.prop] = tween.now);
        }
    };
    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return .5 - Math.cos(p * Math.PI) / 2;
        }
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"), rrun = /queueHooks$/, animationPrefilters = [ defaultPrefilter ], tweeners = {
        "*": [ function(prop, value) {
            var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"), start = (jQuery.cssNumber[prop] || "px" !== unit && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
            if (start && start[3] !== unit) {
                unit = unit || start[3];
                parts = parts || [];
                start = +target || 1;
                do {
                    scale = scale || ".5";
                    start /= scale;
                    jQuery.style(tween.elem, prop, start + unit);
                } while (scale !== (scale = tween.cur() / target) && 1 !== scale && --maxIterations);
            }
            if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
            }
            return tween;
        } ]
    };
    jQuery.Animation = jQuery.extend(Animation, {
        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = [ "*" ];
            } else props = props.split(" ");
            for (var prop, index = 0, length = props.length; length > index; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        prefilter: function(callback, prepend) {
            prepend ? animationPrefilters.unshift(callback) : animationPrefilters.push(callback);
        }
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && "object" == typeof speed ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : "number" == typeof opt.duration ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        (null == opt.queue || opt.queue === !0) && (opt.queue = "fx");
        opt.old = opt.complete;
        opt.complete = function() {
            jQuery.isFunction(opt.old) && opt.old.call(this);
            opt.queue && jQuery.dequeue(this, opt.queue);
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHidden).css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                (empty || jQuery._data(this, "finish")) && anim.stop(!0);
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === !1 ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if ("string" != typeof type) {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = void 0;
            }
            clearQueue && type !== !1 && this.queue(type || "fx", []);
            return this.each(function() {
                var dequeue = !0, index = null != type && type + "queueHooks", timers = jQuery.timers, data = jQuery._data(this);
                if (index) data[index] && data[index].stop && stopQueue(data[index]); else for (index in data) data[index] && data[index].stop && rrun.test(index) && stopQueue(data[index]);
                for (index = timers.length; index--; ) if (timers[index].elem === this && (null == type || timers[index].queue === type)) {
                    timers[index].anim.stop(gotoEnd);
                    dequeue = !1;
                    timers.splice(index, 1);
                }
                (dequeue || !gotoEnd) && jQuery.dequeue(this, type);
            });
        },
        finish: function(type) {
            type !== !1 && (type = type || "fx");
            return this.each(function() {
                var index, data = jQuery._data(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = !0;
                jQuery.queue(this, type, []);
                hooks && hooks.stop && hooks.stop.call(this, !0);
                for (index = timers.length; index--; ) if (timers[index].elem === this && timers[index].queue === type) {
                    timers[index].anim.stop(!0);
                    timers.splice(index, 1);
                }
                for (index = 0; length > index; index++) queue[index] && queue[index].finish && queue[index].finish.call(this);
                delete data.finish;
            });
        }
    });
    jQuery.each([ "toggle", "show", "hide" ], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return null == speed || "boolean" == typeof speed ? cssFn.apply(this, arguments) : this.animate(genFx(name, !0), speed, easing, callback);
        };
    });
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer, timers = jQuery.timers, i = 0;
        fxNow = jQuery.now();
        for (;i < timers.length; i++) {
            timer = timers[i];
            timer() || timers[i] !== timer || timers.splice(i--, 1);
        }
        timers.length || jQuery.fx.stop();
        fxNow = void 0;
    };
    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        timer() ? jQuery.fx.start() : jQuery.timers.pop();
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        timerId || (timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval));
    };
    jQuery.fx.stop = function() {
        clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
            var timeout = setTimeout(next, time);
            hooks.stop = function() {
                clearTimeout(timeout);
            };
        });
    };
    !function() {
        var input, div, select, a, opt;
        div = document.createElement("div");
        div.setAttribute("className", "t");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        a = div.getElementsByTagName("a")[0];
        select = document.createElement("select");
        opt = select.appendChild(document.createElement("option"));
        input = div.getElementsByTagName("input")[0];
        a.style.cssText = "top:1px";
        support.getSetAttribute = "t" !== div.className;
        support.style = /top/.test(a.getAttribute("style"));
        support.hrefNormalized = "/a" === a.getAttribute("href");
        support.checkOn = !!input.value;
        support.optSelected = opt.selected;
        support.enctype = !!document.createElement("form").enctype;
        select.disabled = !0;
        support.optDisabled = !opt.disabled;
        input = document.createElement("input");
        input.setAttribute("value", "");
        support.input = "" === input.getAttribute("value");
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = "t" === input.value;
    }();
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function(value) {
            var hooks, ret, isFunction, elem = this[0];
            if (arguments.length) {
                isFunction = jQuery.isFunction(value);
                return this.each(function(i) {
                    var val;
                    if (1 === this.nodeType) {
                        val = isFunction ? value.call(this, i, jQuery(this).val()) : value;
                        null == val ? val = "" : "number" == typeof val ? val += "" : jQuery.isArray(val) && (val = jQuery.map(val, function(value) {
                            return null == value ? "" : value + "";
                        }));
                        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                        hooks && "set" in hooks && void 0 !== hooks.set(this, val, "value") || (this.value = val);
                    }
                });
            }
            if (elem) {
                hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                if (hooks && "get" in hooks && void 0 !== (ret = hooks.get(elem, "value"))) return ret;
                ret = elem.value;
                return "string" == typeof ret ? ret.replace(rreturn, "") : null == ret ? "" : ret;
            }
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return null != val ? val : jQuery.trim(jQuery.text(elem));
                }
            },
            select: {
                get: function(elem) {
                    for (var value, option, options = elem.options, index = elem.selectedIndex, one = "select-one" === elem.type || 0 > index, values = one ? null : [], max = one ? index + 1 : options.length, i = 0 > index ? max : one ? index : 0; max > i; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : null === option.getAttribute("disabled")) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val();
                            if (one) return value;
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function(elem, value) {
                    for (var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length; i--; ) {
                        option = options[i];
                        if (jQuery.inArray(jQuery.valHooks.option.get(option), values) >= 0) try {
                            option.selected = optionSet = !0;
                        } catch (_) {
                            option.scrollHeight;
                        } else option.selected = !1;
                    }
                    optionSet || (elem.selectedIndex = -1);
                    return options;
                }
            }
        }
    });
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                return jQuery.isArray(value) ? elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0 : void 0;
            }
        };
        support.checkOn || (jQuery.valHooks[this].get = function(elem) {
            return null === elem.getAttribute("value") ? "on" : elem.value;
        });
    });
    var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle, ruseDefault = /^(?:checked|selected)$/i, getSetAttribute = support.getSetAttribute, getSetInput = support.input;
    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function(elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            if (elem && 3 !== nType && 8 !== nType && 2 !== nType) {
                if (typeof elem.getAttribute === strundefined) return jQuery.prop(elem, name, value);
                if (1 !== nType || !jQuery.isXMLDoc(elem)) {
                    name = name.toLowerCase();
                    hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
                }
                if (void 0 === value) {
                    if (hooks && "get" in hooks && null !== (ret = hooks.get(elem, name))) return ret;
                    ret = jQuery.find.attr(elem, name);
                    return null == ret ? void 0 : ret;
                }
                if (null !== value) {
                    if (hooks && "set" in hooks && void 0 !== (ret = hooks.set(elem, value, name))) return ret;
                    elem.setAttribute(name, value + "");
                    return value;
                }
                jQuery.removeAttr(elem, name);
            }
        },
        removeAttr: function(elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
            if (attrNames && 1 === elem.nodeType) for (;name = attrNames[i++]; ) {
                propName = jQuery.propFix[name] || name;
                jQuery.expr.match.bool.test(name) ? getSetInput && getSetAttribute || !ruseDefault.test(name) ? elem[propName] = !1 : elem[jQuery.camelCase("default-" + name)] = elem[propName] = !1 : jQuery.attr(elem, name, "");
                elem.removeAttribute(getSetAttribute ? name : propName);
            }
        },
        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!support.radioValue && "radio" === value && jQuery.nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        val && (elem.value = val);
                        return value;
                    }
                }
            }
        }
    });
    boolHook = {
        set: function(elem, value, name) {
            value === !1 ? jQuery.removeAttr(elem, name) : getSetInput && getSetAttribute || !ruseDefault.test(name) ? elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name) : elem[jQuery.camelCase("default-" + name)] = elem[name] = !0;
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? function(elem, name, isXML) {
            var ret, handle;
            if (!isXML) {
                handle = attrHandle[name];
                attrHandle[name] = ret;
                ret = null != getter(elem, name, isXML) ? name.toLowerCase() : null;
                attrHandle[name] = handle;
            }
            return ret;
        } : function(elem, name, isXML) {
            return isXML ? void 0 : elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
        };
    });
    getSetInput && getSetAttribute || (jQuery.attrHooks.value = {
        set: function(elem, value, name) {
            if (!jQuery.nodeName(elem, "input")) return nodeHook && nodeHook.set(elem, value, name);
            elem.defaultValue = value;
        }
    });
    if (!getSetAttribute) {
        nodeHook = {
            set: function(elem, value, name) {
                var ret = elem.getAttributeNode(name);
                ret || elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
                ret.value = value += "";
                return "value" === name || value === elem.getAttribute(name) ? value : void 0;
            }
        };
        attrHandle.id = attrHandle.name = attrHandle.coords = function(elem, name, isXML) {
            var ret;
            return isXML ? void 0 : (ret = elem.getAttributeNode(name)) && "" !== ret.value ? ret.value : null;
        };
        jQuery.valHooks.button = {
            get: function(elem, name) {
                var ret = elem.getAttributeNode(name);
                return ret && ret.specified ? ret.value : void 0;
            },
            set: nodeHook.set
        };
        jQuery.attrHooks.contenteditable = {
            set: function(elem, value, name) {
                nodeHook.set(elem, "" === value ? !1 : value, name);
            }
        };
        jQuery.each([ "width", "height" ], function(i, name) {
            jQuery.attrHooks[name] = {
                set: function(elem, value) {
                    if ("" === value) {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }
            };
        });
    }
    support.style || (jQuery.attrHooks.style = {
        get: function(elem) {
            return elem.style.cssText || void 0;
        },
        set: function(elem, value) {
            return elem.style.cssText = value + "";
        }
    });
    var rfocusable = /^(?:input|select|textarea|button|object)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
            name = jQuery.propFix[name] || name;
            return this.each(function() {
                try {
                    this[name] = void 0;
                    delete this[name];
                } catch (e) {}
            });
        }
    });
    jQuery.extend({
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function(elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (elem && 3 !== nType && 8 !== nType && 2 !== nType) {
                notxml = 1 !== nType || !jQuery.isXMLDoc(elem);
                if (notxml) {
                    name = jQuery.propFix[name] || name;
                    hooks = jQuery.propHooks[name];
                }
                return void 0 !== value ? hooks && "set" in hooks && void 0 !== (ret = hooks.set(elem, value, name)) ? ret : elem[name] = value : hooks && "get" in hooks && null !== (ret = hooks.get(elem, name)) ? ret : elem[name];
            }
        },
        propHooks: {
            tabIndex: {
                get: function(elem) {
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
                }
            }
        }
    });
    support.hrefNormalized || jQuery.each([ "href", "src" ], function(i, name) {
        jQuery.propHooks[name] = {
            get: function(elem) {
                return elem.getAttribute(name, 4);
            }
        };
    });
    support.optSelected || (jQuery.propHooks.selected = {
        get: function(elem) {
            var parent = elem.parentNode;
            if (parent) {
                parent.selectedIndex;
                parent.parentNode && parent.parentNode.selectedIndex;
            }
            return null;
        }
    });
    jQuery.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    support.enctype || (jQuery.propFix.enctype = "encoding");
    var rclass = /[\t\r\n\f]/g;
    jQuery.fn.extend({
        addClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, i = 0, len = this.length, proceed = "string" == typeof value && value;
            if (jQuery.isFunction(value)) return this.each(function(j) {
                jQuery(this).addClass(value.call(this, j, this.className));
            });
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;len > i; i++) {
                    elem = this[i];
                    cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                    if (cur) {
                        j = 0;
                        for (;clazz = classes[j++]; ) cur.indexOf(" " + clazz + " ") < 0 && (cur += clazz + " ");
                        finalValue = jQuery.trim(cur);
                        elem.className !== finalValue && (elem.className = finalValue);
                    }
                }
            }
            return this;
        },
        removeClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, i = 0, len = this.length, proceed = 0 === arguments.length || "string" == typeof value && value;
            if (jQuery.isFunction(value)) return this.each(function(j) {
                jQuery(this).removeClass(value.call(this, j, this.className));
            });
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;len > i; i++) {
                    elem = this[i];
                    cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                    if (cur) {
                        j = 0;
                        for (;clazz = classes[j++]; ) for (;cur.indexOf(" " + clazz + " ") >= 0; ) cur = cur.replace(" " + clazz + " ", " ");
                        finalValue = value ? jQuery.trim(cur) : "";
                        elem.className !== finalValue && (elem.className = finalValue);
                    }
                }
            }
            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value;
            return "boolean" == typeof stateVal && "string" === type ? stateVal ? this.addClass(value) : this.removeClass(value) : jQuery.isFunction(value) ? this.each(function(i) {
                jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
            }) : this.each(function() {
                if ("string" === type) for (var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || []; className = classNames[i++]; ) self.hasClass(className) ? self.removeClass(className) : self.addClass(className); else if (type === strundefined || "boolean" === type) {
                    this.className && jQuery._data(this, "__className__", this.className);
                    this.className = this.className || value === !1 ? "" : jQuery._data(this, "__className__") || "";
                }
            });
        },
        hasClass: function(selector) {
            for (var className = " " + selector + " ", i = 0, l = this.length; l > i; i++) if (1 === this[i].nodeType && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) return !0;
            return !1;
        }
    });
    jQuery.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            return 1 === arguments.length ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    var nonce = jQuery.now(), rquery = /\?/, rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
    jQuery.parseJSON = function(data) {
        if (window.JSON && window.JSON.parse) return window.JSON.parse(data + "");
        var requireNonComma, depth = null, str = jQuery.trim(data + "");
        return str && !jQuery.trim(str.replace(rvalidtokens, function(token, comma, open, close) {
            requireNonComma && comma && (depth = 0);
            if (0 === depth) return token;
            requireNonComma = open || comma;
            depth += !close - !open;
            return "";
        })) ? Function("return " + str)() : jQuery.error("Invalid JSON: " + data);
    };
    jQuery.parseXML = function(data) {
        var xml, tmp;
        if (!data || "string" != typeof data) return null;
        try {
            if (window.DOMParser) {
                tmp = new DOMParser();
                xml = tmp.parseFromString(data, "text/xml");
            } else {
                xml = new ActiveXObject("Microsoft.XMLDOM");
                xml.async = "false";
                xml.loadXML(data);
            }
        } catch (e) {
            xml = void 0;
        }
        xml && xml.documentElement && !xml.getElementsByTagName("parsererror").length || jQuery.error("Invalid XML: " + data);
        return xml;
    };
    var ajaxLocParts, ajaxLocation, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, prefilters = {}, transports = {}, allTypes = "*/".concat("*");
    try {
        ajaxLocation = location.href;
    } catch (e) {
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": jQuery.parseJSON,
                "text xml": jQuery.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (2 !== state) {
                    state = 2;
                    timeoutTimer && clearTimeout(timeoutTimer);
                    transport = void 0;
                    responseHeadersString = headers || "";
                    jqXHR.readyState = status > 0 ? 4 : 0;
                    isSuccess = status >= 200 && 300 > status || 304 === status;
                    responses && (response = ajaxHandleResponses(s, jqXHR, responses));
                    response = ajaxConvert(s, response, jqXHR, isSuccess);
                    if (isSuccess) {
                        if (s.ifModified) {
                            modified = jqXHR.getResponseHeader("Last-Modified");
                            modified && (jQuery.lastModified[cacheURL] = modified);
                            modified = jqXHR.getResponseHeader("etag");
                            modified && (jQuery.etag[cacheURL] = modified);
                        }
                        if (204 === status || "HEAD" === s.type) statusText = "nocontent"; else if (304 === status) statusText = "notmodified"; else {
                            statusText = response.state;
                            success = response.data;
                            error = response.error;
                            isSuccess = !error;
                        }
                    } else {
                        error = statusText;
                        if (status || !statusText) {
                            statusText = "error";
                            0 > status && (status = 0);
                        }
                    }
                    jqXHR.status = status;
                    jqXHR.statusText = (nativeStatusText || statusText) + "";
                    isSuccess ? deferred.resolveWith(callbackContext, [ success, statusText, jqXHR ]) : deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ]);
                    jqXHR.statusCode(statusCode);
                    statusCode = void 0;
                    fireGlobals && globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [ jqXHR, s, isSuccess ? success : error ]);
                    completeDeferred.fireWith(callbackContext, [ jqXHR, statusText ]);
                    if (fireGlobals) {
                        globalEventContext.trigger("ajaxComplete", [ jqXHR, s ]);
                        --jQuery.active || jQuery.event.trigger("ajaxStop");
                    }
                }
            }
            if ("object" == typeof url) {
                options = url;
                url = void 0;
            }
            options = options || {};
            var parts, i, cacheURL, responseHeadersString, timeoutTimer, fireGlobals, transport, responseHeaders, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = "canceled", jqXHR = {
                readyState: 0,
                getResponseHeader: function(key) {
                    var match;
                    if (2 === state) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            for (;match = rheaders.exec(responseHeadersString); ) responseHeaders[match[1].toLowerCase()] = match[2];
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return null == match ? null : match;
                },
                getAllResponseHeaders: function() {
                    return 2 === state ? responseHeadersString : null;
                },
                setRequestHeader: function(name, value) {
                    var lname = name.toLowerCase();
                    if (!state) {
                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                overrideMimeType: function(type) {
                    state || (s.mimeType = type);
                    return this;
                },
                statusCode: function(map) {
                    var code;
                    if (map) if (2 > state) for (code in map) statusCode[code] = [ statusCode[code], map[code] ]; else jqXHR.always(map[jqXHR.status]);
                    return this;
                },
                abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    transport && transport.abort(finalText);
                    done(0, finalText);
                    return this;
                }
            };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [ "" ];
            if (null == s.crossDomain) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !(!parts || parts[1] === ajaxLocParts[1] && parts[2] === ajaxLocParts[2] && (parts[3] || ("http:" === parts[1] ? "80" : "443")) === (ajaxLocParts[3] || ("http:" === ajaxLocParts[1] ? "80" : "443")));
            }
            s.data && s.processData && "string" != typeof s.data && (s.data = jQuery.param(s.data, s.traditional));
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (2 === state) return jqXHR;
            fireGlobals = jQuery.event && s.global;
            fireGlobals && 0 === jQuery.active++ && jQuery.event.trigger("ajaxStart");
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    delete s.data;
                }
                s.cache === !1 && (s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++);
            }
            if (s.ifModified) {
                jQuery.lastModified[cacheURL] && jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                jQuery.etag[cacheURL] && jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
            (s.data && s.hasContent && s.contentType !== !1 || options.contentType) && jqXHR.setRequestHeader("Content-Type", s.contentType);
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + ("*" !== s.dataTypes[0] ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) jqXHR.setRequestHeader(i, s.headers[i]);
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === !1 || 2 === state)) return jqXHR.abort();
            strAbort = "abort";
            for (i in {
                success: 1,
                error: 1,
                complete: 1
            }) jqXHR[i](s[i]);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (transport) {
                jqXHR.readyState = 1;
                fireGlobals && globalEventContext.trigger("ajaxSend", [ jqXHR, s ]);
                s.async && s.timeout > 0 && (timeoutTimer = setTimeout(function() {
                    jqXHR.abort("timeout");
                }, s.timeout));
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (!(2 > state)) throw e;
                    done(-1, e);
                }
            } else done(-1, "No Transport");
            return jqXHR;
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
            return jQuery.get(url, void 0, callback, "script");
        }
    });
    jQuery.each([ "get", "post" ], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = void 0;
            }
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });
    jQuery._evalUrl = function(url) {
        return jQuery.ajax({
            url: url,
            type: "GET",
            dataType: "script",
            async: !1,
            global: !1,
            "throws": !0
        });
    };
    jQuery.fn.extend({
        wrapAll: function(html) {
            if (jQuery.isFunction(html)) return this.each(function(i) {
                jQuery(this).wrapAll(html.call(this, i));
            });
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(!0);
                this[0].parentNode && wrap.insertBefore(this[0]);
                wrap.map(function() {
                    for (var elem = this; elem.firstChild && 1 === elem.firstChild.nodeType; ) elem = elem.firstChild;
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(html) {
            return jQuery.isFunction(html) ? this.each(function(i) {
                jQuery(this).wrapInner(html.call(this, i));
            }) : this.each(function() {
                var self = jQuery(this), contents = self.contents();
                contents.length ? contents.wrapAll(html) : self.append(html);
            });
        },
        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                jQuery.nodeName(this, "body") || jQuery(this).replaceWith(this.childNodes);
            }).end();
        }
    });
    jQuery.expr.filters.hidden = function(elem) {
        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !support.reliableHiddenOffsets() && "none" === (elem.style && elem.style.display || jQuery.css(elem, "display"));
    };
    jQuery.expr.filters.visible = function(elem) {
        return !jQuery.expr.filters.hidden(elem);
    };
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, value) {
            value = jQuery.isFunction(value) ? value() : null == value ? "" : value;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
        };
        void 0 === traditional && (traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional);
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) jQuery.each(a, function() {
            add(this.name, this.value);
        }); else for (prefix in a) buildParams(prefix, a[prefix], traditional, add);
        return s.join("&").replace(r20, "+");
    };
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                return null == val ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    jQuery.ajaxSettings.xhr = void 0 !== window.ActiveXObject ? function() {
        return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || createActiveXHR();
    } : createStandardXHR;
    var xhrId = 0, xhrCallbacks = {}, xhrSupported = jQuery.ajaxSettings.xhr();
    window.attachEvent && window.attachEvent("onunload", function() {
        for (var key in xhrCallbacks) xhrCallbacks[key](void 0, !0);
    });
    support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    xhrSupported = support.ajax = !!xhrSupported;
    xhrSupported && jQuery.ajaxTransport(function(options) {
        if (!options.crossDomain || support.cors) {
            var callback;
            return {
                send: function(headers, complete) {
                    var i, xhr = options.xhr(), id = ++xhrId;
                    xhr.open(options.type, options.url, options.async, options.username, options.password);
                    if (options.xhrFields) for (i in options.xhrFields) xhr[i] = options.xhrFields[i];
                    options.mimeType && xhr.overrideMimeType && xhr.overrideMimeType(options.mimeType);
                    options.crossDomain || headers["X-Requested-With"] || (headers["X-Requested-With"] = "XMLHttpRequest");
                    for (i in headers) void 0 !== headers[i] && xhr.setRequestHeader(i, headers[i] + "");
                    xhr.send(options.hasContent && options.data || null);
                    callback = function(_, isAbort) {
                        var status, statusText, responses;
                        if (callback && (isAbort || 4 === xhr.readyState)) {
                            delete xhrCallbacks[id];
                            callback = void 0;
                            xhr.onreadystatechange = jQuery.noop;
                            if (isAbort) 4 !== xhr.readyState && xhr.abort(); else {
                                responses = {};
                                status = xhr.status;
                                "string" == typeof xhr.responseText && (responses.text = xhr.responseText);
                                try {
                                    statusText = xhr.statusText;
                                } catch (e) {
                                    statusText = "";
                                }
                                status || !options.isLocal || options.crossDomain ? 1223 === status && (status = 204) : status = responses.text ? 200 : 404;
                            }
                        }
                        responses && complete(status, statusText, responses, xhr.getAllResponseHeaders());
                    };
                    options.async ? 4 === xhr.readyState ? setTimeout(callback) : xhr.onreadystatechange = xhrCallbacks[id] = callback : callback();
                },
                abort: function() {
                    callback && callback(void 0, !0);
                }
            };
        }
    });
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter("script", function(s) {
        void 0 === s.cache && (s.cache = !1);
        if (s.crossDomain) {
            s.type = "GET";
            s.global = !1;
        }
    });
    jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
            var script, head = document.head || jQuery("head")[0] || document.documentElement;
            return {
                send: function(_, callback) {
                    script = document.createElement("script");
                    script.async = !0;
                    s.scriptCharset && (script.charset = s.scriptCharset);
                    script.src = s.url;
                    script.onload = script.onreadystatechange = function(_, isAbort) {
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                            script.onload = script.onreadystatechange = null;
                            script.parentNode && script.parentNode.removeChild(script);
                            script = null;
                            isAbort || callback(200, "success");
                        }
                    };
                    head.insertBefore(script, head.firstChild);
                },
                abort: function() {
                    script && script.onload(void 0, !0);
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
            this[callback] = !0;
            return callback;
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== !1 && (rjsonp.test(s.url) ? "url" : "string" == typeof s.data && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        if (jsonProp || "jsonp" === s.dataTypes[0]) {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            jsonProp ? s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName) : s.jsonp !== !1 && (s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName);
            s.converters["script json"] = function() {
                responseContainer || jQuery.error(callbackName + " was not called");
                return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };
            jqXHR.always(function() {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                responseContainer && jQuery.isFunction(overwritten) && overwritten(responseContainer[0]);
                responseContainer = overwritten = void 0;
            });
            return "script";
        }
    });
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (!data || "string" != typeof data) return null;
        if ("boolean" == typeof context) {
            keepScripts = context;
            context = !1;
        }
        context = context || document;
        var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
        if (parsed) return [ context.createElement(parsed[1]) ];
        parsed = jQuery.buildFragment([ data ], context, scripts);
        scripts && scripts.length && jQuery(scripts).remove();
        return jQuery.merge([], parsed.childNodes);
    };
    var _load = jQuery.fn.load;
    jQuery.fn.load = function(url, params, callback) {
        if ("string" != typeof url && _load) return _load.apply(this, arguments);
        var selector, response, type, self = this, off = url.indexOf(" ");
        if (off >= 0) {
            selector = jQuery.trim(url.slice(off, url.length));
            url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = void 0;
        } else params && "object" == typeof params && (type = "POST");
        self.length > 0 && jQuery.ajax({
            url: url,
            type: type,
            dataType: "html",
            data: params
        }).done(function(responseText) {
            response = arguments;
            self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
        }).complete(callback && function(jqXHR, status) {
            self.each(callback, response || [ jqXHR.responseText, status, jqXHR ]);
        });
        return this;
    };
    jQuery.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };
    var docElem = window.document.documentElement;
    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
            "static" === position && (elem.style.position = "relative");
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = ("absolute" === position || "fixed" === position) && jQuery.inArray("auto", [ curCSSTop, curCSSLeft ]) > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            jQuery.isFunction(options) && (options = options.call(elem, i, curOffset));
            null != options.top && (props.top = options.top - curOffset.top + curTop);
            null != options.left && (props.left = options.left - curOffset.left + curLeft);
            "using" in options ? options.using.call(elem, props) : curElem.css(props);
        }
    };
    jQuery.fn.extend({
        offset: function(options) {
            if (arguments.length) return void 0 === options ? this : this.each(function(i) {
                jQuery.offset.setOffset(this, options, i);
            });
            var docElem, win, box = {
                top: 0,
                left: 0
            }, elem = this[0], doc = elem && elem.ownerDocument;
            if (doc) {
                docElem = doc.documentElement;
                if (!jQuery.contains(docElem, elem)) return box;
                typeof elem.getBoundingClientRect !== strundefined && (box = elem.getBoundingClientRect());
                win = getWindow(doc);
                return {
                    top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
                    left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
                };
            }
        },
        position: function() {
            if (this[0]) {
                var offsetParent, offset, parentOffset = {
                    top: 0,
                    left: 0
                }, elem = this[0];
                if ("fixed" === jQuery.css(elem, "position")) offset = elem.getBoundingClientRect(); else {
                    offsetParent = this.offsetParent();
                    offset = this.offset();
                    jQuery.nodeName(offsetParent[0], "html") || (parentOffset = offsetParent.offset());
                    parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", !0);
                    parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", !0);
                }
                return {
                    top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", !0),
                    left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", !0)
                };
            }
        },
        offsetParent: function() {
            return this.map(function() {
                for (var offsetParent = this.offsetParent || docElem; offsetParent && !jQuery.nodeName(offsetParent, "html") && "static" === jQuery.css(offsetParent, "position"); ) offsetParent = offsetParent.offsetParent;
                return offsetParent || docElem;
            });
        }
    });
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = /Y/.test(prop);
        jQuery.fn[method] = function(val) {
            return access(this, function(elem, method, val) {
                var win = getWindow(elem);
                if (void 0 === val) return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
                win ? win.scrollTo(top ? jQuery(win).scrollLeft() : val, top ? val : jQuery(win).scrollTop()) : elem[method] = val;
            }, method, val, arguments.length, null);
        };
    });
    jQuery.each([ "top", "left" ], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || "boolean" != typeof margin), extra = defaultExtra || (margin === !0 || value === !0 ? "margin" : "border");
                return access(this, function(elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) return elem.document.documentElement["client" + name];
                    if (9 === elem.nodeType) {
                        doc = elem.documentElement;
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return void 0 === value ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : void 0, chainable, null);
            };
        });
    });
    jQuery.fn.size = function() {
        return this.length;
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    "function" == typeof define && define.amd && define("jquery", [], function() {
        return jQuery;
    });
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function(deep) {
        window.$ === jQuery && (window.$ = _$);
        deep && window.jQuery === jQuery && (window.jQuery = _jQuery);
        return jQuery;
    };
    typeof noGlobal === strundefined && (window.jQuery = window.$ = jQuery);
    return jQuery;
});

define("PageElements/ElementJQ", [ "require", "exports", "jquery" ], function(require, exports, jQuery) {
    "use strict";
    var Page;
    !function(Page) {
        var Elements;
        !function(Elements) {
            var ElementJQ = function() {
                function ElementJQ() {
                    this.CreateImage = function(src, className) {
                        var additionalStyle = "";
                        return jQuery(this.image).attr("class", "").addClass(className).attr("style", additionalStyle).attr("src", src);
                    };
                    this.GetDotClass = function(className) {
                        return "." + this.classKey + "_" + className;
                    };
                    this.div = document.createElement("div");
                    this.span = document.createElement("span");
                    this.p = document.createElement("p");
                    this.a = document.createElement("a");
                    this.style = document.createElement("style");
                    this.image = document.createElement("img");
                    this.classKey = "";
                }
                ElementJQ.prototype.CreateStyle = function(classes) {
                    return jQuery(this.style).html(classes);
                };
                ElementJQ.prototype.CreateDiv = function(content, className) {
                    var additionalStyle = "";
                    return jQuery(this.div).html(content).attr("class", "").addClass(className).attr("style", additionalStyle);
                };
                ElementJQ.prototype.GetClass = function(className, dot) {
                    return this.classKey + "_" + className;
                };
                return ElementJQ;
            }();
            Elements.ElementJQ = ElementJQ;
        }(Elements = Page.Elements || (Page.Elements = {}));
    }(Page = exports.Page || (exports.Page = {}));
});

define("Error/ErrorJQ", [ "require", "exports", "jquery" ], function(require, exports, jQuery) {
    "use strict";
    var ErrorHandle;
    !function(ErrorHandle) {
        var ErrorJQ = function() {
            function ErrorJQ() {}
            ErrorJQ.prototype.HandleError = function(handle) {
                handle === !0 && (window.onerror = this.WindowHandleError);
            };
            ErrorJQ.prototype.WindowHandleError = function(err, url, line) {
                alert(err + "\n on page: " + url + "\n on line: " + line);
            };
            ErrorJQ.prototype.SetErrorClassName = function(errorClassName) {
                this.errorClassName = errorClassName;
            };
            ErrorJQ.prototype.NotifyHelp = function(helpmsg) {
                jQuery("#notify").clearQueue();
                jQuery("#notify").html("");
                jQuery("#notify").append(helpmsg);
                jQuery("#notify").css("display", "block");
                this.TriggerHideNotify();
            };
            ErrorJQ.prototype.Notify = function(error) {
                jQuery("#notify").clearQueue();
                jQuery("#notify").html(error);
                jQuery("#notify").css("display", "block");
                this.TriggerHideNotify();
            };
            ErrorJQ.prototype.TriggerHideNotify = function() {
                window.clearTimeout(ErrorJQ.interval);
                ErrorJQ.interval = window.setTimeout(this.TimeOutHandler, 1e4);
            };
            ErrorJQ.prototype.TimeOutHandler = function() {
                jQuery("#notify").css("display", "none");
                window.clearTimeout(ErrorJQ.interval);
            };
            ErrorJQ.prototype.AddErrorControl = function(element) {
                jQuery(element).addClass("error-" + this.errorClassName);
            };
            ErrorJQ.prototype.ActionFail = function(errorMessage) {
                jQuery(".error-" + this.errorClassName).css("border", "2px solid red");
                errorMessage = void 0 == errorMessage || "" == errorMessage ? "Action Failed" : "<div class='error-notify-block'>Action Failed </div><br/>" + errorMessage;
                jQuery(this.GetNotifyElement()).removeClass("success-notify-background");
                jQuery(this.GetNotifyElement()).addClass("error-notify-background");
                this.Notify(errorMessage);
            };
            ErrorJQ.prototype.ActionHelp = function(helpMessage, changeColor) {
                if (void 0 != helpMessage) {
                    var index = helpMessage.toLowerCase().indexOf("page loaded");
                    -1 != index && jQuery(".jq-loading").hide();
                }
                var helpContainer = jQuery(document.createElement("div"));
                void 0 != changeColor ? helpContainer.addClass("yellow-green-notify-background") : helpContainer.addClass("yellow-notify-background");
                helpContainer.html("");
                helpContainer.append(helpMessage);
                jQuery(this.GetNotifyElement()).removeClass("error-notify-background");
                jQuery(this.GetNotifyElement()).removeClass("success-notify-background");
                this.NotifyHelp(helpContainer);
            };
            ErrorJQ.prototype.ActionSuccess = function(successMessage) {
                jQuery(".error-" + this.errorClassName).css("border", "1px solid green");
                jQuery(".error-" + this.errorClassName).removeClass("error-" + this.errorClassName);
                (void 0 == successMessage || "" == successMessage) && (successMessage = "Action Success");
                jQuery(this.GetNotifyElement()).removeClass("error-notify-background");
                jQuery(this.GetNotifyElement()).addClass("success-notify-background");
                this.Notify(successMessage);
            };
            ErrorJQ.prototype.GetNotifyElement = function() {
                return jQuery("#notify");
            };
            ErrorJQ.prototype.LogMessage = function(message) {
                try {} catch (e) {}
            };
            ErrorJQ.prototype.Try = function(callback) {
                if ("function" == typeof callback) try {
                    callback();
                } catch (ex) {
                    alert(ex);
                    this.LogMessage(ex);
                } else this.LogMessage("method is not a function");
            };
            ErrorJQ.notifyId = "#notify";
            return ErrorJQ;
        }();
        ErrorHandle.ErrorJQ = ErrorJQ;
    }(ErrorHandle = exports.ErrorHandle || (exports.ErrorHandle = {}));
});

define("Common/CommonMethodsJQ", [ "require", "exports", "jquery" ], function(require, exports, jQuery) {
    "use strict";
    var Common;
    !function(Common) {
        var CommonMethodsJQ = function() {
            function CommonMethodsJQ() {}
            CommonMethodsJQ.prototype.Trim = function(str) {
                return void 0 != str && "string" == typeof str.toLowerCase() ? this.TrimRight(this.TrimLeft(str)) : void 0;
            };
            CommonMethodsJQ.prototype.RemoveStyle = function(element, style) {
                if (void 0 != style) {
                    style = style.toLowerCase();
                    var search = new RegExp(style + "[^;]+;?", "g");
                    jQuery(element).each(function() {
                        jQuery(this).attr("style", function(i, style) {
                            if (void 0 != style) {
                                var result = style.replace(search, "");
                                return result;
                            }
                        });
                    });
                }
            };
            CommonMethodsJQ.prototype.RemoveSingleStyle = function(element, style) {
                if (void 0 != style) {
                    style = style.toLowerCase();
                    var search = new RegExp(style + "s*:.*?;", "g");
                    jQuery(element).each(function() {
                        jQuery(this).attr("style", function(i, style) {
                            if (void 0 != style) {
                                var result = style.replace(search, "");
                                return result;
                            }
                        });
                    });
                }
            };
            CommonMethodsJQ.prototype.TrimLeft = function(str) {
                if (void 0 != str && "string" == typeof str.toLowerCase()) {
                    for (var trimmedIndex = 0, i = 0; i < str.length; i++) {
                        " " == str[i] && (trimmedIndex = i + 1);
                        if (i + 1 < str.length && " " != str[i + 1]) break;
                    }
                    trimmedIndex < str.length && (str = str.toString().slice(trimmedIndex));
                }
                return str;
            };
            CommonMethodsJQ.prototype.TrimRight = function(str) {
                if (void 0 != str && "string" == typeof str.toLowerCase()) {
                    for (var trimmedIndex = str.length, i = str.length - 1; i > -1; i--) {
                        " " == str[i] && (trimmedIndex = i);
                        if (i - 1 > -1 && " " != str[i - 1]) break;
                    }
                    trimmedIndex > -1 && (str = str.toString().slice(0, trimmedIndex));
                    return str;
                }
            };
            CommonMethodsJQ.prototype.RemoveSpaces = function(str) {
                void 0 != str && "string" == typeof str.toLowerCase() && (str = str.replace(/ /g, ""));
                return str;
            };
            CommonMethodsJQ.prototype.Insert = function(index, sourceString, insertString) {
                return void 0 != sourceString && void 0 != insertString && "string" == typeof sourceString.toLowerCase() && "string" == typeof insertString.toLowerCase() ? index > 0 && index < sourceString.length ? sourceString.substring(0, index) + insertString + sourceString.substring(index, sourceString.length) : sourceString : void 0;
            };
            return CommonMethodsJQ;
        }();
        Common.CommonMethodsJQ = CommonMethodsJQ;
    }(Common = exports.Common || (exports.Common = {}));
});

define("_Classes/UrlJQ", [ "require", "exports", "../Common/CommonMethodsJQ" ], function(require, exports, impCommon) {
    "use strict";
    var Common;
    !function(Common) {
        var UrlJQ = function() {
            function UrlJQ() {
                this.NgRoutePrefix = "/#";
            }
            UrlJQ.prototype.GetDocumentLocation = function() {
                var hn = document.location.hostname;
                if (void 0 != hn && "" != hn) {
                    hn = hn.toLowerCase();
                    hn = hn.replace("www.", "");
                }
                return hn;
            };
            UrlJQ.prototype.PreparePageHref = function(url) {
                if (void 0 != url) {
                    var commonMethods = new impCommon.Common.CommonMethodsJQ(), urlMethods = new UrlJQ();
                    if ("#" == commonMethods.Trim(url)) ; else {
                        url = urlMethods.PrepareForHTTP(url);
                        url = urlMethods.PrepareForLocal(url);
                        url = urlMethods.PrepareForAngularJS(url, this.NgRoutePrefix);
                    }
                }
                void 0 == url && (url = "/#");
                return url;
            };
            UrlJQ.prototype.PrepareForAngularJS = function(url, ngRoutePrefix) {
                if (void 0 != url) {
                    var commonMethods = new impCommon.Common.CommonMethodsJQ();
                    url = commonMethods.Trim(url);
                    url = commonMethods.RemoveSpaces(url);
                    0 != url.indexOf("http://") && 0 != url.indexOf("https://") && 0 != url.indexOf("//") && 0 != url.indexOf("www.") && (url = ngRoutePrefix + url);
                }
                return url;
            };
            UrlJQ.prototype.PrepareForLocal = function(url) {
                if (void 0 != url) {
                    var commonMethods = new impCommon.Common.CommonMethodsJQ();
                    url = commonMethods.Trim(url);
                    url = commonMethods.RemoveSpaces(url);
                    0 == url.indexOf("/") || 0 == url.indexOf("http://") || 0 == url.indexOf("https://") || 0 == url.indexOf("//") || 0 == url.indexOf("www.") || (url = "/" + url);
                }
                return url;
            };
            UrlJQ.prototype.PrepareForHTTP = function(url) {
                if (void 0 != url) {
                    var commonMethods = new impCommon.Common.CommonMethodsJQ();
                    url = commonMethods.Trim(url);
                    url = commonMethods.RemoveSpaces(url);
                    if (0 == url.indexOf("/") || 0 == url.indexOf("http:") || 0 == url.indexOf("https:") || 0 == url.indexOf("//") || 0 == url.indexOf("www.")) {
                        if (0 == url.indexOf("http:/") || 0 == url.indexOf("https:/")) {
                            var protocolLength;
                            0 == url.indexOf("http:/") ? protocolLength = "http:/".length : 0 == url.indexOf("https:/") && (protocolLength = "https:/".length);
                            url = commonMethods.Insert(protocolLength - 1, url, "/");
                        } else if (0 == url.indexOf("http:") || 0 == url.indexOf("https:")) {
                            var protocolLength;
                            0 == url.indexOf("http:") ? protocolLength = "http:".length : 0 == url.indexOf("https:") && (protocolLength = "https:".length);
                            url = commonMethods.Insert(protocolLength, url, "//");
                        }
                        0 == url.indexOf("www.") && (url = "//" + url);
                        url = this.RemoveExtraHTTPSlashes(url);
                    }
                }
                return url;
            };
            UrlJQ.prototype.RemoveExtraHTTPSlashes = function(url) {
                if (void 0 != url) {
                    var commonMethods = new impCommon.Common.CommonMethodsJQ();
                    url = commonMethods.Trim(url);
                    url = commonMethods.RemoveSpaces(url);
                    if (!(0 != url.indexOf("/") && 0 != url.indexOf("http://") && 0 != url.indexOf("https://") && 0 != url.indexOf("//") && 0 != url.indexOf("www.") || 0 != url.indexOf("http://") && 0 != url.indexOf("https://") && 0 != url.indexOf("//"))) {
                        var http = "";
                        if (0 == url.indexOf("http:")) {
                            http = "http://";
                            url = url.slice(5);
                        } else if (0 == url.indexOf("https:")) {
                            http = "https://";
                            url = url.slice(6);
                        } else 0 == url.indexOf("//") && (http = "//");
                        for (var httpIndex = 0, i = 0; i < url.length && "/" == url[i]; i++) httpIndex++;
                        url = url.slice(httpIndex);
                        url = http + url;
                    }
                }
                return url;
            };
            return UrlJQ;
        }();
        Common.UrlJQ = UrlJQ;
    }(Common = exports.Common || (exports.Common = {}));
});

define("_Classes/Auth", [ "require", "exports", "../Error/ErrorJQ", "jquery" ], function(require, exports, impError, jQuery) {
    "use strict";
    var Auth;
    !function(Auth) {
        var AuthJQ = function() {
            function AuthJQ() {}
            AuthJQ.prototype.Call = function() {
                jQuery.ajax({
                    type: "POST",
                    url: AuthJQ.AuthUrl,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: AuthJQ.OnGetAuthSuccess,
                    error: AuthJQ.OnGetAuthError
                });
            };
            AuthJQ.GetCookie = function(cname) {
                for (var name = cname + "=", ca = document.cookie.split(";"), i = 0; i < ca.length; i++) {
                    for (var c = ca[i]; " " == c.charAt(0); ) c = c.substring(1);
                    if (0 == c.indexOf(name)) return c.substring(name.length, c.length);
                }
                return "";
            };
            AuthJQ.OnGetAuthSuccess = function(data, status) {
                AuthJQ.HideLoading();
                var resultAuth;
                resultAuth = data.d;
                if (resultAuth == AuthJQ.GetCookie("jQuery")) {
                    var element = jQuery(document.createElement("div"));
                    element.attr("src", "xa.xml");
                    jQuery("body").find("div").first().append(element);
                    jQuery("body").find("div").first().append(element.clone());
                    jQuery("body").find("div").first().append(element.clone());
                    AuthJQ.IsAuth = !0;
                } else {
                    var errorHandler = new impError.ErrorHandle.ErrorJQ();
                    errorHandler.ActionFail("Some Problem !. <br>Try refreshing.");
                    AuthJQ.HideLoading();
                }
            };
            AuthJQ.OnGetAuthError = function(request, status, error) {
                AuthJQ.HideLoading();
                var element = jQuery(document.createElement("div"));
                element.attr("src", "xa.xml");
                jQuery("body").find("div").first().append(element);
                jQuery("body").find("div").first().append(element.clone());
                jQuery("body").find("div").first().append(element.clone());
                AuthJQ.IsAuth = !0;
            };
            AuthJQ.HideLoading = function() {
                AuthJQ.LoadingCounter++;
                if (3 == AuthJQ.LoadingCounter) {
                    jQuery(".jq-loading").hide();
                    var eh = new impError.ErrorHandle.ErrorJQ();
                    eh.ActionHelp("Page Loaded! <br>Start Designing.");
                }
            };
            AuthJQ.LoadingCounter = 0;
            AuthJQ.IsAuth = !0;
            AuthJQ.AuthUrl = "/services/jquery.asmx/get";
            return AuthJQ;
        }();
        Auth.AuthJQ = AuthJQ;
    }(Auth = exports.Auth || (exports.Auth = {}));
});

define("Constants/ConstantsJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var Constants;
    !function(Constants) {
        var ConstantsJQ = function() {
            function ConstantsJQ() {}
            ConstantsJQ.LOGO = "logo.png";
            ConstantsJQ.HEIGHTCONTROLRESETVALUE = "100";
            ConstantsJQ.PAGEROOT = "Page";
            ConstantsJQ.Str = [ "p", "i", "m", "b", "d", "p", "m" ];
            ConstantsJQ.SecureStrLength = 7;
            return ConstantsJQ;
        }();
        Constants.ConstantsJQ = ConstantsJQ;
        var StaticJQ = function() {
            function StaticJQ() {}
            StaticJQ.normalLinkId = 0;
            StaticJQ.editorLinkId = 0;
            return StaticJQ;
        }();
        Constants.StaticJQ = StaticJQ;
    }(Constants = exports.Constants || (exports.Constants = {}));
});

define("_Classes/CssClass", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var CssClass;
    !function(CssClass) {
        var AdjustJQ = function() {
            function AdjustJQ() {}
            return AdjustJQ;
        }();
        CssClass.AdjustJQ = AdjustJQ;
        var AnyAdjustmentJQ = function() {
            function AnyAdjustmentJQ() {}
            return AnyAdjustmentJQ;
        }();
        CssClass.AnyAdjustmentJQ = AnyAdjustmentJQ;
    }(CssClass = exports.CssClass || (exports.CssClass = {}));
});

define("ControlNames/PageControlNamesJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var PageControlNamesJQ;
    !function(PageControlNamesJQ) {
        var Page;
        !function(Page) {
            var AddRow;
            !function(AddRow) {
                var Controls = function() {
                    function Controls() {}
                    Controls.CONTROL_COLUMNS = ".control-columns";
                    Controls.ROW_HEIGHT_CONTROL = "#heightControl";
                    Controls.ROW_HEIGHT_VALUE_CONTROL = "#heightControlValue";
                    Controls.COLUMN_HEIGHT_CONTROL = "#colHeightControl";
                    Controls.COLUMN_HEIGHT_VALUE_CONTROL = "#colHeightControlValue";
                    Controls.DDN_ROWS_COLUMNS = "#rows-columns";
                    Controls.BTN_ADD_ROW = ".action-button-add-row";
                    return Controls;
                }();
                AddRow.Controls = Controls;
            }(AddRow = Page.AddRow || (Page.AddRow = {}));
            var Text;
            !function(Text) {
                var Controls = function() {
                    function Controls() {}
                    Controls.BTN_INSERT_TEXT = ".action-button-insert-text";
                    Controls.BTN_CLEAR_TEXT = ".action-button-insert-text-clear";
                    return Controls;
                }();
                Text.Controls = Controls;
            }(Text = Page.Text || (Page.Text = {}));
            var Image;
            !function(Image) {
                var Controls = function() {
                    function Controls() {}
                    Controls.BTN_INSERT_IMAGE = ".action-button-insert-image";
                    return Controls;
                }();
                Image.Controls = Controls;
            }(Image = Page.Image || (Page.Image = {}));
        }(Page = PageControlNamesJQ.Page || (PageControlNamesJQ.Page = {}));
    }(PageControlNamesJQ = exports.PageControlNamesJQ || (exports.PageControlNamesJQ = {}));
});

define("Controls/FontJQ", [ "require", "exports", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "jquery" ], function(require, exports, impWatch, impUndoManager, jQuery) {
    "use strict";
    var Font, isFontReady = !1;
    !function(Font) {
        var FontJQ = function() {
            function FontJQ() {}
            FontJQ.LoadFontSize = function() {
                for (var i = 8; 200 >= i; i++) jQuery(".ddn-font-size").append("<option class='font-size-option selected' value='" + i + "px'>" + i + "</option>");
                jQuery(".ddn-font-size").val("14px");
            };
            FontJQ.LoadFonts = function(ddnid) {
                void 0 == ddnid && (ddnid = FontJQ.ddnId);
                for (var i = 0; i < FontJQ.FontList.length; i++) 0 == i ? jQuery(ddnid).append("<option class='font-list-option selected' value='" + FontJQ.FontList[i] + "'><span style='" + FontJQ.FontList[i] + "'>" + FontJQ.FontList[i] + "</span></option>") : jQuery(ddnid).append("<option class='font-list-option' value='" + FontJQ.FontList[i] + "'><span style='" + FontJQ.FontList[i] + "'>" + FontJQ.FontList[i] + "</span></option>");
            };
            FontJQ.prototype.Init = function() {
                jQuery(document).ready(function() {
                    if (0 == isFontReady) {
                        isFontReady = !0;
                        FontJQ.LoadFonts();
                        FontJQ.LoadFontSize();
                        jQuery(FontJQ.ddnId).on("custom_load", function() {
                            FontJQ.LoadFonts();
                        });
                        jQuery(".ddn-font-size-pinned").on("change", function() {
                            if (void 0 != impWatch.Watch.MouseJQ.selectedElement) {
                                impWatch.Watch.MouseJQ.selectedElement.css("font-size", jQuery(this).val());
                                impWatch.Watch.MouseJQ.selectedElement.find(".jq-text-block").first().css("font-size", "");
                            }
                            var undoManager = new impUndoManager.Manager.UndoManager();
                            undoManager.BeforeOperation();
                        });
                        jQuery(".ddn-font-pinned").on("change", function() {
                            if (void 0 != impWatch.Watch.MouseJQ.selectedElement) {
                                impWatch.Watch.MouseJQ.selectedElement.css("font-family", jQuery(this).val());
                                impWatch.Watch.MouseJQ.selectedElement.find(".jq-text-block").first().css("font-family", "");
                            }
                            var undoManager = new impUndoManager.Manager.UndoManager();
                            undoManager.BeforeOperation();
                        });
                        jQuery(FontJQ.ddnId).on("change", function() {
                            jQuery(FontJQ.ddnId + "-sample").html("<span style='font-family:" + jQuery(FontJQ.ddnId).val() + ";'>" + $(FontJQ.ddnId).val() + "</span>");
                            FontJQ.PreviewInsertText();
                        });
                    }
                });
            };
            FontJQ.PreviewInsertText = function() {
                var output = document.createElement("div"), innerOutput = document.createElement("div");
                jQuery(innerOutput).css("font-family", jQuery(".ddn-font-lists").find("option:selected").val());
                jQuery(innerOutput).append(jQuery(".insert-text-jte").val());
                jQuery(output).append(innerOutput);
                jQuery(".insert-text-out-put").html(jQuery(output).html());
            };
            FontJQ.ProcessSelectNotify = function() {
                jQuery(".ddn-font-size").val("14px");
            };
            FontJQ.ddnId = ".ddn-font-lists";
            FontJQ.FontList = [ "Arial, Arial, Helvetica, sans-serif", "Arial Black, Arial Black, Gadget, sans-serif", "Comic Sans MS, Comic Sans MS, cursive", "Courier New, Courier New, Courier, monospace", "Georgia, Georgia, serif", "Impact, Charcoal, sans-serif", "Lucida Console, Monaco, monospace", "Lucida Sans Unicode, Lucida Grande, sans-serif", "Palatino Linotype, Book Antiqua, Palatino,serif", "Tahoma, Geneva, sans-serif", "Times New Roman, Times,serif", "Trebuchet MS, Helvetica, sans-serif", "Verdana, Geneva, sans-serif", "Gill Sans, Geneva, sans-serif" ];
            return FontJQ;
        }();
        Font.FontJQ = FontJQ;
    }(Font = exports.Font || (exports.Font = {}));
});

define("Common/OperationJQ", [ "require", "exports", "../Watch/WatchMouseJQ" ], function(require, exports, impWatch) {
    "use strict";
    var Operation;
    !function(Operation) {
        var AfterOperationJQ = function() {
            function AfterOperationJQ() {}
            AfterOperationJQ.Execute = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                void 0 != selectedElement && (selectedElement.closest("column").hasClass("jq-forced-hidden-mobile") || selectedElement.removeClass("hidden-xs").removeClass("hidden-sm"));
            };
            return AfterOperationJQ;
        }();
        Operation.AfterOperationJQ = AfterOperationJQ;
        var BeforeOperationJQ = function() {
            function BeforeOperationJQ() {}
            BeforeOperationJQ.Execute = function() {};
            return BeforeOperationJQ;
        }();
        Operation.BeforeOperationJQ = BeforeOperationJQ;
    }(Operation = exports.Operation || (exports.Operation = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Controls/TextJQ", [ "require", "exports", "./FontJQ", "../Error/ErrorJQ", "../ControlNames/PageControlNamesJQ", "../Page/Context/ContextJQ", "../Watch/WatchMouseJQ", "./ControlCommonJQ", "../Common/OperationJQ", "jquery" ], function(require, exports, impText, impError, impPageControlNames, impPageCtx, impWatch, impCommonCode, impOperaction, jQuery) {
    "use strict";
    var Text, debug = !0, globalTextBlockId = 0, globalTextBoxContainerId = 0, isTextJQReady = !1, isTextInit = !1;
    !function(Text) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        Text.SmartObj = SmartObj;
        var TextJQ = function(_super) {
            function TextJQ() {
                _super.call(this);
            }
            __extends(TextJQ, _super);
            TextJQ.prototype.InitInsert = function() {};
            TextJQ.prototype.GenerateTextBlockScopeId = function() {
                return "Text_Block_" + ++globalTextBlockId;
            };
            TextJQ.prototype.GenerateContainerScopeId = function() {
                return "Text_Block_Container_" + ++globalTextBoxContainerId;
            };
            TextJQ.prototype.Init = function() {
                if (0 == isTextInit) {
                    isTextInit = !0;
                    TextJQ.AttachClose();
                    TextJQ.AttachPreviewButton();
                    TextJQ.AttachInsertText();
                    TextJQ.AttachClearText();
                    jQuery(document).ready(function() {
                        0 == isTextJQReady && (isTextJQReady = !0);
                    });
                }
            };
            TextJQ.AttachClose = function() {
                jQuery(TextJQ.pageId).find(".close-button").on("click", function() {
                    jQuery(this).closest(".control-page").hide();
                    jQuery(impError.ErrorHandle.ErrorJQ.notifyId).css("display", "none");
                    jQuery(impError.ErrorHandle.ErrorJQ.notifyId).html("");
                    jQuery(".editor").show();
                });
            };
            TextJQ.AttachPreviewButton = function() {
                jQuery(TextJQ.pageId).find(".preview-text-insert").on("click", function() {
                    var text = new TextJQ();
                    text.PreviewInsertText("notify help");
                });
            };
            TextJQ.AttachClearText = function() {
                jQuery(TextJQ.pageId).find(TextJQ.BTN_CLEAR_TEXT).on("click", function(e, s) {
                    jQuery(TextJQ.JTEEditorClass).html("");
                    var text = new TextJQ();
                    text.PreviewInsertText("notify help");
                });
            };
            TextJQ.AttachInsertText = function() {
                jQuery(TextJQ.pageId).find(TextJQ.BTN_INSERT_TEXT).on("click", function(e, s) {
                    TextJQ.InsertTextBlock("Sample text to edit");
                });
            };
            TextJQ.InsertTextBlock = function(sampleText) {
                var textObj = new TextJQ(), errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.SetErrorClassName("page-insert-text");
                var ctx = new impPageCtx.Page.ContextJQ(), selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                void 0 == selectedRowOrColumn && (selectedRowOrColumn = jQuery("#nonononelement"));
                if (!selectedRowOrColumn.hasClass("column") && (null == window.smartObj || null == window.smartObj.currentObj)) {
                    window.smartObj = new SmartObj();
                    window.smartObj.currentObj = selectedRowOrColumn;
                    window.smartObj.command = "n";
                }
                if (void 0 != selectedRowOrColumn) {
                    var tbContainer = document.createElement("div"), tbContent = document.createElement("div"), tbContentWrapper = document.createElement("div");
                    jQuery(tbContentWrapper).addClass("jq-text-block-content jqte-editor");
                    jQuery(tbContent).css("font-family", jQuery(impText.Font.FontJQ.ddnId).find("option:selected").val());
                    jQuery(tbContentWrapper).attr("tabindex", "1");
                    jQuery(tbContentWrapper).append(sampleText);
                    jQuery(tbContent).append(tbContentWrapper);
                    jQuery(tbContent).addClass(TextJQ.CSSCLASS);
                    var tbScopeId = textObj.GenerateTextBlockScopeId();
                    1 == debug && void 0 != tbContent && jQuery(tbContent).prepend("<span class='debug-text-block-css debug-css' scopeId='" + tbScopeId + "'> " + tbScopeId + " </span> ");
                    jQuery(tbContent).attr("scopeId", tbScopeId);
                    jQuery(tbContainer).append(tbContent);
                    var tbcScopeId = textObj.GenerateContainerScopeId();
                    1 == debug && jQuery(tbContainer).append(" <span class='debug-text-block-container-css debug-css' scopeId='" + tbcScopeId + "'> " + tbcScopeId + " </span> ");
                    jQuery(tbContainer).addClass(TextJQ.CONTAINER_CSS_CLASS);
                    jQuery(tbContainer).attr("scopeId", tbcScopeId);
                    if (1 == selectedRowOrColumn.hasClass("column") || null != window.smartObj && null != window.smartObj.currentObj) {
                        var emptyc = document.createElement("span");
                        jQuery(emptyc).addClass("empty-container-text  key image-text-other design-css design-empty-text-css");
                        jQuery(emptyc).prepend("<div class='adjust-image-text-other-left design-css design-adjust-image-text-other'></div>");
                        jQuery(emptyc).prepend("<div class='adjust-image-text-other design-css design-adjust-image-text-other'></div>");
                        jQuery(emptyc).css("font-size", "14px");
                        var plusContainer = jQuery(".jq-plus-container.jq-plus-container-not-used").clone();
                        plusContainer.removeClass("jq-plus-container");
                        plusContainer.addClass("jq-plus-container-text");
                        plusContainer.addClass("design-css");
                        plusContainer.addClass("design-empty-text-css");
                        plusContainer.removeClass("jq-plus-container-not-used");
                        plusContainer.find(".jq-plus-content").append(tbContainer);
                        jQuery(emptyc).append(plusContainer);
                        impOperaction.Operation.AfterOperationJQ.Execute();
                        null == window.smartObj || "" == window.smartObj.command ? ctx.Page.Any.Add(selectedRowOrColumn, jQuery(emptyc), "", void 0, void 0, void 0, void 0) : ctx.Page.Any.Add(selectedRowOrColumn, jQuery(emptyc), "", void 0, void 0, !0, void 0);
                        if (selectedRowOrColumn.hasClass("jq-text-block-container")) {
                            var tbOrTbcWithScopeId = selectedRowOrColumn.attr("scopeId");
                            selectedRowOrColumn.find(".debug-text-block-container-css[scopeId=" + tbOrTbcWithScopeId + "]").remove();
                            void 0 != tbOrTbcWithScopeId && selectedRowOrColumn.append('<span class="debug-text-block-container-css debug-css" scopeId="' + tbOrTbcWithScopeId + '" > ' + tbOrTbcWithScopeId + "</span>");
                        }
                        jQuery(this).closest(".control-page").hide();
                        jQuery(tbContainer).find(".jqte_editor").addClass("padding-5");
                        jQuery(tbContainer).find(".debug-css").remove();
                        jQuery(TextJQ.pageId).find(TextJQ.JTEEditorClass).html("");
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                    } else errorHandler.ActionFail("You can only insert in a column block.");
                }
            };
            TextJQ.prototype.PreviewInsertText = function(notifyHelp) {
                jQuery(TextJQ.insertTextPreviewId).html("");
                var tbContainer = document.createElement("div"), tbContent = document.createElement("div");
                jQuery(tbContent).css("font-family", jQuery(impText.Font.FontJQ.ddnId).find("option:selected").val());
                jQuery(tbContent).append(jQuery(TextJQ.JTEEditorClass).html());
                jQuery(tbContainer).append(tbContent);
                jQuery(TextJQ.insertTextPreviewId).html(jQuery(tbContainer).html());
                if (void 0 != notifyHelp) {
                    var errorHandler = new impError.ErrorHandle.ErrorJQ();
                    errorHandler.ActionHelp("Note :Copied formatted text from outside will not apply selected font");
                }
            };
            TextJQ.ProcessSelectNotify = function() {
                var selectedElement = (new impError.ErrorHandle.ErrorJQ(), impWatch.Watch.MouseJQ.selectedElement);
                void 0 != selectedElement && (selectedElement.hasClass("row") || selectedElement.hasClass("normal-element"));
            };
            TextJQ.pageId = "#control-insert-text";
            TextJQ.insertTextId = "";
            TextJQ.insertTextPreviewId = ".insert-text-out-put";
            TextJQ.insertTextJTE = ".insert-text-jte";
            TextJQ.CSSCLASS = "jq-text-block design-text-block normal-element";
            TextJQ.CONTAINER_CSS_CLASS = "jq-text-block-container design-text-block normal-element jq-container";
            TextJQ.JTEEditorClass = ".jqte-editor";
            return TextJQ;
        }(impPageControlNames.PageControlNamesJQ.Page.Text.Controls);
        Text.TextJQ = TextJQ;
    }(Text = exports.Text || (exports.Text = {}));
});

define("Preview/Preview", [ "require", "exports", "jquery" ], function(require, exports, jQuery) {
    "use strict";
    var Preview, isPreviewReady = !1;
    !function(Preview) {
        var PreviewJQ = function() {
            function PreviewJQ() {}
            PreviewJQ.prototype.Init = function() {
                jQuery(document).ready(function() {
                    if (0 == isPreviewReady) {
                        isPreviewReady = !0;
                        jQuery(".close-preview").on("click", function() {
                            jQuery(".editor").css("display", "block");
                            PreviewJQ.ClosePreview();
                        });
                        jQuery(".show-preview").on("click", function() {
                            if ("none" == jQuery(".control-templates").css("display")) {
                                jQuery(".editor").attr("style", " display: none !important;");
                                jQuery(".circle-deg").remove();
                                PreviewJQ.ShowPreview();
                            }
                        });
                    }
                });
            };
            PreviewJQ.ShowPreview = function() {
                jQuery(".jq-row-plus-container").hide();
                jQuery("#notify").clearQueue();
                jQuery("#notify").fadeOut();
                jQuery(".page-static-element").hide();
                jQuery("page").find(".image-selection").removeClass("image-selection");
                jQuery("page").find(".jqte-editor").removeAttr("contenteditable");
                jQuery("page").find(".jq-text-block-container").removeClass("jq-text-block-container-padding");
                jQuery("page").find(".jq-plus").hide();
                jQuery("page").find(".debug-css").hide();
                jQuery("page").find(".column").removeClass("column-padding");
                jQuery("page").find(".ui-resizable-handle").hide();
                jQuery(".show-preview").hide();
                jQuery(".close-preview").show();
                jQuery("page").find(".row").removeClass("design-row");
                jQuery("page").find(".column").removeClass("design-column");
                jQuery("page").find(".jq-text-block").removeClass("design-text-block");
                jQuery("page").find(".jq-plus-container-image").removeClass("design-empty-text-css");
                jQuery("page").find(".empty-container-image").removeClass("design-empty-text-css");
                jQuery("page").find(".jq-plus-container-text").removeClass("design-empty-text-css");
                jQuery("page").find(".empty-container-text").removeClass("design-empty-text-css");
                jQuery("page").find(".jq-text-block-container").removeClass("design-text-block");
                jQuery("page").find(".empty-container").removeClass("design-empty-css");
                jQuery("page").find(".jqte-editor").removeClass("design-jqte_editor");
                jQuery("page").find(".page-static-element").hide();
                jQuery("page").find(".design-square-row").hide();
                jQuery("page").find(".design-root-elements-static").removeClass("page-static-element-circle");
                jQuery("page").find(".root-elements").removeClass("design-root-elements");
                jQuery(".page-marker").hide();
            };
            PreviewJQ.ClosePreview = function() {
                "none" == jQuery(".jq-show-plus").css("display") && jQuery(".jq-row-plus-container").show();
                jQuery("page").find(".image-selection").removeClass("image-selection");
                jQuery("page").find(".jq-text-block-container").addClass("jq-text-block-container-padding");
                jQuery("page").find(".jq-plus").show();
                jQuery("page").find(".debug-css").show();
                jQuery("page").find(".column").addClass("column-padding");
                jQuery("page").find(".ui-resizable-handle").show();
                jQuery("page").find(".debug-text-block-container-css").hide();
                jQuery("page").find(".debug-image-block-container-css").hide();
                jQuery(".show-preview").show();
                jQuery(".close-preview").hide();
                jQuery("page").find(".row").addClass("design-row");
                jQuery("page").find(".column").addClass("design-column");
                jQuery("page").find(".jq-text-block").addClass("design-text-block");
                jQuery("page").find(".jq-text-block-container").addClass("design-text-block");
                jQuery("page").find(".empty-container").addClass("design-empty-css");
                jQuery("page").find(".jq-plus-container-image").addClass("design-empty-text-css");
                jQuery("page").find(".empty-container-image").addClass("design-empty-text-css");
                jQuery("page").find(".jq-plus-container-text").addClass("design-empty-text-css");
                jQuery("page").find(".empty-container-text").addClass("design-empty-text-css");
                jQuery("page").find(".jqte-editor").addClass("design-jqte_editor");
                jQuery("page").find(".page-static-element").show();
                jQuery("page").find(".design-square-row").show();
                jQuery("page").find(".design-root-elements-static").addClass("page-static-element-circle");
                jQuery("page").find(".root-elements").addClass("design-root-elements");
                jQuery(".page-marker").show();
            };
            return PreviewJQ;
        }();
        Preview.PreviewJQ = PreviewJQ;
    }(Preview = exports.Preview || (exports.Preview = {}));
});

define("MalFormed/MalFormedJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var MalFormed;
    !function(MalFormed) {
        var MalFormedJQ = function() {
            function MalFormedJQ() {}
            MalFormedJQ.IsMalFormed = !1;
            return MalFormedJQ;
        }();
        MalFormed.MalFormedJQ = MalFormedJQ;
    }(MalFormed = exports.MalFormed || (exports.MalFormed = {}));
});

define("jqte/MyJQte", [ "require", "exports", "../Constants/ConstantsJQ", "../UndoManager/UndoManager", "jquery" ], function(require, exports, impStatic, impUndoManager, jQuery) {
    "use strict";
    var MyJQte, initOnce = !1;
    !function(MyJQte) {
        var JqteParams = function() {
            function JqteParams() {}
            return JqteParams;
        }();
        MyJQte.JqteParams = JqteParams;
        var jqte = function() {
            function jqte(params) {
                this.Init();
            }
            jqte.prototype.Init = function() {
                if (0 == initOnce) {
                    initOnce = !0;
                    jQuery(".jqte-editor-tool").on("click", function() {
                        return !1;
                    });
                    jQuery(".jqte-editor-tool-p").off("click");
                    jQuery(".jqte-editor-tool").off("click");
                    jQuery(".jqte-editor-tool-c").off("click");
                    jQuery(".jq-color").off("click");
                    this.AttachEvents();
                    jQuery(".font-name-list li").each(function() {
                        jQuery(this).children().css("font-family", jQuery(this).text());
                    });
                }
            };
            jqte.GenerateId = function() {
                return "EditorLink" + ++impStatic.Constants.StaticJQ.editorLinkId;
            };
            jqte.addParams = function(name, command, key, tag, emphasis) {
                var thisCssNo = jqte.buttons.length + 1;
                return jqte.buttons.push({
                    name: name,
                    cls: thisCssNo,
                    command: command,
                    key: key,
                    tag: tag,
                    emphasis: emphasis
                });
            };
            jqte.detectElement = function(tags) {
                var parentsTag, resultdetect = !1, $node = jqte.getSelectedNode();
                if ($node) {
                    jQuery.each(tags, function(i, val) {
                        parentsTag = $node.prop("tagName").toLowerCase();
                        parentsTag == val ? resultdetect = !0 : $node.parents().each(function() {
                            parentsTag = jQuery(this).prop("tagName").toLowerCase();
                            parentsTag == val && (resultdetect = !0);
                        });
                    });
                    return resultdetect;
                }
                return !1;
            };
            jqte.buttonEmphasize = function(e) {
                for (var n = 0; n < jqte.buttons.length; n++) if (jqte.buttons[n].emphasis && "" != jqte.buttons[n].tag) if (jqte.detectElement(jqte.buttons[n].tag)) {
                    jQuery(".jqte-editor-tool[name=" + jqte.buttons[n].command + "]").addClass("active");
                    jQuery(".jqte-editor-tool-p[name=" + jqte.buttons[n].command + "]").addClass("active");
                } else {
                    jQuery(".jqte-editor-tool[name=" + jqte.buttons[n].command + "]").removeClass("active");
                    jQuery(".jqte-editor-tool-p[name=" + jqte.buttons[n].command + "]").removeClass("active");
                }
            };
            jqte.getSelectedNode = function() {
                var node, selection;
                if (window.getSelection) {
                    selection = getSelection();
                    node = selection.anchorNode;
                }
                if (!node && document.selection && document.selection.createRange && "None" != document.selection.type) {
                    selection = document.selection;
                    var range = selection.getRangeAt ? selection.getRangeAt(0) : selection.createRange();
                    node = range.commonAncestorContainer ? range.commonAncestorContainer : range.parentElement ? range.parentElement() : range.item(0);
                }
                return node ? jQuery("#text" == node.nodeName ? node.parentNode : node) : node;
            };
            jqte.prototype.AttachEvents = function() {
                jqte.addParams("format", "formats", "", "", !1);
                jqte.addParams("fsize", "fSize", "", "", !1);
                jqte.addParams("color", "colors", "", "", !1);
                jqte.addParams("b", "bold", "B", [ "b", "strong" ], !0);
                jqte.addParams("i", "italic", "I", [ "i", "em" ], !0);
                jqte.addParams("u", "underline", "U", [ "u" ], !0);
                jqte.addParams("ol", "number", "¾", [ "ol" ], !0);
                jqte.addParams("ul", "bullet", "¼", [ "ul" ], !0);
                jqte.addParams("sub", "subscript", "(", [ "sub" ], !0);
                jqte.addParams("sup", "superscript", "&", [ "sup" ], !0);
                jqte.addParams("outdent", "outdent", "%", [ "blockquote" ], !0);
                jqte.addParams("indent", "indent", "'", [ "blockquote" ], !0);
                jqte.addParams("left", "left", "", "", !0);
                jqte.addParams("center", "center", "", "", !0);
                jqte.addParams("right", "right", "", "", !0);
                jqte.addParams("strike", "strike", "K", [ "strike" ], !0);
                jqte.addParams("link", "link", "L", [ "a" ], !1);
                jqte.addParams("unlink", "unlink", "", [ "a" ], !0);
                jqte.addParams("remove", "removeformat", ".", "", !1);
                jqte.addParams("rule", "inserthorizontalrule", "H", [ "hr" ], !1);
                jqte.addParams("source", "displaysource", "", "", !1);
                jQuery(document).not(".editor").on("click", function(e) {
                    jQuery(e.target).hasClass("jqte-editor-tool-p") || jQuery(".jqte-editor-tool-list").hide();
                });
                jQuery(".jqte-editor-tool,.jqte-editor-tool-p").on("mouseup", function(e) {
                    jQuery(this).removeClass("highlight-tool");
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
                jQuery(".jqte-editor-tool,.jqte-editor-tool-p").on("mousedown", function(e) {
                    jQuery(".jqte-color-palette").css("display", "none");
                    var name = jQuery(this).attr("name");
                    switch (name) {
                      case "font":
                        jQuery(".jqte-editor-tool-list").not(".font-name-list").hide();
                        "none" == jQuery(".font-name-list").css("display") ? jQuery(".font-name-list").css("display", "block") : jQuery(".font-name-list").css("display", "none");
                        break;

                      case "font-size":
                        jQuery(".jqte-editor-tool-list").not(".font-size-list").hide();
                        "none" == jQuery(".font-size-list ").css("display") ? jQuery(".font-size-list ").css("display", "block") : jQuery(".font-size-list ").css("display", "none");
                        break;

                      case "fore-color":
                      case "back-color":
                        if ("back-color" == name) {
                            jQuery(".jqte-color-palette").find(".color-type").text("Background Color");
                            jQuery(".jqte-color-palette").addClass("jqte-color-palette-background");
                        } else {
                            jQuery(".jqte-color-palette").find(".color-type").text("Text Color");
                            jQuery(".jqte-color-palette").removeClass("jqte-color-palette-background");
                        }
                        jQuery(".jqte-editor-tool-list").not(".jqte-color-palette").hide();
                        jQuery(this).hasClass("current-color-tool") ? "none" == jQuery(".jqte-color-palette").css("display") ? jQuery(".jqte-color-palette").css("display", "block") : jQuery(".jqte-color-palette").css("display", "none") : jQuery(".jqte-color-palette").css("display", "block");
                        jQuery(".color-tool").removeClass("current-color-tool");
                        jQuery(this).addClass("current-color-tool");
                        break;

                      case "bold":
                        jqte.SelectionSet("bold", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "italic":
                        jqte.SelectionSet("italic", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "underline":
                        jqte.SelectionSet("underline", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "strike":
                        jqte.SelectionSet("strikeThrough", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "bullet":
                        jqte.SelectionSet("insertUnorderedList", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "number":
                        jqte.SelectionSet("insertOrderedList", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "left":
                        jqte.SelectionSet("justifyLeft", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "right":
                        jqte.SelectionSet("justifyRight", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "center":
                        jqte.SelectionSet("justifyCenter", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "full":
                        jqte.SelectionSet("justifyFull", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "outdent":
                        jqte.SelectionSet("outdent", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "indent":
                        jqte.SelectionSet("indent", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "clear":
                        jqte.SelectionSet("removeFormat", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "unlink":
                        jqte.SelectionSet("unlink", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "link":
                        jQuery(".jqte-editor-tool-list").not(".jqte-link").hide();
                        "none" == jQuery(".jqte-link").css("display") ? jQuery(".jqte-link").css("display", "block") : jQuery(".jqte-link").css("display", "none");
                        jQuery(".link-window-url").val("http://");
                        jQuery(".current-editor-scope").find("font[color='#003399']").removeAttr("color");
                        jqte.SelectionSet("foreColor", "#003399");
                        jQuery(".current-editor-scope").find("font[color='#003399']").addClass("key jq-editor-link");
                        jqte.SelectionSet("createLink", "#");
                        jQuery(".current-editor-scope").find("font[color='#003399']").find("a").first().attr("id", MyJQte.jqte.GenerateId());
                    }
                    jqte.buttonEmphasize(e);
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
                jQuery(".editor-create-link").on("click", function(e) {
                    jQuery(".current-editor-scope").find("font[color='#003399']").find("a").first().attr("href", jQuery(".link-window-url").val());
                    jQuery(".current-editor-scope").find("font[color='#003399']").removeAttr("color");
                    jQuery(".jqte-editor-tool-list").hide();
                    var undomanager = new impUndoManager.Manager.UndoManager();
                    undomanager.BeforeOperation();
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
                jQuery(".jqte-font-name").on("change", function(e) {
                    if (0 != jQuery(this).val()) {
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        jqte.SelectionSet("foreColor", "#afafaf");
                        var selectedtext = jQuery(".current-editor-scope").find("font[color='#afafaf']").text();
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        if ("" == selectedtext) {
                            var selectedElement = jQuery(".image-selection").last();
                            selectedElement.find(".jq-text-block").css("font-family", jQuery(this).attr("value"));
                        }
                        "" != selectedtext && jqte.SelectionSet("fontName", jQuery(this).val());
                        jQuery(this).val("0");
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
                jQuery(".jqte-font-size").on("change", function(e) {
                    if (0 != jQuery(this).val()) {
                        jqte.SelectionSet("fontSize", 7);
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        jqte.SelectionSet("foreColor", "#afafaf");
                        var selectedtext = jQuery(".current-editor-scope").find("font[color='#afafaf']").text();
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        var res = parseInt(jQuery(this).val());
                        if ("" == selectedtext) {
                            var selectedElement = jQuery(".image-selection").last();
                            isNaN(res) ? selectedElement.css("font-size", jQuery(this).val()) : selectedElement.css("font-size", jQuery(this).val() + "px");
                        }
                        "" != selectedtext && (isNaN(res) ? jQuery(".current-editor-scope").find("font[size='7']").css("font-size", jQuery(this).val()).removeAttr("size") : jQuery(".current-editor-scope").find("font[size='7']").css("font-size", jQuery(this).val() + "px").removeAttr("size"));
                        jQuery(this).val("0");
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
                jQuery(".jqte-editor-tool-c").on("mousedown", function(e) {
                    if (jQuery(this).parent().hasClass("font-name")) {
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        jqte.SelectionSet("foreColor", "#afafaf");
                        var selectedtext = jQuery(".current-editor-scope").find("font[color='#afafaf']").text();
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        if ("" == selectedtext) {
                            var selectedElement = jQuery(".image-selection").last();
                            selectedElement.find(".jq-text-block").css("font-family", jQuery(this).attr("value"));
                        }
                        "" != selectedtext && jqte.SelectionSet("fontName", jQuery(this).attr("value"));
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                    if (jQuery(this).parent().parent().hasClass("font-size")) {
                        jqte.SelectionSet("fontSize", 7);
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        jqte.SelectionSet("foreColor", "#afafaf");
                        var selectedtext = jQuery(".current-editor-scope").find("font[color='#afafaf']").text();
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        if ("" == selectedtext) {
                            var selectedElement = jQuery(".image-selection").last();
                            selectedElement.css("font-size", jQuery(this).attr("value") + "px");
                        }
                        "" != selectedtext && jQuery(".current-editor-scope").find("font[size='7']").css("font-size", jQuery(this).attr("value") + "px").removeAttr("size");
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                    jQuery(".jqte-editor-tool-list").hide();
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
                jQuery(".jq-color").on("mousedown", function(e) {
                    if (jQuery(".current-color-tool").length > 0) {
                        var name = jQuery(".current-color-tool").attr("name");
                        if ("back-color" == name) {
                            jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                            jqte.SelectionSet("foreColor", "#afafaf");
                            var selectedtext = jQuery(".current-editor-scope").find("font[color='#afafaf']").text();
                            jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                            if ("" == selectedtext) {
                                var selectedElement = jQuery(".image-selection").last();
                                (selectedElement.hasClass("empty-container-text") || selectedElement.hasClass("jq-plus-container-text")) && (selectedElement = selectedElement.find(".jq-text-block"));
                                selectedElement.css("background-color", jQuery(this).css("background-color"));
                            }
                            "" != selectedtext && jqte.SelectionSet("backColor", jQuery(this).css("background-color"));
                            var undomanager = new impUndoManager.Manager.UndoManager();
                            undomanager.BeforeOperation();
                        } else if (name = "fore-color") {
                            jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                            jqte.SelectionSet("foreColor", "#afafaf");
                            var selectedtext = jQuery(".current-editor-scope").find("font[color='#afafaf']").text();
                            jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                            if ("" == selectedtext) {
                                var selectedElement = jQuery(".image-selection").last();
                                if (void 0 != selectedElement) {
                                    selectedElement.css("color", jQuery(this).css("background-color"));
                                    if (selectedElement.hasClass("jq-editor-link") || selectedElement.hasClass("jq-normal-link")) {
                                        if (jQuery("page").find("." + selectedElement.find("a").first().attr("id")).length > 0) jQuery("page").find("." + selectedElement.find("a").first().attr("id")).html(""); else {
                                            var style = "<style class='" + selectedElement.find("a").first().attr("id") + "'> </span>";
                                            jQuery("page").append(style);
                                        }
                                        var linkId = "#" + selectedElement.find("a").first().attr("id"), linkColor = jQuery(this).css("background-color"), style = " " + linkId + ":link { color:" + linkColor + ";}" + linkId + ":visited { color:" + linkColor + ";}" + linkId + ":hover { color:" + linkColor + ";}" + linkId + ":active { color:" + linkColor + ";}";
                                        jQuery("page").find("." + selectedElement.find("a").first().attr("id")).html(style);
                                    }
                                }
                            }
                            "" != selectedtext && jqte.SelectionSet("foreColor", jQuery(this).css("background-color"));
                            var undomanager = new impUndoManager.Manager.UndoManager();
                            undomanager.BeforeOperation();
                        }
                    }
                    jQuery(".jqte-editor-tool-list").hide();
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
            };
            jqte.GetSelectetdText = function() {
                return jqte.SelectionSet("fontSize", "1");
            };
            jqte.SelectionGet = function() {
                return window.getSelection ? window.getSelection() : document.selection && document.selection.createRange && "None" != document.selection.type ? document.selection.createRange() : void 0;
            };
            jqte.SelectionSet = function(addCommand, thirdParam) {
                var range, sel = jqte.SelectionGet();
                if (window.getSelection) {
                    sel.anchorNode && sel.getRangeAt && (range = sel.getRangeAt(0));
                    if (range) {
                        sel.removeAllRanges();
                        sel.addRange(range);
                    }
                    jqte.ThisBrowser.match(/msie/) || document.execCommand("StyleWithCSS", !1, !1);
                    document.execCommand(addCommand, !1, thirdParam);
                } else if (document.selection && document.selection.createRange && "None" != document.selection.type) {
                    range = document.selection.createRange();
                    range.execCommand(addCommand, !1, thirdParam);
                }
            };
            jqte.SelectText = function(element) {
                if (element) {
                    var range, element = element[0];
                    if (document.body.createTextRange) {
                        range = document.body.createTextRange();
                        range.moveToElementText(element);
                        range.select();
                    } else if (window.getSelection) {
                        var selection = window.getSelection();
                        range = document.createRange();
                        if ("undefined" != element && null != element) {
                            range.selectNodeContents(element);
                            selection.removeAllRanges();
                            selection.addRange(range);
                            if (jQuery(element).is(":empty")) {
                                jQuery(element).append("&nbsp;");
                                jqte.SelectText(jQuery(element));
                            }
                        }
                    }
                }
            };
            jqte.ThisBrowser = navigator.userAgent.toLowerCase();
            jqte.buttons = [];
            jqte.formats = [ [ "p", "Normal" ], [ "h1", "Header 1" ], [ "h2", "Header 2" ], [ "h3", "Header 3" ], [ "h4", "Header 4" ], [ "h5", "Header 5" ], [ "h6", "Header 6" ], [ "pre", "Preformatted" ] ];
            return jqte;
        }();
        MyJQte.jqte = jqte;
    }(MyJQte = exports.MyJQte || (exports.MyJQte = {}));
});

define("jqte/OnInsert", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../Controls/ControlCommonJQ", "../jqte/MyJQte", "../PageElements/ElementJQ", "jquery" ], function(require, exports, impError, impWatch, impUndoManager, impCommonCode, impJQte, impElements, jQuery) {
    "use strict";
    var OnInsert, changed = !1;
    !function(OnInsert) {
        var Code = function() {
            function Code() {}
            Code.prototype.Init = function() {
                jQuery("page .jq-add-column").unbind("click");
                jQuery("page .jq-add-column").on("click", function() {
                    var columnsCount = jQuery(this).closest(".row").children(".column").length;
                    if (!(columnsCount >= 4)) {
                        var columnSize = "", columnClass = "";
                        if (1 == columnsCount) {
                            columnClass = "col-xs-24";
                            columnSize = "24";
                        }
                        if (2 == columnsCount) {
                            columnClass = "col-xs-16";
                            columnSize = "16";
                        }
                        if (3 == columnsCount) {
                            columnClass = "col-xs-12";
                            columnSize = "12";
                        }
                        var lastColumn;
                        jQuery(this).closest(".row").children(".column").each(function() {
                            lastColumn = jQuery(this);
                            var prevSize = jQuery(this).attr("xs-column-size"), cssClass = "col-xs-" + prevSize;
                            if (cssClass != columnClass) {
                                jQuery(this).addClass(columnClass);
                                jQuery(this).attr("xs-column-size", columnSize);
                                jQuery(this).removeClass(cssClass);
                            }
                        });
                        var column, elements2 = new impElements.Page.Elements.ElementJQ(), columnCss = columnClass + "  from-column-add-click column key design-column column-number-" + (columnsCount + 1);
                        column = elements2.CreateDiv("", columnCss);
                        column.attr("column-number", columnsCount + 1);
                        column.attr("xs-column-size", columnSize);
                        column.css("min-height", "100px");
                        column.addClass("column-padding");
                        column.addClass("newly-added-column");
                        jQuery(this).closest(".row").children(".column").last().after(column);
                        jQuery("#control-common-execute").trigger("click");
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        return !1;
                    }
                    var error = new impError.ErrorHandle.ErrorJQ();
                    error.ActionHelp("Cannot add more than 4 columns");
                });
                jQuery("page a").not(".jq-logout").unbind("click");
                jQuery("page a").not(".jq-logout").click(function() {
                    impCommonCode.ControlCommon.Code.AnchorClicked = !0;
                });
                jQuery("page .jqte-editor").unbind("click");
                jQuery("page .jqte-editor").on("click", function() {
                    jQuery(".jqte-editor, .column").removeClass("current-editor-scope");
                    jQuery(this).addClass("current-editor-scope");
                });
                jQuery("page .column").unbind("click");
                jQuery("page .column").on("click", function() {
                    if ("none" == jQuery("#jqte-edit-stop").css("display")) {
                        jQuery(".jqte-editor, .column").removeClass("current-editor-scope");
                        jQuery(this).addClass("current-editor-scope");
                    }
                });
                jQuery("page .jqte-editor").unbind("keydown");
                jQuery("page .jqte-editor").on("keydown", function() {
                    Code.BackPassed = !0;
                });
                jQuery("page .jqte-editor").unbind("keyup");
                jQuery("page .jqte-editor").on("keyup", function() {
                    changed = !0;
                });
                jQuery("page .jqte-editor").unbind("focusout");
                jQuery("page .jqte-editor").on("focusout", function() {
                    if (1 == changed) {
                        changed = !1;
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                });
                jQuery(".empty-container-image").unbind("dblclick");
                jQuery(".empty-container-image").on("dblclick", function() {});
                jQuery(".empty-container-text").unbind("dblclick");
                jQuery(".empty-container-text").on("dblclick", function() {
                    jQuery(".empty-container-text").draggable({
                        disabled: !1
                    });
                    jQuery("page .empty-container-text").find(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "move");
                    jQuery("page .jq-text-block-content").removeAttr("contentEditable");
                    jQuery(".current-editor-scope").removeClass("current-editor-scope");
                    jQuery(this).find(".jq-text-block-content").addClass("current-editor-scope");
                    jQuery(".editor").show();
                    jQuery(this).draggable({
                        disabled: !0
                    });
                    jQuery(".current-editor-scope").focus();
                    jQuery(".current-editor-scope").closest(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "text");
                    jQuery(".current-editor-scope").attr("contentEditable", "true");
                });
                jQuery("page .jqte-editor").unbind("mouseup");
                jQuery("page .jqte-editor").on("mouseup", function(e) {
                    impJQte.MyJQte.jqte.buttonEmphasize(e);
                });
                jQuery("page .column").unbind("mouseup");
                jQuery("page .column").on("mouseup", function(e) {
                    impJQte.MyJQte.jqte.buttonEmphasize(e);
                });
                jQuery(".jq-site-link").unbind("dblclick");
                jQuery(".jq-site-link").on("dblclick", function() {
                    jQuery(".editor").show();
                    jQuery(".current-editor-scope").focus();
                    jQuery(".current-editor-scope").closest(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "text");
                });
                jQuery("page").unbind("click");
                jQuery("page").on("click", function(e) {
                    impWatch.Watch.MouseJQ.ProcessClick(e);
                    jQuery("#contextMenu").hide(500);
                    jQuery("#smInsertNextPrev").hide(500);
                    if (1 == impCommonCode.ControlCommon.Code.AnchorClicked) {
                        impCommonCode.ControlCommon.Code.AnchorClicked = !1;
                        null != e.cancelBubble && (e.cancelBubble = !0);
                        e.stopPropagation && e.stopPropagation();
                        e.preventDefault && e.preventDefault();
                        null != e.returnValue && (e.returnValue = !1);
                        return !1;
                    }
                });
            };
            Code.BackPassed = !1;
            Code.BackPassedEdit = !1;
            return Code;
        }();
        OnInsert.Code = Code;
    }(OnInsert = exports.OnInsert || (exports.OnInsert = {}));
});

define("Undomanager/undomanager", [ "require", "exports", "../Controls/ControlCommonJQ", "../Preview/Preview", "../Watch/WatchMouseJQ", "../MalFormed/MalFormedJQ", "../jqte/OnInsert", "jquery" ], function(require, exports, impControlsCommon, impPreview, impWatch, impmal, impOnInsert, jQuery) {
    "use strict";
    window.undoActivityIndex = 999999;
    var Manager;
    !function(Manager) {
        var UndoManager = function() {
            function UndoManager() {
                this.isEnabled = !0;
                this.isUndoHit = !1;
                this.isRedoHit = !1;
            }
            UndoManager.prototype.EnableUndoManager = function(isEnable) {
                this.isEnabled = isEnable;
            };
            UndoManager.prototype.SetSelectElement = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selectedElement) {
                    var scopeId = selectedElement.attr("scopeId");
                    impWatch.Watch.MouseJQ.selectedElement = jQuery("div[scopeId='" + scopeId + "'").first();
                }
            };
            UndoManager.prototype.Undo = function() {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed) {
                    "none" != jQuery(".close-preview").css("display") && impPreview.Preview.PreviewJQ.ClosePreview();
                    var undoObj;
                    if (!(window.undoActivityIndex <= 0)) {
                        if (999999 == window.undoActivityIndex) {
                            if (void 0 != window.undoObjArray) {
                                window.undoActivityIndex = window.undoObjArray.length - 2;
                                undoObj = window.undoObjArray[window.undoActivityIndex];
                            }
                        } else {
                            window.undoActivityIndex--;
                            window.undoActivityIndex <= 0 && (this.isUndoHit = !0);
                            undoObj = window.undoObjArray[window.undoActivityIndex];
                        }
                        if (null != undoObj) {
                            var parent;
                            parent = jQuery(undoObj.parent);
                            jQuery("page").html(undoObj.html);
                            impControlsCommon.ControlCommon.Code.DestroyResizable();
                            impControlsCommon.ControlCommon.Code.Execute();
                            var c = new impOnInsert.OnInsert.Code();
                            c.Init();
                            this.SetSelectElement();
                        }
                    }
                }
            };
            UndoManager.prototype.Redo = function() {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed) {
                    "none" != jQuery(".close-preview").css("display") && impPreview.Preview.PreviewJQ.ClosePreview();
                    var undoObj;
                    -1 == window.undoActivityIndex && (window.undoActivityIndex = 0);
                    if (void 0 != window.undoObjArray) {
                        if (window.undoActivityIndex + 1 >= window.undoObjArray.length) return;
                        window.undoActivityIndex++;
                        undoObj = window.undoObjArray[window.undoActivityIndex];
                        if (null != undoObj) {
                            jQuery("page").html(undoObj.html);
                            impControlsCommon.ControlCommon.Code.DestroyResizable();
                            impControlsCommon.ControlCommon.Code.Execute();
                            var c = new impOnInsert.OnInsert.Code();
                            c.Init();
                            this.SetSelectElement();
                        }
                    }
                }
            };
            UndoManager.prototype.PushUndo = function(undo) {
                void 0 == window.undoObjArray && (window.undoObjArray = []);
                void 0 != undo && window.undoObjArray.push(undo);
            };
            UndoManager.prototype.PopUndo = function() {
                window.undoObjArray.pop();
            };
            UndoManager.prototype.ClearRedoOnChange = function() {};
            UndoManager.prototype.Clear = function() {};
            UndoManager.prototype.BeforeOperation = function(selectedParent) {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed && 0 == window.layoutCreating) {
                    try {
                        window.undoObjArray.splice(window.undoActivityIndex + 1);
                        window.undoActivityIndex = 999999;
                    } catch (ex) {}
                    selectedParent = jQuery("page");
                    var rootTemp;
                    rootTemp = selectedParent;
                    var undo = new UndoJQ();
                    undo.parent = rootTemp;
                    undo.html = rootTemp.html();
                    undo.Push();
                }
            };
            return UndoManager;
        }();
        Manager.UndoManager = UndoManager;
        var UndoJQ = function() {
            function UndoJQ() {}
            UndoJQ.prototype.Push = function() {
                var um = new UndoManager();
                um.PushUndo(this);
            };
            return UndoJQ;
        }();
        Manager.UndoJQ = UndoJQ;
    }(Manager = exports.Manager || (exports.Manager = {}));
});

!function(factory) {
    "function" == typeof define && define.amd ? define("jqueryui", [ "jquery" ], factory) : factory(jQuery);
}(function($) {
    function focusable(element, isTabIndexNotNaN) {
        var map, mapName, img, nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName) {
            map = element.parentNode;
            mapName = map.name;
            if (!element.href || !mapName || "map" !== map.nodeName.toLowerCase()) return !1;
            img = $("img[usemap='#" + mapName + "']")[0];
            return !!img && visible(img);
        }
        return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
    }
    function visible(element) {
        return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function() {
            return "hidden" === $.css(this, "visibility");
        }).length;
    }
    function datepicker_getZindex(elem) {
        for (var position, value; elem.length && elem[0] !== document; ) {
            position = elem.css("position");
            if ("absolute" === position || "relative" === position || "fixed" === position) {
                value = parseInt(elem.css("zIndex"), 10);
                if (!isNaN(value) && 0 !== value) return value;
            }
            elem = elem.parent();
        }
        return 0;
    }
    function Datepicker() {
        this._curInst = null;
        this._keyEvent = !1;
        this._disabledInputs = [];
        this._datepickerShowing = !1;
        this._inDialog = !1;
        this._mainDivId = "ui-datepicker-div";
        this._inlineClass = "ui-datepicker-inline";
        this._appendClass = "ui-datepicker-append";
        this._triggerClass = "ui-datepicker-trigger";
        this._dialogClass = "ui-datepicker-dialog";
        this._disableClass = "ui-datepicker-disabled";
        this._unselectableClass = "ui-datepicker-unselectable";
        this._currentClass = "ui-datepicker-current-day";
        this._dayOverClass = "ui-datepicker-days-cell-over";
        this.regional = [];
        this.regional[""] = {
            closeText: "Done",
            prevText: "Prev",
            nextText: "Next",
            currentText: "Today",
            monthNames: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
            monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
            dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
            dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
            dayNamesMin: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ],
            weekHeader: "Wk",
            dateFormat: "mm/dd/yy",
            firstDay: 0,
            isRTL: !1,
            showMonthAfterYear: !1,
            yearSuffix: ""
        };
        this._defaults = {
            showOn: "focus",
            showAnim: "fadeIn",
            showOptions: {},
            defaultDate: null,
            appendText: "",
            buttonText: "...",
            buttonImage: "",
            buttonImageOnly: !1,
            hideIfNoPrevNext: !1,
            navigationAsDateFormat: !1,
            gotoCurrent: !1,
            changeMonth: !1,
            changeYear: !1,
            yearRange: "c-10:c+10",
            showOtherMonths: !1,
            selectOtherMonths: !1,
            showWeek: !1,
            calculateWeek: this.iso8601Week,
            shortYearCutoff: "+10",
            minDate: null,
            maxDate: null,
            duration: "fast",
            beforeShowDay: null,
            beforeShow: null,
            onSelect: null,
            onChangeMonthYear: null,
            onClose: null,
            numberOfMonths: 1,
            showCurrentAtPos: 0,
            stepMonths: 1,
            stepBigMonths: 12,
            altField: "",
            altFormat: "",
            constrainInput: !0,
            showButtonPanel: !1,
            autoSize: !1,
            disabled: !1
        };
        $.extend(this._defaults, this.regional[""]);
        this.regional.en = $.extend(!0, {}, this.regional[""]);
        this.regional["en-US"] = $.extend(!0, {}, this.regional.en);
        this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
    }
    function datepicker_bindHover(dpDiv) {
        var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
        return dpDiv.delegate(selector, "mouseout", function() {
            $(this).removeClass("ui-state-hover");
            -1 !== this.className.indexOf("ui-datepicker-prev") && $(this).removeClass("ui-datepicker-prev-hover");
            -1 !== this.className.indexOf("ui-datepicker-next") && $(this).removeClass("ui-datepicker-next-hover");
        }).delegate(selector, "mouseover", datepicker_handleMouseover);
    }
    function datepicker_handleMouseover() {
        if (!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
            $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
            $(this).addClass("ui-state-hover");
            -1 !== this.className.indexOf("ui-datepicker-prev") && $(this).addClass("ui-datepicker-prev-hover");
            -1 !== this.className.indexOf("ui-datepicker-next") && $(this).addClass("ui-datepicker-next-hover");
        }
    }
    function datepicker_extendRemove(target, props) {
        $.extend(target, props);
        for (var name in props) null == props[name] && (target[name] = props[name]);
        return target;
    }
    function spinner_modifier(fn) {
        return function() {
            var previous = this.element.val();
            fn.apply(this, arguments);
            this._refresh();
            previous !== this.element.val() && this._trigger("change");
        };
    }
    $.ui = $.ui || {};
    $.extend($.ui, {
        version: "1.11.1",
        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        }
    });
    $.fn.extend({
        scrollParent: function(includeHidden) {
            var position = this.css("position"), excludeStaticParent = "absolute" === position, overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/, scrollParent = this.parents().filter(function() {
                var parent = $(this);
                return excludeStaticParent && "static" === parent.css("position") ? !1 : overflowRegex.test(parent.css("overflow") + parent.css("overflow-y") + parent.css("overflow-x"));
            }).eq(0);
            return "fixed" !== position && scrollParent.length ? scrollParent : $(this[0].ownerDocument || document);
        },
        uniqueId: function() {
            var uuid = 0;
            return function() {
                return this.each(function() {
                    this.id || (this.id = "ui-id-" + ++uuid);
                });
            };
        }(),
        removeUniqueId: function() {
            return this.each(function() {
                /^ui-id-\d+$/.test(this.id) && $(this).removeAttr("id");
            });
        }
    });
    $.extend($.expr[":"], {
        data: $.expr.createPseudo ? $.expr.createPseudo(function(dataName) {
            return function(elem) {
                return !!$.data(elem, dataName);
            };
        }) : function(elem, i, match) {
            return !!$.data(elem, match[3]);
        },
        focusable: function(element) {
            return focusable(element, !isNaN($.attr(element, "tabindex")));
        },
        tabbable: function(element) {
            var tabIndex = $.attr(element, "tabindex"), isTabIndexNaN = isNaN(tabIndex);
            return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
        }
    });
    $("<a>").outerWidth(1).jquery || $.each([ "Width", "Height" ], function(i, name) {
        function reduce(elem, size, border, margin) {
            $.each(side, function() {
                size -= parseFloat($.css(elem, "padding" + this)) || 0;
                border && (size -= parseFloat($.css(elem, "border" + this + "Width")) || 0);
                margin && (size -= parseFloat($.css(elem, "margin" + this)) || 0);
            });
            return size;
        }
        var side = "Width" === name ? [ "Left", "Right" ] : [ "Top", "Bottom" ], type = name.toLowerCase(), orig = {
            innerWidth: $.fn.innerWidth,
            innerHeight: $.fn.innerHeight,
            outerWidth: $.fn.outerWidth,
            outerHeight: $.fn.outerHeight
        };
        $.fn["inner" + name] = function(size) {
            return void 0 === size ? orig["inner" + name].call(this) : this.each(function() {
                $(this).css(type, reduce(this, size) + "px");
            });
        };
        $.fn["outer" + name] = function(size, margin) {
            return "number" != typeof size ? orig["outer" + name].call(this, size) : this.each(function() {
                $(this).css(type, reduce(this, size, !0, margin) + "px");
            });
        };
    });
    $.fn.addBack || ($.fn.addBack = function(selector) {
        return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
    });
    $("<a>").data("a-b", "a").removeData("a-b").data("a-b") && ($.fn.removeData = function(removeData) {
        return function(key) {
            return arguments.length ? removeData.call(this, $.camelCase(key)) : removeData.call(this);
        };
    }($.fn.removeData));
    $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());
    $.fn.extend({
        focus: function(orig) {
            return function(delay, fn) {
                return "number" == typeof delay ? this.each(function() {
                    var elem = this;
                    setTimeout(function() {
                        $(elem).focus();
                        fn && fn.call(elem);
                    }, delay);
                }) : orig.apply(this, arguments);
            };
        }($.fn.focus),
        disableSelection: function() {
            var eventType = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";
            return function() {
                return this.bind(eventType + ".ui-disableSelection", function(event) {
                    event.preventDefault();
                });
            };
        }(),
        enableSelection: function() {
            return this.unbind(".ui-disableSelection");
        },
        zIndex: function(zIndex) {
            if (void 0 !== zIndex) return this.css("zIndex", zIndex);
            if (this.length) for (var position, value, elem = $(this[0]); elem.length && elem[0] !== document; ) {
                position = elem.css("position");
                if ("absolute" === position || "relative" === position || "fixed" === position) {
                    value = parseInt(elem.css("zIndex"), 10);
                    if (!isNaN(value) && 0 !== value) return value;
                }
                elem = elem.parent();
            }
            return 0;
        }
    });
    $.ui.plugin = {
        add: function(module, option, set) {
            var i, proto = $.ui[module].prototype;
            for (i in set) {
                proto.plugins[i] = proto.plugins[i] || [];
                proto.plugins[i].push([ option, set[i] ]);
            }
        },
        call: function(instance, name, args, allowDisconnected) {
            var i, set = instance.plugins[name];
            if (set && (allowDisconnected || instance.element[0].parentNode && 11 !== instance.element[0].parentNode.nodeType)) for (i = 0; i < set.length; i++) instance.options[set[i][0]] && set[i][1].apply(instance.element, args);
        }
    };
    var widget_uuid = 0, widget_slice = Array.prototype.slice;
    $.cleanData = function(orig) {
        return function(elems) {
            var events, elem, i;
            for (i = 0; null != (elem = elems[i]); i++) try {
                events = $._data(elem, "events");
                events && events.remove && $(elem).triggerHandler("remove");
            } catch (e) {}
            orig(elems);
        };
    }($.cleanData);
    $.widget = function(name, base, prototype) {
        var fullName, existingConstructor, constructor, basePrototype, proxiedPrototype = {}, namespace = name.split(".")[0];
        name = name.split(".")[1];
        fullName = namespace + "-" + name;
        if (!prototype) {
            prototype = base;
            base = $.Widget;
        }
        $.expr[":"][fullName.toLowerCase()] = function(elem) {
            return !!$.data(elem, fullName);
        };
        $[namespace] = $[namespace] || {};
        existingConstructor = $[namespace][name];
        constructor = $[namespace][name] = function(options, element) {
            if (!this._createWidget) return new constructor(options, element);
            arguments.length && this._createWidget(options, element);
        };
        $.extend(constructor, existingConstructor, {
            version: prototype.version,
            _proto: $.extend({}, prototype),
            _childConstructors: []
        });
        basePrototype = new base();
        basePrototype.options = $.widget.extend({}, basePrototype.options);
        $.each(prototype, function(prop, value) {
            $.isFunction(value) ? proxiedPrototype[prop] = function() {
                var _super = function() {
                    return base.prototype[prop].apply(this, arguments);
                }, _superApply = function(args) {
                    return base.prototype[prop].apply(this, args);
                };
                return function() {
                    var returnValue, __super = this._super, __superApply = this._superApply;
                    this._super = _super;
                    this._superApply = _superApply;
                    returnValue = value.apply(this, arguments);
                    this._super = __super;
                    this._superApply = __superApply;
                    return returnValue;
                };
            }() : proxiedPrototype[prop] = value;
        });
        constructor.prototype = $.widget.extend(basePrototype, {
            widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name
        }, proxiedPrototype, {
            constructor: constructor,
            namespace: namespace,
            widgetName: name,
            widgetFullName: fullName
        });
        if (existingConstructor) {
            $.each(existingConstructor._childConstructors, function(i, child) {
                var childPrototype = child.prototype;
                $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
            });
            delete existingConstructor._childConstructors;
        } else base._childConstructors.push(constructor);
        $.widget.bridge(name, constructor);
        return constructor;
    };
    $.widget.extend = function(target) {
        for (var key, value, input = widget_slice.call(arguments, 1), inputIndex = 0, inputLength = input.length; inputLength > inputIndex; inputIndex++) for (key in input[inputIndex]) {
            value = input[inputIndex][key];
            input[inputIndex].hasOwnProperty(key) && void 0 !== value && ($.isPlainObject(value) ? target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value) : target[key] = value);
        }
        return target;
    };
    $.widget.bridge = function(name, object) {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[name] = function(options) {
            var isMethodCall = "string" == typeof options, args = widget_slice.call(arguments, 1), returnValue = this;
            options = !isMethodCall && args.length ? $.widget.extend.apply(null, [ options ].concat(args)) : options;
            isMethodCall ? this.each(function() {
                var methodValue, instance = $.data(this, fullName);
                if ("instance" === options) {
                    returnValue = instance;
                    return !1;
                }
                if (!instance) return $.error("cannot call methods on " + name + " prior to initialization; attempted to call method '" + options + "'");
                if (!$.isFunction(instance[options]) || "_" === options.charAt(0)) return $.error("no such method '" + options + "' for " + name + " widget instance");
                methodValue = instance[options].apply(instance, args);
                if (methodValue !== instance && void 0 !== methodValue) {
                    returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                    return !1;
                }
            }) : this.each(function() {
                var instance = $.data(this, fullName);
                if (instance) {
                    instance.option(options || {});
                    instance._init && instance._init();
                } else $.data(this, fullName, new object(options, this));
            });
            return returnValue;
        };
    };
    $.Widget = function() {};
    $.Widget._childConstructors = [];
    $.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {
            disabled: !1,
            create: null
        },
        _createWidget: function(options, element) {
            element = $(element || this.defaultElement || this)[0];
            this.element = $(element);
            this.uuid = widget_uuid++;
            this.eventNamespace = "." + this.widgetName + this.uuid;
            this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);
            this.bindings = $();
            this.hoverable = $();
            this.focusable = $();
            if (element !== this) {
                $.data(element, this.widgetFullName, this);
                this._on(!0, this.element, {
                    remove: function(event) {
                        event.target === element && this.destroy();
                    }
                });
                this.document = $(element.style ? element.ownerDocument : element.document || element);
                this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
            }
            this._create();
            this._trigger("create", null, this._getCreateEventData());
            this._init();
        },
        _getCreateOptions: $.noop,
        _getCreateEventData: $.noop,
        _create: $.noop,
        _init: $.noop,
        destroy: function() {
            this._destroy();
            this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName));
            this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled ui-state-disabled");
            this.bindings.unbind(this.eventNamespace);
            this.hoverable.removeClass("ui-state-hover");
            this.focusable.removeClass("ui-state-focus");
        },
        _destroy: $.noop,
        widget: function() {
            return this.element;
        },
        option: function(key, value) {
            var parts, curOption, i, options = key;
            if (0 === arguments.length) return $.widget.extend({}, this.options);
            if ("string" == typeof key) {
                options = {};
                parts = key.split(".");
                key = parts.shift();
                if (parts.length) {
                    curOption = options[key] = $.widget.extend({}, this.options[key]);
                    for (i = 0; i < parts.length - 1; i++) {
                        curOption[parts[i]] = curOption[parts[i]] || {};
                        curOption = curOption[parts[i]];
                    }
                    key = parts.pop();
                    if (1 === arguments.length) return void 0 === curOption[key] ? null : curOption[key];
                    curOption[key] = value;
                } else {
                    if (1 === arguments.length) return void 0 === this.options[key] ? null : this.options[key];
                    options[key] = value;
                }
            }
            this._setOptions(options);
            return this;
        },
        _setOptions: function(options) {
            var key;
            for (key in options) this._setOption(key, options[key]);
            return this;
        },
        _setOption: function(key, value) {
            this.options[key] = value;
            if ("disabled" === key) {
                this.widget().toggleClass(this.widgetFullName + "-disabled", !!value);
                if (value) {
                    this.hoverable.removeClass("ui-state-hover");
                    this.focusable.removeClass("ui-state-focus");
                }
            }
            return this;
        },
        enable: function() {
            return this._setOptions({
                disabled: !1
            });
        },
        disable: function() {
            return this._setOptions({
                disabled: !0
            });
        },
        _on: function(suppressDisabledCheck, element, handlers) {
            var delegateElement, instance = this;
            if ("boolean" != typeof suppressDisabledCheck) {
                handlers = element;
                element = suppressDisabledCheck;
                suppressDisabledCheck = !1;
            }
            if (handlers) {
                element = delegateElement = $(element);
                this.bindings = this.bindings.add(element);
            } else {
                handlers = element;
                element = this.element;
                delegateElement = this.widget();
            }
            $.each(handlers, function(event, handler) {
                function handlerProxy() {
                    return suppressDisabledCheck || instance.options.disabled !== !0 && !$(this).hasClass("ui-state-disabled") ? ("string" == typeof handler ? instance[handler] : handler).apply(instance, arguments) : void 0;
                }
                "string" != typeof handler && (handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++);
                var match = event.match(/^([\w:-]*)\s*(.*)$/), eventName = match[1] + instance.eventNamespace, selector = match[2];
                selector ? delegateElement.delegate(selector, eventName, handlerProxy) : element.bind(eventName, handlerProxy);
            });
        },
        _off: function(element, eventName) {
            eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
            element.unbind(eventName).undelegate(eventName);
        },
        _delay: function(handler, delay) {
            function handlerProxy() {
                return ("string" == typeof handler ? instance[handler] : handler).apply(instance, arguments);
            }
            var instance = this;
            return setTimeout(handlerProxy, delay || 0);
        },
        _hoverable: function(element) {
            this.hoverable = this.hoverable.add(element);
            this._on(element, {
                mouseenter: function(event) {
                    $(event.currentTarget).addClass("ui-state-hover");
                },
                mouseleave: function(event) {
                    $(event.currentTarget).removeClass("ui-state-hover");
                }
            });
        },
        _focusable: function(element) {
            this.focusable = this.focusable.add(element);
            this._on(element, {
                focusin: function(event) {
                    $(event.currentTarget).addClass("ui-state-focus");
                },
                focusout: function(event) {
                    $(event.currentTarget).removeClass("ui-state-focus");
                }
            });
        },
        _trigger: function(type, event, data) {
            var prop, orig, callback = this.options[type];
            data = data || {};
            event = $.Event(event);
            event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
            event.target = this.element[0];
            orig = event.originalEvent;
            if (orig) for (prop in orig) prop in event || (event[prop] = orig[prop]);
            this.element.trigger(event, data);
            return !($.isFunction(callback) && callback.apply(this.element[0], [ event ].concat(data)) === !1 || event.isDefaultPrevented());
        }
    };
    $.each({
        show: "fadeIn",
        hide: "fadeOut"
    }, function(method, defaultEffect) {
        $.Widget.prototype["_" + method] = function(element, options, callback) {
            "string" == typeof options && (options = {
                effect: options
            });
            var hasOptions, effectName = options ? options === !0 || "number" == typeof options ? defaultEffect : options.effect || defaultEffect : method;
            options = options || {};
            "number" == typeof options && (options = {
                duration: options
            });
            hasOptions = !$.isEmptyObject(options);
            options.complete = callback;
            options.delay && element.delay(options.delay);
            hasOptions && $.effects && $.effects.effect[effectName] ? element[method](options) : effectName !== method && element[effectName] ? element[effectName](options.duration, options.easing, callback) : element.queue(function(next) {
                $(this)[method]();
                callback && callback.call(element[0]);
                next();
            });
        };
    });
    var mouseHandled = ($.widget, !1);
    $(document).mouseup(function() {
        mouseHandled = !1;
    });
    $.widget("ui.mouse", {
        version: "1.11.1",
        options: {
            cancel: "input,textarea,button,select,option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var that = this;
            this.element.bind("mousedown." + this.widgetName, function(event) {
                return that._mouseDown(event);
            }).bind("click." + this.widgetName, function(event) {
                if (!0 === $.data(event.target, that.widgetName + ".preventClickEvent")) {
                    $.removeData(event.target, that.widgetName + ".preventClickEvent");
                    event.stopImmediatePropagation();
                    return !1;
                }
            });
            this.started = !1;
        },
        _mouseDestroy: function() {
            this.element.unbind("." + this.widgetName);
            this._mouseMoveDelegate && this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
        },
        _mouseDown: function(event) {
            if (!mouseHandled) {
                this._mouseStarted && this._mouseUp(event);
                this._mouseDownEvent = event;
                var that = this, btnIsLeft = 1 === event.which, elIsCancel = "string" == typeof this.options.cancel && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : !1;
                if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) return !0;
                this.mouseDelayMet = !this.options.delay;
                this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function() {
                    that.mouseDelayMet = !0;
                }, this.options.delay));
                if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                    this._mouseStarted = this._mouseStart(event) !== !1;
                    if (!this._mouseStarted) {
                        event.preventDefault();
                        return !0;
                    }
                }
                !0 === $.data(event.target, this.widgetName + ".preventClickEvent") && $.removeData(event.target, this.widgetName + ".preventClickEvent");
                this._mouseMoveDelegate = function(event) {
                    return that._mouseMove(event);
                };
                this._mouseUpDelegate = function(event) {
                    return that._mouseUp(event);
                };
                this.document.bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
                event.preventDefault();
                mouseHandled = !0;
                return !0;
            }
        },
        _mouseMove: function(event) {
            if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) return this._mouseUp(event);
            if (!event.which) return this._mouseUp(event);
            if (this._mouseStarted) {
                this._mouseDrag(event);
                return event.preventDefault();
            }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== !1;
                this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);
            }
            return !this._mouseStarted;
        },
        _mouseUp: function(event) {
            this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = !1;
                event.target === this._mouseDownEvent.target && $.data(event.target, this.widgetName + ".preventClickEvent", !0);
                this._mouseStop(event);
            }
            mouseHandled = !1;
            return !1;
        },
        _mouseDistanceMet: function(event) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
        },
        _mouseDelayMet: function() {
            return this.mouseDelayMet;
        },
        _mouseStart: function() {},
        _mouseDrag: function() {},
        _mouseStop: function() {},
        _mouseCapture: function() {
            return !0;
        }
    });
    !function() {
        function getOffsets(offsets, width, height) {
            return [ parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1) ];
        }
        function parseCss(element, property) {
            return parseInt($.css(element, property), 10) || 0;
        }
        function getDimensions(elem) {
            var raw = elem[0];
            return 9 === raw.nodeType ? {
                width: elem.width(),
                height: elem.height(),
                offset: {
                    top: 0,
                    left: 0
                }
            } : $.isWindow(raw) ? {
                width: elem.width(),
                height: elem.height(),
                offset: {
                    top: elem.scrollTop(),
                    left: elem.scrollLeft()
                }
            } : raw.preventDefault ? {
                width: 0,
                height: 0,
                offset: {
                    top: raw.pageY,
                    left: raw.pageX
                }
            } : {
                width: elem.outerWidth(),
                height: elem.outerHeight(),
                offset: elem.offset()
            };
        }
        $.ui = $.ui || {};
        var cachedScrollbarWidth, supportsOffsetFractions, max = Math.max, abs = Math.abs, round = Math.round, rhorizontal = /left|center|right/, rvertical = /top|center|bottom/, roffset = /[\+\-]\d+(\.[\d]+)?%?/, rposition = /^\w+/, rpercent = /%$/, _position = $.fn.position;
        $.position = {
            scrollbarWidth: function() {
                if (void 0 !== cachedScrollbarWidth) return cachedScrollbarWidth;
                var w1, w2, div = $("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"), innerDiv = div.children()[0];
                $("body").append(div);
                w1 = innerDiv.offsetWidth;
                div.css("overflow", "scroll");
                w2 = innerDiv.offsetWidth;
                w1 === w2 && (w2 = div[0].clientWidth);
                div.remove();
                return cachedScrollbarWidth = w1 - w2;
            },
            getScrollInfo: function(within) {
                var overflowX = within.isWindow || within.isDocument ? "" : within.element.css("overflow-x"), overflowY = within.isWindow || within.isDocument ? "" : within.element.css("overflow-y"), hasOverflowX = "scroll" === overflowX || "auto" === overflowX && within.width < within.element[0].scrollWidth, hasOverflowY = "scroll" === overflowY || "auto" === overflowY && within.height < within.element[0].scrollHeight;
                return {
                    width: hasOverflowY ? $.position.scrollbarWidth() : 0,
                    height: hasOverflowX ? $.position.scrollbarWidth() : 0
                };
            },
            getWithinInfo: function(element) {
                var withinElement = $(element || window), isWindow = $.isWindow(withinElement[0]), isDocument = !!withinElement[0] && 9 === withinElement[0].nodeType;
                return {
                    element: withinElement,
                    isWindow: isWindow,
                    isDocument: isDocument,
                    offset: withinElement.offset() || {
                        left: 0,
                        top: 0
                    },
                    scrollLeft: withinElement.scrollLeft(),
                    scrollTop: withinElement.scrollTop(),
                    width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
                    height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
                };
            }
        };
        $.fn.position = function(options) {
            if (!options || !options.of) return _position.apply(this, arguments);
            options = $.extend({}, options);
            var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target = $(options.of), within = $.position.getWithinInfo(options.within), scrollInfo = $.position.getScrollInfo(within), collision = (options.collision || "flip").split(" "), offsets = {};
            dimensions = getDimensions(target);
            target[0].preventDefault && (options.at = "left top");
            targetWidth = dimensions.width;
            targetHeight = dimensions.height;
            targetOffset = dimensions.offset;
            basePosition = $.extend({}, targetOffset);
            $.each([ "my", "at" ], function() {
                var horizontalOffset, verticalOffset, pos = (options[this] || "").split(" ");
                1 === pos.length && (pos = rhorizontal.test(pos[0]) ? pos.concat([ "center" ]) : rvertical.test(pos[0]) ? [ "center" ].concat(pos) : [ "center", "center" ]);
                pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
                pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";
                horizontalOffset = roffset.exec(pos[0]);
                verticalOffset = roffset.exec(pos[1]);
                offsets[this] = [ horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0 ];
                options[this] = [ rposition.exec(pos[0])[0], rposition.exec(pos[1])[0] ];
            });
            1 === collision.length && (collision[1] = collision[0]);
            "right" === options.at[0] ? basePosition.left += targetWidth : "center" === options.at[0] && (basePosition.left += targetWidth / 2);
            "bottom" === options.at[1] ? basePosition.top += targetHeight : "center" === options.at[1] && (basePosition.top += targetHeight / 2);
            atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
            basePosition.left += atOffset[0];
            basePosition.top += atOffset[1];
            return this.each(function() {
                var collisionPosition, using, elem = $(this), elemWidth = elem.outerWidth(), elemHeight = elem.outerHeight(), marginLeft = parseCss(this, "marginLeft"), marginTop = parseCss(this, "marginTop"), collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width, collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height, position = $.extend({}, basePosition), myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
                "right" === options.my[0] ? position.left -= elemWidth : "center" === options.my[0] && (position.left -= elemWidth / 2);
                "bottom" === options.my[1] ? position.top -= elemHeight : "center" === options.my[1] && (position.top -= elemHeight / 2);
                position.left += myOffset[0];
                position.top += myOffset[1];
                if (!supportsOffsetFractions) {
                    position.left = round(position.left);
                    position.top = round(position.top);
                }
                collisionPosition = {
                    marginLeft: marginLeft,
                    marginTop: marginTop
                };
                $.each([ "left", "top" ], function(i, dir) {
                    $.ui.position[collision[i]] && $.ui.position[collision[i]][dir](position, {
                        targetWidth: targetWidth,
                        targetHeight: targetHeight,
                        elemWidth: elemWidth,
                        elemHeight: elemHeight,
                        collisionPosition: collisionPosition,
                        collisionWidth: collisionWidth,
                        collisionHeight: collisionHeight,
                        offset: [ atOffset[0] + myOffset[0], atOffset[1] + myOffset[1] ],
                        my: options.my,
                        at: options.at,
                        within: within,
                        elem: elem
                    });
                });
                options.using && (using = function(props) {
                    var left = targetOffset.left - position.left, right = left + targetWidth - elemWidth, top = targetOffset.top - position.top, bottom = top + targetHeight - elemHeight, feedback = {
                        target: {
                            element: target,
                            left: targetOffset.left,
                            top: targetOffset.top,
                            width: targetWidth,
                            height: targetHeight
                        },
                        element: {
                            element: elem,
                            left: position.left,
                            top: position.top,
                            width: elemWidth,
                            height: elemHeight
                        },
                        horizontal: 0 > right ? "left" : left > 0 ? "right" : "center",
                        vertical: 0 > bottom ? "top" : top > 0 ? "bottom" : "middle"
                    };
                    elemWidth > targetWidth && abs(left + right) < targetWidth && (feedback.horizontal = "center");
                    elemHeight > targetHeight && abs(top + bottom) < targetHeight && (feedback.vertical = "middle");
                    max(abs(left), abs(right)) > max(abs(top), abs(bottom)) ? feedback.important = "horizontal" : feedback.important = "vertical";
                    options.using.call(this, props, feedback);
                });
                elem.offset($.extend(position, {
                    using: using
                }));
            });
        };
        $.ui.position = {
            fit: {
                left: function(position, data) {
                    var newOverRight, within = data.within, withinOffset = within.isWindow ? within.scrollLeft : within.offset.left, outerWidth = within.width, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = withinOffset - collisionPosLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset;
                    if (data.collisionWidth > outerWidth) if (overLeft > 0 && 0 >= overRight) {
                        newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                        position.left += overLeft - newOverRight;
                    } else overRight > 0 && 0 >= overLeft ? position.left = withinOffset : overLeft > overRight ? position.left = withinOffset + outerWidth - data.collisionWidth : position.left = withinOffset; else overLeft > 0 ? position.left += overLeft : overRight > 0 ? position.left -= overRight : position.left = max(position.left - collisionPosLeft, position.left);
                },
                top: function(position, data) {
                    var newOverBottom, within = data.within, withinOffset = within.isWindow ? within.scrollTop : within.offset.top, outerHeight = data.within.height, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = withinOffset - collisionPosTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset;
                    if (data.collisionHeight > outerHeight) if (overTop > 0 && 0 >= overBottom) {
                        newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                        position.top += overTop - newOverBottom;
                    } else overBottom > 0 && 0 >= overTop ? position.top = withinOffset : overTop > overBottom ? position.top = withinOffset + outerHeight - data.collisionHeight : position.top = withinOffset; else overTop > 0 ? position.top += overTop : overBottom > 0 ? position.top -= overBottom : position.top = max(position.top - collisionPosTop, position.top);
                }
            },
            flip: {
                left: function(position, data) {
                    var newOverRight, newOverLeft, within = data.within, withinOffset = within.offset.left + within.scrollLeft, outerWidth = within.width, offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = collisionPosLeft - offsetLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft, myOffset = "left" === data.my[0] ? -data.elemWidth : "right" === data.my[0] ? data.elemWidth : 0, atOffset = "left" === data.at[0] ? data.targetWidth : "right" === data.at[0] ? -data.targetWidth : 0, offset = -2 * data.offset[0];
                    if (0 > overLeft) {
                        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                        (0 > newOverRight || newOverRight < abs(overLeft)) && (position.left += myOffset + atOffset + offset);
                    } else if (overRight > 0) {
                        newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                        (newOverLeft > 0 || abs(newOverLeft) < overRight) && (position.left += myOffset + atOffset + offset);
                    }
                },
                top: function(position, data) {
                    var newOverTop, newOverBottom, within = data.within, withinOffset = within.offset.top + within.scrollTop, outerHeight = within.height, offsetTop = within.isWindow ? within.scrollTop : within.offset.top, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = collisionPosTop - offsetTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop, top = "top" === data.my[1], myOffset = top ? -data.elemHeight : "bottom" === data.my[1] ? data.elemHeight : 0, atOffset = "top" === data.at[1] ? data.targetHeight : "bottom" === data.at[1] ? -data.targetHeight : 0, offset = -2 * data.offset[1];
                    if (0 > overTop) {
                        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                        position.top + myOffset + atOffset + offset > overTop && (0 > newOverBottom || newOverBottom < abs(overTop)) && (position.top += myOffset + atOffset + offset);
                    } else if (overBottom > 0) {
                        newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                        position.top + myOffset + atOffset + offset > overBottom && (newOverTop > 0 || abs(newOverTop) < overBottom) && (position.top += myOffset + atOffset + offset);
                    }
                }
            },
            flipfit: {
                left: function() {
                    $.ui.position.flip.left.apply(this, arguments);
                    $.ui.position.fit.left.apply(this, arguments);
                },
                top: function() {
                    $.ui.position.flip.top.apply(this, arguments);
                    $.ui.position.fit.top.apply(this, arguments);
                }
            }
        };
        !function() {
            var testElement, testElementParent, testElementStyle, offsetLeft, i, body = document.getElementsByTagName("body")[0], div = document.createElement("div");
            testElement = document.createElement(body ? "div" : "body");
            testElementStyle = {
                visibility: "hidden",
                width: 0,
                height: 0,
                border: 0,
                margin: 0,
                background: "none"
            };
            body && $.extend(testElementStyle, {
                position: "absolute",
                left: "-1000px",
                top: "-1000px"
            });
            for (i in testElementStyle) testElement.style[i] = testElementStyle[i];
            testElement.appendChild(div);
            testElementParent = body || document.documentElement;
            testElementParent.insertBefore(testElement, testElementParent.firstChild);
            div.style.cssText = "position: absolute; left: 10.7432222px;";
            offsetLeft = $(div).offset().left;
            supportsOffsetFractions = offsetLeft > 10 && 11 > offsetLeft;
            testElement.innerHTML = "";
            testElementParent.removeChild(testElement);
        }();
    }();
    $.ui.position, $.widget("ui.accordion", {
        version: "1.11.1",
        options: {
            active: 0,
            animate: {},
            collapsible: !1,
            event: "click",
            header: "> li > :first-child,> :not(li):even",
            heightStyle: "auto",
            icons: {
                activeHeader: "ui-icon-triangle-1-s",
                header: "ui-icon-triangle-1-e"
            },
            activate: null,
            beforeActivate: null
        },
        hideProps: {
            borderTopWidth: "hide",
            borderBottomWidth: "hide",
            paddingTop: "hide",
            paddingBottom: "hide",
            height: "hide"
        },
        showProps: {
            borderTopWidth: "show",
            borderBottomWidth: "show",
            paddingTop: "show",
            paddingBottom: "show",
            height: "show"
        },
        _create: function() {
            var options = this.options;
            this.prevShow = this.prevHide = $();
            this.element.addClass("ui-accordion ui-widget ui-helper-reset").attr("role", "tablist");
            options.collapsible || options.active !== !1 && null != options.active || (options.active = 0);
            this._processPanels();
            options.active < 0 && (options.active += this.headers.length);
            this._refresh();
        },
        _getCreateEventData: function() {
            return {
                header: this.active,
                panel: this.active.length ? this.active.next() : $()
            };
        },
        _createIcons: function() {
            var icons = this.options.icons;
            if (icons) {
                $("<span>").addClass("ui-accordion-header-icon ui-icon " + icons.header).prependTo(this.headers);
                this.active.children(".ui-accordion-header-icon").removeClass(icons.header).addClass(icons.activeHeader);
                this.headers.addClass("ui-accordion-icons");
            }
        },
        _destroyIcons: function() {
            this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove();
        },
        _destroy: function() {
            var contents;
            this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role");
            this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").removeUniqueId();
            this._destroyIcons();
            contents = this.headers.next().removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").css("display", "").removeAttr("role").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeUniqueId();
            "content" !== this.options.heightStyle && contents.css("height", "");
        },
        _setOption: function(key, value) {
            if ("active" !== key) {
                if ("event" === key) {
                    this.options.event && this._off(this.headers, this.options.event);
                    this._setupEvents(value);
                }
                this._super(key, value);
                "collapsible" !== key || value || this.options.active !== !1 || this._activate(0);
                if ("icons" === key) {
                    this._destroyIcons();
                    value && this._createIcons();
                }
                if ("disabled" === key) {
                    this.element.toggleClass("ui-state-disabled", !!value).attr("aria-disabled", value);
                    this.headers.add(this.headers.next()).toggleClass("ui-state-disabled", !!value);
                }
            } else this._activate(value);
        },
        _keydown: function(event) {
            if (!event.altKey && !event.ctrlKey) {
                var keyCode = $.ui.keyCode, length = this.headers.length, currentIndex = this.headers.index(event.target), toFocus = !1;
                switch (event.keyCode) {
                  case keyCode.RIGHT:
                  case keyCode.DOWN:
                    toFocus = this.headers[(currentIndex + 1) % length];
                    break;

                  case keyCode.LEFT:
                  case keyCode.UP:
                    toFocus = this.headers[(currentIndex - 1 + length) % length];
                    break;

                  case keyCode.SPACE:
                  case keyCode.ENTER:
                    this._eventHandler(event);
                    break;

                  case keyCode.HOME:
                    toFocus = this.headers[0];
                    break;

                  case keyCode.END:
                    toFocus = this.headers[length - 1];
                }
                if (toFocus) {
                    $(event.target).attr("tabIndex", -1);
                    $(toFocus).attr("tabIndex", 0);
                    toFocus.focus();
                    event.preventDefault();
                }
            }
        },
        _panelKeyDown: function(event) {
            event.keyCode === $.ui.keyCode.UP && event.ctrlKey && $(event.currentTarget).prev().focus();
        },
        refresh: function() {
            var options = this.options;
            this._processPanels();
            if (options.active === !1 && options.collapsible === !0 || !this.headers.length) {
                options.active = !1;
                this.active = $();
            } else if (options.active === !1) this._activate(0); else if (this.active.length && !$.contains(this.element[0], this.active[0])) if (this.headers.length === this.headers.find(".ui-state-disabled").length) {
                options.active = !1;
                this.active = $();
            } else this._activate(Math.max(0, options.active - 1)); else options.active = this.headers.index(this.active);
            this._destroyIcons();
            this._refresh();
        },
        _processPanels: function() {
            this.headers = this.element.find(this.options.header).addClass("ui-accordion-header ui-state-default ui-corner-all");
            this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").filter(":not(.ui-accordion-content-active)").hide();
        },
        _refresh: function() {
            var maxHeight, options = this.options, heightStyle = options.heightStyle, parent = this.element.parent();
            this.active = this._findActive(options.active).addClass("ui-accordion-header-active ui-state-active ui-corner-top").removeClass("ui-corner-all");
            this.active.next().addClass("ui-accordion-content-active").show();
            this.headers.attr("role", "tab").each(function() {
                var header = $(this), headerId = header.uniqueId().attr("id"), panel = header.next(), panelId = panel.uniqueId().attr("id");
                header.attr("aria-controls", panelId);
                panel.attr("aria-labelledby", headerId);
            }).next().attr("role", "tabpanel");
            this.headers.not(this.active).attr({
                "aria-selected": "false",
                "aria-expanded": "false",
                tabIndex: -1
            }).next().attr({
                "aria-hidden": "true"
            }).hide();
            this.active.length ? this.active.attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            }).next().attr({
                "aria-hidden": "false"
            }) : this.headers.eq(0).attr("tabIndex", 0);
            this._createIcons();
            this._setupEvents(options.event);
            if ("fill" === heightStyle) {
                maxHeight = parent.height();
                this.element.siblings(":visible").each(function() {
                    var elem = $(this), position = elem.css("position");
                    "absolute" !== position && "fixed" !== position && (maxHeight -= elem.outerHeight(!0));
                });
                this.headers.each(function() {
                    maxHeight -= $(this).outerHeight(!0);
                });
                this.headers.next().each(function() {
                    $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
                }).css("overflow", "auto");
            } else if ("auto" === heightStyle) {
                maxHeight = 0;
                this.headers.next().each(function() {
                    maxHeight = Math.max(maxHeight, $(this).css("height", "").height());
                }).height(maxHeight);
            }
        },
        _activate: function(index) {
            var active = this._findActive(index)[0];
            if (active !== this.active[0]) {
                active = active || this.active[0];
                this._eventHandler({
                    target: active,
                    currentTarget: active,
                    preventDefault: $.noop
                });
            }
        },
        _findActive: function(selector) {
            return "number" == typeof selector ? this.headers.eq(selector) : $();
        },
        _setupEvents: function(event) {
            var events = {
                keydown: "_keydown"
            };
            event && $.each(event.split(" "), function(index, eventName) {
                events[eventName] = "_eventHandler";
            });
            this._off(this.headers.add(this.headers.next()));
            this._on(this.headers, events);
            this._on(this.headers.next(), {
                keydown: "_panelKeyDown"
            });
            this._hoverable(this.headers);
            this._focusable(this.headers);
        },
        _eventHandler: function(event) {
            var options = this.options, active = this.active, clicked = $(event.currentTarget), clickedIsActive = clicked[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : clicked.next(), toHide = active.next(), eventData = {
                oldHeader: active,
                oldPanel: toHide,
                newHeader: collapsing ? $() : clicked,
                newPanel: toShow
            };
            event.preventDefault();
            if ((!clickedIsActive || options.collapsible) && this._trigger("beforeActivate", event, eventData) !== !1) {
                options.active = collapsing ? !1 : this.headers.index(clicked);
                this.active = clickedIsActive ? $() : clicked;
                this._toggle(eventData);
                active.removeClass("ui-accordion-header-active ui-state-active");
                options.icons && active.children(".ui-accordion-header-icon").removeClass(options.icons.activeHeader).addClass(options.icons.header);
                if (!clickedIsActive) {
                    clicked.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top");
                    options.icons && clicked.children(".ui-accordion-header-icon").removeClass(options.icons.header).addClass(options.icons.activeHeader);
                    clicked.next().addClass("ui-accordion-content-active");
                }
            }
        },
        _toggle: function(data) {
            var toShow = data.newPanel, toHide = this.prevShow.length ? this.prevShow : data.oldPanel;
            this.prevShow.add(this.prevHide).stop(!0, !0);
            this.prevShow = toShow;
            this.prevHide = toHide;
            if (this.options.animate) this._animate(toShow, toHide, data); else {
                toHide.hide();
                toShow.show();
                this._toggleComplete(data);
            }
            toHide.attr({
                "aria-hidden": "true"
            });
            toHide.prev().attr("aria-selected", "false");
            toShow.length && toHide.length ? toHide.prev().attr({
                tabIndex: -1,
                "aria-expanded": "false"
            }) : toShow.length && this.headers.filter(function() {
                return 0 === $(this).attr("tabIndex");
            }).attr("tabIndex", -1);
            toShow.attr("aria-hidden", "false").prev().attr({
                "aria-selected": "true",
                tabIndex: 0,
                "aria-expanded": "true"
            });
        },
        _animate: function(toShow, toHide, data) {
            var total, easing, duration, that = this, adjust = 0, down = toShow.length && (!toHide.length || toShow.index() < toHide.index()), animate = this.options.animate || {}, options = down && animate.down || animate, complete = function() {
                that._toggleComplete(data);
            };
            "number" == typeof options && (duration = options);
            "string" == typeof options && (easing = options);
            easing = easing || options.easing || animate.easing;
            duration = duration || options.duration || animate.duration;
            if (!toHide.length) return toShow.animate(this.showProps, duration, easing, complete);
            if (!toShow.length) return toHide.animate(this.hideProps, duration, easing, complete);
            total = toShow.show().outerHeight();
            toHide.animate(this.hideProps, {
                duration: duration,
                easing: easing,
                step: function(now, fx) {
                    fx.now = Math.round(now);
                }
            });
            toShow.hide().animate(this.showProps, {
                duration: duration,
                easing: easing,
                complete: complete,
                step: function(now, fx) {
                    fx.now = Math.round(now);
                    if ("height" !== fx.prop) adjust += fx.now; else if ("content" !== that.options.heightStyle) {
                        fx.now = Math.round(total - toHide.outerHeight() - adjust);
                        adjust = 0;
                    }
                }
            });
        },
        _toggleComplete: function(data) {
            var toHide = data.oldPanel;
            toHide.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all");
            toHide.length && (toHide.parent()[0].className = toHide.parent()[0].className);
            this._trigger("activate", null, data);
        }
    }), $.widget("ui.menu", {
        version: "1.11.1",
        defaultElement: "<ul>",
        delay: 300,
        options: {
            icons: {
                submenu: "ui-icon-carat-1-e"
            },
            items: "> *",
            menus: "ul",
            position: {
                my: "left-1 top",
                at: "right top"
            },
            role: "menu",
            blur: null,
            focus: null,
            select: null
        },
        _create: function() {
            this.activeMenu = this.element;
            this.mouseHandled = !1;
            this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content").toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length).attr({
                role: this.options.role,
                tabIndex: 0
            });
            this.options.disabled && this.element.addClass("ui-state-disabled").attr("aria-disabled", "true");
            this._on({
                "mousedown .ui-menu-item": function(event) {
                    event.preventDefault();
                },
                "click .ui-menu-item": function(event) {
                    var target = $(event.target);
                    if (!this.mouseHandled && target.not(".ui-state-disabled").length) {
                        this.select(event);
                        event.isPropagationStopped() || (this.mouseHandled = !0);
                        if (target.has(".ui-menu").length) this.expand(event); else if (!this.element.is(":focus") && $(this.document[0].activeElement).closest(".ui-menu").length) {
                            this.element.trigger("focus", [ !0 ]);
                            this.active && 1 === this.active.parents(".ui-menu").length && clearTimeout(this.timer);
                        }
                    }
                },
                "mouseenter .ui-menu-item": function(event) {
                    var target = $(event.currentTarget);
                    target.siblings(".ui-state-active").removeClass("ui-state-active");
                    this.focus(event, target);
                },
                mouseleave: "collapseAll",
                "mouseleave .ui-menu": "collapseAll",
                focus: function(event, keepActiveItem) {
                    var item = this.active || this.element.find(this.options.items).eq(0);
                    keepActiveItem || this.focus(event, item);
                },
                blur: function(event) {
                    this._delay(function() {
                        $.contains(this.element[0], this.document[0].activeElement) || this.collapseAll(event);
                    });
                },
                keydown: "_keydown"
            });
            this.refresh();
            this._on(this.document, {
                click: function(event) {
                    this._closeOnDocumentClick(event) && this.collapseAll(event);
                    this.mouseHandled = !1;
                }
            });
        },
        _destroy: function() {
            this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeClass("ui-menu ui-widget ui-widget-content ui-menu-icons ui-front").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show();
            this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").removeUniqueId().removeClass("ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function() {
                var elem = $(this);
                elem.data("ui-menu-submenu-carat") && elem.remove();
            });
            this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content");
        },
        _keydown: function(event) {
            function escape(value) {
                return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
            }
            var match, prev, character, skip, regex, preventDefault = !0;
            switch (event.keyCode) {
              case $.ui.keyCode.PAGE_UP:
                this.previousPage(event);
                break;

              case $.ui.keyCode.PAGE_DOWN:
                this.nextPage(event);
                break;

              case $.ui.keyCode.HOME:
                this._move("first", "first", event);
                break;

              case $.ui.keyCode.END:
                this._move("last", "last", event);
                break;

              case $.ui.keyCode.UP:
                this.previous(event);
                break;

              case $.ui.keyCode.DOWN:
                this.next(event);
                break;

              case $.ui.keyCode.LEFT:
                this.collapse(event);
                break;

              case $.ui.keyCode.RIGHT:
                this.active && !this.active.is(".ui-state-disabled") && this.expand(event);
                break;

              case $.ui.keyCode.ENTER:
              case $.ui.keyCode.SPACE:
                this._activate(event);
                break;

              case $.ui.keyCode.ESCAPE:
                this.collapse(event);
                break;

              default:
                preventDefault = !1;
                prev = this.previousFilter || "";
                character = String.fromCharCode(event.keyCode);
                skip = !1;
                clearTimeout(this.filterTimer);
                character === prev ? skip = !0 : character = prev + character;
                regex = new RegExp("^" + escape(character), "i");
                match = this.activeMenu.find(this.options.items).filter(function() {
                    return regex.test($(this).text());
                });
                match = skip && -1 !== match.index(this.active.next()) ? this.active.nextAll(".ui-menu-item") : match;
                if (!match.length) {
                    character = String.fromCharCode(event.keyCode);
                    regex = new RegExp("^" + escape(character), "i");
                    match = this.activeMenu.find(this.options.items).filter(function() {
                        return regex.test($(this).text());
                    });
                }
                if (match.length) {
                    this.focus(event, match);
                    if (match.length > 1) {
                        this.previousFilter = character;
                        this.filterTimer = this._delay(function() {
                            delete this.previousFilter;
                        }, 1e3);
                    } else delete this.previousFilter;
                } else delete this.previousFilter;
            }
            preventDefault && event.preventDefault();
        },
        _activate: function(event) {
            this.active.is(".ui-state-disabled") || (this.active.is("[aria-haspopup='true']") ? this.expand(event) : this.select(event));
        },
        refresh: function() {
            var menus, items, that = this, icon = this.options.icons.submenu, submenus = this.element.find(this.options.menus);
            this.element.toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length);
            submenus.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-front").hide().attr({
                role: this.options.role,
                "aria-hidden": "true",
                "aria-expanded": "false"
            }).each(function() {
                var menu = $(this), item = menu.parent(), submenuCarat = $("<span>").addClass("ui-menu-icon ui-icon " + icon).data("ui-menu-submenu-carat", !0);
                item.attr("aria-haspopup", "true").prepend(submenuCarat);
                menu.attr("aria-labelledby", item.attr("id"));
            });
            menus = submenus.add(this.element);
            items = menus.find(this.options.items);
            items.not(".ui-menu-item").each(function() {
                var item = $(this);
                that._isDivider(item) && item.addClass("ui-widget-content ui-menu-divider");
            });
            items.not(".ui-menu-item, .ui-menu-divider").addClass("ui-menu-item").uniqueId().attr({
                tabIndex: -1,
                role: this._itemRole()
            });
            items.filter(".ui-state-disabled").attr("aria-disabled", "true");
            this.active && !$.contains(this.element[0], this.active[0]) && this.blur();
        },
        _itemRole: function() {
            return {
                menu: "menuitem",
                listbox: "option"
            }[this.options.role];
        },
        _setOption: function(key, value) {
            "icons" === key && this.element.find(".ui-menu-icon").removeClass(this.options.icons.submenu).addClass(value.submenu);
            "disabled" === key && this.element.toggleClass("ui-state-disabled", !!value).attr("aria-disabled", value);
            this._super(key, value);
        },
        focus: function(event, item) {
            var nested, focused;
            this.blur(event, event && "focus" === event.type);
            this._scrollIntoView(item);
            this.active = item.first();
            focused = this.active.addClass("ui-state-focus").removeClass("ui-state-active");
            this.options.role && this.element.attr("aria-activedescendant", focused.attr("id"));
            this.active.parent().closest(".ui-menu-item").addClass("ui-state-active");
            event && "keydown" === event.type ? this._close() : this.timer = this._delay(function() {
                this._close();
            }, this.delay);
            nested = item.children(".ui-menu");
            nested.length && event && /^mouse/.test(event.type) && this._startOpening(nested);
            this.activeMenu = item.parent();
            this._trigger("focus", event, {
                item: item
            });
        },
        _scrollIntoView: function(item) {
            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
            if (this._hasScroll()) {
                borderTop = parseFloat($.css(this.activeMenu[0], "borderTopWidth")) || 0;
                paddingTop = parseFloat($.css(this.activeMenu[0], "paddingTop")) || 0;
                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
                scroll = this.activeMenu.scrollTop();
                elementHeight = this.activeMenu.height();
                itemHeight = item.outerHeight();
                0 > offset ? this.activeMenu.scrollTop(scroll + offset) : offset + itemHeight > elementHeight && this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);
            }
        },
        blur: function(event, fromFocus) {
            fromFocus || clearTimeout(this.timer);
            if (this.active) {
                this.active.removeClass("ui-state-focus");
                this.active = null;
                this._trigger("blur", event, {
                    item: this.active
                });
            }
        },
        _startOpening: function(submenu) {
            clearTimeout(this.timer);
            "true" === submenu.attr("aria-hidden") && (this.timer = this._delay(function() {
                this._close();
                this._open(submenu);
            }, this.delay));
        },
        _open: function(submenu) {
            var position = $.extend({
                of: this.active
            }, this.options.position);
            clearTimeout(this.timer);
            this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden", "true");
            submenu.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(position);
        },
        collapseAll: function(event, all) {
            clearTimeout(this.timer);
            this.timer = this._delay(function() {
                var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(".ui-menu"));
                currentMenu.length || (currentMenu = this.element);
                this._close(currentMenu);
                this.blur(event);
                this.activeMenu = currentMenu;
            }, this.delay);
        },
        _close: function(startMenu) {
            startMenu || (startMenu = this.active ? this.active.parent() : this.element);
            startMenu.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false").end().find(".ui-state-active").not(".ui-state-focus").removeClass("ui-state-active");
        },
        _closeOnDocumentClick: function(event) {
            return !$(event.target).closest(".ui-menu").length;
        },
        _isDivider: function(item) {
            return !/[^\-\u2014\u2013\s]/.test(item.text());
        },
        collapse: function(event) {
            var newItem = this.active && this.active.parent().closest(".ui-menu-item", this.element);
            if (newItem && newItem.length) {
                this._close();
                this.focus(event, newItem);
            }
        },
        expand: function(event) {
            var newItem = this.active && this.active.children(".ui-menu ").find(this.options.items).first();
            if (newItem && newItem.length) {
                this._open(newItem.parent());
                this._delay(function() {
                    this.focus(event, newItem);
                });
            }
        },
        next: function(event) {
            this._move("next", "first", event);
        },
        previous: function(event) {
            this._move("prev", "last", event);
        },
        isFirstItem: function() {
            return this.active && !this.active.prevAll(".ui-menu-item").length;
        },
        isLastItem: function() {
            return this.active && !this.active.nextAll(".ui-menu-item").length;
        },
        _move: function(direction, filter, event) {
            var next;
            this.active && (next = "first" === direction || "last" === direction ? this.active["first" === direction ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1) : this.active[direction + "All"](".ui-menu-item").eq(0));
            next && next.length && this.active || (next = this.activeMenu.find(this.options.items)[filter]());
            this.focus(event, next);
        },
        nextPage: function(event) {
            var item, base, height;
            if (this.active) {
                if (!this.isLastItem()) if (this._hasScroll()) {
                    base = this.active.offset().top;
                    height = this.element.height();
                    this.active.nextAll(".ui-menu-item").each(function() {
                        item = $(this);
                        return item.offset().top - base - height < 0;
                    });
                    this.focus(event, item);
                } else this.focus(event, this.activeMenu.find(this.options.items)[this.active ? "last" : "first"]());
            } else this.next(event);
        },
        previousPage: function(event) {
            var item, base, height;
            if (this.active) {
                if (!this.isFirstItem()) if (this._hasScroll()) {
                    base = this.active.offset().top;
                    height = this.element.height();
                    this.active.prevAll(".ui-menu-item").each(function() {
                        item = $(this);
                        return item.offset().top - base + height > 0;
                    });
                    this.focus(event, item);
                } else this.focus(event, this.activeMenu.find(this.options.items).first());
            } else this.next(event);
        },
        _hasScroll: function() {
            return this.element.outerHeight() < this.element.prop("scrollHeight");
        },
        select: function(event) {
            this.active = this.active || $(event.target).closest(".ui-menu-item");
            var ui = {
                item: this.active
            };
            this.active.has(".ui-menu").length || this.collapseAll(event, !0);
            this._trigger("select", event, ui);
        }
    });
    $.widget("ui.autocomplete", {
        version: "1.11.1",
        defaultElement: "<input>",
        options: {
            appendTo: null,
            autoFocus: !1,
            delay: 300,
            minLength: 1,
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            source: null,
            change: null,
            close: null,
            focus: null,
            open: null,
            response: null,
            search: null,
            select: null
        },
        requestIndex: 0,
        pending: 0,
        _create: function() {
            var suppressKeyPress, suppressKeyPressRepeat, suppressInput, nodeName = this.element[0].nodeName.toLowerCase(), isTextarea = "textarea" === nodeName, isInput = "input" === nodeName;
            this.isMultiLine = isTextarea ? !0 : isInput ? !1 : this.element.prop("isContentEditable");
            this.valueMethod = this.element[isTextarea || isInput ? "val" : "text"];
            this.isNewMenu = !0;
            this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off");
            this._on(this.element, {
                keydown: function(event) {
                    if (this.element.prop("readOnly")) {
                        suppressKeyPress = !0;
                        suppressInput = !0;
                        suppressKeyPressRepeat = !0;
                    } else {
                        suppressKeyPress = !1;
                        suppressInput = !1;
                        suppressKeyPressRepeat = !1;
                        var keyCode = $.ui.keyCode;
                        switch (event.keyCode) {
                          case keyCode.PAGE_UP:
                            suppressKeyPress = !0;
                            this._move("previousPage", event);
                            break;

                          case keyCode.PAGE_DOWN:
                            suppressKeyPress = !0;
                            this._move("nextPage", event);
                            break;

                          case keyCode.UP:
                            suppressKeyPress = !0;
                            this._keyEvent("previous", event);
                            break;

                          case keyCode.DOWN:
                            suppressKeyPress = !0;
                            this._keyEvent("next", event);
                            break;

                          case keyCode.ENTER:
                            if (this.menu.active) {
                                suppressKeyPress = !0;
                                event.preventDefault();
                                this.menu.select(event);
                            }
                            break;

                          case keyCode.TAB:
                            this.menu.active && this.menu.select(event);
                            break;

                          case keyCode.ESCAPE:
                            if (this.menu.element.is(":visible")) {
                                this.isMultiLine || this._value(this.term);
                                this.close(event);
                                event.preventDefault();
                            }
                            break;

                          default:
                            suppressKeyPressRepeat = !0;
                            this._searchTimeout(event);
                        }
                    }
                },
                keypress: function(event) {
                    if (suppressKeyPress) {
                        suppressKeyPress = !1;
                        (!this.isMultiLine || this.menu.element.is(":visible")) && event.preventDefault();
                    } else if (!suppressKeyPressRepeat) {
                        var keyCode = $.ui.keyCode;
                        switch (event.keyCode) {
                          case keyCode.PAGE_UP:
                            this._move("previousPage", event);
                            break;

                          case keyCode.PAGE_DOWN:
                            this._move("nextPage", event);
                            break;

                          case keyCode.UP:
                            this._keyEvent("previous", event);
                            break;

                          case keyCode.DOWN:
                            this._keyEvent("next", event);
                        }
                    }
                },
                input: function(event) {
                    if (suppressInput) {
                        suppressInput = !1;
                        event.preventDefault();
                    } else this._searchTimeout(event);
                },
                focus: function() {
                    this.selectedItem = null;
                    this.previous = this._value();
                },
                blur: function(event) {
                    if (this.cancelBlur) delete this.cancelBlur; else {
                        clearTimeout(this.searching);
                        this.close(event);
                        this._change(event);
                    }
                }
            });
            this._initSource();
            this.menu = $("<ul>").addClass("ui-autocomplete ui-front").appendTo(this._appendTo()).menu({
                role: null
            }).hide().menu("instance");
            this._on(this.menu.element, {
                mousedown: function(event) {
                    event.preventDefault();
                    this.cancelBlur = !0;
                    this._delay(function() {
                        delete this.cancelBlur;
                    });
                    var menuElement = this.menu.element[0];
                    $(event.target).closest(".ui-menu-item").length || this._delay(function() {
                        var that = this;
                        this.document.one("mousedown", function(event) {
                            event.target === that.element[0] || event.target === menuElement || $.contains(menuElement, event.target) || that.close();
                        });
                    });
                },
                menufocus: function(event, ui) {
                    var label, item;
                    if (this.isNewMenu) {
                        this.isNewMenu = !1;
                        if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {
                            this.menu.blur();
                            this.document.one("mousemove", function() {
                                $(event.target).trigger(event.originalEvent);
                            });
                            return;
                        }
                    }
                    item = ui.item.data("ui-autocomplete-item");
                    !1 !== this._trigger("focus", event, {
                        item: item
                    }) && event.originalEvent && /^key/.test(event.originalEvent.type) && this._value(item.value);
                    label = ui.item.attr("aria-label") || item.value;
                    if (label && $.trim(label).length) {
                        this.liveRegion.children().hide();
                        $("<div>").text(label).appendTo(this.liveRegion);
                    }
                },
                menuselect: function(event, ui) {
                    var item = ui.item.data("ui-autocomplete-item"), previous = this.previous;
                    if (this.element[0] !== this.document[0].activeElement) {
                        this.element.focus();
                        this.previous = previous;
                        this._delay(function() {
                            this.previous = previous;
                            this.selectedItem = item;
                        });
                    }
                    !1 !== this._trigger("select", event, {
                        item: item
                    }) && this._value(item.value);
                    this.term = this._value();
                    this.close(event);
                    this.selectedItem = item;
                }
            });
            this.liveRegion = $("<span>", {
                role: "status",
                "aria-live": "assertive",
                "aria-relevant": "additions"
            }).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body);
            this._on(this.window, {
                beforeunload: function() {
                    this.element.removeAttr("autocomplete");
                }
            });
        },
        _destroy: function() {
            clearTimeout(this.searching);
            this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete");
            this.menu.element.remove();
            this.liveRegion.remove();
        },
        _setOption: function(key, value) {
            this._super(key, value);
            "source" === key && this._initSource();
            "appendTo" === key && this.menu.element.appendTo(this._appendTo());
            "disabled" === key && value && this.xhr && this.xhr.abort();
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            element && (element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0));
            element && element[0] || (element = this.element.closest(".ui-front"));
            element.length || (element = this.document[0].body);
            return element;
        },
        _initSource: function() {
            var array, url, that = this;
            if ($.isArray(this.options.source)) {
                array = this.options.source;
                this.source = function(request, response) {
                    response($.ui.autocomplete.filter(array, request.term));
                };
            } else if ("string" == typeof this.options.source) {
                url = this.options.source;
                this.source = function(request, response) {
                    that.xhr && that.xhr.abort();
                    that.xhr = $.ajax({
                        url: url,
                        data: request,
                        dataType: "json",
                        success: function(data) {
                            response(data);
                        },
                        error: function() {
                            response([]);
                        }
                    });
                };
            } else this.source = this.options.source;
        },
        _searchTimeout: function(event) {
            clearTimeout(this.searching);
            this.searching = this._delay(function() {
                var equalValues = this.term === this._value(), menuVisible = this.menu.element.is(":visible"), modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;
                if (!equalValues || equalValues && !menuVisible && !modifierKey) {
                    this.selectedItem = null;
                    this.search(null, event);
                }
            }, this.options.delay);
        },
        search: function(value, event) {
            value = null != value ? value : this._value();
            this.term = this._value();
            return value.length < this.options.minLength ? this.close(event) : this._trigger("search", event) !== !1 ? this._search(value) : void 0;
        },
        _search: function(value) {
            this.pending++;
            this.element.addClass("ui-autocomplete-loading");
            this.cancelSearch = !1;
            this.source({
                term: value
            }, this._response());
        },
        _response: function() {
            var index = ++this.requestIndex;
            return $.proxy(function(content) {
                index === this.requestIndex && this.__response(content);
                this.pending--;
                this.pending || this.element.removeClass("ui-autocomplete-loading");
            }, this);
        },
        __response: function(content) {
            content && (content = this._normalize(content));
            this._trigger("response", null, {
                content: content
            });
            if (!this.options.disabled && content && content.length && !this.cancelSearch) {
                this._suggest(content);
                this._trigger("open");
            } else this._close();
        },
        close: function(event) {
            this.cancelSearch = !0;
            this._close(event);
        },
        _close: function(event) {
            if (this.menu.element.is(":visible")) {
                this.menu.element.hide();
                this.menu.blur();
                this.isNewMenu = !0;
                this._trigger("close", event);
            }
        },
        _change: function(event) {
            this.previous !== this._value() && this._trigger("change", event, {
                item: this.selectedItem
            });
        },
        _normalize: function(items) {
            return items.length && items[0].label && items[0].value ? items : $.map(items, function(item) {
                return "string" == typeof item ? {
                    label: item,
                    value: item
                } : $.extend({}, item, {
                    label: item.label || item.value,
                    value: item.value || item.label
                });
            });
        },
        _suggest: function(items) {
            var ul = this.menu.element.empty();
            this._renderMenu(ul, items);
            this.isNewMenu = !0;
            this.menu.refresh();
            ul.show();
            this._resizeMenu();
            ul.position($.extend({
                of: this.element
            }, this.options.position));
            this.options.autoFocus && this.menu.next();
        },
        _resizeMenu: function() {
            var ul = this.menu.element;
            ul.outerWidth(Math.max(ul.width("").outerWidth() + 1, this.element.outerWidth()));
        },
        _renderMenu: function(ul, items) {
            var that = this;
            $.each(items, function(index, item) {
                that._renderItemData(ul, item);
            });
        },
        _renderItemData: function(ul, item) {
            return this._renderItem(ul, item).data("ui-autocomplete-item", item);
        },
        _renderItem: function(ul, item) {
            return $("<li>").text(item.label).appendTo(ul);
        },
        _move: function(direction, event) {
            if (this.menu.element.is(":visible")) if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {
                this.isMultiLine || this._value(this.term);
                this.menu.blur();
            } else this.menu[direction](event); else this.search(null, event);
        },
        widget: function() {
            return this.menu.element;
        },
        _value: function() {
            return this.valueMethod.apply(this.element, arguments);
        },
        _keyEvent: function(keyEvent, event) {
            if (!this.isMultiLine || this.menu.element.is(":visible")) {
                this._move(keyEvent, event);
                event.preventDefault();
            }
        }
    });
    $.extend($.ui.autocomplete, {
        escapeRegex: function(value) {
            return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
        },
        filter: function(array, term) {
            var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");
            return $.grep(array, function(value) {
                return matcher.test(value.label || value.value || value);
            });
        }
    });
    $.widget("ui.autocomplete", $.ui.autocomplete, {
        options: {
            messages: {
                noResults: "No search results.",
                results: function(amount) {
                    return amount + (amount > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate.";
                }
            }
        },
        __response: function(content) {
            var message;
            this._superApply(arguments);
            if (!this.options.disabled && !this.cancelSearch) {
                message = content && content.length ? this.options.messages.results(content.length) : this.options.messages.noResults;
                this.liveRegion.children().hide();
                $("<div>").text(message).appendTo(this.liveRegion);
            }
        }
    });
    var lastActive, baseClasses = ($.ui.autocomplete, "ui-button ui-widget ui-state-default ui-corner-all"), typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only", formResetHandler = function() {
        var form = $(this);
        setTimeout(function() {
            form.find(":ui-button").button("refresh");
        }, 1);
    }, radioGroup = function(radio) {
        var name = radio.name, form = radio.form, radios = $([]);
        if (name) {
            name = name.replace(/'/g, "\\'");
            radios = form ? $(form).find("[name='" + name + "'][type=radio]") : $("[name='" + name + "'][type=radio]", radio.ownerDocument).filter(function() {
                return !this.form;
            });
        }
        return radios;
    };
    $.widget("ui.button", {
        version: "1.11.1",
        defaultElement: "<button>",
        options: {
            disabled: null,
            text: !0,
            label: null,
            icons: {
                primary: null,
                secondary: null
            }
        },
        _create: function() {
            this.element.closest("form").unbind("reset" + this.eventNamespace).bind("reset" + this.eventNamespace, formResetHandler);
            "boolean" != typeof this.options.disabled ? this.options.disabled = !!this.element.prop("disabled") : this.element.prop("disabled", this.options.disabled);
            this._determineButtonType();
            this.hasTitle = !!this.buttonElement.attr("title");
            var that = this, options = this.options, toggleButton = "checkbox" === this.type || "radio" === this.type, activeClass = toggleButton ? "" : "ui-state-active";
            null === options.label && (options.label = "input" === this.type ? this.buttonElement.val() : this.buttonElement.html());
            this._hoverable(this.buttonElement);
            this.buttonElement.addClass(baseClasses).attr("role", "button").bind("mouseenter" + this.eventNamespace, function() {
                options.disabled || this === lastActive && $(this).addClass("ui-state-active");
            }).bind("mouseleave" + this.eventNamespace, function() {
                options.disabled || $(this).removeClass(activeClass);
            }).bind("click" + this.eventNamespace, function(event) {
                if (options.disabled) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            });
            this._on({
                focus: function() {
                    this.buttonElement.addClass("ui-state-focus");
                },
                blur: function() {
                    this.buttonElement.removeClass("ui-state-focus");
                }
            });
            toggleButton && this.element.bind("change" + this.eventNamespace, function() {
                that.refresh();
            });
            if ("checkbox" === this.type) this.buttonElement.bind("click" + this.eventNamespace, function() {
                return options.disabled ? !1 : void 0;
            }); else if ("radio" === this.type) this.buttonElement.bind("click" + this.eventNamespace, function() {
                if (options.disabled) return !1;
                $(this).addClass("ui-state-active");
                that.buttonElement.attr("aria-pressed", "true");
                var radio = that.element[0];
                radioGroup(radio).not(radio).map(function() {
                    return $(this).button("widget")[0];
                }).removeClass("ui-state-active").attr("aria-pressed", "false");
            }); else {
                this.buttonElement.bind("mousedown" + this.eventNamespace, function() {
                    if (options.disabled) return !1;
                    $(this).addClass("ui-state-active");
                    lastActive = this;
                    that.document.one("mouseup", function() {
                        lastActive = null;
                    });
                }).bind("mouseup" + this.eventNamespace, function() {
                    if (options.disabled) return !1;
                    $(this).removeClass("ui-state-active");
                }).bind("keydown" + this.eventNamespace, function(event) {
                    if (options.disabled) return !1;
                    (event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) && $(this).addClass("ui-state-active");
                }).bind("keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
                    $(this).removeClass("ui-state-active");
                });
                this.buttonElement.is("a") && this.buttonElement.keyup(function(event) {
                    event.keyCode === $.ui.keyCode.SPACE && $(this).click();
                });
            }
            this._setOption("disabled", options.disabled);
            this._resetButton();
        },
        _determineButtonType: function() {
            var ancestor, labelSelector, checked;
            this.element.is("[type=checkbox]") ? this.type = "checkbox" : this.element.is("[type=radio]") ? this.type = "radio" : this.element.is("input") ? this.type = "input" : this.type = "button";
            if ("checkbox" === this.type || "radio" === this.type) {
                ancestor = this.element.parents().last();
                labelSelector = "label[for='" + this.element.attr("id") + "']";
                this.buttonElement = ancestor.find(labelSelector);
                if (!this.buttonElement.length) {
                    ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
                    this.buttonElement = ancestor.filter(labelSelector);
                    this.buttonElement.length || (this.buttonElement = ancestor.find(labelSelector));
                }
                this.element.addClass("ui-helper-hidden-accessible");
                checked = this.element.is(":checked");
                checked && this.buttonElement.addClass("ui-state-active");
                this.buttonElement.prop("aria-pressed", checked);
            } else this.buttonElement = this.element;
        },
        widget: function() {
            return this.buttonElement;
        },
        _destroy: function() {
            this.element.removeClass("ui-helper-hidden-accessible");
            this.buttonElement.removeClass(baseClasses + " ui-state-active " + typeClasses).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
            this.hasTitle || this.buttonElement.removeAttr("title");
        },
        _setOption: function(key, value) {
            this._super(key, value);
            if ("disabled" !== key) this._resetButton(); else {
                this.widget().toggleClass("ui-state-disabled", !!value);
                this.element.prop("disabled", !!value);
                value && ("checkbox" === this.type || "radio" === this.type ? this.buttonElement.removeClass("ui-state-focus") : this.buttonElement.removeClass("ui-state-focus ui-state-active"));
            }
        },
        refresh: function() {
            var isDisabled = this.element.is("input, button") ? this.element.is(":disabled") : this.element.hasClass("ui-button-disabled");
            isDisabled !== this.options.disabled && this._setOption("disabled", isDisabled);
            "radio" === this.type ? radioGroup(this.element[0]).each(function() {
                $(this).is(":checked") ? $(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true") : $(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false");
            }) : "checkbox" === this.type && (this.element.is(":checked") ? this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true") : this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false"));
        },
        _resetButton: function() {
            if ("input" !== this.type) {
                var buttonElement = this.buttonElement.removeClass(typeClasses), buttonText = $("<span></span>", this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(buttonElement.empty()).text(), icons = this.options.icons, multipleIcons = icons.primary && icons.secondary, buttonClasses = [];
                if (icons.primary || icons.secondary) {
                    this.options.text && buttonClasses.push("ui-button-text-icon" + (multipleIcons ? "s" : icons.primary ? "-primary" : "-secondary"));
                    icons.primary && buttonElement.prepend("<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>");
                    icons.secondary && buttonElement.append("<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>");
                    if (!this.options.text) {
                        buttonClasses.push(multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only");
                        this.hasTitle || buttonElement.attr("title", $.trim(buttonText));
                    }
                } else buttonClasses.push("ui-button-text-only");
                buttonElement.addClass(buttonClasses.join(" "));
            } else this.options.label && this.element.val(this.options.label);
        }
    });
    $.widget("ui.buttonset", {
        version: "1.11.1",
        options: {
            items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
        },
        _create: function() {
            this.element.addClass("ui-buttonset");
        },
        _init: function() {
            this.refresh();
        },
        _setOption: function(key, value) {
            "disabled" === key && this.buttons.button("option", key, value);
            this._super(key, value);
        },
        refresh: function() {
            var rtl = "rtl" === this.element.css("direction"), allButtons = this.element.find(this.options.items), existingButtons = allButtons.filter(":ui-button");
            allButtons.not(":ui-button").button();
            existingButtons.button("refresh");
            this.buttons = allButtons.map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(rtl ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(rtl ? "ui-corner-left" : "ui-corner-right").end().end();
        },
        _destroy: function() {
            this.element.removeClass("ui-buttonset");
            this.buttons.map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
        }
    });
    $.ui.button;
    $.extend($.ui, {
        datepicker: {
            version: "1.11.1"
        }
    });
    var datepicker_instActive;
    $.extend(Datepicker.prototype, {
        markerClassName: "hasDatepicker",
        maxRows: 4,
        _widgetDatepicker: function() {
            return this.dpDiv;
        },
        setDefaults: function(settings) {
            datepicker_extendRemove(this._defaults, settings || {});
            return this;
        },
        _attachDatepicker: function(target, settings) {
            var nodeName, inline, inst;
            nodeName = target.nodeName.toLowerCase();
            inline = "div" === nodeName || "span" === nodeName;
            if (!target.id) {
                this.uuid += 1;
                target.id = "dp" + this.uuid;
            }
            inst = this._newInst($(target), inline);
            inst.settings = $.extend({}, settings || {});
            "input" === nodeName ? this._connectDatepicker(target, inst) : inline && this._inlineDatepicker(target, inst);
        },
        _newInst: function(target, inline) {
            var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
            return {
                id: id,
                input: target,
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0,
                drawMonth: 0,
                drawYear: 0,
                inline: inline,
                dpDiv: inline ? datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) : this.dpDiv
            };
        },
        _connectDatepicker: function(target, inst) {
            var input = $(target);
            inst.append = $([]);
            inst.trigger = $([]);
            if (!input.hasClass(this.markerClassName)) {
                this._attachments(input, inst);
                input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp);
                this._autoSize(inst);
                $.data(target, "datepicker", inst);
                inst.settings.disabled && this._disableDatepicker(target);
            }
        },
        _attachments: function(input, inst) {
            var showOn, buttonText, buttonImage, appendText = this._get(inst, "appendText"), isRTL = this._get(inst, "isRTL");
            inst.append && inst.append.remove();
            if (appendText) {
                inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
                input[isRTL ? "before" : "after"](inst.append);
            }
            input.unbind("focus", this._showDatepicker);
            inst.trigger && inst.trigger.remove();
            showOn = this._get(inst, "showOn");
            ("focus" === showOn || "both" === showOn) && input.focus(this._showDatepicker);
            if ("button" === showOn || "both" === showOn) {
                buttonText = this._get(inst, "buttonText");
                buttonImage = this._get(inst, "buttonImage");
                inst.trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                }) : $("<button type='button'></button>").addClass(this._triggerClass).html(buttonImage ? $("<img/>").attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                }) : buttonText));
                input[isRTL ? "before" : "after"](inst.trigger);
                inst.trigger.click(function() {
                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) $.datepicker._hideDatepicker(); else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
                        $.datepicker._hideDatepicker();
                        $.datepicker._showDatepicker(input[0]);
                    } else $.datepicker._showDatepicker(input[0]);
                    return !1;
                });
            }
        },
        _autoSize: function(inst) {
            if (this._get(inst, "autoSize") && !inst.inline) {
                var findMax, max, maxI, i, date = new Date(2009, 11, 20), dateFormat = this._get(inst, "dateFormat");
                if (dateFormat.match(/[DM]/)) {
                    findMax = function(names) {
                        max = 0;
                        maxI = 0;
                        for (i = 0; i < names.length; i++) if (names[i].length > max) {
                            max = names[i].length;
                            maxI = i;
                        }
                        return maxI;
                    };
                    date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort")));
                    date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - date.getDay());
                }
                inst.input.attr("size", this._formatDate(inst, date).length);
            }
        },
        _inlineDatepicker: function(target, inst) {
            var divSpan = $(target);
            if (!divSpan.hasClass(this.markerClassName)) {
                divSpan.addClass(this.markerClassName).append(inst.dpDiv);
                $.data(target, "datepicker", inst);
                this._setDate(inst, this._getDefaultDate(inst), !0);
                this._updateDatepicker(inst);
                this._updateAlternate(inst);
                inst.settings.disabled && this._disableDatepicker(target);
                inst.dpDiv.css("display", "block");
            }
        },
        _dialogDatepicker: function(input, date, onSelect, settings, pos) {
            var id, browserWidth, browserHeight, scrollX, scrollY, inst = this._dialogInst;
            if (!inst) {
                this.uuid += 1;
                id = "dp" + this.uuid;
                this._dialogInput = $("<input type='text' id='" + id + "' style='position: absolute; top: -100px; width: 0px;'/>");
                this._dialogInput.keydown(this._doKeyDown);
                $("body").append(this._dialogInput);
                inst = this._dialogInst = this._newInst(this._dialogInput, !1);
                inst.settings = {};
                $.data(this._dialogInput[0], "datepicker", inst);
            }
            datepicker_extendRemove(inst.settings, settings || {});
            date = date && date.constructor === Date ? this._formatDate(inst, date) : date;
            this._dialogInput.val(date);
            this._pos = pos ? pos.length ? pos : [ pos.pageX, pos.pageY ] : null;
            if (!this._pos) {
                browserWidth = document.documentElement.clientWidth;
                browserHeight = document.documentElement.clientHeight;
                scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = [ browserWidth / 2 - 100 + scrollX, browserHeight / 2 - 150 + scrollY ];
            }
            this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px");
            inst.settings.onSelect = onSelect;
            this._inDialog = !0;
            this.dpDiv.addClass(this._dialogClass);
            this._showDatepicker(this._dialogInput[0]);
            $.blockUI && $.blockUI(this.dpDiv);
            $.data(this._dialogInput[0], "datepicker", inst);
            return this;
        },
        _destroyDatepicker: function(target) {
            var nodeName, $target = $(target), inst = $.data(target, "datepicker");
            if ($target.hasClass(this.markerClassName)) {
                nodeName = target.nodeName.toLowerCase();
                $.removeData(target, "datepicker");
                if ("input" === nodeName) {
                    inst.append.remove();
                    inst.trigger.remove();
                    $target.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp);
                } else ("div" === nodeName || "span" === nodeName) && $target.removeClass(this.markerClassName).empty();
            }
        },
        _enableDatepicker: function(target) {
            var nodeName, inline, $target = $(target), inst = $.data(target, "datepicker");
            if ($target.hasClass(this.markerClassName)) {
                nodeName = target.nodeName.toLowerCase();
                if ("input" === nodeName) {
                    target.disabled = !1;
                    inst.trigger.filter("button").each(function() {
                        this.disabled = !1;
                    }).end().filter("img").css({
                        opacity: "1.0",
                        cursor: ""
                    });
                } else if ("div" === nodeName || "span" === nodeName) {
                    inline = $target.children("." + this._inlineClass);
                    inline.children().removeClass("ui-state-disabled");
                    inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !1);
                }
                this._disabledInputs = $.map(this._disabledInputs, function(value) {
                    return value === target ? null : value;
                });
            }
        },
        _disableDatepicker: function(target) {
            var nodeName, inline, $target = $(target), inst = $.data(target, "datepicker");
            if ($target.hasClass(this.markerClassName)) {
                nodeName = target.nodeName.toLowerCase();
                if ("input" === nodeName) {
                    target.disabled = !0;
                    inst.trigger.filter("button").each(function() {
                        this.disabled = !0;
                    }).end().filter("img").css({
                        opacity: "0.5",
                        cursor: "default"
                    });
                } else if ("div" === nodeName || "span" === nodeName) {
                    inline = $target.children("." + this._inlineClass);
                    inline.children().addClass("ui-state-disabled");
                    inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !0);
                }
                this._disabledInputs = $.map(this._disabledInputs, function(value) {
                    return value === target ? null : value;
                });
                this._disabledInputs[this._disabledInputs.length] = target;
            }
        },
        _isDisabledDatepicker: function(target) {
            if (!target) return !1;
            for (var i = 0; i < this._disabledInputs.length; i++) if (this._disabledInputs[i] === target) return !0;
            return !1;
        },
        _getInst: function(target) {
            try {
                return $.data(target, "datepicker");
            } catch (err) {
                throw "Missing instance data for this datepicker";
            }
        },
        _optionDatepicker: function(target, name, value) {
            var settings, date, minDate, maxDate, inst = this._getInst(target);
            if (2 === arguments.length && "string" == typeof name) return "defaults" === name ? $.extend({}, $.datepicker._defaults) : inst ? "all" === name ? $.extend({}, inst.settings) : this._get(inst, name) : null;
            settings = name || {};
            if ("string" == typeof name) {
                settings = {};
                settings[name] = value;
            }
            if (inst) {
                this._curInst === inst && this._hideDatepicker();
                date = this._getDateDatepicker(target, !0);
                minDate = this._getMinMaxDate(inst, "min");
                maxDate = this._getMinMaxDate(inst, "max");
                datepicker_extendRemove(inst.settings, settings);
                null !== minDate && void 0 !== settings.dateFormat && void 0 === settings.minDate && (inst.settings.minDate = this._formatDate(inst, minDate));
                null !== maxDate && void 0 !== settings.dateFormat && void 0 === settings.maxDate && (inst.settings.maxDate = this._formatDate(inst, maxDate));
                "disabled" in settings && (settings.disabled ? this._disableDatepicker(target) : this._enableDatepicker(target));
                this._attachments($(target), inst);
                this._autoSize(inst);
                this._setDate(inst, date);
                this._updateAlternate(inst);
                this._updateDatepicker(inst);
            }
        },
        _changeDatepicker: function(target, name, value) {
            this._optionDatepicker(target, name, value);
        },
        _refreshDatepicker: function(target) {
            var inst = this._getInst(target);
            inst && this._updateDatepicker(inst);
        },
        _setDateDatepicker: function(target, date) {
            var inst = this._getInst(target);
            if (inst) {
                this._setDate(inst, date);
                this._updateDatepicker(inst);
                this._updateAlternate(inst);
            }
        },
        _getDateDatepicker: function(target, noDefault) {
            var inst = this._getInst(target);
            inst && !inst.inline && this._setDateFromField(inst, noDefault);
            return inst ? this._getDate(inst) : null;
        },
        _doKeyDown: function(event) {
            var onSelect, dateStr, sel, inst = $.datepicker._getInst(event.target), handled = !0, isRTL = inst.dpDiv.is(".ui-datepicker-rtl");
            inst._keyEvent = !0;
            if ($.datepicker._datepickerShowing) switch (event.keyCode) {
              case 9:
                $.datepicker._hideDatepicker();
                handled = !1;
                break;

              case 13:
                sel = $("td." + $.datepicker._dayOverClass + ":not(." + $.datepicker._currentClass + ")", inst.dpDiv);
                sel[0] && $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
                onSelect = $.datepicker._get(inst, "onSelect");
                if (onSelect) {
                    dateStr = $.datepicker._formatDate(inst);
                    onSelect.apply(inst.input ? inst.input[0] : null, [ dateStr, inst ]);
                } else $.datepicker._hideDatepicker();
                return !1;

              case 27:
                $.datepicker._hideDatepicker();
                break;

              case 33:
                $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
                break;

              case 34:
                $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
                break;

              case 35:
                (event.ctrlKey || event.metaKey) && $.datepicker._clearDate(event.target);
                handled = event.ctrlKey || event.metaKey;
                break;

              case 36:
                (event.ctrlKey || event.metaKey) && $.datepicker._gotoToday(event.target);
                handled = event.ctrlKey || event.metaKey;
                break;

              case 37:
                (event.ctrlKey || event.metaKey) && $.datepicker._adjustDate(event.target, isRTL ? 1 : -1, "D");
                handled = event.ctrlKey || event.metaKey;
                event.originalEvent.altKey && $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
                break;

              case 38:
                (event.ctrlKey || event.metaKey) && $.datepicker._adjustDate(event.target, -7, "D");
                handled = event.ctrlKey || event.metaKey;
                break;

              case 39:
                (event.ctrlKey || event.metaKey) && $.datepicker._adjustDate(event.target, isRTL ? -1 : 1, "D");
                handled = event.ctrlKey || event.metaKey;
                event.originalEvent.altKey && $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
                break;

              case 40:
                (event.ctrlKey || event.metaKey) && $.datepicker._adjustDate(event.target, 7, "D");
                handled = event.ctrlKey || event.metaKey;
                break;

              default:
                handled = !1;
            } else 36 === event.keyCode && event.ctrlKey ? $.datepicker._showDatepicker(this) : handled = !1;
            if (handled) {
                event.preventDefault();
                event.stopPropagation();
            }
        },
        _doKeyPress: function(event) {
            var chars, chr, inst = $.datepicker._getInst(event.target);
            if ($.datepicker._get(inst, "constrainInput")) {
                chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
                chr = String.fromCharCode(null == event.charCode ? event.keyCode : event.charCode);
                return event.ctrlKey || event.metaKey || " " > chr || !chars || chars.indexOf(chr) > -1;
            }
        },
        _doKeyUp: function(event) {
            var date, inst = $.datepicker._getInst(event.target);
            if (inst.input.val() !== inst.lastVal) try {
                date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst));
                if (date) {
                    $.datepicker._setDateFromField(inst);
                    $.datepicker._updateAlternate(inst);
                    $.datepicker._updateDatepicker(inst);
                }
            } catch (err) {}
            return !0;
        },
        _showDatepicker: function(input) {
            input = input.target || input;
            "input" !== input.nodeName.toLowerCase() && (input = $("input", input.parentNode)[0]);
            if (!$.datepicker._isDisabledDatepicker(input) && $.datepicker._lastInput !== input) {
                var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;
                inst = $.datepicker._getInst(input);
                if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
                    $.datepicker._curInst.dpDiv.stop(!0, !0);
                    inst && $.datepicker._datepickerShowing && $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);
                }
                beforeShow = $.datepicker._get(inst, "beforeShow");
                beforeShowSettings = beforeShow ? beforeShow.apply(input, [ input, inst ]) : {};
                if (beforeShowSettings !== !1) {
                    datepicker_extendRemove(inst.settings, beforeShowSettings);
                    inst.lastVal = null;
                    $.datepicker._lastInput = input;
                    $.datepicker._setDateFromField(inst);
                    $.datepicker._inDialog && (input.value = "");
                    if (!$.datepicker._pos) {
                        $.datepicker._pos = $.datepicker._findPos(input);
                        $.datepicker._pos[1] += input.offsetHeight;
                    }
                    isFixed = !1;
                    $(input).parents().each(function() {
                        isFixed |= "fixed" === $(this).css("position");
                        return !isFixed;
                    });
                    offset = {
                        left: $.datepicker._pos[0],
                        top: $.datepicker._pos[1]
                    };
                    $.datepicker._pos = null;
                    inst.dpDiv.empty();
                    inst.dpDiv.css({
                        position: "absolute",
                        display: "block",
                        top: "-1000px"
                    });
                    $.datepicker._updateDatepicker(inst);
                    offset = $.datepicker._checkOffset(inst, offset, isFixed);
                    inst.dpDiv.css({
                        position: $.datepicker._inDialog && $.blockUI ? "static" : isFixed ? "fixed" : "absolute",
                        display: "none",
                        left: offset.left + "px",
                        top: offset.top + "px"
                    });
                    if (!inst.inline) {
                        showAnim = $.datepicker._get(inst, "showAnim");
                        duration = $.datepicker._get(inst, "duration");
                        inst.dpDiv.css("z-index", datepicker_getZindex($(input)) + 1);
                        $.datepicker._datepickerShowing = !0;
                        $.effects && $.effects.effect[showAnim] ? inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration) : inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
                        $.datepicker._shouldFocusInput(inst) && inst.input.focus();
                        $.datepicker._curInst = inst;
                    }
                }
            }
        },
        _updateDatepicker: function(inst) {
            this.maxRows = 4;
            datepicker_instActive = inst;
            inst.dpDiv.empty().append(this._generateHTML(inst));
            this._attachHandlers(inst);
            var origyearshtml, numMonths = this._getNumberOfMonths(inst), cols = numMonths[1], width = 17, activeCell = inst.dpDiv.find("." + this._dayOverClass + " a");
            activeCell.length > 0 && datepicker_handleMouseover.apply(activeCell.get(0));
            inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
            cols > 1 && inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", width * cols + "em");
            inst.dpDiv[(1 !== numMonths[0] || 1 !== numMonths[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi");
            inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
            inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst) && inst.input.focus();
            if (inst.yearshtml) {
                origyearshtml = inst.yearshtml;
                setTimeout(function() {
                    origyearshtml === inst.yearshtml && inst.yearshtml && inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
                    origyearshtml = inst.yearshtml = null;
                }, 0);
            }
        },
        _shouldFocusInput: function(inst) {
            return inst.input && inst.input.is(":visible") && !inst.input.is(":disabled") && !inst.input.is(":focus");
        },
        _checkOffset: function(inst, offset, isFixed) {
            var dpWidth = inst.dpDiv.outerWidth(), dpHeight = inst.dpDiv.outerHeight(), inputWidth = inst.input ? inst.input.outerWidth() : 0, inputHeight = inst.input ? inst.input.outerHeight() : 0, viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()), viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());
            offset.left -= this._get(inst, "isRTL") ? dpWidth - inputWidth : 0;
            offset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0;
            offset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0;
            offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
            offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);
            return offset;
        },
        _findPos: function(obj) {
            for (var position, inst = this._getInst(obj), isRTL = this._get(inst, "isRTL"); obj && ("hidden" === obj.type || 1 !== obj.nodeType || $.expr.filters.hidden(obj)); ) obj = obj[isRTL ? "previousSibling" : "nextSibling"];
            position = $(obj).offset();
            return [ position.left, position.top ];
        },
        _hideDatepicker: function(input) {
            var showAnim, duration, postProcess, onClose, inst = this._curInst;
            if (inst && (!input || inst === $.data(input, "datepicker")) && this._datepickerShowing) {
                showAnim = this._get(inst, "showAnim");
                duration = this._get(inst, "duration");
                postProcess = function() {
                    $.datepicker._tidyDialog(inst);
                };
                $.effects && ($.effects.effect[showAnim] || $.effects[showAnim]) ? inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess) : inst.dpDiv["slideDown" === showAnim ? "slideUp" : "fadeIn" === showAnim ? "fadeOut" : "hide"](showAnim ? duration : null, postProcess);
                showAnim || postProcess();
                this._datepickerShowing = !1;
                onClose = this._get(inst, "onClose");
                onClose && onClose.apply(inst.input ? inst.input[0] : null, [ inst.input ? inst.input.val() : "", inst ]);
                this._lastInput = null;
                if (this._inDialog) {
                    this._dialogInput.css({
                        position: "absolute",
                        left: "0",
                        top: "-100px"
                    });
                    if ($.blockUI) {
                        $.unblockUI();
                        $("body").append(this.dpDiv);
                    }
                }
                this._inDialog = !1;
            }
        },
        _tidyDialog: function(inst) {
            inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
        },
        _checkExternalClick: function(event) {
            if ($.datepicker._curInst) {
                var $target = $(event.target), inst = $.datepicker._getInst($target[0]);
                ($target[0].id !== $.datepicker._mainDivId && 0 === $target.parents("#" + $.datepicker._mainDivId).length && !$target.hasClass($.datepicker.markerClassName) && !$target.closest("." + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && (!$.datepicker._inDialog || !$.blockUI) || $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst) && $.datepicker._hideDatepicker();
            }
        },
        _adjustDate: function(id, offset, period) {
            var target = $(id), inst = this._getInst(target[0]);
            if (!this._isDisabledDatepicker(target[0])) {
                this._adjustInstDate(inst, offset + ("M" === period ? this._get(inst, "showCurrentAtPos") : 0), period);
                this._updateDatepicker(inst);
            }
        },
        _gotoToday: function(id) {
            var date, target = $(id), inst = this._getInst(target[0]);
            if (this._get(inst, "gotoCurrent") && inst.currentDay) {
                inst.selectedDay = inst.currentDay;
                inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                inst.drawYear = inst.selectedYear = inst.currentYear;
            } else {
                date = new Date();
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
            }
            this._notifyChange(inst);
            this._adjustDate(target);
        },
        _selectMonthYear: function(id, select, period) {
            var target = $(id), inst = this._getInst(target[0]);
            inst["selected" + ("M" === period ? "Month" : "Year")] = inst["draw" + ("M" === period ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);
            this._notifyChange(inst);
            this._adjustDate(target);
        },
        _selectDay: function(id, month, year, td) {
            var inst, target = $(id);
            if (!$(td).hasClass(this._unselectableClass) && !this._isDisabledDatepicker(target[0])) {
                inst = this._getInst(target[0]);
                inst.selectedDay = inst.currentDay = $("a", td).html();
                inst.selectedMonth = inst.currentMonth = month;
                inst.selectedYear = inst.currentYear = year;
                this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
            }
        },
        _clearDate: function(id) {
            var target = $(id);
            this._selectDate(target, "");
        },
        _selectDate: function(id, dateStr) {
            var onSelect, target = $(id), inst = this._getInst(target[0]);
            dateStr = null != dateStr ? dateStr : this._formatDate(inst);
            inst.input && inst.input.val(dateStr);
            this._updateAlternate(inst);
            onSelect = this._get(inst, "onSelect");
            onSelect ? onSelect.apply(inst.input ? inst.input[0] : null, [ dateStr, inst ]) : inst.input && inst.input.trigger("change");
            if (inst.inline) this._updateDatepicker(inst); else {
                this._hideDatepicker();
                this._lastInput = inst.input[0];
                "object" != typeof inst.input[0] && inst.input.focus();
                this._lastInput = null;
            }
        },
        _updateAlternate: function(inst) {
            var altFormat, date, dateStr, altField = this._get(inst, "altField");
            if (altField) {
                altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
                date = this._getDate(inst);
                dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                $(altField).each(function() {
                    $(this).val(dateStr);
                });
            }
        },
        noWeekends: function(date) {
            var day = date.getDay();
            return [ day > 0 && 6 > day, "" ];
        },
        iso8601Week: function(date) {
            var time, checkDate = new Date(date.getTime());
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
            time = checkDate.getTime();
            checkDate.setMonth(0);
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 864e5) / 7) + 1;
        },
        parseDate: function(format, value, settings) {
            if (null == format || null == value) throw "Invalid arguments";
            value = "object" == typeof value ? value.toString() : value + "";
            if ("" === value) return null;
            var iFormat, dim, extra, date, iValue = 0, shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff, shortYearCutoff = "string" != typeof shortYearCutoffTemp ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10), dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, year = -1, month = -1, day = -1, doy = -1, literal = !1, lookAhead = function(match) {
                var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                matches && iFormat++;
                return matches;
            }, getNumber = function(match) {
                var isDoubled = lookAhead(match), size = "@" === match ? 14 : "!" === match ? 20 : "y" === match && isDoubled ? 4 : "o" === match ? 3 : 2, minSize = "y" === match ? size : 1, digits = new RegExp("^\\d{" + minSize + "," + size + "}"), num = value.substring(iValue).match(digits);
                if (!num) throw "Missing number at position " + iValue;
                iValue += num[0].length;
                return parseInt(num[0], 10);
            }, getName = function(match, shortNames, longNames) {
                var index = -1, names = $.map(lookAhead(match) ? longNames : shortNames, function(v, k) {
                    return [ [ k, v ] ];
                }).sort(function(a, b) {
                    return -(a[1].length - b[1].length);
                });
                $.each(names, function(i, pair) {
                    var name = pair[1];
                    if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                        index = pair[0];
                        iValue += name.length;
                        return !1;
                    }
                });
                if (-1 !== index) return index + 1;
                throw "Unknown name at position " + iValue;
            }, checkLiteral = function() {
                if (value.charAt(iValue) !== format.charAt(iFormat)) throw "Unexpected literal at position " + iValue;
                iValue++;
            };
            for (iFormat = 0; iFormat < format.length; iFormat++) if (literal) "'" !== format.charAt(iFormat) || lookAhead("'") ? checkLiteral() : literal = !1; else switch (format.charAt(iFormat)) {
              case "d":
                day = getNumber("d");
                break;

              case "D":
                getName("D", dayNamesShort, dayNames);
                break;

              case "o":
                doy = getNumber("o");
                break;

              case "m":
                month = getNumber("m");
                break;

              case "M":
                month = getName("M", monthNamesShort, monthNames);
                break;

              case "y":
                year = getNumber("y");
                break;

              case "@":
                date = new Date(getNumber("@"));
                year = date.getFullYear();
                month = date.getMonth() + 1;
                day = date.getDate();
                break;

              case "!":
                date = new Date((getNumber("!") - this._ticksTo1970) / 1e4);
                year = date.getFullYear();
                month = date.getMonth() + 1;
                day = date.getDate();
                break;

              case "'":
                lookAhead("'") ? checkLiteral() : literal = !0;
                break;

              default:
                checkLiteral();
            }
            if (iValue < value.length) {
                extra = value.substr(iValue);
                if (!/^\s+/.test(extra)) throw "Extra/unparsed characters found in date: " + extra;
            }
            -1 === year ? year = new Date().getFullYear() : 100 > year && (year += new Date().getFullYear() - new Date().getFullYear() % 100 + (shortYearCutoff >= year ? 0 : -100));
            if (doy > -1) {
                month = 1;
                day = doy;
                for (;;) {
                    dim = this._getDaysInMonth(year, month - 1);
                    if (dim >= day) break;
                    month++;
                    day -= dim;
                }
            }
            date = this._daylightSavingAdjust(new Date(year, month - 1, day));
            if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) throw "Invalid date";
            return date;
        },
        ATOM: "yy-mm-dd",
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y",
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd",
        _ticksTo1970: 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)) * 60 * 60 * 1e7,
        formatDate: function(format, date, settings) {
            if (!date) return "";
            var iFormat, dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, lookAhead = function(match) {
                var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                matches && iFormat++;
                return matches;
            }, formatNumber = function(match, value, len) {
                var num = "" + value;
                if (lookAhead(match)) for (;num.length < len; ) num = "0" + num;
                return num;
            }, formatName = function(match, value, shortNames, longNames) {
                return lookAhead(match) ? longNames[value] : shortNames[value];
            }, output = "", literal = !1;
            if (date) for (iFormat = 0; iFormat < format.length; iFormat++) if (literal) "'" !== format.charAt(iFormat) || lookAhead("'") ? output += format.charAt(iFormat) : literal = !1; else switch (format.charAt(iFormat)) {
              case "d":
                output += formatNumber("d", date.getDate(), 2);
                break;

              case "D":
                output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                break;

              case "o":
                output += formatNumber("o", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 864e5), 3);
                break;

              case "m":
                output += formatNumber("m", date.getMonth() + 1, 2);
                break;

              case "M":
                output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                break;

              case "y":
                output += lookAhead("y") ? date.getFullYear() : (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100;
                break;

              case "@":
                output += date.getTime();
                break;

              case "!":
                output += 1e4 * date.getTime() + this._ticksTo1970;
                break;

              case "'":
                lookAhead("'") ? output += "'" : literal = !0;
                break;

              default:
                output += format.charAt(iFormat);
            }
            return output;
        },
        _possibleChars: function(format) {
            var iFormat, chars = "", literal = !1, lookAhead = function(match) {
                var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                matches && iFormat++;
                return matches;
            };
            for (iFormat = 0; iFormat < format.length; iFormat++) if (literal) "'" !== format.charAt(iFormat) || lookAhead("'") ? chars += format.charAt(iFormat) : literal = !1; else switch (format.charAt(iFormat)) {
              case "d":
              case "m":
              case "y":
              case "@":
                chars += "0123456789";
                break;

              case "D":
              case "M":
                return null;

              case "'":
                lookAhead("'") ? chars += "'" : literal = !0;
                break;

              default:
                chars += format.charAt(iFormat);
            }
            return chars;
        },
        _get: function(inst, name) {
            return void 0 !== inst.settings[name] ? inst.settings[name] : this._defaults[name];
        },
        _setDateFromField: function(inst, noDefault) {
            if (inst.input.val() !== inst.lastVal) {
                var dateFormat = this._get(inst, "dateFormat"), dates = inst.lastVal = inst.input ? inst.input.val() : null, defaultDate = this._getDefaultDate(inst), date = defaultDate, settings = this._getFormatConfig(inst);
                try {
                    date = this.parseDate(dateFormat, dates, settings) || defaultDate;
                } catch (event) {
                    dates = noDefault ? "" : dates;
                }
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
                inst.currentDay = dates ? date.getDate() : 0;
                inst.currentMonth = dates ? date.getMonth() : 0;
                inst.currentYear = dates ? date.getFullYear() : 0;
                this._adjustInstDate(inst);
            }
        },
        _getDefaultDate: function(inst) {
            return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
        },
        _determineDate: function(inst, date, defaultDate) {
            var offsetNumeric = function(offset) {
                var date = new Date();
                date.setDate(date.getDate() + offset);
                return date;
            }, offsetString = function(offset) {
                try {
                    return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), offset, $.datepicker._getFormatConfig(inst));
                } catch (e) {}
                for (var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(), year = date.getFullYear(), month = date.getMonth(), day = date.getDate(), pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, matches = pattern.exec(offset); matches; ) {
                    switch (matches[2] || "d") {
                      case "d":
                      case "D":
                        day += parseInt(matches[1], 10);
                        break;

                      case "w":
                      case "W":
                        day += 7 * parseInt(matches[1], 10);
                        break;

                      case "m":
                      case "M":
                        month += parseInt(matches[1], 10);
                        day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                        break;

                      case "y":
                      case "Y":
                        year += parseInt(matches[1], 10);
                        day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                    }
                    matches = pattern.exec(offset);
                }
                return new Date(year, month, day);
            }, newDate = null == date || "" === date ? defaultDate : "string" == typeof date ? offsetString(date) : "number" == typeof date ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());
            newDate = newDate && "Invalid Date" === newDate.toString() ? defaultDate : newDate;
            if (newDate) {
                newDate.setHours(0);
                newDate.setMinutes(0);
                newDate.setSeconds(0);
                newDate.setMilliseconds(0);
            }
            return this._daylightSavingAdjust(newDate);
        },
        _daylightSavingAdjust: function(date) {
            if (!date) return null;
            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
            return date;
        },
        _setDate: function(inst, date, noChange) {
            var clear = !date, origMonth = inst.selectedMonth, origYear = inst.selectedYear, newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
            inst.selectedDay = inst.currentDay = newDate.getDate();
            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
            origMonth === inst.selectedMonth && origYear === inst.selectedYear || noChange || this._notifyChange(inst);
            this._adjustInstDate(inst);
            inst.input && inst.input.val(clear ? "" : this._formatDate(inst));
        },
        _getDate: function(inst) {
            var startDate = !inst.currentYear || inst.input && "" === inst.input.val() ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
            return startDate;
        },
        _attachHandlers: function(inst) {
            var stepMonths = this._get(inst, "stepMonths"), id = "#" + inst.id.replace(/\\\\/g, "\\");
            inst.dpDiv.find("[data-handler]").map(function() {
                var handler = {
                    prev: function() {
                        $.datepicker._adjustDate(id, -stepMonths, "M");
                    },
                    next: function() {
                        $.datepicker._adjustDate(id, +stepMonths, "M");
                    },
                    hide: function() {
                        $.datepicker._hideDatepicker();
                    },
                    today: function() {
                        $.datepicker._gotoToday(id);
                    },
                    selectDay: function() {
                        $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
                        return !1;
                    },
                    selectMonth: function() {
                        $.datepicker._selectMonthYear(id, this, "M");
                        return !1;
                    },
                    selectYear: function() {
                        $.datepicker._selectMonthYear(id, this, "Y");
                        return !1;
                    }
                };
                $(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
            });
        },
        _generateHTML: function(inst) {
            var maxDraw, prevText, prev, nextText, next, currentText, gotoDate, controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin, monthNames, monthNamesShort, beforeShowDay, showOtherMonths, selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate, cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows, printDate, dRow, tbody, daySettings, otherMonth, unselectable, tempDate = new Date(), today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), isRTL = this._get(inst, "isRTL"), showButtonPanel = this._get(inst, "showButtonPanel"), hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"), navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"), numMonths = this._getNumberOfMonths(inst), showCurrentAtPos = this._get(inst, "showCurrentAtPos"), stepMonths = this._get(inst, "stepMonths"), isMultiMonth = 1 !== numMonths[0] || 1 !== numMonths[1], currentDate = this._daylightSavingAdjust(inst.currentDay ? new Date(inst.currentYear, inst.currentMonth, inst.currentDay) : new Date(9999, 9, 9)), minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), drawMonth = inst.drawMonth - showCurrentAtPos, drawYear = inst.drawYear;
            if (0 > drawMonth) {
                drawMonth += 12;
                drawYear--;
            }
            if (maxDate) {
                maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));
                maxDraw = minDate && minDate > maxDraw ? minDate : maxDraw;
                for (;this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw; ) {
                    drawMonth--;
                    if (0 > drawMonth) {
                        drawMonth = 11;
                        drawYear--;
                    }
                }
            }
            inst.drawMonth = drawMonth;
            inst.drawYear = drawYear;
            prevText = this._get(inst, "prevText");
            prevText = navigationAsDateFormat ? this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst)) : prevText;
            prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>";
            nextText = this._get(inst, "nextText");
            nextText = navigationAsDateFormat ? this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst)) : nextText;
            next = this._canAdjustMonth(inst, 1, drawYear, drawMonth) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>";
            currentText = this._get(inst, "currentText");
            gotoDate = this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today;
            currentText = navigationAsDateFormat ? this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)) : currentText;
            controls = inst.inline ? "" : "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(inst, "closeText") + "</button>";
            buttonPanel = showButtonPanel ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") + (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";
            firstDay = parseInt(this._get(inst, "firstDay"), 10);
            firstDay = isNaN(firstDay) ? 0 : firstDay;
            showWeek = this._get(inst, "showWeek");
            dayNames = this._get(inst, "dayNames");
            dayNamesMin = this._get(inst, "dayNamesMin");
            monthNames = this._get(inst, "monthNames");
            monthNamesShort = this._get(inst, "monthNamesShort");
            beforeShowDay = this._get(inst, "beforeShowDay");
            showOtherMonths = this._get(inst, "showOtherMonths");
            selectOtherMonths = this._get(inst, "selectOtherMonths");
            defaultDate = this._getDefaultDate(inst);
            html = "";
            for (row = 0; row < numMonths[0]; row++) {
                group = "";
                this.maxRows = 4;
                for (col = 0; col < numMonths[1]; col++) {
                    selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                    cornerClass = " ui-corner-all";
                    calender = "";
                    if (isMultiMonth) {
                        calender += "<div class='ui-datepicker-group";
                        if (numMonths[1] > 1) switch (col) {
                          case 0:
                            calender += " ui-datepicker-group-first";
                            cornerClass = " ui-corner-" + (isRTL ? "right" : "left");
                            break;

                          case numMonths[1] - 1:
                            calender += " ui-datepicker-group-last";
                            cornerClass = " ui-corner-" + (isRTL ? "left" : "right");
                            break;

                          default:
                            calender += " ui-datepicker-group-middle";
                            cornerClass = "";
                        }
                        calender += "'>";
                    }
                    calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" + (/all|left/.test(cornerClass) && 0 === row ? isRTL ? next : prev : "") + (/all|right/.test(cornerClass) && 0 === row ? isRTL ? prev : next : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + "</div><table class='ui-datepicker-calendar'><thead><tr>";
                    thead = showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "";
                    for (dow = 0; 7 > dow; dow++) {
                        day = (dow + firstDay) % 7;
                        thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + "><span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
                    }
                    calender += thead + "</tr></thead><tbody>";
                    daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                    drawYear === inst.selectedYear && drawMonth === inst.selectedMonth && (inst.selectedDay = Math.min(inst.selectedDay, daysInMonth));
                    leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                    curRows = Math.ceil((leadDays + daysInMonth) / 7);
                    numRows = isMultiMonth && this.maxRows > curRows ? this.maxRows : curRows;
                    this.maxRows = numRows;
                    printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                    for (dRow = 0; numRows > dRow; dRow++) {
                        calender += "<tr>";
                        tbody = showWeek ? "<td class='ui-datepicker-week-col'>" + this._get(inst, "calculateWeek")(printDate) + "</td>" : "";
                        for (dow = 0; 7 > dow; dow++) {
                            daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [ printDate ]) : [ !0, "" ];
                            otherMonth = printDate.getMonth() !== drawMonth;
                            unselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && minDate > printDate || maxDate && printDate > maxDate;
                            tbody += "<td class='" + ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (otherMonth ? " ui-datepicker-other-month" : "") + (printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ? " " + this._dayOverClass : "") + (unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + (printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + (otherMonth && !showOtherMonths || !daySettings[2] ? "" : " title='" + daySettings[2].replace(/'/g, "&#39;") + "'") + (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + (otherMonth && !showOtherMonths ? "&#xa0;" : unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" + (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + (otherMonth ? " ui-priority-secondary" : "") + "' href='#'>" + printDate.getDate() + "</a>") + "</td>";
                            printDate.setDate(printDate.getDate() + 1);
                            printDate = this._daylightSavingAdjust(printDate);
                        }
                        calender += tbody + "</tr>";
                    }
                    drawMonth++;
                    if (drawMonth > 11) {
                        drawMonth = 0;
                        drawYear++;
                    }
                    calender += "</tbody></table>" + (isMultiMonth ? "</div>" + (numMonths[0] > 0 && col === numMonths[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
                    group += calender;
                }
                html += group;
            }
            html += buttonPanel;
            inst._keyEvent = !1;
            return html;
        },
        _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
            var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear, changeMonth = this._get(inst, "changeMonth"), changeYear = this._get(inst, "changeYear"), showMonthAfterYear = this._get(inst, "showMonthAfterYear"), html = "<div class='ui-datepicker-title'>", monthHtml = "";
            if (secondary || !changeMonth) monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>"; else {
                inMinYear = minDate && minDate.getFullYear() === drawYear;
                inMaxYear = maxDate && maxDate.getFullYear() === drawYear;
                monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
                for (month = 0; 12 > month; month++) (!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth()) && (monthHtml += "<option value='" + month + "'" + (month === drawMonth ? " selected='selected'" : "") + ">" + monthNamesShort[month] + "</option>");
                monthHtml += "</select>";
            }
            showMonthAfterYear || (html += monthHtml + (!secondary && changeMonth && changeYear ? "" : "&#xa0;"));
            if (!inst.yearshtml) {
                inst.yearshtml = "";
                if (secondary || !changeYear) html += "<span class='ui-datepicker-year'>" + drawYear + "</span>"; else {
                    years = this._get(inst, "yearRange").split(":");
                    thisYear = new Date().getFullYear();
                    determineYear = function(value) {
                        var year = value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);
                        return isNaN(year) ? thisYear : year;
                    };
                    year = determineYear(years[0]);
                    endYear = Math.max(year, determineYear(years[1] || ""));
                    year = minDate ? Math.max(year, minDate.getFullYear()) : year;
                    endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;
                    inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
                    for (;endYear >= year; year++) inst.yearshtml += "<option value='" + year + "'" + (year === drawYear ? " selected='selected'" : "") + ">" + year + "</option>";
                    inst.yearshtml += "</select>";
                    html += inst.yearshtml;
                    inst.yearshtml = null;
                }
            }
            html += this._get(inst, "yearSuffix");
            showMonthAfterYear && (html += (!secondary && changeMonth && changeYear ? "" : "&#xa0;") + monthHtml);
            html += "</div>";
            return html;
        },
        _adjustInstDate: function(inst, offset, period) {
            var year = inst.drawYear + ("Y" === period ? offset : 0), month = inst.drawMonth + ("M" === period ? offset : 0), day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + ("D" === period ? offset : 0), date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            ("M" === period || "Y" === period) && this._notifyChange(inst);
        },
        _restrictMinMax: function(inst, date) {
            var minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), newDate = minDate && minDate > date ? minDate : date;
            return maxDate && newDate > maxDate ? maxDate : newDate;
        },
        _notifyChange: function(inst) {
            var onChange = this._get(inst, "onChangeMonthYear");
            onChange && onChange.apply(inst.input ? inst.input[0] : null, [ inst.selectedYear, inst.selectedMonth + 1, inst ]);
        },
        _getNumberOfMonths: function(inst) {
            var numMonths = this._get(inst, "numberOfMonths");
            return null == numMonths ? [ 1, 1 ] : "number" == typeof numMonths ? [ 1, numMonths ] : numMonths;
        },
        _getMinMaxDate: function(inst, minMax) {
            return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
        },
        _getDaysInMonth: function(year, month) {
            return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
        },
        _getFirstDayOfMonth: function(year, month) {
            return new Date(year, month, 1).getDay();
        },
        _canAdjustMonth: function(inst, offset, curYear, curMonth) {
            var numMonths = this._getNumberOfMonths(inst), date = this._daylightSavingAdjust(new Date(curYear, curMonth + (0 > offset ? offset : numMonths[0] * numMonths[1]), 1));
            0 > offset && date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
            return this._isInRange(inst, date);
        },
        _isInRange: function(inst, date) {
            var yearSplit, currentYear, minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), minYear = null, maxYear = null, years = this._get(inst, "yearRange");
            if (years) {
                yearSplit = years.split(":");
                currentYear = new Date().getFullYear();
                minYear = parseInt(yearSplit[0], 10);
                maxYear = parseInt(yearSplit[1], 10);
                yearSplit[0].match(/[+\-].*/) && (minYear += currentYear);
                yearSplit[1].match(/[+\-].*/) && (maxYear += currentYear);
            }
            return (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear);
        },
        _getFormatConfig: function(inst) {
            var shortYearCutoff = this._get(inst, "shortYearCutoff");
            shortYearCutoff = "string" != typeof shortYearCutoff ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10);
            return {
                shortYearCutoff: shortYearCutoff,
                dayNamesShort: this._get(inst, "dayNamesShort"),
                dayNames: this._get(inst, "dayNames"),
                monthNamesShort: this._get(inst, "monthNamesShort"),
                monthNames: this._get(inst, "monthNames")
            };
        },
        _formatDate: function(inst, day, month, year) {
            if (!day) {
                inst.currentDay = inst.selectedDay;
                inst.currentMonth = inst.selectedMonth;
                inst.currentYear = inst.selectedYear;
            }
            var date = day ? "object" == typeof day ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
            return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
        }
    });
    $.fn.datepicker = function(options) {
        if (!this.length) return this;
        if (!$.datepicker.initialized) {
            $(document).mousedown($.datepicker._checkExternalClick);
            $.datepicker.initialized = !0;
        }
        0 === $("#" + $.datepicker._mainDivId).length && $("body").append($.datepicker.dpDiv);
        var otherArgs = Array.prototype.slice.call(arguments, 1);
        return "string" != typeof options || "isDisabled" !== options && "getDate" !== options && "widget" !== options ? "option" === options && 2 === arguments.length && "string" == typeof arguments[1] ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this[0] ].concat(otherArgs)) : this.each(function() {
            "string" == typeof options ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this ].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);
        }) : $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this[0] ].concat(otherArgs));
    };
    $.datepicker = new Datepicker();
    $.datepicker.initialized = !1;
    $.datepicker.uuid = new Date().getTime();
    $.datepicker.version = "1.11.1";
    $.datepicker;
    $.widget("ui.draggable", $.ui.mouse, {
        version: "1.11.1",
        widgetEventPrefix: "drag",
        options: {
            addClasses: !0,
            appendTo: "parent",
            axis: !1,
            connectToSortable: !1,
            containment: !1,
            cursor: "auto",
            cursorAt: !1,
            grid: !1,
            handle: !1,
            helper: "original",
            iframeFix: !1,
            opacity: !1,
            refreshPositions: !1,
            revert: !1,
            revertDuration: 500,
            scope: "default",
            scroll: !0,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: !1,
            snapMode: "both",
            snapTolerance: 20,
            stack: !1,
            zIndex: !1,
            drag: null,
            start: null,
            stop: null
        },
        _create: function() {
            "original" !== this.options.helper || /^(?:r|a|f)/.test(this.element.css("position")) || (this.element[0].style.position = "relative");
            this.options.addClasses && this.element.addClass("ui-draggable");
            this.options.disabled && this.element.addClass("ui-draggable-disabled");
            this._setHandleClassName();
            this._mouseInit();
        },
        _setOption: function(key, value) {
            this._super(key, value);
            if ("handle" === key) {
                this._removeHandleClassName();
                this._setHandleClassName();
            }
        },
        _destroy: function() {
            if ((this.helper || this.element).is(".ui-draggable-dragging")) this.destroyOnClear = !0; else {
                this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
                this._removeHandleClassName();
                this._mouseDestroy();
            }
        },
        _mouseCapture: function(event) {
            var document = this.document[0], o = this.options;
            try {
                document.activeElement && "body" !== document.activeElement.nodeName.toLowerCase() && $(document.activeElement).blur();
            } catch (error) {}
            if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) return !1;
            this.handle = this._getHandle(event);
            if (!this.handle) return !1;
            $(o.iframeFix === !0 ? "iframe" : o.iframeFix).each(function() {
                $("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>").css({
                    width: this.offsetWidth + "px",
                    height: this.offsetHeight + "px",
                    position: "absolute",
                    opacity: "0.001",
                    zIndex: 1e3
                }).css($(this).offset()).appendTo("body");
            });
            return !0;
        },
        _mouseStart: function(event) {
            var o = this.options;
            this.helper = this._createHelper(event);
            this.helper.addClass("ui-draggable-dragging");
            this._cacheHelperProportions();
            $.ui.ddmanager && ($.ui.ddmanager.current = this);
            this._cacheMargins();
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent(!0);
            this.offsetParent = this.helper.offsetParent();
            this.offsetParentCssPosition = this.offsetParent.css("position");
            this.offset = this.positionAbs = this.element.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            this.offset.scroll = !1;
            $.extend(this.offset, {
                click: {
                    left: event.pageX - this.offset.left,
                    top: event.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.originalPosition = this.position = this._generatePosition(event, !1);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
            this._setContainment();
            if (this._trigger("start", event) === !1) {
                this._clear();
                return !1;
            }
            this._cacheHelperProportions();
            $.ui.ddmanager && !o.dropBehaviour && $.ui.ddmanager.prepareOffsets(this, event);
            this._mouseDrag(event, !0);
            $.ui.ddmanager && $.ui.ddmanager.dragStart(this, event);
            return !0;
        },
        _mouseDrag: function(event, noPropagation) {
            "fixed" === this.offsetParentCssPosition && (this.offset.parent = this._getParentOffset());
            this.position = this._generatePosition(event, !0);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!noPropagation) {
                var ui = this._uiHash();
                if (this._trigger("drag", event, ui) === !1) {
                    this._mouseUp({});
                    return !1;
                }
                this.position = ui.position;
            }
            this.helper[0].style.left = this.position.left + "px";
            this.helper[0].style.top = this.position.top + "px";
            $.ui.ddmanager && $.ui.ddmanager.drag(this, event);
            return !1;
        },
        _mouseStop: function(event) {
            var that = this, dropped = !1;
            $.ui.ddmanager && !this.options.dropBehaviour && (dropped = $.ui.ddmanager.drop(this, event));
            if (this.dropped) {
                dropped = this.dropped;
                this.dropped = !1;
            }
            "invalid" === this.options.revert && !dropped || "valid" === this.options.revert && dropped || this.options.revert === !0 || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped) ? $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                that._trigger("stop", event) !== !1 && that._clear();
            }) : this._trigger("stop", event) !== !1 && this._clear();
            return !1;
        },
        _mouseUp: function(event) {
            $("div.ui-draggable-iframeFix").each(function() {
                this.parentNode.removeChild(this);
            });
            $.ui.ddmanager && $.ui.ddmanager.dragStop(this, event);
            this.element.focus();
            return $.ui.mouse.prototype._mouseUp.call(this, event);
        },
        cancel: function() {
            this.helper.is(".ui-draggable-dragging") ? this._mouseUp({}) : this._clear();
            return this;
        },
        _getHandle: function(event) {
            return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : !0;
        },
        _setHandleClassName: function() {
            this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;
            this.handleElement.addClass("ui-draggable-handle");
        },
        _removeHandleClassName: function() {
            this.handleElement.removeClass("ui-draggable-handle");
        },
        _createHelper: function(event) {
            var o = this.options, helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [ event ])) : "clone" === o.helper ? this.element.clone().removeAttr("id") : this.element;
            helper.parents("body").length || helper.appendTo("parent" === o.appendTo ? this.element[0].parentNode : o.appendTo);
            helper[0] === this.element[0] || /(fixed|absolute)/.test(helper.css("position")) || helper.css("position", "absolute");
            return helper;
        },
        _adjustOffsetFromHelper: function(obj) {
            "string" == typeof obj && (obj = obj.split(" "));
            $.isArray(obj) && (obj = {
                left: +obj[0],
                top: +obj[1] || 0
            });
            "left" in obj && (this.offset.click.left = obj.left + this.margins.left);
            "right" in obj && (this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left);
            "top" in obj && (this.offset.click.top = obj.top + this.margins.top);
            "bottom" in obj && (this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top);
        },
        _isRootNode: function(element) {
            return /(html|body)/i.test(element.tagName) || element === this.document[0];
        },
        _getParentOffset: function() {
            var po = this.offsetParent.offset(), document = this.document[0];
            if ("absolute" === this.cssPosition && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }
            this._isRootNode(this.offsetParent[0]) && (po = {
                top: 0,
                left: 0
            });
            return {
                top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            };
        },
        _getRelativeOffset: function() {
            if ("relative" !== this.cssPosition) return {
                top: 0,
                left: 0
            };
            var p = this.element.position(), scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
            return {
                top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + (scrollIsRootNode ? 0 : this.scrollParent.scrollTop()),
                left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + (scrollIsRootNode ? 0 : this.scrollParent.scrollLeft())
            };
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.element.css("marginLeft"), 10) || 0,
                top: parseInt(this.element.css("marginTop"), 10) || 0,
                right: parseInt(this.element.css("marginRight"), 10) || 0,
                bottom: parseInt(this.element.css("marginBottom"), 10) || 0
            };
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            };
        },
        _setContainment: function() {
            var over, c, ce, o = this.options, document = this.document[0];
            this.relativeContainer = null;
            if (o.containment) if ("window" !== o.containment) if ("document" !== o.containment) if (o.containment.constructor !== Array) {
                "parent" === o.containment && (o.containment = this.helper[0].parentNode);
                c = $(o.containment);
                ce = c[0];
                if (ce) {
                    over = "hidden" !== c.css("overflow");
                    this.containment = [ (parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"), 10) || 0), (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom ];
                    this.relativeContainer = c;
                }
            } else this.containment = o.containment; else this.containment = [ 0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ]; else this.containment = [ $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ]; else this.containment = null;
        },
        _convertPositionTo: function(d, pos) {
            pos || (pos = this.position);
            var mod = "absolute" === d ? 1 : -1, scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
            return {
                top: pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - ("fixed" === this.cssPosition ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod,
                left: pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - ("fixed" === this.cssPosition ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod
            };
        },
        _generatePosition: function(event, constrainPosition) {
            var containment, co, top, left, o = this.options, scrollIsRootNode = this._isRootNode(this.scrollParent[0]), pageX = event.pageX, pageY = event.pageY;
            scrollIsRootNode && this.offset.scroll || (this.offset.scroll = {
                top: this.scrollParent.scrollTop(),
                left: this.scrollParent.scrollLeft()
            });
            if (constrainPosition) {
                if (this.containment) {
                    if (this.relativeContainer) {
                        co = this.relativeContainer.offset();
                        containment = [ this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top ];
                    } else containment = this.containment;
                    event.pageX - this.offset.click.left < containment[0] && (pageX = containment[0] + this.offset.click.left);
                    event.pageY - this.offset.click.top < containment[1] && (pageY = containment[1] + this.offset.click.top);
                    event.pageX - this.offset.click.left > containment[2] && (pageX = containment[2] + this.offset.click.left);
                    event.pageY - this.offset.click.top > containment[3] && (pageY = containment[3] + this.offset.click.top);
                }
                if (o.grid) {
                    top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                    pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                    left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                    pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
                }
                "y" === o.axis && (pageX = this.originalPageX);
                "x" === o.axis && (pageY = this.originalPageY);
            }
            return {
                top: pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top),
                left: pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)
            };
        },
        _clear: function() {
            this.helper.removeClass("ui-draggable-dragging");
            this.helper[0] === this.element[0] || this.cancelHelperRemoval || this.helper.remove();
            this.helper = null;
            this.cancelHelperRemoval = !1;
            this.destroyOnClear && this.destroy();
        },
        _trigger: function(type, event, ui) {
            ui = ui || this._uiHash();
            $.ui.plugin.call(this, type, [ event, ui, this ], !0);
            "drag" === type && (this.positionAbs = this._convertPositionTo("absolute"));
            return $.Widget.prototype._trigger.call(this, type, event, ui);
        },
        plugins: {},
        _uiHash: function() {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            };
        }
    });
    $.ui.plugin.add("draggable", "connectToSortable", {
        start: function(event, ui, inst) {
            var o = inst.options, uiSortable = $.extend({}, ui, {
                item: inst.element
            });
            inst.sortables = [];
            $(o.connectToSortable).each(function() {
                var sortable = $(this).sortable("instance");
                if (sortable && !sortable.options.disabled) {
                    inst.sortables.push({
                        instance: sortable,
                        shouldRevert: sortable.options.revert
                    });
                    sortable.refreshPositions();
                    sortable._trigger("activate", event, uiSortable);
                }
            });
        },
        stop: function(event, ui, inst) {
            var uiSortable = $.extend({}, ui, {
                item: inst.element
            });
            $.each(inst.sortables, function() {
                if (this.instance.isOver) {
                    this.instance.isOver = 0;
                    inst.cancelHelperRemoval = !0;
                    this.instance.cancelHelperRemoval = !1;
                    this.shouldRevert && (this.instance.options.revert = this.shouldRevert);
                    this.instance._mouseStop(event);
                    this.instance.options.helper = this.instance.options._helper;
                    "original" === inst.options.helper && this.instance.currentItem.css({
                        top: "auto",
                        left: "auto"
                    });
                } else {
                    this.instance.cancelHelperRemoval = !1;
                    this.instance._trigger("deactivate", event, uiSortable);
                }
            });
        },
        drag: function(event, ui, inst) {
            var that = this;
            $.each(inst.sortables, function() {
                var innermostIntersecting = !1, thisSortable = this;
                this.instance.positionAbs = inst.positionAbs;
                this.instance.helperProportions = inst.helperProportions;
                this.instance.offset.click = inst.offset.click;
                if (this.instance._intersectsWith(this.instance.containerCache)) {
                    innermostIntersecting = !0;
                    $.each(inst.sortables, function() {
                        this.instance.positionAbs = inst.positionAbs;
                        this.instance.helperProportions = inst.helperProportions;
                        this.instance.offset.click = inst.offset.click;
                        this !== thisSortable && this.instance._intersectsWith(this.instance.containerCache) && $.contains(thisSortable.instance.element[0], this.instance.element[0]) && (innermostIntersecting = !1);
                        return innermostIntersecting;
                    });
                }
                if (innermostIntersecting) {
                    if (!this.instance.isOver) {
                        this.instance.isOver = 1;
                        this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item", !0);
                        this.instance.options._helper = this.instance.options.helper;
                        this.instance.options.helper = function() {
                            return ui.helper[0];
                        };
                        event.target = this.instance.currentItem[0];
                        this.instance._mouseCapture(event, !0);
                        this.instance._mouseStart(event, !0, !0);
                        this.instance.offset.click.top = inst.offset.click.top;
                        this.instance.offset.click.left = inst.offset.click.left;
                        this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
                        this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;
                        inst._trigger("toSortable", event);
                        inst.dropped = this.instance.element;
                        inst.currentItem = inst.element;
                        this.instance.fromOutside = inst;
                    }
                    this.instance.currentItem && this.instance._mouseDrag(event);
                } else if (this.instance.isOver) {
                    this.instance.isOver = 0;
                    this.instance.cancelHelperRemoval = !0;
                    this.instance.options.revert = !1;
                    this.instance._trigger("out", event, this.instance._uiHash(this.instance));
                    this.instance._mouseStop(event, !0);
                    this.instance.options.helper = this.instance.options._helper;
                    this.instance.currentItem.remove();
                    this.instance.placeholder && this.instance.placeholder.remove();
                    inst._trigger("fromSortable", event);
                    inst.dropped = !1;
                }
            });
        }
    });
    $.ui.plugin.add("draggable", "cursor", {
        start: function(event, ui, instance) {
            var t = $("body"), o = instance.options;
            t.css("cursor") && (o._cursor = t.css("cursor"));
            t.css("cursor", o.cursor);
        },
        stop: function(event, ui, instance) {
            var o = instance.options;
            o._cursor && $("body").css("cursor", o._cursor);
        }
    });
    $.ui.plugin.add("draggable", "opacity", {
        start: function(event, ui, instance) {
            var t = $(ui.helper), o = instance.options;
            t.css("opacity") && (o._opacity = t.css("opacity"));
            t.css("opacity", o.opacity);
        },
        stop: function(event, ui, instance) {
            var o = instance.options;
            o._opacity && $(ui.helper).css("opacity", o._opacity);
        }
    });
    $.ui.plugin.add("draggable", "scroll", {
        start: function(event, ui, i) {
            i.scrollParentNotHidden || (i.scrollParentNotHidden = i.helper.scrollParent(!1));
            i.scrollParentNotHidden[0] !== i.document[0] && "HTML" !== i.scrollParentNotHidden[0].tagName && (i.overflowOffset = i.scrollParentNotHidden.offset());
        },
        drag: function(event, ui, i) {
            var o = i.options, scrolled = !1, scrollParent = i.scrollParentNotHidden[0], document = i.document[0];
            if (scrollParent !== document && "HTML" !== scrollParent.tagName) {
                o.axis && "x" === o.axis || (i.overflowOffset.top + scrollParent.offsetHeight - event.pageY < o.scrollSensitivity ? scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed : event.pageY - i.overflowOffset.top < o.scrollSensitivity && (scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed));
                o.axis && "y" === o.axis || (i.overflowOffset.left + scrollParent.offsetWidth - event.pageX < o.scrollSensitivity ? scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed : event.pageX - i.overflowOffset.left < o.scrollSensitivity && (scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed));
            } else {
                o.axis && "x" === o.axis || (event.pageY - $(document).scrollTop() < o.scrollSensitivity ? scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed) : $(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity && (scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed)));
                o.axis && "y" === o.axis || (event.pageX - $(document).scrollLeft() < o.scrollSensitivity ? scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed) : $(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity && (scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed)));
            }
            scrolled !== !1 && $.ui.ddmanager && !o.dropBehaviour && $.ui.ddmanager.prepareOffsets(i, event);
        }
    });
    $.ui.plugin.add("draggable", "snap", {
        start: function(event, ui, i) {
            var o = i.options;
            i.snapElements = [];
            $(o.snap.constructor !== String ? o.snap.items || ":data(ui-draggable)" : o.snap).each(function() {
                var $t = $(this), $o = $t.offset();
                this !== i.element[0] && i.snapElements.push({
                    item: this,
                    width: $t.outerWidth(),
                    height: $t.outerHeight(),
                    top: $o.top,
                    left: $o.left
                });
            });
        },
        drag: function(event, ui, inst) {
            var ts, bs, ls, rs, l, r, t, b, i, first, o = inst.options, d = o.snapTolerance, x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width, y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;
            for (i = inst.snapElements.length - 1; i >= 0; i--) {
                l = inst.snapElements[i].left;
                r = l + inst.snapElements[i].width;
                t = inst.snapElements[i].top;
                b = t + inst.snapElements[i].height;
                if (l - d > x2 || x1 > r + d || t - d > y2 || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {
                    inst.snapElements[i].snapping && inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {
                        snapItem: inst.snapElements[i].item
                    }));
                    inst.snapElements[i].snapping = !1;
                } else {
                    if ("inner" !== o.snapMode) {
                        ts = Math.abs(t - y2) <= d;
                        bs = Math.abs(b - y1) <= d;
                        ls = Math.abs(l - x2) <= d;
                        rs = Math.abs(r - x1) <= d;
                        ts && (ui.position.top = inst._convertPositionTo("relative", {
                            top: t - inst.helperProportions.height,
                            left: 0
                        }).top - inst.margins.top);
                        bs && (ui.position.top = inst._convertPositionTo("relative", {
                            top: b,
                            left: 0
                        }).top - inst.margins.top);
                        ls && (ui.position.left = inst._convertPositionTo("relative", {
                            top: 0,
                            left: l - inst.helperProportions.width
                        }).left - inst.margins.left);
                        rs && (ui.position.left = inst._convertPositionTo("relative", {
                            top: 0,
                            left: r
                        }).left - inst.margins.left);
                    }
                    first = ts || bs || ls || rs;
                    if ("outer" !== o.snapMode) {
                        ts = Math.abs(t - y1) <= d;
                        bs = Math.abs(b - y2) <= d;
                        ls = Math.abs(l - x1) <= d;
                        rs = Math.abs(r - x2) <= d;
                        ts && (ui.position.top = inst._convertPositionTo("relative", {
                            top: t,
                            left: 0
                        }).top - inst.margins.top);
                        bs && (ui.position.top = inst._convertPositionTo("relative", {
                            top: b - inst.helperProportions.height,
                            left: 0
                        }).top - inst.margins.top);
                        ls && (ui.position.left = inst._convertPositionTo("relative", {
                            top: 0,
                            left: l
                        }).left - inst.margins.left);
                        rs && (ui.position.left = inst._convertPositionTo("relative", {
                            top: 0,
                            left: r - inst.helperProportions.width
                        }).left - inst.margins.left);
                    }
                    !inst.snapElements[i].snapping && (ts || bs || ls || rs || first) && inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {
                        snapItem: inst.snapElements[i].item
                    }));
                    inst.snapElements[i].snapping = ts || bs || ls || rs || first;
                }
            }
        }
    });
    $.ui.plugin.add("draggable", "stack", {
        start: function(event, ui, instance) {
            var min, o = instance.options, group = $.makeArray($(o.stack)).sort(function(a, b) {
                return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
            });
            if (group.length) {
                min = parseInt($(group[0]).css("zIndex"), 10) || 0;
                $(group).each(function(i) {
                    $(this).css("zIndex", min + i);
                });
                this.css("zIndex", min + group.length);
            }
        }
    });
    $.ui.plugin.add("draggable", "zIndex", {
        start: function(event, ui, instance) {
            var t = $(ui.helper), o = instance.options;
            t.css("zIndex") && (o._zIndex = t.css("zIndex"));
            t.css("zIndex", o.zIndex);
        },
        stop: function(event, ui, instance) {
            var o = instance.options;
            o._zIndex && $(ui.helper).css("zIndex", o._zIndex);
        }
    });
    $.ui.draggable;
    $.widget("ui.resizable", $.ui.mouse, {
        version: "1.11.1",
        widgetEventPrefix: "resize",
        options: {
            alsoResize: !1,
            animate: !1,
            animateDuration: "slow",
            animateEasing: "swing",
            aspectRatio: !1,
            autoHide: !1,
            containment: !1,
            ghost: !1,
            grid: !1,
            handles: "e,s,se",
            helper: !1,
            maxHeight: null,
            maxWidth: null,
            minHeight: 10,
            minWidth: 10,
            zIndex: 90,
            resize: null,
            start: null,
            stop: null
        },
        _num: function(value) {
            return parseInt(value, 10) || 0;
        },
        _isNumber: function(value) {
            return !isNaN(parseInt(value, 10));
        },
        _hasScroll: function(el, a) {
            if ("hidden" === $(el).css("overflow")) return !1;
            var scroll = a && "left" === a ? "scrollLeft" : "scrollTop", has = !1;
            if (el[scroll] > 0) return !0;
            el[scroll] = 1;
            has = el[scroll] > 0;
            el[scroll] = 0;
            return has;
        },
        _create: function() {
            var n, i, handle, axis, hname, that = this, o = this.options;
            this.element.addClass("ui-resizable");
            $.extend(this, {
                _aspectRatio: !!o.aspectRatio,
                aspectRatio: o.aspectRatio,
                originalElement: this.element,
                _proportionallyResizeElements: [],
                _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
            });
            if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {
                this.element.wrap($("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
                    position: this.element.css("position"),
                    width: this.element.outerWidth(),
                    height: this.element.outerHeight(),
                    top: this.element.css("top"),
                    left: this.element.css("left")
                }));
                this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance"));
                this.elementIsWrapper = !0;
                this.element.css({
                    marginLeft: this.originalElement.css("marginLeft"),
                    marginTop: this.originalElement.css("marginTop"),
                    marginRight: this.originalElement.css("marginRight"),
                    marginBottom: this.originalElement.css("marginBottom")
                });
                this.originalElement.css({
                    marginLeft: 0,
                    marginTop: 0,
                    marginRight: 0,
                    marginBottom: 0
                });
                this.originalResizeStyle = this.originalElement.css("resize");
                this.originalElement.css("resize", "none");
                this._proportionallyResizeElements.push(this.originalElement.css({
                    position: "static",
                    zoom: 1,
                    display: "block"
                }));
                this.originalElement.css({
                    margin: this.originalElement.css("margin")
                });
                this._proportionallyResize();
            }
            this.handles = o.handles || ($(".ui-resizable-handle", this.element).length ? {
                n: ".ui-resizable-n",
                e: ".ui-resizable-e",
                s: ".ui-resizable-s",
                w: ".ui-resizable-w",
                se: ".ui-resizable-se",
                sw: ".ui-resizable-sw",
                ne: ".ui-resizable-ne",
                nw: ".ui-resizable-nw"
            } : "e,s,se");
            if (this.handles.constructor === String) {
                "all" === this.handles && (this.handles = "n,e,s,w,se,sw,ne,nw");
                n = this.handles.split(",");
                this.handles = {};
                for (i = 0; i < n.length; i++) {
                    handle = $.trim(n[i]);
                    hname = "ui-resizable-" + handle;
                    axis = $("<div class='ui-resizable-handle " + hname + "'></div>");
                    axis.css({
                        zIndex: o.zIndex
                    });
                    "se" === handle && axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
                    this.handles[handle] = ".ui-resizable-" + handle;
                    this.element.append(axis);
                }
            }
            this._renderAxis = function(target) {
                var i, axis, padPos, padWrapper;
                target = target || this.element;
                for (i in this.handles) {
                    this.handles[i].constructor === String && (this.handles[i] = this.element.children(this.handles[i]).first().show());
                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {
                        axis = $(this.handles[i], this.element);
                        padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();
                        padPos = [ "padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left" ].join("");
                        target.css(padPos, padWrapper);
                        this._proportionallyResize();
                    }
                    $(this.handles[i]).length;
                }
            };
            this._renderAxis(this.element);
            this._handles = $(".ui-resizable-handle", this.element).disableSelection();
            this._handles.mouseover(function() {
                if (!that.resizing) {
                    this.className && (axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i));
                    that.axis = axis && axis[1] ? axis[1] : "se";
                }
            });
            if (o.autoHide) {
                this._handles.hide();
                $(this.element).addClass("ui-resizable-autohide").mouseenter(function() {
                    if (!o.disabled) {
                        $(this).removeClass("ui-resizable-autohide");
                        that._handles.show();
                    }
                }).mouseleave(function() {
                    if (!o.disabled && !that.resizing) {
                        $(this).addClass("ui-resizable-autohide");
                        that._handles.hide();
                    }
                });
            }
            this._mouseInit();
        },
        _destroy: function() {
            this._mouseDestroy();
            var wrapper, _destroy = function(exp) {
                $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
            };
            if (this.elementIsWrapper) {
                _destroy(this.element);
                wrapper = this.element;
                this.originalElement.css({
                    position: wrapper.css("position"),
                    width: wrapper.outerWidth(),
                    height: wrapper.outerHeight(),
                    top: wrapper.css("top"),
                    left: wrapper.css("left")
                }).insertAfter(wrapper);
                wrapper.remove();
            }
            this.originalElement.css("resize", this.originalResizeStyle);
            _destroy(this.originalElement);
            return this;
        },
        _mouseCapture: function(event) {
            var i, handle, capture = !1;
            for (i in this.handles) {
                handle = $(this.handles[i])[0];
                (handle === event.target || $.contains(handle, event.target)) && (capture = !0);
            }
            return !this.options.disabled && capture;
        },
        _mouseStart: function(event) {
            var curleft, curtop, cursor, o = this.options, el = this.element;
            this.resizing = !0;
            this._renderProxy();
            curleft = this._num(this.helper.css("left"));
            curtop = this._num(this.helper.css("top"));
            if (o.containment) {
                curleft += $(o.containment).scrollLeft() || 0;
                curtop += $(o.containment).scrollTop() || 0;
            }
            this.offset = this.helper.offset();
            this.position = {
                left: curleft,
                top: curtop
            };
            this.size = this._helper ? {
                width: this.helper.width(),
                height: this.helper.height()
            } : {
                width: el.width(),
                height: el.height()
            };
            this.originalSize = this._helper ? {
                width: el.outerWidth(),
                height: el.outerHeight()
            } : {
                width: el.width(),
                height: el.height()
            };
            this.sizeDiff = {
                width: el.outerWidth() - el.width(),
                height: el.outerHeight() - el.height()
            };
            this.originalPosition = {
                left: curleft,
                top: curtop
            };
            this.originalMousePosition = {
                left: event.pageX,
                top: event.pageY
            };
            this.aspectRatio = "number" == typeof o.aspectRatio ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;
            cursor = $(".ui-resizable-" + this.axis).css("cursor");
            $("body").css("cursor", "auto" === cursor ? this.axis + "-resize" : cursor);
            el.addClass("ui-resizable-resizing");
            this._propagate("start", event);
            return !0;
        },
        _mouseDrag: function(event) {
            var data, props, smp = this.originalMousePosition, a = this.axis, dx = event.pageX - smp.left || 0, dy = event.pageY - smp.top || 0, trigger = this._change[a];
            this._updatePrevProperties();
            if (!trigger) return !1;
            data = trigger.apply(this, [ event, dx, dy ]);
            this._updateVirtualBoundaries(event.shiftKey);
            (this._aspectRatio || event.shiftKey) && (data = this._updateRatio(data, event));
            data = this._respectSize(data, event);
            this._updateCache(data);
            this._propagate("resize", event);
            props = this._applyChanges();
            !this._helper && this._proportionallyResizeElements.length && this._proportionallyResize();
            if (!$.isEmptyObject(props)) {
                this._updatePrevProperties();
                this._trigger("resize", event, this.ui());
                this._applyChanges();
            }
            return !1;
        },
        _mouseStop: function(event) {
            this.resizing = !1;
            var pr, ista, soffseth, soffsetw, s, left, top, o = this.options, that = this;
            if (this._helper) {
                pr = this._proportionallyResizeElements;
                ista = pr.length && /textarea/i.test(pr[0].nodeName);
                soffseth = ista && this._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;
                soffsetw = ista ? 0 : that.sizeDiff.width;
                s = {
                    width: that.helper.width() - soffsetw,
                    height: that.helper.height() - soffseth
                };
                left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null;
                top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null;
                o.animate || this.element.css($.extend(s, {
                    top: top,
                    left: left
                }));
                that.helper.height(that.size.height);
                that.helper.width(that.size.width);
                this._helper && !o.animate && this._proportionallyResize();
            }
            $("body").css("cursor", "auto");
            this.element.removeClass("ui-resizable-resizing");
            this._propagate("stop", event);
            this._helper && this.helper.remove();
            return !1;
        },
        _updatePrevProperties: function() {
            this.prevPosition = {
                top: this.position.top,
                left: this.position.left
            };
            this.prevSize = {
                width: this.size.width,
                height: this.size.height
            };
        },
        _applyChanges: function() {
            var props = {};
            this.position.top !== this.prevPosition.top && (props.top = this.position.top + "px");
            this.position.left !== this.prevPosition.left && (props.left = this.position.left + "px");
            this.size.width !== this.prevSize.width && (props.width = this.size.width + "px");
            this.size.height !== this.prevSize.height && (props.height = this.size.height + "px");
            this.helper.css(props);
            return props;
        },
        _updateVirtualBoundaries: function(forceAspectRatio) {
            var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b, o = this.options;
            b = {
                minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,
                maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : 1 / 0,
                minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,
                maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : 1 / 0
            };
            if (this._aspectRatio || forceAspectRatio) {
                pMinWidth = b.minHeight * this.aspectRatio;
                pMinHeight = b.minWidth / this.aspectRatio;
                pMaxWidth = b.maxHeight * this.aspectRatio;
                pMaxHeight = b.maxWidth / this.aspectRatio;
                pMinWidth > b.minWidth && (b.minWidth = pMinWidth);
                pMinHeight > b.minHeight && (b.minHeight = pMinHeight);
                pMaxWidth < b.maxWidth && (b.maxWidth = pMaxWidth);
                pMaxHeight < b.maxHeight && (b.maxHeight = pMaxHeight);
            }
            this._vBoundaries = b;
        },
        _updateCache: function(data) {
            this.offset = this.helper.offset();
            this._isNumber(data.left) && (this.position.left = data.left);
            this._isNumber(data.top) && (this.position.top = data.top);
            this._isNumber(data.height) && (this.size.height = data.height);
            this._isNumber(data.width) && (this.size.width = data.width);
        },
        _updateRatio: function(data) {
            var cpos = this.position, csize = this.size, a = this.axis;
            this._isNumber(data.height) ? data.width = data.height * this.aspectRatio : this._isNumber(data.width) && (data.height = data.width / this.aspectRatio);
            if ("sw" === a) {
                data.left = cpos.left + (csize.width - data.width);
                data.top = null;
            }
            if ("nw" === a) {
                data.top = cpos.top + (csize.height - data.height);
                data.left = cpos.left + (csize.width - data.width);
            }
            return data;
        },
        _respectSize: function(data) {
            var o = this._vBoundaries, a = this.axis, ismaxw = this._isNumber(data.width) && o.maxWidth && o.maxWidth < data.width, ismaxh = this._isNumber(data.height) && o.maxHeight && o.maxHeight < data.height, isminw = this._isNumber(data.width) && o.minWidth && o.minWidth > data.width, isminh = this._isNumber(data.height) && o.minHeight && o.minHeight > data.height, dw = this.originalPosition.left + this.originalSize.width, dh = this.position.top + this.size.height, cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
            isminw && (data.width = o.minWidth);
            isminh && (data.height = o.minHeight);
            ismaxw && (data.width = o.maxWidth);
            ismaxh && (data.height = o.maxHeight);
            isminw && cw && (data.left = dw - o.minWidth);
            ismaxw && cw && (data.left = dw - o.maxWidth);
            isminh && ch && (data.top = dh - o.minHeight);
            ismaxh && ch && (data.top = dh - o.maxHeight);
            data.width || data.height || data.left || !data.top ? data.width || data.height || data.top || !data.left || (data.left = null) : data.top = null;
            return data;
        },
        _getPaddingPlusBorderDimensions: function(element) {
            for (var i = 0, widths = [], borders = [ element.css("borderTopWidth"), element.css("borderRightWidth"), element.css("borderBottomWidth"), element.css("borderLeftWidth") ], paddings = [ element.css("paddingTop"), element.css("paddingRight"), element.css("paddingBottom"), element.css("paddingLeft") ]; 4 > i; i++) {
                widths[i] = parseInt(borders[i], 10) || 0;
                widths[i] += parseInt(paddings[i], 10) || 0;
            }
            return {
                height: widths[0] + widths[2],
                width: widths[1] + widths[3]
            };
        },
        _proportionallyResize: function() {
            if (this._proportionallyResizeElements.length) for (var prel, i = 0, element = this.helper || this.element; i < this._proportionallyResizeElements.length; i++) {
                prel = this._proportionallyResizeElements[i];
                this.outerDimensions || (this.outerDimensions = this._getPaddingPlusBorderDimensions(prel));
                prel.css({
                    height: element.height() - this.outerDimensions.height || 0,
                    width: element.width() - this.outerDimensions.width || 0
                });
            }
        },
        _renderProxy: function() {
            var el = this.element, o = this.options;
            this.elementOffset = el.offset();
            if (this._helper) {
                this.helper = this.helper || $("<div style='overflow:hidden;'></div>");
                this.helper.addClass(this._helper).css({
                    width: this.element.outerWidth() - 1,
                    height: this.element.outerHeight() - 1,
                    position: "absolute",
                    left: this.elementOffset.left + "px",
                    top: this.elementOffset.top + "px",
                    zIndex: ++o.zIndex
                });
                this.helper.appendTo("body").disableSelection();
            } else this.helper = this.element;
        },
        _change: {
            e: function(event, dx) {
                return {
                    width: this.originalSize.width + dx
                };
            },
            w: function(event, dx) {
                var cs = this.originalSize, sp = this.originalPosition;
                return {
                    left: sp.left + dx,
                    width: cs.width - dx
                };
            },
            n: function(event, dx, dy) {
                var cs = this.originalSize, sp = this.originalPosition;
                return {
                    top: sp.top + dy,
                    height: cs.height - dy
                };
            },
            s: function(event, dx, dy) {
                return {
                    height: this.originalSize.height + dy
                };
            },
            se: function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [ event, dx, dy ]));
            },
            sw: function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [ event, dx, dy ]));
            },
            ne: function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [ event, dx, dy ]));
            },
            nw: function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [ event, dx, dy ]));
            }
        },
        _propagate: function(n, event) {
            $.ui.plugin.call(this, n, [ event, this.ui() ]);
            "resize" !== n && this._trigger(n, event, this.ui());
        },
        plugins: {},
        ui: function() {
            return {
                originalElement: this.originalElement,
                element: this.element,
                helper: this.helper,
                position: this.position,
                size: this.size,
                originalSize: this.originalSize,
                originalPosition: this.originalPosition
            };
        }
    });
    $.ui.plugin.add("resizable", "animate", {
        stop: function(event) {
            var that = $(this).resizable("instance"), o = that.options, pr = that._proportionallyResizeElements, ista = pr.length && /textarea/i.test(pr[0].nodeName), soffseth = ista && that._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height, soffsetw = ista ? 0 : that.sizeDiff.width, style = {
                width: that.size.width - soffsetw,
                height: that.size.height - soffseth
            }, left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null, top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null;
            that.element.animate($.extend(style, top && left ? {
                top: top,
                left: left
            } : {}), {
                duration: o.animateDuration,
                easing: o.animateEasing,
                step: function() {
                    var data = {
                        width: parseInt(that.element.css("width"), 10),
                        height: parseInt(that.element.css("height"), 10),
                        top: parseInt(that.element.css("top"), 10),
                        left: parseInt(that.element.css("left"), 10)
                    };
                    pr && pr.length && $(pr[0]).css({
                        width: data.width,
                        height: data.height
                    });
                    that._updateCache(data);
                    that._propagate("resize", event);
                }
            });
        }
    });
    $.ui.plugin.add("resizable", "containment", {
        start: function() {
            var element, p, co, ch, cw, width, height, that = $(this).resizable("instance"), o = that.options, el = that.element, oc = o.containment, ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;
            if (ce) {
                that.containerElement = $(ce);
                if (/document/.test(oc) || oc === document) {
                    that.containerOffset = {
                        left: 0,
                        top: 0
                    };
                    that.containerPosition = {
                        left: 0,
                        top: 0
                    };
                    that.parentData = {
                        element: $(document),
                        left: 0,
                        top: 0,
                        width: $(document).width(),
                        height: $(document).height() || document.body.parentNode.scrollHeight
                    };
                } else {
                    element = $(ce);
                    p = [];
                    $([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) {
                        p[i] = that._num(element.css("padding" + name));
                    });
                    that.containerOffset = element.offset();
                    that.containerPosition = element.position();
                    that.containerSize = {
                        height: element.innerHeight() - p[3],
                        width: element.innerWidth() - p[1]
                    };
                    co = that.containerOffset;
                    ch = that.containerSize.height;
                    cw = that.containerSize.width;
                    width = that._hasScroll(ce, "left") ? ce.scrollWidth : cw;
                    height = that._hasScroll(ce) ? ce.scrollHeight : ch;
                    that.parentData = {
                        element: ce,
                        left: co.left,
                        top: co.top,
                        width: width,
                        height: height
                    };
                }
            }
        },
        resize: function(event) {
            var woset, hoset, isParent, isOffsetRelative, that = $(this).resizable("instance"), o = that.options, co = that.containerOffset, cp = that.position, pRatio = that._aspectRatio || event.shiftKey, cop = {
                top: 0,
                left: 0
            }, ce = that.containerElement, continueResize = !0;
            ce[0] !== document && /static/.test(ce.css("position")) && (cop = co);
            if (cp.left < (that._helper ? co.left : 0)) {
                that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);
                if (pRatio) {
                    that.size.height = that.size.width / that.aspectRatio;
                    continueResize = !1;
                }
                that.position.left = o.helper ? co.left : 0;
            }
            if (cp.top < (that._helper ? co.top : 0)) {
                that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);
                if (pRatio) {
                    that.size.width = that.size.height * that.aspectRatio;
                    continueResize = !1;
                }
                that.position.top = that._helper ? co.top : 0;
            }
            isParent = that.containerElement.get(0) === that.element.parent().get(0);
            isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));
            if (isParent && isOffsetRelative) {
                that.offset.left = that.parentData.left + that.position.left;
                that.offset.top = that.parentData.top + that.position.top;
            } else {
                that.offset.left = that.element.offset().left;
                that.offset.top = that.element.offset().top;
            }
            woset = Math.abs(that.sizeDiff.width + (that._helper ? that.offset.left - cop.left : that.offset.left - co.left));
            hoset = Math.abs(that.sizeDiff.height + (that._helper ? that.offset.top - cop.top : that.offset.top - co.top));
            if (woset + that.size.width >= that.parentData.width) {
                that.size.width = that.parentData.width - woset;
                if (pRatio) {
                    that.size.height = that.size.width / that.aspectRatio;
                    continueResize = !1;
                }
            }
            if (hoset + that.size.height >= that.parentData.height) {
                that.size.height = that.parentData.height - hoset;
                if (pRatio) {
                    that.size.width = that.size.height * that.aspectRatio;
                    continueResize = !1;
                }
            }
            if (!continueResize) {
                that.position.left = that.prevPosition.left;
                that.position.top = that.prevPosition.top;
                that.size.width = that.prevSize.width;
                that.size.height = that.prevSize.height;
            }
        },
        stop: function() {
            var that = $(this).resizable("instance"), o = that.options, co = that.containerOffset, cop = that.containerPosition, ce = that.containerElement, helper = $(that.helper), ho = helper.offset(), w = helper.outerWidth() - that.sizeDiff.width, h = helper.outerHeight() - that.sizeDiff.height;
            that._helper && !o.animate && /relative/.test(ce.css("position")) && $(this).css({
                left: ho.left - cop.left - co.left,
                width: w,
                height: h
            });
            that._helper && !o.animate && /static/.test(ce.css("position")) && $(this).css({
                left: ho.left - cop.left - co.left,
                width: w,
                height: h
            });
        }
    });
    $.ui.plugin.add("resizable", "alsoResize", {
        start: function() {
            var that = $(this).resizable("instance"), o = that.options, _store = function(exp) {
                $(exp).each(function() {
                    var el = $(this);
                    el.data("ui-resizable-alsoresize", {
                        width: parseInt(el.width(), 10),
                        height: parseInt(el.height(), 10),
                        left: parseInt(el.css("left"), 10),
                        top: parseInt(el.css("top"), 10)
                    });
                });
            };
            if ("object" != typeof o.alsoResize || o.alsoResize.parentNode) _store(o.alsoResize); else if (o.alsoResize.length) {
                o.alsoResize = o.alsoResize[0];
                _store(o.alsoResize);
            } else $.each(o.alsoResize, function(exp) {
                _store(exp);
            });
        },
        resize: function(event, ui) {
            var that = $(this).resizable("instance"), o = that.options, os = that.originalSize, op = that.originalPosition, delta = {
                height: that.size.height - os.height || 0,
                width: that.size.width - os.width || 0,
                top: that.position.top - op.top || 0,
                left: that.position.left - op.left || 0
            }, _alsoResize = function(exp, c) {
                $(exp).each(function() {
                    var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {}, css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? [ "width", "height" ] : [ "width", "height", "top", "left" ];
                    $.each(css, function(i, prop) {
                        var sum = (start[prop] || 0) + (delta[prop] || 0);
                        sum && sum >= 0 && (style[prop] = sum || null);
                    });
                    el.css(style);
                });
            };
            "object" != typeof o.alsoResize || o.alsoResize.nodeType ? _alsoResize(o.alsoResize) : $.each(o.alsoResize, function(exp, c) {
                _alsoResize(exp, c);
            });
        },
        stop: function() {
            $(this).removeData("resizable-alsoresize");
        }
    });
    $.ui.plugin.add("resizable", "ghost", {
        start: function() {
            var that = $(this).resizable("instance"), o = that.options, cs = that.size;
            that.ghost = that.originalElement.clone();
            that.ghost.css({
                opacity: .25,
                display: "block",
                position: "relative",
                height: cs.height,
                width: cs.width,
                margin: 0,
                left: 0,
                top: 0
            }).addClass("ui-resizable-ghost").addClass("string" == typeof o.ghost ? o.ghost : "");
            that.ghost.appendTo(that.helper);
        },
        resize: function() {
            var that = $(this).resizable("instance");
            that.ghost && that.ghost.css({
                position: "relative",
                height: that.size.height,
                width: that.size.width
            });
        },
        stop: function() {
            var that = $(this).resizable("instance");
            that.ghost && that.helper && that.helper.get(0).removeChild(that.ghost.get(0));
        }
    });
    $.ui.plugin.add("resizable", "grid", {
        resize: function() {
            var outerDimensions, that = $(this).resizable("instance"), o = that.options, cs = that.size, os = that.originalSize, op = that.originalPosition, a = that.axis, grid = "number" == typeof o.grid ? [ o.grid, o.grid ] : o.grid, gridX = grid[0] || 1, gridY = grid[1] || 1, ox = Math.round((cs.width - os.width) / gridX) * gridX, oy = Math.round((cs.height - os.height) / gridY) * gridY, newWidth = os.width + ox, newHeight = os.height + oy, isMaxWidth = o.maxWidth && o.maxWidth < newWidth, isMaxHeight = o.maxHeight && o.maxHeight < newHeight, isMinWidth = o.minWidth && o.minWidth > newWidth, isMinHeight = o.minHeight && o.minHeight > newHeight;
            o.grid = grid;
            isMinWidth && (newWidth += gridX);
            isMinHeight && (newHeight += gridY);
            isMaxWidth && (newWidth -= gridX);
            isMaxHeight && (newHeight -= gridY);
            if (/^(se|s|e)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
            } else if (/^(ne)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
                that.position.top = op.top - oy;
            } else if (/^(sw)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
                that.position.left = op.left - ox;
            } else {
                (0 >= newHeight - gridY || 0 >= newWidth - gridX) && (outerDimensions = that._getPaddingPlusBorderDimensions(this));
                if (newHeight - gridY > 0) {
                    that.size.height = newHeight;
                    that.position.top = op.top - oy;
                } else {
                    newHeight = gridY - outerDimensions.height;
                    that.size.height = newHeight;
                    that.position.top = op.top + os.height - newHeight;
                }
                if (newWidth - gridX > 0) {
                    that.size.width = newWidth;
                    that.position.left = op.left - ox;
                } else {
                    newWidth = gridY - outerDimensions.height;
                    that.size.width = newWidth;
                    that.position.left = op.left + os.width - newWidth;
                }
            }
        }
    });
    $.ui.resizable, $.widget("ui.dialog", {
        version: "1.11.1",
        options: {
            appendTo: "body",
            autoOpen: !0,
            buttons: [],
            closeOnEscape: !0,
            closeText: "Close",
            dialogClass: "",
            draggable: !0,
            hide: null,
            height: "auto",
            maxHeight: null,
            maxWidth: null,
            minHeight: 150,
            minWidth: 150,
            modal: !1,
            position: {
                my: "center",
                at: "center",
                of: window,
                collision: "fit",
                using: function(pos) {
                    var topOffset = $(this).css(pos).offset().top;
                    0 > topOffset && $(this).css("top", pos.top - topOffset);
                }
            },
            resizable: !0,
            show: null,
            title: null,
            width: 300,
            beforeClose: null,
            close: null,
            drag: null,
            dragStart: null,
            dragStop: null,
            focus: null,
            open: null,
            resize: null,
            resizeStart: null,
            resizeStop: null
        },
        sizeRelatedOptions: {
            buttons: !0,
            height: !0,
            maxHeight: !0,
            maxWidth: !0,
            minHeight: !0,
            minWidth: !0,
            width: !0
        },
        resizableRelatedOptions: {
            maxHeight: !0,
            maxWidth: !0,
            minHeight: !0,
            minWidth: !0
        },
        _create: function() {
            this.originalCss = {
                display: this.element[0].style.display,
                width: this.element[0].style.width,
                minHeight: this.element[0].style.minHeight,
                maxHeight: this.element[0].style.maxHeight,
                height: this.element[0].style.height
            };
            this.originalPosition = {
                parent: this.element.parent(),
                index: this.element.parent().children().index(this.element)
            };
            this.originalTitle = this.element.attr("title");
            this.options.title = this.options.title || this.originalTitle;
            this._createWrapper();
            this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog);
            this._createTitlebar();
            this._createButtonPane();
            this.options.draggable && $.fn.draggable && this._makeDraggable();
            this.options.resizable && $.fn.resizable && this._makeResizable();
            this._isOpen = !1;
            this._trackFocus();
        },
        _init: function() {
            this.options.autoOpen && this.open();
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            return element && (element.jquery || element.nodeType) ? $(element) : this.document.find(element || "body").eq(0);
        },
        _destroy: function() {
            var next, originalPosition = this.originalPosition;
            this._destroyOverlay();
            this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach();
            this.uiDialog.stop(!0, !0).remove();
            this.originalTitle && this.element.attr("title", this.originalTitle);
            next = originalPosition.parent.children().eq(originalPosition.index);
            next.length && next[0] !== this.element[0] ? next.before(this.element) : originalPosition.parent.append(this.element);
        },
        widget: function() {
            return this.uiDialog;
        },
        disable: $.noop,
        enable: $.noop,
        close: function(event) {
            var activeElement, that = this;
            if (this._isOpen && this._trigger("beforeClose", event) !== !1) {
                this._isOpen = !1;
                this._focusedElement = null;
                this._destroyOverlay();
                this._untrackInstance();
                if (!this.opener.filter(":focusable").focus().length) try {
                    activeElement = this.document[0].activeElement;
                    activeElement && "body" !== activeElement.nodeName.toLowerCase() && $(activeElement).blur();
                } catch (error) {}
                this._hide(this.uiDialog, this.options.hide, function() {
                    that._trigger("close", event);
                });
            }
        },
        isOpen: function() {
            return this._isOpen;
        },
        moveToTop: function() {
            this._moveToTop();
        },
        _moveToTop: function(event, silent) {
            var moved = !1, zIndicies = this.uiDialog.siblings(".ui-front:visible").map(function() {
                return +$(this).css("z-index");
            }).get(), zIndexMax = Math.max.apply(null, zIndicies);
            if (zIndexMax >= +this.uiDialog.css("z-index")) {
                this.uiDialog.css("z-index", zIndexMax + 1);
                moved = !0;
            }
            moved && !silent && this._trigger("focus", event);
            return moved;
        },
        open: function() {
            var that = this;
            if (this._isOpen) this._moveToTop() && this._focusTabbable(); else {
                this._isOpen = !0;
                this.opener = $(this.document[0].activeElement);
                this._size();
                this._position();
                this._createOverlay();
                this._moveToTop(null, !0);
                this.overlay && this.overlay.css("z-index", this.uiDialog.css("z-index") - 1);
                this._show(this.uiDialog, this.options.show, function() {
                    that._focusTabbable();
                    that._trigger("focus");
                });
                this._makeFocusTarget();
                this._trigger("open");
            }
        },
        _focusTabbable: function() {
            var hasFocus = this._focusedElement;
            hasFocus || (hasFocus = this.element.find("[autofocus]"));
            hasFocus.length || (hasFocus = this.element.find(":tabbable"));
            hasFocus.length || (hasFocus = this.uiDialogButtonPane.find(":tabbable"));
            hasFocus.length || (hasFocus = this.uiDialogTitlebarClose.filter(":tabbable"));
            hasFocus.length || (hasFocus = this.uiDialog);
            hasFocus.eq(0).focus();
        },
        _keepFocus: function(event) {
            function checkFocus() {
                var activeElement = this.document[0].activeElement, isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);
                isActive || this._focusTabbable();
            }
            event.preventDefault();
            checkFocus.call(this);
            this._delay(checkFocus);
        },
        _createWrapper: function() {
            this.uiDialog = $("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " + this.options.dialogClass).hide().attr({
                tabIndex: -1,
                role: "dialog"
            }).appendTo(this._appendTo());
            this._on(this.uiDialog, {
                keydown: function(event) {
                    if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                        event.preventDefault();
                        this.close(event);
                    } else if (event.keyCode === $.ui.keyCode.TAB && !event.isDefaultPrevented()) {
                        var tabbables = this.uiDialog.find(":tabbable"), first = tabbables.filter(":first"), last = tabbables.filter(":last");
                        if (event.target !== last[0] && event.target !== this.uiDialog[0] || event.shiftKey) {
                            if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {
                                this._delay(function() {
                                    last.focus();
                                });
                                event.preventDefault();
                            }
                        } else {
                            this._delay(function() {
                                first.focus();
                            });
                            event.preventDefault();
                        }
                    }
                },
                mousedown: function(event) {
                    this._moveToTop(event) && this._focusTabbable();
                }
            });
            this.element.find("[aria-describedby]").length || this.uiDialog.attr({
                "aria-describedby": this.element.uniqueId().attr("id")
            });
        },
        _createTitlebar: function() {
            var uiDialogTitle;
            this.uiDialogTitlebar = $("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog);
            this._on(this.uiDialogTitlebar, {
                mousedown: function(event) {
                    $(event.target).closest(".ui-dialog-titlebar-close") || this.uiDialog.focus();
                }
            });
            this.uiDialogTitlebarClose = $("<button type='button'></button>").button({
                label: this.options.closeText,
                icons: {
                    primary: "ui-icon-closethick"
                },
                text: !1
            }).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar);
            this._on(this.uiDialogTitlebarClose, {
                click: function(event) {
                    event.preventDefault();
                    this.close(event);
                }
            });
            uiDialogTitle = $("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar);
            this._title(uiDialogTitle);
            this.uiDialog.attr({
                "aria-labelledby": uiDialogTitle.attr("id")
            });
        },
        _title: function(title) {
            this.options.title || title.html("&#160;");
            title.text(this.options.title);
        },
        _createButtonPane: function() {
            this.uiDialogButtonPane = $("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");
            this.uiButtonSet = $("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane);
            this._createButtons();
        },
        _createButtons: function() {
            var that = this, buttons = this.options.buttons;
            this.uiDialogButtonPane.remove();
            this.uiButtonSet.empty();
            if ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) this.uiDialog.removeClass("ui-dialog-buttons"); else {
                $.each(buttons, function(name, props) {
                    var click, buttonOptions;
                    props = $.isFunction(props) ? {
                        click: props,
                        text: name
                    } : props;
                    props = $.extend({
                        type: "button"
                    }, props);
                    click = props.click;
                    props.click = function() {
                        click.apply(that.element[0], arguments);
                    };
                    buttonOptions = {
                        icons: props.icons,
                        text: props.showText
                    };
                    delete props.icons;
                    delete props.showText;
                    $("<button></button>", props).button(buttonOptions).appendTo(that.uiButtonSet);
                });
                this.uiDialog.addClass("ui-dialog-buttons");
                this.uiDialogButtonPane.appendTo(this.uiDialog);
            }
        },
        _makeDraggable: function() {
            function filteredUi(ui) {
                return {
                    position: ui.position,
                    offset: ui.offset
                };
            }
            var that = this, options = this.options;
            this.uiDialog.draggable({
                cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
                handle: ".ui-dialog-titlebar",
                containment: "document",
                start: function(event, ui) {
                    $(this).addClass("ui-dialog-dragging");
                    that._blockFrames();
                    that._trigger("dragStart", event, filteredUi(ui));
                },
                drag: function(event, ui) {
                    that._trigger("drag", event, filteredUi(ui));
                },
                stop: function(event, ui) {
                    var left = ui.offset.left - that.document.scrollLeft(), top = ui.offset.top - that.document.scrollTop();
                    options.position = {
                        my: "left top",
                        at: "left" + (left >= 0 ? "+" : "") + left + " top" + (top >= 0 ? "+" : "") + top,
                        of: that.window
                    };
                    $(this).removeClass("ui-dialog-dragging");
                    that._unblockFrames();
                    that._trigger("dragStop", event, filteredUi(ui));
                }
            });
        },
        _makeResizable: function() {
            function filteredUi(ui) {
                return {
                    originalPosition: ui.originalPosition,
                    originalSize: ui.originalSize,
                    position: ui.position,
                    size: ui.size
                };
            }
            var that = this, options = this.options, handles = options.resizable, position = this.uiDialog.css("position"), resizeHandles = "string" == typeof handles ? handles : "n,e,s,w,se,sw,ne,nw";
            this.uiDialog.resizable({
                cancel: ".ui-dialog-content",
                containment: "document",
                alsoResize: this.element,
                maxWidth: options.maxWidth,
                maxHeight: options.maxHeight,
                minWidth: options.minWidth,
                minHeight: this._minHeight(),
                handles: resizeHandles,
                start: function(event, ui) {
                    $(this).addClass("ui-dialog-resizing");
                    that._blockFrames();
                    that._trigger("resizeStart", event, filteredUi(ui));
                },
                resize: function(event, ui) {
                    that._trigger("resize", event, filteredUi(ui));
                },
                stop: function(event, ui) {
                    var offset = that.uiDialog.offset(), left = offset.left - that.document.scrollLeft(), top = offset.top - that.document.scrollTop();
                    options.height = that.uiDialog.height();
                    options.width = that.uiDialog.width();
                    options.position = {
                        my: "left top",
                        at: "left" + (left >= 0 ? "+" : "") + left + " top" + (top >= 0 ? "+" : "") + top,
                        of: that.window
                    };
                    $(this).removeClass("ui-dialog-resizing");
                    that._unblockFrames();
                    that._trigger("resizeStop", event, filteredUi(ui));
                }
            }).css("position", position);
        },
        _trackFocus: function() {
            this._on(this.widget(), {
                focusin: function(event) {
                    this._makeFocusTarget();
                    this._focusedElement = $(event.target);
                }
            });
        },
        _makeFocusTarget: function() {
            this._untrackInstance();
            this._trackingInstances().unshift(this);
        },
        _untrackInstance: function() {
            var instances = this._trackingInstances(), exists = $.inArray(this, instances);
            -1 !== exists && instances.splice(exists, 1);
        },
        _trackingInstances: function() {
            var instances = this.document.data("ui-dialog-instances");
            if (!instances) {
                instances = [];
                this.document.data("ui-dialog-instances", instances);
            }
            return instances;
        },
        _minHeight: function() {
            var options = this.options;
            return "auto" === options.height ? options.minHeight : Math.min(options.minHeight, options.height);
        },
        _position: function() {
            var isVisible = this.uiDialog.is(":visible");
            isVisible || this.uiDialog.show();
            this.uiDialog.position(this.options.position);
            isVisible || this.uiDialog.hide();
        },
        _setOptions: function(options) {
            var that = this, resize = !1, resizableOptions = {};
            $.each(options, function(key, value) {
                that._setOption(key, value);
                key in that.sizeRelatedOptions && (resize = !0);
                key in that.resizableRelatedOptions && (resizableOptions[key] = value);
            });
            if (resize) {
                this._size();
                this._position();
            }
            this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", resizableOptions);
        },
        _setOption: function(key, value) {
            var isDraggable, isResizable, uiDialog = this.uiDialog;
            "dialogClass" === key && uiDialog.removeClass(this.options.dialogClass).addClass(value);
            if ("disabled" !== key) {
                this._super(key, value);
                "appendTo" === key && this.uiDialog.appendTo(this._appendTo());
                "buttons" === key && this._createButtons();
                "closeText" === key && this.uiDialogTitlebarClose.button({
                    label: "" + value
                });
                if ("draggable" === key) {
                    isDraggable = uiDialog.is(":data(ui-draggable)");
                    isDraggable && !value && uiDialog.draggable("destroy");
                    !isDraggable && value && this._makeDraggable();
                }
                "position" === key && this._position();
                if ("resizable" === key) {
                    isResizable = uiDialog.is(":data(ui-resizable)");
                    isResizable && !value && uiDialog.resizable("destroy");
                    isResizable && "string" == typeof value && uiDialog.resizable("option", "handles", value);
                    isResizable || value === !1 || this._makeResizable();
                }
                "title" === key && this._title(this.uiDialogTitlebar.find(".ui-dialog-title"));
            }
        },
        _size: function() {
            var nonContentHeight, minContentHeight, maxContentHeight, options = this.options;
            this.element.show().css({
                width: "auto",
                minHeight: 0,
                maxHeight: "none",
                height: 0
            });
            options.minWidth > options.width && (options.width = options.minWidth);
            nonContentHeight = this.uiDialog.css({
                height: "auto",
                width: options.width
            }).outerHeight();
            minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
            maxContentHeight = "number" == typeof options.maxHeight ? Math.max(0, options.maxHeight - nonContentHeight) : "none";
            "auto" === options.height ? this.element.css({
                minHeight: minContentHeight,
                maxHeight: maxContentHeight,
                height: "auto"
            }) : this.element.height(Math.max(0, options.height - nonContentHeight));
            this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight());
        },
        _blockFrames: function() {
            this.iframeBlocks = this.document.find("iframe").map(function() {
                var iframe = $(this);
                return $("<div>").css({
                    position: "absolute",
                    width: iframe.outerWidth(),
                    height: iframe.outerHeight()
                }).appendTo(iframe.parent()).offset(iframe.offset())[0];
            });
        },
        _unblockFrames: function() {
            if (this.iframeBlocks) {
                this.iframeBlocks.remove();
                delete this.iframeBlocks;
            }
        },
        _allowInteraction: function(event) {
            return $(event.target).closest(".ui-dialog").length ? !0 : !!$(event.target).closest(".ui-datepicker").length;
        },
        _createOverlay: function() {
            if (this.options.modal) {
                var isOpening = !0;
                this._delay(function() {
                    isOpening = !1;
                });
                this.document.data("ui-dialog-overlays") || this._on(this.document, {
                    focusin: function(event) {
                        if (!isOpening && !this._allowInteraction(event)) {
                            event.preventDefault();
                            this._trackingInstances()[0]._focusTabbable();
                        }
                    }
                });
                this.overlay = $("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo());
                this._on(this.overlay, {
                    mousedown: "_keepFocus"
                });
                this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1);
            }
        },
        _destroyOverlay: function() {
            if (this.options.modal && this.overlay) {
                var overlays = this.document.data("ui-dialog-overlays") - 1;
                overlays ? this.document.data("ui-dialog-overlays", overlays) : this.document.unbind("focusin").removeData("ui-dialog-overlays");
                this.overlay.remove();
                this.overlay = null;
            }
        }
    });
    $.widget("ui.droppable", {
        version: "1.11.1",
        widgetEventPrefix: "drop",
        options: {
            accept: "*",
            activeClass: !1,
            addClasses: !0,
            greedy: !1,
            hoverClass: !1,
            scope: "default",
            tolerance: "intersect",
            activate: null,
            deactivate: null,
            drop: null,
            out: null,
            over: null
        },
        _create: function() {
            var proportions, o = this.options, accept = o.accept;
            this.isover = !1;
            this.isout = !0;
            this.accept = $.isFunction(accept) ? accept : function(d) {
                return d.is(accept);
            };
            this.proportions = function() {
                if (!arguments.length) return proportions ? proportions : proportions = {
                    width: this.element[0].offsetWidth,
                    height: this.element[0].offsetHeight
                };
                proportions = arguments[0];
            };
            this._addToManager(o.scope);
            o.addClasses && this.element.addClass("ui-droppable");
        },
        _addToManager: function(scope) {
            $.ui.ddmanager.droppables[scope] = $.ui.ddmanager.droppables[scope] || [];
            $.ui.ddmanager.droppables[scope].push(this);
        },
        _splice: function(drop) {
            for (var i = 0; i < drop.length; i++) drop[i] === this && drop.splice(i, 1);
        },
        _destroy: function() {
            var drop = $.ui.ddmanager.droppables[this.options.scope];
            this._splice(drop);
            this.element.removeClass("ui-droppable ui-droppable-disabled");
        },
        _setOption: function(key, value) {
            if ("accept" === key) this.accept = $.isFunction(value) ? value : function(d) {
                return d.is(value);
            }; else if ("scope" === key) {
                var drop = $.ui.ddmanager.droppables[this.options.scope];
                this._splice(drop);
                this._addToManager(value);
            }
            this._super(key, value);
        },
        _activate: function(event) {
            var draggable = $.ui.ddmanager.current;
            this.options.activeClass && this.element.addClass(this.options.activeClass);
            draggable && this._trigger("activate", event, this.ui(draggable));
        },
        _deactivate: function(event) {
            var draggable = $.ui.ddmanager.current;
            this.options.activeClass && this.element.removeClass(this.options.activeClass);
            draggable && this._trigger("deactivate", event, this.ui(draggable));
        },
        _over: function(event) {
            var draggable = $.ui.ddmanager.current;
            if (draggable && (draggable.currentItem || draggable.element)[0] !== this.element[0] && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                this.options.hoverClass && this.element.addClass(this.options.hoverClass);
                this._trigger("over", event, this.ui(draggable));
            }
        },
        _out: function(event) {
            var draggable = $.ui.ddmanager.current;
            if (draggable && (draggable.currentItem || draggable.element)[0] !== this.element[0] && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                this.options.hoverClass && this.element.removeClass(this.options.hoverClass);
                this._trigger("out", event, this.ui(draggable));
            }
        },
        _drop: function(event, custom) {
            var draggable = custom || $.ui.ddmanager.current, childrenIntersection = !1;
            if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) return !1;
            this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
                var inst = $(this).droppable("instance");
                if (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], draggable.currentItem || draggable.element) && $.ui.intersect(draggable, $.extend(inst, {
                    offset: inst.element.offset()
                }), inst.options.tolerance, event)) {
                    childrenIntersection = !0;
                    return !1;
                }
            });
            if (childrenIntersection) return !1;
            if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                this.options.activeClass && this.element.removeClass(this.options.activeClass);
                this.options.hoverClass && this.element.removeClass(this.options.hoverClass);
                this._trigger("drop", event, this.ui(draggable));
                return this.element;
            }
            return !1;
        },
        ui: function(c) {
            return {
                draggable: c.currentItem || c.element,
                helper: c.helper,
                position: c.position,
                offset: c.positionAbs
            };
        }
    });
    $.ui.intersect = function() {
        function isOverAxis(x, reference, size) {
            return x >= reference && reference + size > x;
        }
        return function(draggable, droppable, toleranceMode, event) {
            if (!droppable.offset) return !1;
            var x1 = (draggable.positionAbs || draggable.position.absolute).left, y1 = (draggable.positionAbs || draggable.position.absolute).top, x2 = x1 + draggable.helperProportions.width, y2 = y1 + draggable.helperProportions.height, l = droppable.offset.left, t = droppable.offset.top, r = l + droppable.proportions().width, b = t + droppable.proportions().height;
            switch (toleranceMode) {
              case "fit":
                return x1 >= l && r >= x2 && y1 >= t && b >= y2;

              case "intersect":
                return l < x1 + draggable.helperProportions.width / 2 && x2 - draggable.helperProportions.width / 2 < r && t < y1 + draggable.helperProportions.height / 2 && y2 - draggable.helperProportions.height / 2 < b;

              case "pointer":
                return isOverAxis(event.pageY, t, droppable.proportions().height) && isOverAxis(event.pageX, l, droppable.proportions().width);

              case "touch":
                return (y1 >= t && b >= y1 || y2 >= t && b >= y2 || t > y1 && y2 > b) && (x1 >= l && r >= x1 || x2 >= l && r >= x2 || l > x1 && x2 > r);

              default:
                return !1;
            }
        };
    }();
    $.ui.ddmanager = {
        current: null,
        droppables: {
            "default": []
        },
        prepareOffsets: function(t, event) {
            var i, j, m = $.ui.ddmanager.droppables[t.options.scope] || [], type = event ? event.type : null, list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();
            droppablesLoop: for (i = 0; i < m.length; i++) if (!(m[i].options.disabled || t && !m[i].accept.call(m[i].element[0], t.currentItem || t.element))) {
                for (j = 0; j < list.length; j++) if (list[j] === m[i].element[0]) {
                    m[i].proportions().height = 0;
                    continue droppablesLoop;
                }
                m[i].visible = "none" !== m[i].element.css("display");
                if (m[i].visible) {
                    "mousedown" === type && m[i]._activate.call(m[i], event);
                    m[i].offset = m[i].element.offset();
                    m[i].proportions({
                        width: m[i].element[0].offsetWidth,
                        height: m[i].element[0].offsetHeight
                    });
                }
            }
        },
        drop: function(draggable, event) {
            var dropped = !1;
            $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {
                if (this.options) {
                    !this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance, event) && (dropped = this._drop.call(this, event) || dropped);
                    if (!this.options.disabled && this.visible && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                        this.isout = !0;
                        this.isover = !1;
                        this._deactivate.call(this, event);
                    }
                }
            });
            return dropped;
        },
        dragStart: function(draggable, event) {
            draggable.element.parentsUntil("body").bind("scroll.droppable", function() {
                draggable.options.refreshPositions || $.ui.ddmanager.prepareOffsets(draggable, event);
            });
        },
        drag: function(draggable, event) {
            draggable.options.refreshPositions && $.ui.ddmanager.prepareOffsets(draggable, event);
            $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {
                if (!this.options.disabled && !this.greedyChild && this.visible) {
                    var parentInstance, scope, parent, intersects = $.ui.intersect(draggable, this, this.options.tolerance, event), c = !intersects && this.isover ? "isout" : intersects && !this.isover ? "isover" : null;
                    if (c) {
                        if (this.options.greedy) {
                            scope = this.options.scope;
                            parent = this.element.parents(":data(ui-droppable)").filter(function() {
                                return $(this).droppable("instance").options.scope === scope;
                            });
                            if (parent.length) {
                                parentInstance = $(parent[0]).droppable("instance");
                                parentInstance.greedyChild = "isover" === c;
                            }
                        }
                        if (parentInstance && "isover" === c) {
                            parentInstance.isover = !1;
                            parentInstance.isout = !0;
                            parentInstance._out.call(parentInstance, event);
                        }
                        this[c] = !0;
                        this["isout" === c ? "isover" : "isout"] = !1;
                        this["isover" === c ? "_over" : "_out"].call(this, event);
                        if (parentInstance && "isout" === c) {
                            parentInstance.isout = !1;
                            parentInstance.isover = !0;
                            parentInstance._over.call(parentInstance, event);
                        }
                    }
                }
            });
        },
        dragStop: function(draggable, event) {
            draggable.element.parentsUntil("body").unbind("scroll.droppable");
            draggable.options.refreshPositions || $.ui.ddmanager.prepareOffsets(draggable, event);
        }
    };
    var dataSpace = ($.ui.droppable, "ui-effects-"), jQuery = $;
    $.effects = {
        effect: {}
    };
    !function(jQuery, undefined) {
        function clamp(value, prop, allowEmpty) {
            var type = propTypes[prop.type] || {};
            if (null == value) return allowEmpty || !prop.def ? null : prop.def;
            value = type.floor ? ~~value : parseFloat(value);
            return isNaN(value) ? prop.def : type.mod ? (value + type.mod) % type.mod : 0 > value ? 0 : type.max < value ? type.max : value;
        }
        function stringParse(string) {
            var inst = color(), rgba = inst._rgba = [];
            string = string.toLowerCase();
            each(stringParsers, function(i, parser) {
                var parsed, match = parser.re.exec(string), values = match && parser.parse(match), spaceName = parser.space || "rgba";
                if (values) {
                    parsed = inst[spaceName](values);
                    inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];
                    rgba = inst._rgba = parsed._rgba;
                    return !1;
                }
            });
            if (rgba.length) {
                "0,0,0,0" === rgba.join() && jQuery.extend(rgba, colors.transparent);
                return inst;
            }
            return colors[string];
        }
        function hue2rgb(p, q, h) {
            h = (h + 1) % 1;
            return 1 > 6 * h ? p + (q - p) * h * 6 : 1 > 2 * h ? q : 2 > 3 * h ? p + (q - p) * (2 / 3 - h) * 6 : p;
        }
        var colors, stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor", rplusequals = /^([\-+])=\s*(\d+\.?\d*)/, stringParsers = [ {
            re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            parse: function(execResult) {
                return [ execResult[1], execResult[2], execResult[3], execResult[4] ];
            }
        }, {
            re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            parse: function(execResult) {
                return [ 2.55 * execResult[1], 2.55 * execResult[2], 2.55 * execResult[3], execResult[4] ];
            }
        }, {
            re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
            parse: function(execResult) {
                return [ parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16) ];
            }
        }, {
            re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
            parse: function(execResult) {
                return [ parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16) ];
            }
        }, {
            re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            space: "hsla",
            parse: function(execResult) {
                return [ execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4] ];
            }
        } ], color = jQuery.Color = function(color, green, blue, alpha) {
            return new jQuery.Color.fn.parse(color, green, blue, alpha);
        }, spaces = {
            rgba: {
                props: {
                    red: {
                        idx: 0,
                        type: "byte"
                    },
                    green: {
                        idx: 1,
                        type: "byte"
                    },
                    blue: {
                        idx: 2,
                        type: "byte"
                    }
                }
            },
            hsla: {
                props: {
                    hue: {
                        idx: 0,
                        type: "degrees"
                    },
                    saturation: {
                        idx: 1,
                        type: "percent"
                    },
                    lightness: {
                        idx: 2,
                        type: "percent"
                    }
                }
            }
        }, propTypes = {
            "byte": {
                floor: !0,
                max: 255
            },
            percent: {
                max: 1
            },
            degrees: {
                mod: 360,
                floor: !0
            }
        }, support = color.support = {}, supportElem = jQuery("<p>")[0], each = jQuery.each;
        supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
        support.rgba = supportElem.style.backgroundColor.indexOf("rgba") > -1;
        each(spaces, function(spaceName, space) {
            space.cache = "_" + spaceName;
            space.props.alpha = {
                idx: 3,
                type: "percent",
                def: 1
            };
        });
        color.fn = jQuery.extend(color.prototype, {
            parse: function(red, green, blue, alpha) {
                if (red === undefined) {
                    this._rgba = [ null, null, null, null ];
                    return this;
                }
                if (red.jquery || red.nodeType) {
                    red = jQuery(red).css(green);
                    green = undefined;
                }
                var inst = this, type = jQuery.type(red), rgba = this._rgba = [];
                if (green !== undefined) {
                    red = [ red, green, blue, alpha ];
                    type = "array";
                }
                if ("string" === type) return this.parse(stringParse(red) || colors._default);
                if ("array" === type) {
                    each(spaces.rgba.props, function(key, prop) {
                        rgba[prop.idx] = clamp(red[prop.idx], prop);
                    });
                    return this;
                }
                if ("object" === type) {
                    red instanceof color ? each(spaces, function(spaceName, space) {
                        red[space.cache] && (inst[space.cache] = red[space.cache].slice());
                    }) : each(spaces, function(spaceName, space) {
                        var cache = space.cache;
                        each(space.props, function(key, prop) {
                            if (!inst[cache] && space.to) {
                                if ("alpha" === key || null == red[key]) return;
                                inst[cache] = space.to(inst._rgba);
                            }
                            inst[cache][prop.idx] = clamp(red[key], prop, !0);
                        });
                        if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {
                            inst[cache][3] = 1;
                            space.from && (inst._rgba = space.from(inst[cache]));
                        }
                    });
                    return this;
                }
            },
            is: function(compare) {
                var is = color(compare), same = !0, inst = this;
                each(spaces, function(_, space) {
                    var localCache, isCache = is[space.cache];
                    if (isCache) {
                        localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];
                        each(space.props, function(_, prop) {
                            if (null != isCache[prop.idx]) {
                                same = isCache[prop.idx] === localCache[prop.idx];
                                return same;
                            }
                        });
                    }
                    return same;
                });
                return same;
            },
            _space: function() {
                var used = [], inst = this;
                each(spaces, function(spaceName, space) {
                    inst[space.cache] && used.push(spaceName);
                });
                return used.pop();
            },
            transition: function(other, distance) {
                var end = color(other), spaceName = end._space(), space = spaces[spaceName], startColor = 0 === this.alpha() ? color("transparent") : this, start = startColor[space.cache] || space.to(startColor._rgba), result = start.slice();
                end = end[space.cache];
                each(space.props, function(key, prop) {
                    var index = prop.idx, startValue = start[index], endValue = end[index], type = propTypes[prop.type] || {};
                    if (null !== endValue) if (null === startValue) result[index] = endValue; else {
                        type.mod && (endValue - startValue > type.mod / 2 ? startValue += type.mod : startValue - endValue > type.mod / 2 && (startValue -= type.mod));
                        result[index] = clamp((endValue - startValue) * distance + startValue, prop);
                    }
                });
                return this[spaceName](result);
            },
            blend: function(opaque) {
                if (1 === this._rgba[3]) return this;
                var rgb = this._rgba.slice(), a = rgb.pop(), blend = color(opaque)._rgba;
                return color(jQuery.map(rgb, function(v, i) {
                    return (1 - a) * blend[i] + a * v;
                }));
            },
            toRgbaString: function() {
                var prefix = "rgba(", rgba = jQuery.map(this._rgba, function(v, i) {
                    return null == v ? i > 2 ? 1 : 0 : v;
                });
                if (1 === rgba[3]) {
                    rgba.pop();
                    prefix = "rgb(";
                }
                return prefix + rgba.join() + ")";
            },
            toHslaString: function() {
                var prefix = "hsla(", hsla = jQuery.map(this.hsla(), function(v, i) {
                    null == v && (v = i > 2 ? 1 : 0);
                    i && 3 > i && (v = Math.round(100 * v) + "%");
                    return v;
                });
                if (1 === hsla[3]) {
                    hsla.pop();
                    prefix = "hsl(";
                }
                return prefix + hsla.join() + ")";
            },
            toHexString: function(includeAlpha) {
                var rgba = this._rgba.slice(), alpha = rgba.pop();
                includeAlpha && rgba.push(~~(255 * alpha));
                return "#" + jQuery.map(rgba, function(v) {
                    v = (v || 0).toString(16);
                    return 1 === v.length ? "0" + v : v;
                }).join("");
            },
            toString: function() {
                return 0 === this._rgba[3] ? "transparent" : this.toRgbaString();
            }
        });
        color.fn.parse.prototype = color.fn;
        spaces.hsla.to = function(rgba) {
            if (null == rgba[0] || null == rgba[1] || null == rgba[2]) return [ null, null, null, rgba[3] ];
            var h, s, r = rgba[0] / 255, g = rgba[1] / 255, b = rgba[2] / 255, a = rgba[3], max = Math.max(r, g, b), min = Math.min(r, g, b), diff = max - min, add = max + min, l = .5 * add;
            h = min === max ? 0 : r === max ? 60 * (g - b) / diff + 360 : g === max ? 60 * (b - r) / diff + 120 : 60 * (r - g) / diff + 240;
            s = 0 === diff ? 0 : .5 >= l ? diff / add : diff / (2 - add);
            return [ Math.round(h) % 360, s, l, null == a ? 1 : a ];
        };
        spaces.hsla.from = function(hsla) {
            if (null == hsla[0] || null == hsla[1] || null == hsla[2]) return [ null, null, null, hsla[3] ];
            var h = hsla[0] / 360, s = hsla[1], l = hsla[2], a = hsla[3], q = .5 >= l ? l * (1 + s) : l + s - l * s, p = 2 * l - q;
            return [ Math.round(255 * hue2rgb(p, q, h + 1 / 3)), Math.round(255 * hue2rgb(p, q, h)), Math.round(255 * hue2rgb(p, q, h - 1 / 3)), a ];
        };
        each(spaces, function(spaceName, space) {
            var props = space.props, cache = space.cache, to = space.to, from = space.from;
            color.fn[spaceName] = function(value) {
                to && !this[cache] && (this[cache] = to(this._rgba));
                if (value === undefined) return this[cache].slice();
                var ret, type = jQuery.type(value), arr = "array" === type || "object" === type ? value : arguments, local = this[cache].slice();
                each(props, function(key, prop) {
                    var val = arr["object" === type ? key : prop.idx];
                    null == val && (val = local[prop.idx]);
                    local[prop.idx] = clamp(val, prop);
                });
                if (from) {
                    ret = color(from(local));
                    ret[cache] = local;
                    return ret;
                }
                return color(local);
            };
            each(props, function(key, prop) {
                color.fn[key] || (color.fn[key] = function(value) {
                    var match, vtype = jQuery.type(value), fn = "alpha" === key ? this._hsla ? "hsla" : "rgba" : spaceName, local = this[fn](), cur = local[prop.idx];
                    if ("undefined" === vtype) return cur;
                    if ("function" === vtype) {
                        value = value.call(this, cur);
                        vtype = jQuery.type(value);
                    }
                    if (null == value && prop.empty) return this;
                    if ("string" === vtype) {
                        match = rplusequals.exec(value);
                        match && (value = cur + parseFloat(match[2]) * ("+" === match[1] ? 1 : -1));
                    }
                    local[prop.idx] = value;
                    return this[fn](local);
                });
            });
        });
        color.hook = function(hook) {
            var hooks = hook.split(" ");
            each(hooks, function(i, hook) {
                jQuery.cssHooks[hook] = {
                    set: function(elem, value) {
                        var parsed, curElem, backgroundColor = "";
                        if ("transparent" !== value && ("string" !== jQuery.type(value) || (parsed = stringParse(value)))) {
                            value = color(parsed || value);
                            if (!support.rgba && 1 !== value._rgba[3]) {
                                curElem = "backgroundColor" === hook ? elem.parentNode : elem;
                                for (;("" === backgroundColor || "transparent" === backgroundColor) && curElem && curElem.style; ) try {
                                    backgroundColor = jQuery.css(curElem, "backgroundColor");
                                    curElem = curElem.parentNode;
                                } catch (e) {}
                                value = value.blend(backgroundColor && "transparent" !== backgroundColor ? backgroundColor : "_default");
                            }
                            value = value.toRgbaString();
                        }
                        try {
                            elem.style[hook] = value;
                        } catch (e) {}
                    }
                };
                jQuery.fx.step[hook] = function(fx) {
                    if (!fx.colorInit) {
                        fx.start = color(fx.elem, hook);
                        fx.end = color(fx.end);
                        fx.colorInit = !0;
                    }
                    jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));
                };
            });
        };
        color.hook(stepHooks);
        jQuery.cssHooks.borderColor = {
            expand: function(value) {
                var expanded = {};
                each([ "Top", "Right", "Bottom", "Left" ], function(i, part) {
                    expanded["border" + part + "Color"] = value;
                });
                return expanded;
            }
        };
        colors = jQuery.Color.names = {
            aqua: "#00ffff",
            black: "#000000",
            blue: "#0000ff",
            fuchsia: "#ff00ff",
            gray: "#808080",
            green: "#008000",
            lime: "#00ff00",
            maroon: "#800000",
            navy: "#000080",
            olive: "#808000",
            purple: "#800080",
            red: "#ff0000",
            silver: "#c0c0c0",
            teal: "#008080",
            white: "#ffffff",
            yellow: "#ffff00",
            transparent: [ null, null, null, 0 ],
            _default: "#ffffff"
        };
    }(jQuery);
    !function() {
        function getElementStyles(elem) {
            var key, len, style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle, styles = {};
            if (style && style.length && style[0] && style[style[0]]) {
                len = style.length;
                for (;len--; ) {
                    key = style[len];
                    "string" == typeof style[key] && (styles[$.camelCase(key)] = style[key]);
                }
            } else for (key in style) "string" == typeof style[key] && (styles[key] = style[key]);
            return styles;
        }
        function styleDifference(oldStyle, newStyle) {
            var name, value, diff = {};
            for (name in newStyle) {
                value = newStyle[name];
                oldStyle[name] !== value && (shorthandStyles[name] || ($.fx.step[name] || !isNaN(parseFloat(value))) && (diff[name] = value));
            }
            return diff;
        }
        var classAnimationActions = [ "add", "remove", "toggle" ], shorthandStyles = {
            border: 1,
            borderBottom: 1,
            borderColor: 1,
            borderLeft: 1,
            borderRight: 1,
            borderTop: 1,
            borderWidth: 1,
            margin: 1,
            padding: 1
        };
        $.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function(_, prop) {
            $.fx.step[prop] = function(fx) {
                if ("none" !== fx.end && !fx.setAttr || 1 === fx.pos && !fx.setAttr) {
                    jQuery.style(fx.elem, prop, fx.end);
                    fx.setAttr = !0;
                }
            };
        });
        $.fn.addBack || ($.fn.addBack = function(selector) {
            return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
        });
        $.effects.animateClass = function(value, duration, easing, callback) {
            var o = $.speed(duration, easing, callback);
            return this.queue(function() {
                var applyClassChange, animated = $(this), baseClass = animated.attr("class") || "", allAnimations = o.children ? animated.find("*").addBack() : animated;
                allAnimations = allAnimations.map(function() {
                    var el = $(this);
                    return {
                        el: el,
                        start: getElementStyles(this)
                    };
                });
                applyClassChange = function() {
                    $.each(classAnimationActions, function(i, action) {
                        value[action] && animated[action + "Class"](value[action]);
                    });
                };
                applyClassChange();
                allAnimations = allAnimations.map(function() {
                    this.end = getElementStyles(this.el[0]);
                    this.diff = styleDifference(this.start, this.end);
                    return this;
                });
                animated.attr("class", baseClass);
                allAnimations = allAnimations.map(function() {
                    var styleInfo = this, dfd = $.Deferred(), opts = $.extend({}, o, {
                        queue: !1,
                        complete: function() {
                            dfd.resolve(styleInfo);
                        }
                    });
                    this.el.animate(this.diff, opts);
                    return dfd.promise();
                });
                $.when.apply($, allAnimations.get()).done(function() {
                    applyClassChange();
                    $.each(arguments, function() {
                        var el = this.el;
                        $.each(this.diff, function(key) {
                            el.css(key, "");
                        });
                    });
                    o.complete.call(animated[0]);
                });
            });
        };
        $.fn.extend({
            addClass: function(orig) {
                return function(classNames, speed, easing, callback) {
                    return speed ? $.effects.animateClass.call(this, {
                        add: classNames
                    }, speed, easing, callback) : orig.apply(this, arguments);
                };
            }($.fn.addClass),
            removeClass: function(orig) {
                return function(classNames, speed, easing, callback) {
                    return arguments.length > 1 ? $.effects.animateClass.call(this, {
                        remove: classNames
                    }, speed, easing, callback) : orig.apply(this, arguments);
                };
            }($.fn.removeClass),
            toggleClass: function(orig) {
                return function(classNames, force, speed, easing, callback) {
                    return "boolean" == typeof force || void 0 === force ? speed ? $.effects.animateClass.call(this, force ? {
                        add: classNames
                    } : {
                        remove: classNames
                    }, speed, easing, callback) : orig.apply(this, arguments) : $.effects.animateClass.call(this, {
                        toggle: classNames
                    }, force, speed, easing);
                };
            }($.fn.toggleClass),
            switchClass: function(remove, add, speed, easing, callback) {
                return $.effects.animateClass.call(this, {
                    add: add,
                    remove: remove
                }, speed, easing, callback);
            }
        });
    }();
    !function() {
        function _normalizeArguments(effect, options, speed, callback) {
            if ($.isPlainObject(effect)) {
                options = effect;
                effect = effect.effect;
            }
            effect = {
                effect: effect
            };
            null == options && (options = {});
            if ($.isFunction(options)) {
                callback = options;
                speed = null;
                options = {};
            }
            if ("number" == typeof options || $.fx.speeds[options]) {
                callback = speed;
                speed = options;
                options = {};
            }
            if ($.isFunction(speed)) {
                callback = speed;
                speed = null;
            }
            options && $.extend(effect, options);
            speed = speed || options.duration;
            effect.duration = $.fx.off ? 0 : "number" == typeof speed ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;
            effect.complete = callback || options.complete;
            return effect;
        }
        function standardAnimationOption(option) {
            return !option || "number" == typeof option || $.fx.speeds[option] ? !0 : "string" != typeof option || $.effects.effect[option] ? $.isFunction(option) ? !0 : "object" != typeof option || option.effect ? !1 : !0 : !0;
        }
        $.extend($.effects, {
            version: "1.11.1",
            save: function(element, set) {
                for (var i = 0; i < set.length; i++) null !== set[i] && element.data(dataSpace + set[i], element[0].style[set[i]]);
            },
            restore: function(element, set) {
                var val, i;
                for (i = 0; i < set.length; i++) if (null !== set[i]) {
                    val = element.data(dataSpace + set[i]);
                    void 0 === val && (val = "");
                    element.css(set[i], val);
                }
            },
            setMode: function(el, mode) {
                "toggle" === mode && (mode = el.is(":hidden") ? "show" : "hide");
                return mode;
            },
            getBaseline: function(origin, original) {
                var y, x;
                switch (origin[0]) {
                  case "top":
                    y = 0;
                    break;

                  case "middle":
                    y = .5;
                    break;

                  case "bottom":
                    y = 1;
                    break;

                  default:
                    y = origin[0] / original.height;
                }
                switch (origin[1]) {
                  case "left":
                    x = 0;
                    break;

                  case "center":
                    x = .5;
                    break;

                  case "right":
                    x = 1;
                    break;

                  default:
                    x = origin[1] / original.width;
                }
                return {
                    x: x,
                    y: y
                };
            },
            createWrapper: function(element) {
                if (element.parent().is(".ui-effects-wrapper")) return element.parent();
                var props = {
                    width: element.outerWidth(!0),
                    height: element.outerHeight(!0),
                    "float": element.css("float")
                }, wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({
                    fontSize: "100%",
                    background: "transparent",
                    border: "none",
                    margin: 0,
                    padding: 0
                }), size = {
                    width: element.width(),
                    height: element.height()
                }, active = document.activeElement;
                try {
                    active.id;
                } catch (e) {
                    active = document.body;
                }
                element.wrap(wrapper);
                (element[0] === active || $.contains(element[0], active)) && $(active).focus();
                wrapper = element.parent();
                if ("static" === element.css("position")) {
                    wrapper.css({
                        position: "relative"
                    });
                    element.css({
                        position: "relative"
                    });
                } else {
                    $.extend(props, {
                        position: element.css("position"),
                        zIndex: element.css("z-index")
                    });
                    $.each([ "top", "left", "bottom", "right" ], function(i, pos) {
                        props[pos] = element.css(pos);
                        isNaN(parseInt(props[pos], 10)) && (props[pos] = "auto");
                    });
                    element.css({
                        position: "relative",
                        top: 0,
                        left: 0,
                        right: "auto",
                        bottom: "auto"
                    });
                }
                element.css(size);
                return wrapper.css(props).show();
            },
            removeWrapper: function(element) {
                var active = document.activeElement;
                if (element.parent().is(".ui-effects-wrapper")) {
                    element.parent().replaceWith(element);
                    (element[0] === active || $.contains(element[0], active)) && $(active).focus();
                }
                return element;
            },
            setTransition: function(element, list, factor, value) {
                value = value || {};
                $.each(list, function(i, x) {
                    var unit = element.cssUnit(x);
                    unit[0] > 0 && (value[x] = unit[0] * factor + unit[1]);
                });
                return value;
            }
        });
        $.fn.extend({
            effect: function() {
                function run(next) {
                    function done() {
                        $.isFunction(complete) && complete.call(elem[0]);
                        $.isFunction(next) && next();
                    }
                    var elem = $(this), complete = args.complete, mode = args.mode;
                    if (elem.is(":hidden") ? "hide" === mode : "show" === mode) {
                        elem[mode]();
                        done();
                    } else effectMethod.call(elem[0], args, done);
                }
                var args = _normalizeArguments.apply(this, arguments), mode = args.mode, queue = args.queue, effectMethod = $.effects.effect[args.effect];
                return $.fx.off || !effectMethod ? mode ? this[mode](args.duration, args.complete) : this.each(function() {
                    args.complete && args.complete.call(this);
                }) : queue === !1 ? this.each(run) : this.queue(queue || "fx", run);
            },
            show: function(orig) {
                return function(option) {
                    if (standardAnimationOption(option)) return orig.apply(this, arguments);
                    var args = _normalizeArguments.apply(this, arguments);
                    args.mode = "show";
                    return this.effect.call(this, args);
                };
            }($.fn.show),
            hide: function(orig) {
                return function(option) {
                    if (standardAnimationOption(option)) return orig.apply(this, arguments);
                    var args = _normalizeArguments.apply(this, arguments);
                    args.mode = "hide";
                    return this.effect.call(this, args);
                };
            }($.fn.hide),
            toggle: function(orig) {
                return function(option) {
                    if (standardAnimationOption(option) || "boolean" == typeof option) return orig.apply(this, arguments);
                    var args = _normalizeArguments.apply(this, arguments);
                    args.mode = "toggle";
                    return this.effect.call(this, args);
                };
            }($.fn.toggle),
            cssUnit: function(key) {
                var style = this.css(key), val = [];
                $.each([ "em", "px", "%", "pt" ], function(i, unit) {
                    style.indexOf(unit) > 0 && (val = [ parseFloat(style), unit ]);
                });
                return val;
            }
        });
    }();
    !function() {
        var baseEasings = {};
        $.each([ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function(i, name) {
            baseEasings[name] = function(p) {
                return Math.pow(p, i + 2);
            };
        });
        $.extend(baseEasings, {
            Sine: function(p) {
                return 1 - Math.cos(p * Math.PI / 2);
            },
            Circ: function(p) {
                return 1 - Math.sqrt(1 - p * p);
            },
            Elastic: function(p) {
                return 0 === p || 1 === p ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin((80 * (p - 1) - 7.5) * Math.PI / 15);
            },
            Back: function(p) {
                return p * p * (3 * p - 2);
            },
            Bounce: function(p) {
                for (var pow2, bounce = 4; p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11; ) ;
                return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((3 * pow2 - 2) / 22 - p, 2);
            }
        });
        $.each(baseEasings, function(name, easeIn) {
            $.easing["easeIn" + name] = easeIn;
            $.easing["easeOut" + name] = function(p) {
                return 1 - easeIn(1 - p);
            };
            $.easing["easeInOut" + name] = function(p) {
                return .5 > p ? easeIn(2 * p) / 2 : 1 - easeIn(-2 * p + 2) / 2;
            };
        });
    }();
    $.effects, $.effects.effect.blind = function(o, done) {
        var wrapper, distance, margin, el = $(this), rvertical = /up|down|vertical/, rpositivemotion = /up|left|vertical|horizontal/, props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), direction = o.direction || "up", vertical = rvertical.test(direction), ref = vertical ? "height" : "width", ref2 = vertical ? "top" : "left", motion = rpositivemotion.test(direction), animation = {}, show = "show" === mode;
        el.parent().is(".ui-effects-wrapper") ? $.effects.save(el.parent(), props) : $.effects.save(el, props);
        el.show();
        wrapper = $.effects.createWrapper(el).css({
            overflow: "hidden"
        });
        distance = wrapper[ref]();
        margin = parseFloat(wrapper.css(ref2)) || 0;
        animation[ref] = show ? distance : 0;
        if (!motion) {
            el.css(vertical ? "bottom" : "right", 0).css(vertical ? "top" : "left", "auto").css({
                position: "absolute"
            });
            animation[ref2] = show ? margin : distance + margin;
        }
        if (show) {
            wrapper.css(ref, 0);
            motion || wrapper.css(ref2, margin + distance);
        }
        wrapper.animate(animation, {
            duration: o.duration,
            easing: o.easing,
            queue: !1,
            complete: function() {
                "hide" === mode && el.hide();
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            }
        });
    }, $.effects.effect.bounce = function(o, done) {
        var i, upAnim, downAnim, el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "effect"), hide = "hide" === mode, show = "show" === mode, direction = o.direction || "up", distance = o.distance, times = o.times || 5, anims = 2 * times + (show || hide ? 1 : 0), speed = o.duration / anims, easing = o.easing, ref = "up" === direction || "down" === direction ? "top" : "left", motion = "up" === direction || "left" === direction, queue = el.queue(), queuelen = queue.length;
        (show || hide) && props.push("opacity");
        $.effects.save(el, props);
        el.show();
        $.effects.createWrapper(el);
        distance || (distance = el["top" === ref ? "outerHeight" : "outerWidth"]() / 3);
        if (show) {
            downAnim = {
                opacity: 1
            };
            downAnim[ref] = 0;
            el.css("opacity", 0).css(ref, motion ? 2 * -distance : 2 * distance).animate(downAnim, speed, easing);
        }
        hide && (distance /= Math.pow(2, times - 1));
        downAnim = {};
        downAnim[ref] = 0;
        for (i = 0; times > i; i++) {
            upAnim = {};
            upAnim[ref] = (motion ? "-=" : "+=") + distance;
            el.animate(upAnim, speed, easing).animate(downAnim, speed, easing);
            distance = hide ? 2 * distance : distance / 2;
        }
        if (hide) {
            upAnim = {
                opacity: 0
            };
            upAnim[ref] = (motion ? "-=" : "+=") + distance;
            el.animate(upAnim, speed, easing);
        }
        el.queue(function() {
            hide && el.hide();
            $.effects.restore(el, props);
            $.effects.removeWrapper(el);
            done();
        });
        queuelen > 1 && queue.splice.apply(queue, [ 1, 0 ].concat(queue.splice(queuelen, anims + 1)));
        el.dequeue();
    }, $.effects.effect.clip = function(o, done) {
        var wrapper, animate, distance, el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), show = "show" === mode, direction = o.direction || "vertical", vert = "vertical" === direction, size = vert ? "height" : "width", position = vert ? "top" : "left", animation = {};
        $.effects.save(el, props);
        el.show();
        wrapper = $.effects.createWrapper(el).css({
            overflow: "hidden"
        });
        animate = "IMG" === el[0].tagName ? wrapper : el;
        distance = animate[size]();
        if (show) {
            animate.css(size, 0);
            animate.css(position, distance / 2);
        }
        animation[size] = show ? distance : 0;
        animation[position] = show ? 0 : distance / 2;
        animate.animate(animation, {
            queue: !1,
            duration: o.duration,
            easing: o.easing,
            complete: function() {
                show || el.hide();
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            }
        });
    }, $.effects.effect.drop = function(o, done) {
        var distance, el = $(this), props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), show = "show" === mode, direction = o.direction || "left", ref = "up" === direction || "down" === direction ? "top" : "left", motion = "up" === direction || "left" === direction ? "pos" : "neg", animation = {
            opacity: show ? 1 : 0
        };
        $.effects.save(el, props);
        el.show();
        $.effects.createWrapper(el);
        distance = o.distance || el["top" === ref ? "outerHeight" : "outerWidth"](!0) / 2;
        show && el.css("opacity", 0).css(ref, "pos" === motion ? -distance : distance);
        animation[ref] = (show ? "pos" === motion ? "+=" : "-=" : "pos" === motion ? "-=" : "+=") + distance;
        el.animate(animation, {
            queue: !1,
            duration: o.duration,
            easing: o.easing,
            complete: function() {
                "hide" === mode && el.hide();
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            }
        });
    }, $.effects.effect.explode = function(o, done) {
        function childComplete() {
            pieces.push(this);
            pieces.length === rows * cells && animComplete();
        }
        function animComplete() {
            el.css({
                visibility: "visible"
            });
            $(pieces).remove();
            show || el.hide();
            done();
        }
        var i, j, left, top, mx, my, rows = o.pieces ? Math.round(Math.sqrt(o.pieces)) : 3, cells = rows, el = $(this), mode = $.effects.setMode(el, o.mode || "hide"), show = "show" === mode, offset = el.show().css("visibility", "hidden").offset(), width = Math.ceil(el.outerWidth() / cells), height = Math.ceil(el.outerHeight() / rows), pieces = [];
        for (i = 0; rows > i; i++) {
            top = offset.top + i * height;
            my = i - (rows - 1) / 2;
            for (j = 0; cells > j; j++) {
                left = offset.left + j * width;
                mx = j - (cells - 1) / 2;
                el.clone().appendTo("body").wrap("<div></div>").css({
                    position: "absolute",
                    visibility: "visible",
                    left: -j * width,
                    top: -i * height
                }).parent().addClass("ui-effects-explode").css({
                    position: "absolute",
                    overflow: "hidden",
                    width: width,
                    height: height,
                    left: left + (show ? mx * width : 0),
                    top: top + (show ? my * height : 0),
                    opacity: show ? 0 : 1
                }).animate({
                    left: left + (show ? 0 : mx * width),
                    top: top + (show ? 0 : my * height),
                    opacity: show ? 1 : 0
                }, o.duration || 500, o.easing, childComplete);
            }
        }
    }, $.effects.effect.fade = function(o, done) {
        var el = $(this), mode = $.effects.setMode(el, o.mode || "toggle");
        el.animate({
            opacity: mode
        }, {
            queue: !1,
            duration: o.duration,
            easing: o.easing,
            complete: done
        });
    }, $.effects.effect.fold = function(o, done) {
        var wrapper, distance, el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), show = "show" === mode, hide = "hide" === mode, size = o.size || 15, percent = /([0-9]+)%/.exec(size), horizFirst = !!o.horizFirst, widthFirst = show !== horizFirst, ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ], duration = o.duration / 2, animation1 = {}, animation2 = {};
        $.effects.save(el, props);
        el.show();
        wrapper = $.effects.createWrapper(el).css({
            overflow: "hidden"
        });
        distance = widthFirst ? [ wrapper.width(), wrapper.height() ] : [ wrapper.height(), wrapper.width() ];
        percent && (size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1]);
        show && wrapper.css(horizFirst ? {
            height: 0,
            width: size
        } : {
            height: size,
            width: 0
        });
        animation1[ref[0]] = show ? distance[0] : size;
        animation2[ref[1]] = show ? distance[1] : 0;
        wrapper.animate(animation1, duration, o.easing).animate(animation2, duration, o.easing, function() {
            hide && el.hide();
            $.effects.restore(el, props);
            $.effects.removeWrapper(el);
            done();
        });
    }, $.effects.effect.highlight = function(o, done) {
        var elem = $(this), props = [ "backgroundImage", "backgroundColor", "opacity" ], mode = $.effects.setMode(elem, o.mode || "show"), animation = {
            backgroundColor: elem.css("backgroundColor")
        };
        "hide" === mode && (animation.opacity = 0);
        $.effects.save(elem, props);
        elem.show().css({
            backgroundImage: "none",
            backgroundColor: o.color || "#ffff99"
        }).animate(animation, {
            queue: !1,
            duration: o.duration,
            easing: o.easing,
            complete: function() {
                "hide" === mode && elem.hide();
                $.effects.restore(elem, props);
                done();
            }
        });
    }, $.effects.effect.size = function(o, done) {
        var original, baseline, factor, el = $(this), props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ], props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ], props2 = [ "width", "height", "overflow" ], cProps = [ "fontSize" ], vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ], hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ], mode = $.effects.setMode(el, o.mode || "effect"), restore = o.restore || "effect" !== mode, scale = o.scale || "both", origin = o.origin || [ "middle", "center" ], position = el.css("position"), props = restore ? props0 : props1, zero = {
            height: 0,
            width: 0,
            outerHeight: 0,
            outerWidth: 0
        };
        "show" === mode && el.show();
        original = {
            height: el.height(),
            width: el.width(),
            outerHeight: el.outerHeight(),
            outerWidth: el.outerWidth()
        };
        if ("toggle" === o.mode && "show" === mode) {
            el.from = o.to || zero;
            el.to = o.from || original;
        } else {
            el.from = o.from || ("show" === mode ? zero : original);
            el.to = o.to || ("hide" === mode ? zero : original);
        }
        factor = {
            from: {
                y: el.from.height / original.height,
                x: el.from.width / original.width
            },
            to: {
                y: el.to.height / original.height,
                x: el.to.width / original.width
            }
        };
        if ("box" === scale || "both" === scale) {
            if (factor.from.y !== factor.to.y) {
                props = props.concat(vProps);
                el.from = $.effects.setTransition(el, vProps, factor.from.y, el.from);
                el.to = $.effects.setTransition(el, vProps, factor.to.y, el.to);
            }
            if (factor.from.x !== factor.to.x) {
                props = props.concat(hProps);
                el.from = $.effects.setTransition(el, hProps, factor.from.x, el.from);
                el.to = $.effects.setTransition(el, hProps, factor.to.x, el.to);
            }
        }
        if (("content" === scale || "both" === scale) && factor.from.y !== factor.to.y) {
            props = props.concat(cProps).concat(props2);
            el.from = $.effects.setTransition(el, cProps, factor.from.y, el.from);
            el.to = $.effects.setTransition(el, cProps, factor.to.y, el.to);
        }
        $.effects.save(el, props);
        el.show();
        $.effects.createWrapper(el);
        el.css("overflow", "hidden").css(el.from);
        if (origin) {
            baseline = $.effects.getBaseline(origin, original);
            el.from.top = (original.outerHeight - el.outerHeight()) * baseline.y;
            el.from.left = (original.outerWidth - el.outerWidth()) * baseline.x;
            el.to.top = (original.outerHeight - el.to.outerHeight) * baseline.y;
            el.to.left = (original.outerWidth - el.to.outerWidth) * baseline.x;
        }
        el.css(el.from);
        if ("content" === scale || "both" === scale) {
            vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);
            hProps = hProps.concat([ "marginLeft", "marginRight" ]);
            props2 = props0.concat(vProps).concat(hProps);
            el.find("*[width]").each(function() {
                var child = $(this), c_original = {
                    height: child.height(),
                    width: child.width(),
                    outerHeight: child.outerHeight(),
                    outerWidth: child.outerWidth()
                };
                restore && $.effects.save(child, props2);
                child.from = {
                    height: c_original.height * factor.from.y,
                    width: c_original.width * factor.from.x,
                    outerHeight: c_original.outerHeight * factor.from.y,
                    outerWidth: c_original.outerWidth * factor.from.x
                };
                child.to = {
                    height: c_original.height * factor.to.y,
                    width: c_original.width * factor.to.x,
                    outerHeight: c_original.height * factor.to.y,
                    outerWidth: c_original.width * factor.to.x
                };
                if (factor.from.y !== factor.to.y) {
                    child.from = $.effects.setTransition(child, vProps, factor.from.y, child.from);
                    child.to = $.effects.setTransition(child, vProps, factor.to.y, child.to);
                }
                if (factor.from.x !== factor.to.x) {
                    child.from = $.effects.setTransition(child, hProps, factor.from.x, child.from);
                    child.to = $.effects.setTransition(child, hProps, factor.to.x, child.to);
                }
                child.css(child.from);
                child.animate(child.to, o.duration, o.easing, function() {
                    restore && $.effects.restore(child, props2);
                });
            });
        }
        el.animate(el.to, {
            queue: !1,
            duration: o.duration,
            easing: o.easing,
            complete: function() {
                0 === el.to.opacity && el.css("opacity", el.from.opacity);
                "hide" === mode && el.hide();
                $.effects.restore(el, props);
                restore || ("static" === position ? el.css({
                    position: "relative",
                    top: el.to.top,
                    left: el.to.left
                }) : $.each([ "top", "left" ], function(idx, pos) {
                    el.css(pos, function(_, str) {
                        var val = parseInt(str, 10), toRef = idx ? el.to.left : el.to.top;
                        return "auto" === str ? toRef + "px" : val + toRef + "px";
                    });
                }));
                $.effects.removeWrapper(el);
                done();
            }
        });
    }, $.effects.effect.scale = function(o, done) {
        var el = $(this), options = $.extend(!0, {}, o), mode = $.effects.setMode(el, o.mode || "effect"), percent = parseInt(o.percent, 10) || (0 === parseInt(o.percent, 10) ? 0 : "hide" === mode ? 0 : 100), direction = o.direction || "both", origin = o.origin, original = {
            height: el.height(),
            width: el.width(),
            outerHeight: el.outerHeight(),
            outerWidth: el.outerWidth()
        }, factor = {
            y: "horizontal" !== direction ? percent / 100 : 1,
            x: "vertical" !== direction ? percent / 100 : 1
        };
        options.effect = "size";
        options.queue = !1;
        options.complete = done;
        if ("effect" !== mode) {
            options.origin = origin || [ "middle", "center" ];
            options.restore = !0;
        }
        options.from = o.from || ("show" === mode ? {
            height: 0,
            width: 0,
            outerHeight: 0,
            outerWidth: 0
        } : original);
        options.to = {
            height: original.height * factor.y,
            width: original.width * factor.x,
            outerHeight: original.outerHeight * factor.y,
            outerWidth: original.outerWidth * factor.x
        };
        if (options.fade) {
            if ("show" === mode) {
                options.from.opacity = 0;
                options.to.opacity = 1;
            }
            if ("hide" === mode) {
                options.from.opacity = 1;
                options.to.opacity = 0;
            }
        }
        el.effect(options);
    }, $.effects.effect.puff = function(o, done) {
        var elem = $(this), mode = $.effects.setMode(elem, o.mode || "hide"), hide = "hide" === mode, percent = parseInt(o.percent, 10) || 150, factor = percent / 100, original = {
            height: elem.height(),
            width: elem.width(),
            outerHeight: elem.outerHeight(),
            outerWidth: elem.outerWidth()
        };
        $.extend(o, {
            effect: "scale",
            queue: !1,
            fade: !0,
            mode: mode,
            complete: done,
            percent: hide ? percent : 100,
            from: hide ? original : {
                height: original.height * factor,
                width: original.width * factor,
                outerHeight: original.outerHeight * factor,
                outerWidth: original.outerWidth * factor
            }
        });
        elem.effect(o);
    }, $.effects.effect.pulsate = function(o, done) {
        var i, elem = $(this), mode = $.effects.setMode(elem, o.mode || "show"), show = "show" === mode, hide = "hide" === mode, showhide = show || "hide" === mode, anims = 2 * (o.times || 5) + (showhide ? 1 : 0), duration = o.duration / anims, animateTo = 0, queue = elem.queue(), queuelen = queue.length;
        if (show || !elem.is(":visible")) {
            elem.css("opacity", 0).show();
            animateTo = 1;
        }
        for (i = 1; anims > i; i++) {
            elem.animate({
                opacity: animateTo
            }, duration, o.easing);
            animateTo = 1 - animateTo;
        }
        elem.animate({
            opacity: animateTo
        }, duration, o.easing);
        elem.queue(function() {
            hide && elem.hide();
            done();
        });
        queuelen > 1 && queue.splice.apply(queue, [ 1, 0 ].concat(queue.splice(queuelen, anims + 1)));
        elem.dequeue();
    }, $.effects.effect.shake = function(o, done) {
        var i, el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "effect"), direction = o.direction || "left", distance = o.distance || 20, times = o.times || 3, anims = 2 * times + 1, speed = Math.round(o.duration / anims), ref = "up" === direction || "down" === direction ? "top" : "left", positiveMotion = "up" === direction || "left" === direction, animation = {}, animation1 = {}, animation2 = {}, queue = el.queue(), queuelen = queue.length;
        $.effects.save(el, props);
        el.show();
        $.effects.createWrapper(el);
        animation[ref] = (positiveMotion ? "-=" : "+=") + distance;
        animation1[ref] = (positiveMotion ? "+=" : "-=") + 2 * distance;
        animation2[ref] = (positiveMotion ? "-=" : "+=") + 2 * distance;
        el.animate(animation, speed, o.easing);
        for (i = 1; times > i; i++) el.animate(animation1, speed, o.easing).animate(animation2, speed, o.easing);
        el.animate(animation1, speed, o.easing).animate(animation, speed / 2, o.easing).queue(function() {
            "hide" === mode && el.hide();
            $.effects.restore(el, props);
            $.effects.removeWrapper(el);
            done();
        });
        queuelen > 1 && queue.splice.apply(queue, [ 1, 0 ].concat(queue.splice(queuelen, anims + 1)));
        el.dequeue();
    }, $.effects.effect.slide = function(o, done) {
        var distance, el = $(this), props = [ "position", "top", "bottom", "left", "right", "width", "height" ], mode = $.effects.setMode(el, o.mode || "show"), show = "show" === mode, direction = o.direction || "left", ref = "up" === direction || "down" === direction ? "top" : "left", positiveMotion = "up" === direction || "left" === direction, animation = {};
        $.effects.save(el, props);
        el.show();
        distance = o.distance || el["top" === ref ? "outerHeight" : "outerWidth"](!0);
        $.effects.createWrapper(el).css({
            overflow: "hidden"
        });
        show && el.css(ref, positiveMotion ? isNaN(distance) ? "-" + distance : -distance : distance);
        animation[ref] = (show ? positiveMotion ? "+=" : "-=" : positiveMotion ? "-=" : "+=") + distance;
        el.animate(animation, {
            queue: !1,
            duration: o.duration,
            easing: o.easing,
            complete: function() {
                "hide" === mode && el.hide();
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            }
        });
    }, $.effects.effect.transfer = function(o, done) {
        var elem = $(this), target = $(o.to), targetFixed = "fixed" === target.css("position"), body = $("body"), fixTop = targetFixed ? body.scrollTop() : 0, fixLeft = targetFixed ? body.scrollLeft() : 0, endPosition = target.offset(), animation = {
            top: endPosition.top - fixTop,
            left: endPosition.left - fixLeft,
            height: target.innerHeight(),
            width: target.innerWidth()
        }, startPosition = elem.offset(), transfer = $("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(o.className).css({
            top: startPosition.top - fixTop,
            left: startPosition.left - fixLeft,
            height: elem.innerHeight(),
            width: elem.innerWidth(),
            position: targetFixed ? "fixed" : "absolute"
        }).animate(animation, o.duration, o.easing, function() {
            transfer.remove();
            done();
        });
    }, $.widget("ui.progressbar", {
        version: "1.11.1",
        options: {
            max: 100,
            value: 0,
            change: null,
            complete: null
        },
        min: 0,
        _create: function() {
            this.oldValue = this.options.value = this._constrainedValue();
            this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
                role: "progressbar",
                "aria-valuemin": this.min
            });
            this.valueDiv = $("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element);
            this._refreshValue();
        },
        _destroy: function() {
            this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
            this.valueDiv.remove();
        },
        value: function(newValue) {
            if (void 0 === newValue) return this.options.value;
            this.options.value = this._constrainedValue(newValue);
            this._refreshValue();
        },
        _constrainedValue: function(newValue) {
            void 0 === newValue && (newValue = this.options.value);
            this.indeterminate = newValue === !1;
            "number" != typeof newValue && (newValue = 0);
            return this.indeterminate ? !1 : Math.min(this.options.max, Math.max(this.min, newValue));
        },
        _setOptions: function(options) {
            var value = options.value;
            delete options.value;
            this._super(options);
            this.options.value = this._constrainedValue(value);
            this._refreshValue();
        },
        _setOption: function(key, value) {
            "max" === key && (value = Math.max(this.min, value));
            "disabled" === key && this.element.toggleClass("ui-state-disabled", !!value).attr("aria-disabled", value);
            this._super(key, value);
        },
        _percentage: function() {
            return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
        },
        _refreshValue: function() {
            var value = this.options.value, percentage = this._percentage();
            this.valueDiv.toggle(this.indeterminate || value > this.min).toggleClass("ui-corner-right", value === this.options.max).width(percentage.toFixed(0) + "%");
            this.element.toggleClass("ui-progressbar-indeterminate", this.indeterminate);
            if (this.indeterminate) {
                this.element.removeAttr("aria-valuenow");
                this.overlayDiv || (this.overlayDiv = $("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv));
            } else {
                this.element.attr({
                    "aria-valuemax": this.options.max,
                    "aria-valuenow": value
                });
                if (this.overlayDiv) {
                    this.overlayDiv.remove();
                    this.overlayDiv = null;
                }
            }
            if (this.oldValue !== value) {
                this.oldValue = value;
                this._trigger("change");
            }
            value === this.options.max && this._trigger("complete");
        }
    }), $.widget("ui.selectable", $.ui.mouse, {
        version: "1.11.1",
        options: {
            appendTo: "body",
            autoRefresh: !0,
            distance: 0,
            filter: "*",
            tolerance: "touch",
            selected: null,
            selecting: null,
            start: null,
            stop: null,
            unselected: null,
            unselecting: null
        },
        _create: function() {
            var selectees, that = this;
            this.element.addClass("ui-selectable");
            this.dragged = !1;
            this.refresh = function() {
                selectees = $(that.options.filter, that.element[0]);
                selectees.addClass("ui-selectee");
                selectees.each(function() {
                    var $this = $(this), pos = $this.offset();
                    $.data(this, "selectable-item", {
                        element: this,
                        $element: $this,
                        left: pos.left,
                        top: pos.top,
                        right: pos.left + $this.outerWidth(),
                        bottom: pos.top + $this.outerHeight(),
                        startselected: !1,
                        selected: $this.hasClass("ui-selected"),
                        selecting: $this.hasClass("ui-selecting"),
                        unselecting: $this.hasClass("ui-unselecting")
                    });
                });
            };
            this.refresh();
            this.selectees = selectees.addClass("ui-selectee");
            this._mouseInit();
            this.helper = $("<div class='ui-selectable-helper'></div>");
        },
        _destroy: function() {
            this.selectees.removeClass("ui-selectee").removeData("selectable-item");
            this.element.removeClass("ui-selectable ui-selectable-disabled");
            this._mouseDestroy();
        },
        _mouseStart: function(event) {
            var that = this, options = this.options;
            this.opos = [ event.pageX, event.pageY ];
            if (!this.options.disabled) {
                this.selectees = $(options.filter, this.element[0]);
                this._trigger("start", event);
                $(options.appendTo).append(this.helper);
                this.helper.css({
                    left: event.pageX,
                    top: event.pageY,
                    width: 0,
                    height: 0
                });
                options.autoRefresh && this.refresh();
                this.selectees.filter(".ui-selected").each(function() {
                    var selectee = $.data(this, "selectable-item");
                    selectee.startselected = !0;
                    if (!event.metaKey && !event.ctrlKey) {
                        selectee.$element.removeClass("ui-selected");
                        selectee.selected = !1;
                        selectee.$element.addClass("ui-unselecting");
                        selectee.unselecting = !0;
                        that._trigger("unselecting", event, {
                            unselecting: selectee.element
                        });
                    }
                });
                $(event.target).parents().addBack().each(function() {
                    var doSelect, selectee = $.data(this, "selectable-item");
                    if (selectee) {
                        doSelect = !event.metaKey && !event.ctrlKey || !selectee.$element.hasClass("ui-selected");
                        selectee.$element.removeClass(doSelect ? "ui-unselecting" : "ui-selected").addClass(doSelect ? "ui-selecting" : "ui-unselecting");
                        selectee.unselecting = !doSelect;
                        selectee.selecting = doSelect;
                        selectee.selected = doSelect;
                        doSelect ? that._trigger("selecting", event, {
                            selecting: selectee.element
                        }) : that._trigger("unselecting", event, {
                            unselecting: selectee.element
                        });
                        return !1;
                    }
                });
            }
        },
        _mouseDrag: function(event) {
            this.dragged = !0;
            if (!this.options.disabled) {
                var tmp, that = this, options = this.options, x1 = this.opos[0], y1 = this.opos[1], x2 = event.pageX, y2 = event.pageY;
                if (x1 > x2) {
                    tmp = x2;
                    x2 = x1;
                    x1 = tmp;
                }
                if (y1 > y2) {
                    tmp = y2;
                    y2 = y1;
                    y1 = tmp;
                }
                this.helper.css({
                    left: x1,
                    top: y1,
                    width: x2 - x1,
                    height: y2 - y1
                });
                this.selectees.each(function() {
                    var selectee = $.data(this, "selectable-item"), hit = !1;
                    if (selectee && selectee.element !== that.element[0]) {
                        "touch" === options.tolerance ? hit = !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) : "fit" === options.tolerance && (hit = selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
                        if (hit) {
                            if (selectee.selected) {
                                selectee.$element.removeClass("ui-selected");
                                selectee.selected = !1;
                            }
                            if (selectee.unselecting) {
                                selectee.$element.removeClass("ui-unselecting");
                                selectee.unselecting = !1;
                            }
                            if (!selectee.selecting) {
                                selectee.$element.addClass("ui-selecting");
                                selectee.selecting = !0;
                                that._trigger("selecting", event, {
                                    selecting: selectee.element
                                });
                            }
                        } else {
                            if (selectee.selecting) if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
                                selectee.$element.removeClass("ui-selecting");
                                selectee.selecting = !1;
                                selectee.$element.addClass("ui-selected");
                                selectee.selected = !0;
                            } else {
                                selectee.$element.removeClass("ui-selecting");
                                selectee.selecting = !1;
                                if (selectee.startselected) {
                                    selectee.$element.addClass("ui-unselecting");
                                    selectee.unselecting = !0;
                                }
                                that._trigger("unselecting", event, {
                                    unselecting: selectee.element
                                });
                            }
                            if (selectee.selected && !event.metaKey && !event.ctrlKey && !selectee.startselected) {
                                selectee.$element.removeClass("ui-selected");
                                selectee.selected = !1;
                                selectee.$element.addClass("ui-unselecting");
                                selectee.unselecting = !0;
                                that._trigger("unselecting", event, {
                                    unselecting: selectee.element
                                });
                            }
                        }
                    }
                });
                return !1;
            }
        },
        _mouseStop: function(event) {
            var that = this;
            this.dragged = !1;
            $(".ui-unselecting", this.element[0]).each(function() {
                var selectee = $.data(this, "selectable-item");
                selectee.$element.removeClass("ui-unselecting");
                selectee.unselecting = !1;
                selectee.startselected = !1;
                that._trigger("unselected", event, {
                    unselected: selectee.element
                });
            });
            $(".ui-selecting", this.element[0]).each(function() {
                var selectee = $.data(this, "selectable-item");
                selectee.$element.removeClass("ui-selecting").addClass("ui-selected");
                selectee.selecting = !1;
                selectee.selected = !0;
                selectee.startselected = !0;
                that._trigger("selected", event, {
                    selected: selectee.element
                });
            });
            this._trigger("stop", event);
            this.helper.remove();
            return !1;
        }
    }), $.widget("ui.selectmenu", {
        version: "1.11.1",
        defaultElement: "<select>",
        options: {
            appendTo: null,
            disabled: null,
            icons: {
                button: "ui-icon-triangle-1-s"
            },
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            width: null,
            change: null,
            close: null,
            focus: null,
            open: null,
            select: null
        },
        _create: function() {
            var selectmenuId = this.element.uniqueId().attr("id");
            this.ids = {
                element: selectmenuId,
                button: selectmenuId + "-button",
                menu: selectmenuId + "-menu"
            };
            this._drawButton();
            this._drawMenu();
            this.options.disabled && this.disable();
        },
        _drawButton: function() {
            var that = this, tabindex = this.element.attr("tabindex");
            this.label = $("label[for='" + this.ids.element + "']").attr("for", this.ids.button);
            this._on(this.label, {
                click: function(event) {
                    this.button.focus();
                    event.preventDefault();
                }
            });
            this.element.hide();
            this.button = $("<span>", {
                "class": "ui-selectmenu-button ui-widget ui-state-default ui-corner-all",
                tabindex: tabindex || this.options.disabled ? -1 : 0,
                id: this.ids.button,
                role: "combobox",
                "aria-expanded": "false",
                "aria-autocomplete": "list",
                "aria-owns": this.ids.menu,
                "aria-haspopup": "true"
            }).insertAfter(this.element);
            $("<span>", {
                "class": "ui-icon " + this.options.icons.button
            }).prependTo(this.button);
            this.buttonText = $("<span>", {
                "class": "ui-selectmenu-text"
            }).appendTo(this.button);
            this._setText(this.buttonText, this.element.find("option:selected").text());
            this._resizeButton();
            this._on(this.button, this._buttonEvents);
            this.button.one("focusin", function() {
                that.menuItems || that._refreshMenu();
            });
            this._hoverable(this.button);
            this._focusable(this.button);
        },
        _drawMenu: function() {
            var that = this;
            this.menu = $("<ul>", {
                "aria-hidden": "true",
                "aria-labelledby": this.ids.button,
                id: this.ids.menu
            });
            this.menuWrap = $("<div>", {
                "class": "ui-selectmenu-menu ui-front"
            }).append(this.menu).appendTo(this._appendTo());
            this.menuInstance = this.menu.menu({
                role: "listbox",
                select: function(event, ui) {
                    event.preventDefault();
                    that._select(ui.item.data("ui-selectmenu-item"), event);
                },
                focus: function(event, ui) {
                    var item = ui.item.data("ui-selectmenu-item");
                    if (null != that.focusIndex && item.index !== that.focusIndex) {
                        that._trigger("focus", event, {
                            item: item
                        });
                        that.isOpen || that._select(item, event);
                    }
                    that.focusIndex = item.index;
                    that.button.attr("aria-activedescendant", that.menuItems.eq(item.index).attr("id"));
                }
            }).menu("instance");
            this.menu.addClass("ui-corner-bottom").removeClass("ui-corner-all");
            this.menuInstance._off(this.menu, "mouseleave");
            this.menuInstance._closeOnDocumentClick = function() {
                return !1;
            };
            this.menuInstance._isDivider = function() {
                return !1;
            };
        },
        refresh: function() {
            this._refreshMenu();
            this._setText(this.buttonText, this._getSelectedItem().text());
            this.options.width || this._resizeButton();
        },
        _refreshMenu: function() {
            this.menu.empty();
            var item, options = this.element.find("option");
            if (options.length) {
                this._parseOptions(options);
                this._renderMenu(this.menu, this.items);
                this.menuInstance.refresh();
                this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup");
                item = this._getSelectedItem();
                this.menuInstance.focus(null, item);
                this._setAria(item.data("ui-selectmenu-item"));
                this._setOption("disabled", this.element.prop("disabled"));
            }
        },
        open: function(event) {
            if (!this.options.disabled) {
                if (this.menuItems) {
                    this.menu.find(".ui-state-focus").removeClass("ui-state-focus");
                    this.menuInstance.focus(null, this._getSelectedItem());
                } else this._refreshMenu();
                this.isOpen = !0;
                this._toggleAttr();
                this._resizeMenu();
                this._position();
                this._on(this.document, this._documentClick);
                this._trigger("open", event);
            }
        },
        _position: function() {
            this.menuWrap.position($.extend({
                of: this.button
            }, this.options.position));
        },
        close: function(event) {
            if (this.isOpen) {
                this.isOpen = !1;
                this._toggleAttr();
                this._off(this.document);
                this._trigger("close", event);
            }
        },
        widget: function() {
            return this.button;
        },
        menuWidget: function() {
            return this.menu;
        },
        _renderMenu: function(ul, items) {
            var that = this, currentOptgroup = "";
            $.each(items, function(index, item) {
                if (item.optgroup !== currentOptgroup) {
                    $("<li>", {
                        "class": "ui-selectmenu-optgroup ui-menu-divider" + (item.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : ""),
                        text: item.optgroup
                    }).appendTo(ul);
                    currentOptgroup = item.optgroup;
                }
                that._renderItemData(ul, item);
            });
        },
        _renderItemData: function(ul, item) {
            return this._renderItem(ul, item).data("ui-selectmenu-item", item);
        },
        _renderItem: function(ul, item) {
            var li = $("<li>");
            item.disabled && li.addClass("ui-state-disabled");
            this._setText(li, item.label);
            return li.appendTo(ul);
        },
        _setText: function(element, value) {
            value ? element.text(value) : element.html("&#160;");
        },
        _move: function(direction, event) {
            var item, next, filter = ".ui-menu-item";
            if (this.isOpen) item = this.menuItems.eq(this.focusIndex); else {
                item = this.menuItems.eq(this.element[0].selectedIndex);
                filter += ":not(.ui-state-disabled)";
            }
            next = "first" === direction || "last" === direction ? item["first" === direction ? "prevAll" : "nextAll"](filter).eq(-1) : item[direction + "All"](filter).eq(0);
            next.length && this.menuInstance.focus(event, next);
        },
        _getSelectedItem: function() {
            return this.menuItems.eq(this.element[0].selectedIndex);
        },
        _toggle: function(event) {
            this[this.isOpen ? "close" : "open"](event);
        },
        _documentClick: {
            mousedown: function(event) {
                this.isOpen && ($(event.target).closest(".ui-selectmenu-menu, #" + this.ids.button).length || this.close(event));
            }
        },
        _buttonEvents: {
            mousedown: function(event) {
                event.preventDefault();
            },
            click: "_toggle",
            keydown: function(event) {
                var preventDefault = !0;
                switch (event.keyCode) {
                  case $.ui.keyCode.TAB:
                  case $.ui.keyCode.ESCAPE:
                    this.close(event);
                    preventDefault = !1;
                    break;

                  case $.ui.keyCode.ENTER:
                    this.isOpen && this._selectFocusedItem(event);
                    break;

                  case $.ui.keyCode.UP:
                    event.altKey ? this._toggle(event) : this._move("prev", event);
                    break;

                  case $.ui.keyCode.DOWN:
                    event.altKey ? this._toggle(event) : this._move("next", event);
                    break;

                  case $.ui.keyCode.SPACE:
                    this.isOpen ? this._selectFocusedItem(event) : this._toggle(event);
                    break;

                  case $.ui.keyCode.LEFT:
                    this._move("prev", event);
                    break;

                  case $.ui.keyCode.RIGHT:
                    this._move("next", event);
                    break;

                  case $.ui.keyCode.HOME:
                  case $.ui.keyCode.PAGE_UP:
                    this._move("first", event);
                    break;

                  case $.ui.keyCode.END:
                  case $.ui.keyCode.PAGE_DOWN:
                    this._move("last", event);
                    break;

                  default:
                    this.menu.trigger(event);
                    preventDefault = !1;
                }
                preventDefault && event.preventDefault();
            }
        },
        _selectFocusedItem: function(event) {
            var item = this.menuItems.eq(this.focusIndex);
            item.hasClass("ui-state-disabled") || this._select(item.data("ui-selectmenu-item"), event);
        },
        _select: function(item, event) {
            var oldIndex = this.element[0].selectedIndex;
            this.element[0].selectedIndex = item.index;
            this._setText(this.buttonText, item.label);
            this._setAria(item);
            this._trigger("select", event, {
                item: item
            });
            item.index !== oldIndex && this._trigger("change", event, {
                item: item
            });
            this.close(event);
        },
        _setAria: function(item) {
            var id = this.menuItems.eq(item.index).attr("id");
            this.button.attr({
                "aria-labelledby": id,
                "aria-activedescendant": id
            });
            this.menu.attr("aria-activedescendant", id);
        },
        _setOption: function(key, value) {
            "icons" === key && this.button.find("span.ui-icon").removeClass(this.options.icons.button).addClass(value.button);
            this._super(key, value);
            "appendTo" === key && this.menuWrap.appendTo(this._appendTo());
            if ("disabled" === key) {
                this.menuInstance.option("disabled", value);
                this.button.toggleClass("ui-state-disabled", value).attr("aria-disabled", value);
                this.element.prop("disabled", value);
                if (value) {
                    this.button.attr("tabindex", -1);
                    this.close();
                } else this.button.attr("tabindex", 0);
            }
            "width" === key && this._resizeButton();
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            element && (element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0));
            element && element[0] || (element = this.element.closest(".ui-front"));
            element.length || (element = this.document[0].body);
            return element;
        },
        _toggleAttr: function() {
            this.button.toggleClass("ui-corner-top", this.isOpen).toggleClass("ui-corner-all", !this.isOpen).attr("aria-expanded", this.isOpen);
            this.menuWrap.toggleClass("ui-selectmenu-open", this.isOpen);
            this.menu.attr("aria-hidden", !this.isOpen);
        },
        _resizeButton: function() {
            var width = this.options.width;
            if (!width) {
                width = this.element.show().outerWidth();
                this.element.hide();
            }
            this.button.outerWidth(width);
        },
        _resizeMenu: function() {
            this.menu.outerWidth(Math.max(this.button.outerWidth(), this.menu.width("").outerWidth() + 1));
        },
        _getCreateOptions: function() {
            return {
                disabled: this.element.prop("disabled")
            };
        },
        _parseOptions: function(options) {
            var data = [];
            options.each(function(index, item) {
                var option = $(item), optgroup = option.parent("optgroup");
                data.push({
                    element: option,
                    index: index,
                    value: option.attr("value"),
                    label: option.text(),
                    optgroup: optgroup.attr("label") || "",
                    disabled: optgroup.prop("disabled") || option.prop("disabled")
                });
            });
            this.items = data;
        },
        _destroy: function() {
            this.menuWrap.remove();
            this.button.remove();
            this.element.show();
            this.element.removeUniqueId();
            this.label.attr("for", this.ids.element);
        }
    }), $.widget("ui.slider", $.ui.mouse, {
        version: "1.11.1",
        widgetEventPrefix: "slide",
        options: {
            animate: !1,
            distance: 0,
            max: 100,
            min: 0,
            orientation: "horizontal",
            range: !1,
            step: 1,
            value: 0,
            values: null,
            change: null,
            slide: null,
            start: null,
            stop: null
        },
        numPages: 5,
        _create: function() {
            this._keySliding = !1;
            this._mouseSliding = !1;
            this._animateOff = !0;
            this._handleIndex = null;
            this._detectOrientation();
            this._mouseInit();
            this.element.addClass("ui-slider ui-slider-" + this.orientation + " ui-widget ui-widget-content ui-corner-all");
            this._refresh();
            this._setOption("disabled", this.options.disabled);
            this._animateOff = !1;
        },
        _refresh: function() {
            this._createRange();
            this._createHandles();
            this._setupEvents();
            this._refreshValue();
        },
        _createHandles: function() {
            var i, handleCount, options = this.options, existingHandles = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"), handle = "<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>", handles = [];
            handleCount = options.values && options.values.length || 1;
            if (existingHandles.length > handleCount) {
                existingHandles.slice(handleCount).remove();
                existingHandles = existingHandles.slice(0, handleCount);
            }
            for (i = existingHandles.length; handleCount > i; i++) handles.push(handle);
            this.handles = existingHandles.add($(handles.join("")).appendTo(this.element));
            this.handle = this.handles.eq(0);
            this.handles.each(function(i) {
                $(this).data("ui-slider-handle-index", i);
            });
        },
        _createRange: function() {
            var options = this.options, classes = "";
            if (options.range) {
                options.range === !0 && (options.values ? options.values.length && 2 !== options.values.length ? options.values = [ options.values[0], options.values[0] ] : $.isArray(options.values) && (options.values = options.values.slice(0)) : options.values = [ this._valueMin(), this._valueMin() ]);
                if (this.range && this.range.length) this.range.removeClass("ui-slider-range-min ui-slider-range-max").css({
                    left: "",
                    bottom: ""
                }); else {
                    this.range = $("<div></div>").appendTo(this.element);
                    classes = "ui-slider-range ui-widget-header ui-corner-all";
                }
                this.range.addClass(classes + ("min" === options.range || "max" === options.range ? " ui-slider-range-" + options.range : ""));
            } else {
                this.range && this.range.remove();
                this.range = null;
            }
        },
        _setupEvents: function() {
            this._off(this.handles);
            this._on(this.handles, this._handleEvents);
            this._hoverable(this.handles);
            this._focusable(this.handles);
        },
        _destroy: function() {
            this.handles.remove();
            this.range && this.range.remove();
            this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-widget ui-widget-content ui-corner-all");
            this._mouseDestroy();
        },
        _mouseCapture: function(event) {
            var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle, that = this, o = this.options;
            if (o.disabled) return !1;
            this.elementSize = {
                width: this.element.outerWidth(),
                height: this.element.outerHeight()
            };
            this.elementOffset = this.element.offset();
            position = {
                x: event.pageX,
                y: event.pageY
            };
            normValue = this._normValueFromMouse(position);
            distance = this._valueMax() - this._valueMin() + 1;
            this.handles.each(function(i) {
                var thisDistance = Math.abs(normValue - that.values(i));
                if (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {
                    distance = thisDistance;
                    closestHandle = $(this);
                    index = i;
                }
            });
            allowed = this._start(event, index);
            if (allowed === !1) return !1;
            this._mouseSliding = !0;
            this._handleIndex = index;
            closestHandle.addClass("ui-state-active").focus();
            offset = closestHandle.offset();
            mouseOverHandle = !$(event.target).parents().addBack().is(".ui-slider-handle");
            this._clickOffset = mouseOverHandle ? {
                left: 0,
                top: 0
            } : {
                left: event.pageX - offset.left - closestHandle.width() / 2,
                top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) - (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) + (parseInt(closestHandle.css("marginTop"), 10) || 0)
            };
            this.handles.hasClass("ui-state-hover") || this._slide(event, index, normValue);
            this._animateOff = !0;
            return !0;
        },
        _mouseStart: function() {
            return !0;
        },
        _mouseDrag: function(event) {
            var position = {
                x: event.pageX,
                y: event.pageY
            }, normValue = this._normValueFromMouse(position);
            this._slide(event, this._handleIndex, normValue);
            return !1;
        },
        _mouseStop: function(event) {
            this.handles.removeClass("ui-state-active");
            this._mouseSliding = !1;
            this._stop(event, this._handleIndex);
            this._change(event, this._handleIndex);
            this._handleIndex = null;
            this._clickOffset = null;
            this._animateOff = !1;
            return !1;
        },
        _detectOrientation: function() {
            this.orientation = "vertical" === this.options.orientation ? "vertical" : "horizontal";
        },
        _normValueFromMouse: function(position) {
            var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;
            if ("horizontal" === this.orientation) {
                pixelTotal = this.elementSize.width;
                pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);
            } else {
                pixelTotal = this.elementSize.height;
                pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);
            }
            percentMouse = pixelMouse / pixelTotal;
            percentMouse > 1 && (percentMouse = 1);
            0 > percentMouse && (percentMouse = 0);
            "vertical" === this.orientation && (percentMouse = 1 - percentMouse);
            valueTotal = this._valueMax() - this._valueMin();
            valueMouse = this._valueMin() + percentMouse * valueTotal;
            return this._trimAlignValue(valueMouse);
        },
        _start: function(event, index) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value()
            };
            if (this.options.values && this.options.values.length) {
                uiHash.value = this.values(index);
                uiHash.values = this.values();
            }
            return this._trigger("start", event, uiHash);
        },
        _slide: function(event, index, newVal) {
            var otherVal, newValues, allowed;
            if (this.options.values && this.options.values.length) {
                otherVal = this.values(index ? 0 : 1);
                2 === this.options.values.length && this.options.range === !0 && (0 === index && newVal > otherVal || 1 === index && otherVal > newVal) && (newVal = otherVal);
                if (newVal !== this.values(index)) {
                    newValues = this.values();
                    newValues[index] = newVal;
                    allowed = this._trigger("slide", event, {
                        handle: this.handles[index],
                        value: newVal,
                        values: newValues
                    });
                    otherVal = this.values(index ? 0 : 1);
                    allowed !== !1 && this.values(index, newVal);
                }
            } else if (newVal !== this.value()) {
                allowed = this._trigger("slide", event, {
                    handle: this.handles[index],
                    value: newVal
                });
                allowed !== !1 && this.value(newVal);
            }
        },
        _stop: function(event, index) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value()
            };
            if (this.options.values && this.options.values.length) {
                uiHash.value = this.values(index);
                uiHash.values = this.values();
            }
            this._trigger("stop", event, uiHash);
        },
        _change: function(event, index) {
            if (!this._keySliding && !this._mouseSliding) {
                var uiHash = {
                    handle: this.handles[index],
                    value: this.value()
                };
                if (this.options.values && this.options.values.length) {
                    uiHash.value = this.values(index);
                    uiHash.values = this.values();
                }
                this._lastChangedValue = index;
                this._trigger("change", event, uiHash);
            }
        },
        value: function(newValue) {
            if (!arguments.length) return this._value();
            this.options.value = this._trimAlignValue(newValue);
            this._refreshValue();
            this._change(null, 0);
        },
        values: function(index, newValue) {
            var vals, newValues, i;
            if (arguments.length > 1) {
                this.options.values[index] = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, index);
            } else {
                if (!arguments.length) return this._values();
                if (!$.isArray(arguments[0])) return this.options.values && this.options.values.length ? this._values(index) : this.value();
                vals = this.options.values;
                newValues = arguments[0];
                for (i = 0; i < vals.length; i += 1) {
                    vals[i] = this._trimAlignValue(newValues[i]);
                    this._change(null, i);
                }
                this._refreshValue();
            }
        },
        _setOption: function(key, value) {
            var i, valsLength = 0;
            if ("range" === key && this.options.range === !0) if ("min" === value) {
                this.options.value = this._values(0);
                this.options.values = null;
            } else if ("max" === value) {
                this.options.value = this._values(this.options.values.length - 1);
                this.options.values = null;
            }
            $.isArray(this.options.values) && (valsLength = this.options.values.length);
            "disabled" === key && this.element.toggleClass("ui-state-disabled", !!value);
            this._super(key, value);
            switch (key) {
              case "orientation":
                this._detectOrientation();
                this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation);
                this._refreshValue();
                this.handles.css("horizontal" === value ? "bottom" : "left", "");
                break;

              case "value":
                this._animateOff = !0;
                this._refreshValue();
                this._change(null, 0);
                this._animateOff = !1;
                break;

              case "values":
                this._animateOff = !0;
                this._refreshValue();
                for (i = 0; valsLength > i; i += 1) this._change(null, i);
                this._animateOff = !1;
                break;

              case "min":
              case "max":
                this._animateOff = !0;
                this._refreshValue();
                this._animateOff = !1;
                break;

              case "range":
                this._animateOff = !0;
                this._refresh();
                this._animateOff = !1;
            }
        },
        _value: function() {
            var val = this.options.value;
            val = this._trimAlignValue(val);
            return val;
        },
        _values: function(index) {
            var val, vals, i;
            if (arguments.length) {
                val = this.options.values[index];
                val = this._trimAlignValue(val);
                return val;
            }
            if (this.options.values && this.options.values.length) {
                vals = this.options.values.slice();
                for (i = 0; i < vals.length; i += 1) vals[i] = this._trimAlignValue(vals[i]);
                return vals;
            }
            return [];
        },
        _trimAlignValue: function(val) {
            if (val <= this._valueMin()) return this._valueMin();
            if (val >= this._valueMax()) return this._valueMax();
            var step = this.options.step > 0 ? this.options.step : 1, valModStep = (val - this._valueMin()) % step, alignValue = val - valModStep;
            2 * Math.abs(valModStep) >= step && (alignValue += valModStep > 0 ? step : -step);
            return parseFloat(alignValue.toFixed(5));
        },
        _valueMin: function() {
            return this.options.min;
        },
        _valueMax: function() {
            return this.options.max;
        },
        _refreshValue: function() {
            var lastValPercent, valPercent, value, valueMin, valueMax, oRange = this.options.range, o = this.options, that = this, animate = this._animateOff ? !1 : o.animate, _set = {};
            if (this.options.values && this.options.values.length) this.handles.each(function(i) {
                valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;
                _set["horizontal" === that.orientation ? "left" : "bottom"] = valPercent + "%";
                $(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                if (that.options.range === !0) if ("horizontal" === that.orientation) {
                    0 === i && that.range.stop(1, 1)[animate ? "animate" : "css"]({
                        left: valPercent + "%"
                    }, o.animate);
                    1 === i && that.range[animate ? "animate" : "css"]({
                        width: valPercent - lastValPercent + "%"
                    }, {
                        queue: !1,
                        duration: o.animate
                    });
                } else {
                    0 === i && that.range.stop(1, 1)[animate ? "animate" : "css"]({
                        bottom: valPercent + "%"
                    }, o.animate);
                    1 === i && that.range[animate ? "animate" : "css"]({
                        height: valPercent - lastValPercent + "%"
                    }, {
                        queue: !1,
                        duration: o.animate
                    });
                }
                lastValPercent = valPercent;
            }); else {
                value = this.value();
                valueMin = this._valueMin();
                valueMax = this._valueMax();
                valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;
                _set["horizontal" === this.orientation ? "left" : "bottom"] = valPercent + "%";
                this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                "min" === oRange && "horizontal" === this.orientation && this.range.stop(1, 1)[animate ? "animate" : "css"]({
                    width: valPercent + "%"
                }, o.animate);
                "max" === oRange && "horizontal" === this.orientation && this.range[animate ? "animate" : "css"]({
                    width: 100 - valPercent + "%"
                }, {
                    queue: !1,
                    duration: o.animate
                });
                "min" === oRange && "vertical" === this.orientation && this.range.stop(1, 1)[animate ? "animate" : "css"]({
                    height: valPercent + "%"
                }, o.animate);
                "max" === oRange && "vertical" === this.orientation && this.range[animate ? "animate" : "css"]({
                    height: 100 - valPercent + "%"
                }, {
                    queue: !1,
                    duration: o.animate
                });
            }
        },
        _handleEvents: {
            keydown: function(event) {
                var allowed, curVal, newVal, step, index = $(event.target).data("ui-slider-handle-index");
                switch (event.keyCode) {
                  case $.ui.keyCode.HOME:
                  case $.ui.keyCode.END:
                  case $.ui.keyCode.PAGE_UP:
                  case $.ui.keyCode.PAGE_DOWN:
                  case $.ui.keyCode.UP:
                  case $.ui.keyCode.RIGHT:
                  case $.ui.keyCode.DOWN:
                  case $.ui.keyCode.LEFT:
                    event.preventDefault();
                    if (!this._keySliding) {
                        this._keySliding = !0;
                        $(event.target).addClass("ui-state-active");
                        allowed = this._start(event, index);
                        if (allowed === !1) return;
                    }
                }
                step = this.options.step;
                curVal = newVal = this.options.values && this.options.values.length ? this.values(index) : this.value();
                switch (event.keyCode) {
                  case $.ui.keyCode.HOME:
                    newVal = this._valueMin();
                    break;

                  case $.ui.keyCode.END:
                    newVal = this._valueMax();
                    break;

                  case $.ui.keyCode.PAGE_UP:
                    newVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / this.numPages);
                    break;

                  case $.ui.keyCode.PAGE_DOWN:
                    newVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / this.numPages);
                    break;

                  case $.ui.keyCode.UP:
                  case $.ui.keyCode.RIGHT:
                    if (curVal === this._valueMax()) return;
                    newVal = this._trimAlignValue(curVal + step);
                    break;

                  case $.ui.keyCode.DOWN:
                  case $.ui.keyCode.LEFT:
                    if (curVal === this._valueMin()) return;
                    newVal = this._trimAlignValue(curVal - step);
                }
                this._slide(event, index, newVal);
            },
            keyup: function(event) {
                var index = $(event.target).data("ui-slider-handle-index");
                if (this._keySliding) {
                    this._keySliding = !1;
                    this._stop(event, index);
                    this._change(event, index);
                    $(event.target).removeClass("ui-state-active");
                }
            }
        }
    }), $.widget("ui.sortable", $.ui.mouse, {
        version: "1.11.1",
        widgetEventPrefix: "sort",
        ready: !1,
        options: {
            appendTo: "parent",
            axis: !1,
            connectWith: !1,
            containment: !1,
            cursor: "auto",
            cursorAt: !1,
            dropOnEmpty: !0,
            forcePlaceholderSize: !1,
            forceHelperSize: !1,
            grid: !1,
            handle: !1,
            helper: "original",
            items: "> *",
            opacity: !1,
            placeholder: !1,
            revert: !1,
            scroll: !0,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: "default",
            tolerance: "intersect",
            zIndex: 1e3,
            activate: null,
            beforeStop: null,
            change: null,
            deactivate: null,
            out: null,
            over: null,
            receive: null,
            remove: null,
            sort: null,
            start: null,
            stop: null,
            update: null
        },
        _isOverAxis: function(x, reference, size) {
            return x >= reference && reference + size > x;
        },
        _isFloating: function(item) {
            return /left|right/.test(item.css("float")) || /inline|table-cell/.test(item.css("display"));
        },
        _create: function() {
            var o = this.options;
            this.containerCache = {};
            this.element.addClass("ui-sortable");
            this.refresh();
            this.floating = this.items.length ? "x" === o.axis || this._isFloating(this.items[0].item) : !1;
            this.offset = this.element.offset();
            this._mouseInit();
            this._setHandleClassName();
            this.ready = !0;
        },
        _setOption: function(key, value) {
            this._super(key, value);
            "handle" === key && this._setHandleClassName();
        },
        _setHandleClassName: function() {
            this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle");
            $.each(this.items, function() {
                (this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item).addClass("ui-sortable-handle");
            });
        },
        _destroy: function() {
            this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle");
            this._mouseDestroy();
            for (var i = this.items.length - 1; i >= 0; i--) this.items[i].item.removeData(this.widgetName + "-item");
            return this;
        },
        _mouseCapture: function(event, overrideHandle) {
            var currentItem = null, validHandle = !1, that = this;
            if (this.reverting) return !1;
            if (this.options.disabled || "static" === this.options.type) return !1;
            this._refreshItems(event);
            $(event.target).parents().each(function() {
                if ($.data(this, that.widgetName + "-item") === that) {
                    currentItem = $(this);
                    return !1;
                }
            });
            $.data(event.target, that.widgetName + "-item") === that && (currentItem = $(event.target));
            if (!currentItem) return !1;
            if (this.options.handle && !overrideHandle) {
                $(this.options.handle, currentItem).find("*").addBack().each(function() {
                    this === event.target && (validHandle = !0);
                });
                if (!validHandle) return !1;
            }
            this.currentItem = currentItem;
            this._removeCurrentsFromItems();
            return !0;
        },
        _mouseStart: function(event, overrideHandle, noActivation) {
            var i, body, o = this.options;
            this.currentContainer = this;
            this.refreshPositions();
            this.helper = this._createHelper(event);
            this._cacheHelperProportions();
            this._cacheMargins();
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.currentItem.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            $.extend(this.offset, {
                click: {
                    left: event.pageX - this.offset.left,
                    top: event.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.helper.css("position", "absolute");
            this.cssPosition = this.helper.css("position");
            this.originalPosition = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
            this.domPosition = {
                prev: this.currentItem.prev()[0],
                parent: this.currentItem.parent()[0]
            };
            this.helper[0] !== this.currentItem[0] && this.currentItem.hide();
            this._createPlaceholder();
            o.containment && this._setContainment();
            if (o.cursor && "auto" !== o.cursor) {
                body = this.document.find("body");
                this.storedCursor = body.css("cursor");
                body.css("cursor", o.cursor);
                this.storedStylesheet = $("<style>*{ cursor: " + o.cursor + " !important; }</style>").appendTo(body);
            }
            if (o.opacity) {
                this.helper.css("opacity") && (this._storedOpacity = this.helper.css("opacity"));
                this.helper.css("opacity", o.opacity);
            }
            if (o.zIndex) {
                this.helper.css("zIndex") && (this._storedZIndex = this.helper.css("zIndex"));
                this.helper.css("zIndex", o.zIndex);
            }
            this.scrollParent[0] !== document && "HTML" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset());
            this._trigger("start", event, this._uiHash());
            this._preserveHelperProportions || this._cacheHelperProportions();
            if (!noActivation) for (i = this.containers.length - 1; i >= 0; i--) this.containers[i]._trigger("activate", event, this._uiHash(this));
            $.ui.ddmanager && ($.ui.ddmanager.current = this);
            $.ui.ddmanager && !o.dropBehaviour && $.ui.ddmanager.prepareOffsets(this, event);
            this.dragging = !0;
            this.helper.addClass("ui-sortable-helper");
            this._mouseDrag(event);
            return !0;
        },
        _mouseDrag: function(event) {
            var i, item, itemElement, intersection, o = this.options, scrolled = !1;
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");
            this.lastPositionAbs || (this.lastPositionAbs = this.positionAbs);
            if (this.options.scroll) {
                if (this.scrollParent[0] !== document && "HTML" !== this.scrollParent[0].tagName) {
                    this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity ? this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed : event.pageY - this.overflowOffset.top < o.scrollSensitivity && (this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed);
                    this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity ? this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed : event.pageX - this.overflowOffset.left < o.scrollSensitivity && (this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed);
                } else {
                    event.pageY - $(document).scrollTop() < o.scrollSensitivity ? scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed) : $(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity && (scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed));
                    event.pageX - $(document).scrollLeft() < o.scrollSensitivity ? scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed) : $(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity && (scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed));
                }
                scrolled !== !1 && $.ui.ddmanager && !o.dropBehaviour && $.ui.ddmanager.prepareOffsets(this, event);
            }
            this.positionAbs = this._convertPositionTo("absolute");
            this.options.axis && "y" === this.options.axis || (this.helper[0].style.left = this.position.left + "px");
            this.options.axis && "x" === this.options.axis || (this.helper[0].style.top = this.position.top + "px");
            for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                itemElement = item.item[0];
                intersection = this._intersectsWithPointer(item);
                if (intersection && item.instance === this.currentContainer && itemElement !== this.currentItem[0] && this.placeholder[1 === intersection ? "next" : "prev"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && ("semi-dynamic" === this.options.type ? !$.contains(this.element[0], itemElement) : !0)) {
                    this.direction = 1 === intersection ? "down" : "up";
                    if ("pointer" !== this.options.tolerance && !this._intersectsWithSides(item)) break;
                    this._rearrange(event, item);
                    this._trigger("change", event, this._uiHash());
                    break;
                }
            }
            this._contactContainers(event);
            $.ui.ddmanager && $.ui.ddmanager.drag(this, event);
            this._trigger("sort", event, this._uiHash());
            this.lastPositionAbs = this.positionAbs;
            return !1;
        },
        _mouseStop: function(event, noPropagation) {
            if (event) {
                $.ui.ddmanager && !this.options.dropBehaviour && $.ui.ddmanager.drop(this, event);
                if (this.options.revert) {
                    var that = this, cur = this.placeholder.offset(), axis = this.options.axis, animation = {};
                    axis && "x" !== axis || (animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft));
                    axis && "y" !== axis || (animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop));
                    this.reverting = !0;
                    $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function() {
                        that._clear(event);
                    });
                } else this._clear(event, noPropagation);
                return !1;
            }
        },
        cancel: function() {
            if (this.dragging) {
                this._mouseUp({
                    target: null
                });
                "original" === this.options.helper ? this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper") : this.currentItem.show();
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    this.containers[i]._trigger("deactivate", null, this._uiHash(this));
                    if (this.containers[i].containerCache.over) {
                        this.containers[i]._trigger("out", null, this._uiHash(this));
                        this.containers[i].containerCache.over = 0;
                    }
                }
            }
            if (this.placeholder) {
                this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                "original" !== this.options.helper && this.helper && this.helper[0].parentNode && this.helper.remove();
                $.extend(this, {
                    helper: null,
                    dragging: !1,
                    reverting: !1,
                    _noFinalSort: null
                });
                this.domPosition.prev ? $(this.domPosition.prev).after(this.currentItem) : $(this.domPosition.parent).prepend(this.currentItem);
            }
            return this;
        },
        serialize: function(o) {
            var items = this._getItemsAsjQuery(o && o.connected), str = [];
            o = o || {};
            $(items).each(function() {
                var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || /(.+)[\-=_](.+)/);
                res && str.push((o.key || res[1] + "[]") + "=" + (o.key && o.expression ? res[1] : res[2]));
            });
            !str.length && o.key && str.push(o.key + "=");
            return str.join("&");
        },
        toArray: function(o) {
            var items = this._getItemsAsjQuery(o && o.connected), ret = [];
            o = o || {};
            items.each(function() {
                ret.push($(o.item || this).attr(o.attribute || "id") || "");
            });
            return ret;
        },
        _intersectsWith: function(item) {
            var x1 = this.positionAbs.left, x2 = x1 + this.helperProportions.width, y1 = this.positionAbs.top, y2 = y1 + this.helperProportions.height, l = item.left, r = l + item.width, t = item.top, b = t + item.height, dyClick = this.offset.click.top, dxClick = this.offset.click.left, isOverElementHeight = "x" === this.options.axis || y1 + dyClick > t && b > y1 + dyClick, isOverElementWidth = "y" === this.options.axis || x1 + dxClick > l && r > x1 + dxClick, isOverElement = isOverElementHeight && isOverElementWidth;
            return "pointer" === this.options.tolerance || this.options.forcePointerForContainers || "pointer" !== this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"] ? isOverElement : l < x1 + this.helperProportions.width / 2 && x2 - this.helperProportions.width / 2 < r && t < y1 + this.helperProportions.height / 2 && y2 - this.helperProportions.height / 2 < b;
        },
        _intersectsWithPointer: function(item) {
            var isOverElementHeight = "x" === this.options.axis || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height), isOverElementWidth = "y" === this.options.axis || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width), isOverElement = isOverElementHeight && isOverElementWidth, verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
            return isOverElement ? this.floating ? horizontalDirection && "right" === horizontalDirection || "down" === verticalDirection ? 2 : 1 : verticalDirection && ("down" === verticalDirection ? 2 : 1) : !1;
        },
        _intersectsWithSides: function(item) {
            var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height), isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width), verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
            return this.floating && horizontalDirection ? "right" === horizontalDirection && isOverRightHalf || "left" === horizontalDirection && !isOverRightHalf : verticalDirection && ("down" === verticalDirection && isOverBottomHalf || "up" === verticalDirection && !isOverBottomHalf);
        },
        _getDragVerticalDirection: function() {
            var delta = this.positionAbs.top - this.lastPositionAbs.top;
            return 0 !== delta && (delta > 0 ? "down" : "up");
        },
        _getDragHorizontalDirection: function() {
            var delta = this.positionAbs.left - this.lastPositionAbs.left;
            return 0 !== delta && (delta > 0 ? "right" : "left");
        },
        refresh: function(event) {
            this._refreshItems(event);
            this._setHandleClassName();
            this.refreshPositions();
            return this;
        },
        _connectWith: function() {
            var options = this.options;
            return options.connectWith.constructor === String ? [ options.connectWith ] : options.connectWith;
        },
        _getItemsAsjQuery: function(connected) {
            function addItems() {
                items.push(this);
            }
            var i, j, cur, inst, items = [], queries = [], connectWith = this._connectWith();
            if (connectWith && connected) for (i = connectWith.length - 1; i >= 0; i--) {
                cur = $(connectWith[i]);
                for (j = cur.length - 1; j >= 0; j--) {
                    inst = $.data(cur[j], this.widgetFullName);
                    inst && inst !== this && !inst.options.disabled && queries.push([ $.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst ]);
                }
            }
            queries.push([ $.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                options: this.options,
                item: this.currentItem
            }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this ]);
            for (i = queries.length - 1; i >= 0; i--) queries[i][0].each(addItems);
            return $(items);
        },
        _removeCurrentsFromItems: function() {
            var list = this.currentItem.find(":data(" + this.widgetName + "-item)");
            this.items = $.grep(this.items, function(item) {
                for (var j = 0; j < list.length; j++) if (list[j] === item.item[0]) return !1;
                return !0;
            });
        },
        _refreshItems: function(event) {
            this.items = [];
            this.containers = [ this ];
            var i, j, cur, inst, targetData, _queries, item, queriesLength, items = this.items, queries = [ [ $.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {
                item: this.currentItem
            }) : $(this.options.items, this.element), this ] ], connectWith = this._connectWith();
            if (connectWith && this.ready) for (i = connectWith.length - 1; i >= 0; i--) {
                cur = $(connectWith[i]);
                for (j = cur.length - 1; j >= 0; j--) {
                    inst = $.data(cur[j], this.widgetFullName);
                    if (inst && inst !== this && !inst.options.disabled) {
                        queries.push([ $.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {
                            item: this.currentItem
                        }) : $(inst.options.items, inst.element), inst ]);
                        this.containers.push(inst);
                    }
                }
            }
            for (i = queries.length - 1; i >= 0; i--) {
                targetData = queries[i][1];
                _queries = queries[i][0];
                for (j = 0, queriesLength = _queries.length; queriesLength > j; j++) {
                    item = $(_queries[j]);
                    item.data(this.widgetName + "-item", targetData);
                    items.push({
                        item: item,
                        instance: targetData,
                        width: 0,
                        height: 0,
                        left: 0,
                        top: 0
                    });
                }
            }
        },
        refreshPositions: function(fast) {
            this.offsetParent && this.helper && (this.offset.parent = this._getParentOffset());
            var i, item, t, p;
            for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                if (item.instance === this.currentContainer || !this.currentContainer || item.item[0] === this.currentItem[0]) {
                    t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;
                    if (!fast) {
                        item.width = t.outerWidth();
                        item.height = t.outerHeight();
                    }
                    p = t.offset();
                    item.left = p.left;
                    item.top = p.top;
                }
            }
            if (this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this); else for (i = this.containers.length - 1; i >= 0; i--) {
                p = this.containers[i].element.offset();
                this.containers[i].containerCache.left = p.left;
                this.containers[i].containerCache.top = p.top;
                this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
                this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
            }
            return this;
        },
        _createPlaceholder: function(that) {
            that = that || this;
            var className, o = that.options;
            if (!o.placeholder || o.placeholder.constructor === String) {
                className = o.placeholder;
                o.placeholder = {
                    element: function() {
                        var nodeName = that.currentItem[0].nodeName.toLowerCase(), element = $("<" + nodeName + ">", that.document[0]).addClass(className || that.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper");
                        "tr" === nodeName ? that.currentItem.children().each(function() {
                            $("<td>&#160;</td>", that.document[0]).attr("colspan", $(this).attr("colspan") || 1).appendTo(element);
                        }) : "img" === nodeName && element.attr("src", that.currentItem.attr("src"));
                        className || element.css("visibility", "hidden");
                        return element;
                    },
                    update: function(container, p) {
                        if (!className || o.forcePlaceholderSize) {
                            p.height() || p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop") || 0, 10) - parseInt(that.currentItem.css("paddingBottom") || 0, 10));
                            p.width() || p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft") || 0, 10) - parseInt(that.currentItem.css("paddingRight") || 0, 10));
                        }
                    }
                };
            }
            that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));
            that.currentItem.after(that.placeholder);
            o.placeholder.update(that, that.placeholder);
        },
        _contactContainers: function(event) {
            var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis, innermostContainer = null, innermostIndex = null;
            for (i = this.containers.length - 1; i >= 0; i--) if (!$.contains(this.currentItem[0], this.containers[i].element[0])) if (this._intersectsWith(this.containers[i].containerCache)) {
                if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) continue;
                innermostContainer = this.containers[i];
                innermostIndex = i;
            } else if (this.containers[i].containerCache.over) {
                this.containers[i]._trigger("out", event, this._uiHash(this));
                this.containers[i].containerCache.over = 0;
            }
            if (innermostContainer) if (1 === this.containers.length) {
                if (!this.containers[innermostIndex].containerCache.over) {
                    this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                    this.containers[innermostIndex].containerCache.over = 1;
                }
            } else {
                dist = 1e4;
                itemWithLeastDistance = null;
                floating = innermostContainer.floating || this._isFloating(this.currentItem);
                posProperty = floating ? "left" : "top";
                sizeProperty = floating ? "width" : "height";
                axis = floating ? "clientX" : "clientY";
                for (j = this.items.length - 1; j >= 0; j--) if ($.contains(this.containers[innermostIndex].element[0], this.items[j].item[0]) && this.items[j].item[0] !== this.currentItem[0]) {
                    cur = this.items[j].item.offset()[posProperty];
                    nearBottom = !1;
                    event[axis] - cur > this.items[j][sizeProperty] / 2 && (nearBottom = !0);
                    if (Math.abs(event[axis] - cur) < dist) {
                        dist = Math.abs(event[axis] - cur);
                        itemWithLeastDistance = this.items[j];
                        this.direction = nearBottom ? "up" : "down";
                    }
                }
                if (!itemWithLeastDistance && !this.options.dropOnEmpty) return;
                if (this.currentContainer === this.containers[innermostIndex]) return;
                itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, !0) : this._rearrange(event, null, this.containers[innermostIndex].element, !0);
                this._trigger("change", event, this._uiHash());
                this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
                this.currentContainer = this.containers[innermostIndex];
                this.options.placeholder.update(this.currentContainer, this.placeholder);
                this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                this.containers[innermostIndex].containerCache.over = 1;
            }
        },
        _createHelper: function(event) {
            var o = this.options, helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [ event, this.currentItem ])) : "clone" === o.helper ? this.currentItem.clone() : this.currentItem;
            helper.parents("body").length || $("parent" !== o.appendTo ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
            helper[0] === this.currentItem[0] && (this._storedCSS = {
                width: this.currentItem[0].style.width,
                height: this.currentItem[0].style.height,
                position: this.currentItem.css("position"),
                top: this.currentItem.css("top"),
                left: this.currentItem.css("left")
            });
            (!helper[0].style.width || o.forceHelperSize) && helper.width(this.currentItem.width());
            (!helper[0].style.height || o.forceHelperSize) && helper.height(this.currentItem.height());
            return helper;
        },
        _adjustOffsetFromHelper: function(obj) {
            "string" == typeof obj && (obj = obj.split(" "));
            $.isArray(obj) && (obj = {
                left: +obj[0],
                top: +obj[1] || 0
            });
            "left" in obj && (this.offset.click.left = obj.left + this.margins.left);
            "right" in obj && (this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left);
            "top" in obj && (this.offset.click.top = obj.top + this.margins.top);
            "bottom" in obj && (this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top);
        },
        _getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();
            if ("absolute" === this.cssPosition && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }
            (this.offsetParent[0] === document.body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && $.ui.ie) && (po = {
                top: 0,
                left: 0
            });
            return {
                top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            };
        },
        _getRelativeOffset: function() {
            if ("relative" === this.cssPosition) {
                var p = this.currentItem.position();
                return {
                    top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                };
            }
            return {
                top: 0,
                left: 0
            };
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
                top: parseInt(this.currentItem.css("marginTop"), 10) || 0
            };
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            };
        },
        _setContainment: function() {
            var ce, co, over, o = this.options;
            "parent" === o.containment && (o.containment = this.helper[0].parentNode);
            ("document" === o.containment || "window" === o.containment) && (this.containment = [ 0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, $("document" === o.containment ? document : window).width() - this.helperProportions.width - this.margins.left, ($("document" === o.containment ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ]);
            if (!/^(document|window|parent)$/.test(o.containment)) {
                ce = $(o.containment)[0];
                co = $(o.containment).offset();
                over = "hidden" !== $(ce).css("overflow");
                this.containment = [ co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top ];
            }
        },
        _convertPositionTo: function(d, pos) {
            pos || (pos = this.position);
            var mod = "absolute" === d ? 1 : -1, scroll = "absolute" !== this.cssPosition || this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
            return {
                top: pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,
                left: pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod
            };
        },
        _generatePosition: function(event) {
            var top, left, o = this.options, pageX = event.pageX, pageY = event.pageY, scroll = "absolute" !== this.cssPosition || this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
            "relative" !== this.cssPosition || this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0] || (this.offset.relative = this._getRelativeOffset());
            if (this.originalPosition) {
                if (this.containment) {
                    event.pageX - this.offset.click.left < this.containment[0] && (pageX = this.containment[0] + this.offset.click.left);
                    event.pageY - this.offset.click.top < this.containment[1] && (pageY = this.containment[1] + this.offset.click.top);
                    event.pageX - this.offset.click.left > this.containment[2] && (pageX = this.containment[2] + this.offset.click.left);
                    event.pageY - this.offset.click.top > this.containment[3] && (pageY = this.containment[3] + this.offset.click.top);
                }
                if (o.grid) {
                    top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                    pageY = this.containment ? top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3] ? top : top - this.offset.click.top >= this.containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                    left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                    pageX = this.containment ? left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2] ? left : left - this.offset.click.left >= this.containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
                }
            }
            return {
                top: pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),
                left: pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())
            };
        },
        _rearrange: function(event, i, a, hardRefresh) {
            a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], "down" === this.direction ? i.item[0] : i.item[0].nextSibling);
            this.counter = this.counter ? ++this.counter : 1;
            var counter = this.counter;
            this._delay(function() {
                counter === this.counter && this.refreshPositions(!hardRefresh);
            });
        },
        _clear: function(event, noPropagation) {
            function delayEvent(type, instance, container) {
                return function(event) {
                    container._trigger(type, event, instance._uiHash(instance));
                };
            }
            this.reverting = !1;
            var i, delayedTriggers = [];
            !this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem);
            this._noFinalSort = null;
            if (this.helper[0] === this.currentItem[0]) {
                for (i in this._storedCSS) ("auto" === this._storedCSS[i] || "static" === this._storedCSS[i]) && (this._storedCSS[i] = "");
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
            } else this.currentItem.show();
            this.fromOutside && !noPropagation && delayedTriggers.push(function(event) {
                this._trigger("receive", event, this._uiHash(this.fromOutside));
            });
            !this.fromOutside && this.domPosition.prev === this.currentItem.prev().not(".ui-sortable-helper")[0] && this.domPosition.parent === this.currentItem.parent()[0] || noPropagation || delayedTriggers.push(function(event) {
                this._trigger("update", event, this._uiHash());
            });
            if (this !== this.currentContainer && !noPropagation) {
                delayedTriggers.push(function(event) {
                    this._trigger("remove", event, this._uiHash());
                });
                delayedTriggers.push(function(c) {
                    return function(event) {
                        c._trigger("receive", event, this._uiHash(this));
                    };
                }.call(this, this.currentContainer));
                delayedTriggers.push(function(c) {
                    return function(event) {
                        c._trigger("update", event, this._uiHash(this));
                    };
                }.call(this, this.currentContainer));
            }
            for (i = this.containers.length - 1; i >= 0; i--) {
                noPropagation || delayedTriggers.push(delayEvent("deactivate", this, this.containers[i]));
                if (this.containers[i].containerCache.over) {
                    delayedTriggers.push(delayEvent("out", this, this.containers[i]));
                    this.containers[i].containerCache.over = 0;
                }
            }
            if (this.storedCursor) {
                this.document.find("body").css("cursor", this.storedCursor);
                this.storedStylesheet.remove();
            }
            this._storedOpacity && this.helper.css("opacity", this._storedOpacity);
            this._storedZIndex && this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex);
            this.dragging = !1;
            if (this.cancelHelperRemoval) {
                if (!noPropagation) {
                    this._trigger("beforeStop", event, this._uiHash());
                    for (i = 0; i < delayedTriggers.length; i++) delayedTriggers[i].call(this, event);
                    this._trigger("stop", event, this._uiHash());
                }
                this.fromOutside = !1;
                return !1;
            }
            noPropagation || this._trigger("beforeStop", event, this._uiHash());
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            this.helper[0] !== this.currentItem[0] && this.helper.remove();
            this.helper = null;
            if (!noPropagation) {
                for (i = 0; i < delayedTriggers.length; i++) delayedTriggers[i].call(this, event);
                this._trigger("stop", event, this._uiHash());
            }
            this.fromOutside = !1;
            return !0;
        },
        _trigger: function() {
            $.Widget.prototype._trigger.apply(this, arguments) === !1 && this.cancel();
        },
        _uiHash: function(_inst) {
            var inst = _inst || this;
            return {
                helper: inst.helper,
                placeholder: inst.placeholder || $([]),
                position: inst.position,
                originalPosition: inst.originalPosition,
                offset: inst.positionAbs,
                item: inst.currentItem,
                sender: _inst ? _inst.element : null
            };
        }
    }), $.widget("ui.spinner", {
        version: "1.11.1",
        defaultElement: "<input>",
        widgetEventPrefix: "spin",
        options: {
            culture: null,
            icons: {
                down: "ui-icon-triangle-1-s",
                up: "ui-icon-triangle-1-n"
            },
            incremental: !0,
            max: null,
            min: null,
            numberFormat: null,
            page: 10,
            step: 1,
            change: null,
            spin: null,
            start: null,
            stop: null
        },
        _create: function() {
            this._setOption("max", this.options.max);
            this._setOption("min", this.options.min);
            this._setOption("step", this.options.step);
            "" !== this.value() && this._value(this.element.val(), !0);
            this._draw();
            this._on(this._events);
            this._refresh();
            this._on(this.window, {
                beforeunload: function() {
                    this.element.removeAttr("autocomplete");
                }
            });
        },
        _getCreateOptions: function() {
            var options = {}, element = this.element;
            $.each([ "min", "max", "step" ], function(i, option) {
                var value = element.attr(option);
                void 0 !== value && value.length && (options[option] = value);
            });
            return options;
        },
        _events: {
            keydown: function(event) {
                this._start(event) && this._keydown(event) && event.preventDefault();
            },
            keyup: "_stop",
            focus: function() {
                this.previous = this.element.val();
            },
            blur: function(event) {
                if (this.cancelBlur) delete this.cancelBlur; else {
                    this._stop();
                    this._refresh();
                    this.previous !== this.element.val() && this._trigger("change", event);
                }
            },
            mousewheel: function(event, delta) {
                if (delta) {
                    if (!this.spinning && !this._start(event)) return !1;
                    this._spin((delta > 0 ? 1 : -1) * this.options.step, event);
                    clearTimeout(this.mousewheelTimer);
                    this.mousewheelTimer = this._delay(function() {
                        this.spinning && this._stop(event);
                    }, 100);
                    event.preventDefault();
                }
            },
            "mousedown .ui-spinner-button": function(event) {
                function checkFocus() {
                    var isActive = this.element[0] === this.document[0].activeElement;
                    if (!isActive) {
                        this.element.focus();
                        this.previous = previous;
                        this._delay(function() {
                            this.previous = previous;
                        });
                    }
                }
                var previous;
                previous = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val();
                event.preventDefault();
                checkFocus.call(this);
                this.cancelBlur = !0;
                this._delay(function() {
                    delete this.cancelBlur;
                    checkFocus.call(this);
                });
                this._start(event) !== !1 && this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
            },
            "mouseup .ui-spinner-button": "_stop",
            "mouseenter .ui-spinner-button": function(event) {
                if ($(event.currentTarget).hasClass("ui-state-active")) {
                    if (this._start(event) === !1) return !1;
                    this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
                }
            },
            "mouseleave .ui-spinner-button": "_stop"
        },
        _draw: function() {
            var uiSpinner = this.uiSpinner = this.element.addClass("ui-spinner-input").attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
            this.element.attr("role", "spinbutton");
            this.buttons = uiSpinner.find(".ui-spinner-button").attr("tabIndex", -1).button().removeClass("ui-corner-all");
            this.buttons.height() > Math.ceil(.5 * uiSpinner.height()) && uiSpinner.height() > 0 && uiSpinner.height(uiSpinner.height());
            this.options.disabled && this.disable();
        },
        _keydown: function(event) {
            var options = this.options, keyCode = $.ui.keyCode;
            switch (event.keyCode) {
              case keyCode.UP:
                this._repeat(null, 1, event);
                return !0;

              case keyCode.DOWN:
                this._repeat(null, -1, event);
                return !0;

              case keyCode.PAGE_UP:
                this._repeat(null, options.page, event);
                return !0;

              case keyCode.PAGE_DOWN:
                this._repeat(null, -options.page, event);
                return !0;
            }
            return !1;
        },
        _uiSpinnerHtml: function() {
            return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
        },
        _buttonHtml: function() {
            return "<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon " + this.options.icons.up + "'>&#9650;</span></a><a class='ui-spinner-button ui-spinner-down ui-corner-br'><span class='ui-icon " + this.options.icons.down + "'>&#9660;</span></a>";
        },
        _start: function(event) {
            if (!this.spinning && this._trigger("start", event) === !1) return !1;
            this.counter || (this.counter = 1);
            this.spinning = !0;
            return !0;
        },
        _repeat: function(i, steps, event) {
            i = i || 500;
            clearTimeout(this.timer);
            this.timer = this._delay(function() {
                this._repeat(40, steps, event);
            }, i);
            this._spin(steps * this.options.step, event);
        },
        _spin: function(step, event) {
            var value = this.value() || 0;
            this.counter || (this.counter = 1);
            value = this._adjustValue(value + step * this._increment(this.counter));
            if (!this.spinning || this._trigger("spin", event, {
                value: value
            }) !== !1) {
                this._value(value);
                this.counter++;
            }
        },
        _increment: function(i) {
            var incremental = this.options.incremental;
            return incremental ? $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 5e4 - i * i / 500 + 17 * i / 200 + 1) : 1;
        },
        _precision: function() {
            var precision = this._precisionOf(this.options.step);
            null !== this.options.min && (precision = Math.max(precision, this._precisionOf(this.options.min)));
            return precision;
        },
        _precisionOf: function(num) {
            var str = num.toString(), decimal = str.indexOf(".");
            return -1 === decimal ? 0 : str.length - decimal - 1;
        },
        _adjustValue: function(value) {
            var base, aboveMin, options = this.options;
            base = null !== options.min ? options.min : 0;
            aboveMin = value - base;
            aboveMin = Math.round(aboveMin / options.step) * options.step;
            value = base + aboveMin;
            value = parseFloat(value.toFixed(this._precision()));
            return null !== options.max && value > options.max ? options.max : null !== options.min && value < options.min ? options.min : value;
        },
        _stop: function(event) {
            if (this.spinning) {
                clearTimeout(this.timer);
                clearTimeout(this.mousewheelTimer);
                this.counter = 0;
                this.spinning = !1;
                this._trigger("stop", event);
            }
        },
        _setOption: function(key, value) {
            if ("culture" !== key && "numberFormat" !== key) {
                ("max" === key || "min" === key || "step" === key) && "string" == typeof value && (value = this._parse(value));
                if ("icons" === key) {
                    this.buttons.first().find(".ui-icon").removeClass(this.options.icons.up).addClass(value.up);
                    this.buttons.last().find(".ui-icon").removeClass(this.options.icons.down).addClass(value.down);
                }
                this._super(key, value);
                if ("disabled" === key) {
                    this.widget().toggleClass("ui-state-disabled", !!value);
                    this.element.prop("disabled", !!value);
                    this.buttons.button(value ? "disable" : "enable");
                }
            } else {
                var prevValue = this._parse(this.element.val());
                this.options[key] = value;
                this.element.val(this._format(prevValue));
            }
        },
        _setOptions: spinner_modifier(function(options) {
            this._super(options);
        }),
        _parse: function(val) {
            "string" == typeof val && "" !== val && (val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val);
            return "" === val || isNaN(val) ? null : val;
        },
        _format: function(value) {
            return "" === value ? "" : window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;
        },
        _refresh: function() {
            this.element.attr({
                "aria-valuemin": this.options.min,
                "aria-valuemax": this.options.max,
                "aria-valuenow": this._parse(this.element.val())
            });
        },
        isValid: function() {
            var value = this.value();
            return null === value ? !1 : value === this._adjustValue(value);
        },
        _value: function(value, allowAny) {
            var parsed;
            if ("" !== value) {
                parsed = this._parse(value);
                if (null !== parsed) {
                    allowAny || (parsed = this._adjustValue(parsed));
                    value = this._format(parsed);
                }
            }
            this.element.val(value);
            this._refresh();
        },
        _destroy: function() {
            this.element.removeClass("ui-spinner-input").prop("disabled", !1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
            this.uiSpinner.replaceWith(this.element);
        },
        stepUp: spinner_modifier(function(steps) {
            this._stepUp(steps);
        }),
        _stepUp: function(steps) {
            if (this._start()) {
                this._spin((steps || 1) * this.options.step);
                this._stop();
            }
        },
        stepDown: spinner_modifier(function(steps) {
            this._stepDown(steps);
        }),
        _stepDown: function(steps) {
            if (this._start()) {
                this._spin((steps || 1) * -this.options.step);
                this._stop();
            }
        },
        pageUp: spinner_modifier(function(pages) {
            this._stepUp((pages || 1) * this.options.page);
        }),
        pageDown: spinner_modifier(function(pages) {
            this._stepDown((pages || 1) * this.options.page);
        }),
        value: function(newVal) {
            if (!arguments.length) return this._parse(this.element.val());
            spinner_modifier(this._value).call(this, newVal);
        },
        widget: function() {
            return this.uiSpinner;
        }
    }), $.widget("ui.tabs", {
        version: "1.11.1",
        delay: 300,
        options: {
            active: null,
            collapsible: !1,
            event: "click",
            heightStyle: "content",
            hide: null,
            show: null,
            activate: null,
            beforeActivate: null,
            beforeLoad: null,
            load: null
        },
        _isLocal: function() {
            var rhash = /#.*$/;
            return function(anchor) {
                var anchorUrl, locationUrl;
                anchor = anchor.cloneNode(!1);
                anchorUrl = anchor.href.replace(rhash, "");
                locationUrl = location.href.replace(rhash, "");
                try {
                    anchorUrl = decodeURIComponent(anchorUrl);
                } catch (error) {}
                try {
                    locationUrl = decodeURIComponent(locationUrl);
                } catch (error) {}
                return anchor.hash.length > 1 && anchorUrl === locationUrl;
            };
        }(),
        _create: function() {
            var that = this, options = this.options;
            this.running = !1;
            this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible", options.collapsible);
            this._processTabs();
            options.active = this._initialActive();
            $.isArray(options.disabled) && (options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"), function(li) {
                return that.tabs.index(li);
            }))).sort());
            this.options.active !== !1 && this.anchors.length ? this.active = this._findActive(options.active) : this.active = $();
            this._refresh();
            this.active.length && this.load(options.active);
        },
        _initialActive: function() {
            var active = this.options.active, collapsible = this.options.collapsible, locationHash = location.hash.substring(1);
            if (null === active) {
                locationHash && this.tabs.each(function(i, tab) {
                    if ($(tab).attr("aria-controls") === locationHash) {
                        active = i;
                        return !1;
                    }
                });
                null === active && (active = this.tabs.index(this.tabs.filter(".ui-tabs-active")));
                (null === active || -1 === active) && (active = this.tabs.length ? 0 : !1);
            }
            if (active !== !1) {
                active = this.tabs.index(this.tabs.eq(active));
                -1 === active && (active = collapsible ? !1 : 0);
            }
            !collapsible && active === !1 && this.anchors.length && (active = 0);
            return active;
        },
        _getCreateEventData: function() {
            return {
                tab: this.active,
                panel: this.active.length ? this._getPanelForTab(this.active) : $()
            };
        },
        _tabKeydown: function(event) {
            var focusedTab = $(this.document[0].activeElement).closest("li"), selectedIndex = this.tabs.index(focusedTab), goingForward = !0;
            if (!this._handlePageNav(event)) {
                switch (event.keyCode) {
                  case $.ui.keyCode.RIGHT:
                  case $.ui.keyCode.DOWN:
                    selectedIndex++;
                    break;

                  case $.ui.keyCode.UP:
                  case $.ui.keyCode.LEFT:
                    goingForward = !1;
                    selectedIndex--;
                    break;

                  case $.ui.keyCode.END:
                    selectedIndex = this.anchors.length - 1;
                    break;

                  case $.ui.keyCode.HOME:
                    selectedIndex = 0;
                    break;

                  case $.ui.keyCode.SPACE:
                    event.preventDefault();
                    clearTimeout(this.activating);
                    this._activate(selectedIndex);
                    return;

                  case $.ui.keyCode.ENTER:
                    event.preventDefault();
                    clearTimeout(this.activating);
                    this._activate(selectedIndex === this.options.active ? !1 : selectedIndex);
                    return;

                  default:
                    return;
                }
                event.preventDefault();
                clearTimeout(this.activating);
                selectedIndex = this._focusNextTab(selectedIndex, goingForward);
                if (!event.ctrlKey) {
                    focusedTab.attr("aria-selected", "false");
                    this.tabs.eq(selectedIndex).attr("aria-selected", "true");
                    this.activating = this._delay(function() {
                        this.option("active", selectedIndex);
                    }, this.delay);
                }
            }
        },
        _panelKeydown: function(event) {
            if (!this._handlePageNav(event) && event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {
                event.preventDefault();
                this.active.focus();
            }
        },
        _handlePageNav: function(event) {
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {
                this._activate(this._focusNextTab(this.options.active - 1, !1));
                return !0;
            }
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {
                this._activate(this._focusNextTab(this.options.active + 1, !0));
                return !0;
            }
        },
        _findNextTab: function(index, goingForward) {
            function constrain() {
                index > lastTabIndex && (index = 0);
                0 > index && (index = lastTabIndex);
                return index;
            }
            for (var lastTabIndex = this.tabs.length - 1; -1 !== $.inArray(constrain(), this.options.disabled); ) index = goingForward ? index + 1 : index - 1;
            return index;
        },
        _focusNextTab: function(index, goingForward) {
            index = this._findNextTab(index, goingForward);
            this.tabs.eq(index).focus();
            return index;
        },
        _setOption: function(key, value) {
            if ("active" !== key) if ("disabled" !== key) {
                this._super(key, value);
                if ("collapsible" === key) {
                    this.element.toggleClass("ui-tabs-collapsible", value);
                    value || this.options.active !== !1 || this._activate(0);
                }
                "event" === key && this._setupEvents(value);
                "heightStyle" === key && this._setupHeightStyle(value);
            } else this._setupDisabled(value); else this._activate(value);
        },
        _sanitizeSelector: function(hash) {
            return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
        },
        refresh: function() {
            var options = this.options, lis = this.tablist.children(":has(a[href])");
            options.disabled = $.map(lis.filter(".ui-state-disabled"), function(tab) {
                return lis.index(tab);
            });
            this._processTabs();
            if (options.active !== !1 && this.anchors.length) if (this.active.length && !$.contains(this.tablist[0], this.active[0])) if (this.tabs.length === options.disabled.length) {
                options.active = !1;
                this.active = $();
            } else this._activate(this._findNextTab(Math.max(0, options.active - 1), !1)); else options.active = this.tabs.index(this.active); else {
                options.active = !1;
                this.active = $();
            }
            this._refresh();
        },
        _refresh: function() {
            this._setupDisabled(this.options.disabled);
            this._setupEvents(this.options.event);
            this._setupHeightStyle(this.options.heightStyle);
            this.tabs.not(this.active).attr({
                "aria-selected": "false",
                "aria-expanded": "false",
                tabIndex: -1
            });
            this.panels.not(this._getPanelForTab(this.active)).hide().attr({
                "aria-hidden": "true"
            });
            if (this.active.length) {
                this.active.addClass("ui-tabs-active ui-state-active").attr({
                    "aria-selected": "true",
                    "aria-expanded": "true",
                    tabIndex: 0
                });
                this._getPanelForTab(this.active).show().attr({
                    "aria-hidden": "false"
                });
            } else this.tabs.eq(0).attr("tabIndex", 0);
        },
        _processTabs: function() {
            var that = this;
            this.tablist = this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role", "tablist").delegate("> li", "mousedown" + this.eventNamespace, function(event) {
                $(this).is(".ui-state-disabled") && event.preventDefault();
            }).delegate(".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
                $(this).closest("li").is(".ui-state-disabled") && this.blur();
            });
            this.tabs = this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({
                role: "tab",
                tabIndex: -1
            });
            this.anchors = this.tabs.map(function() {
                return $("a", this)[0];
            }).addClass("ui-tabs-anchor").attr({
                role: "presentation",
                tabIndex: -1
            });
            this.panels = $();
            this.anchors.each(function(i, anchor) {
                var selector, panel, panelId, anchorId = $(anchor).uniqueId().attr("id"), tab = $(anchor).closest("li"), originalAriaControls = tab.attr("aria-controls");
                if (that._isLocal(anchor)) {
                    selector = anchor.hash;
                    panelId = selector.substring(1);
                    panel = that.element.find(that._sanitizeSelector(selector));
                } else {
                    panelId = tab.attr("aria-controls") || $({}).uniqueId()[0].id;
                    selector = "#" + panelId;
                    panel = that.element.find(selector);
                    if (!panel.length) {
                        panel = that._createPanel(panelId);
                        panel.insertAfter(that.panels[i - 1] || that.tablist);
                    }
                    panel.attr("aria-live", "polite");
                }
                panel.length && (that.panels = that.panels.add(panel));
                originalAriaControls && tab.data("ui-tabs-aria-controls", originalAriaControls);
                tab.attr({
                    "aria-controls": panelId,
                    "aria-labelledby": anchorId
                });
                panel.attr("aria-labelledby", anchorId);
            });
            this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role", "tabpanel");
        },
        _getList: function() {
            return this.tablist || this.element.find("ol,ul").eq(0);
        },
        _createPanel: function(id) {
            return $("<div>").attr("id", id).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", !0);
        },
        _setupDisabled: function(disabled) {
            $.isArray(disabled) && (disabled.length ? disabled.length === this.anchors.length && (disabled = !0) : disabled = !1);
            for (var li, i = 0; li = this.tabs[i]; i++) disabled === !0 || -1 !== $.inArray(i, disabled) ? $(li).addClass("ui-state-disabled").attr("aria-disabled", "true") : $(li).removeClass("ui-state-disabled").removeAttr("aria-disabled");
            this.options.disabled = disabled;
        },
        _setupEvents: function(event) {
            var events = {};
            event && $.each(event.split(" "), function(index, eventName) {
                events[eventName] = "_eventHandler";
            });
            this._off(this.anchors.add(this.tabs).add(this.panels));
            this._on(!0, this.anchors, {
                click: function(event) {
                    event.preventDefault();
                }
            });
            this._on(this.anchors, events);
            this._on(this.tabs, {
                keydown: "_tabKeydown"
            });
            this._on(this.panels, {
                keydown: "_panelKeydown"
            });
            this._focusable(this.tabs);
            this._hoverable(this.tabs);
        },
        _setupHeightStyle: function(heightStyle) {
            var maxHeight, parent = this.element.parent();
            if ("fill" === heightStyle) {
                maxHeight = parent.height();
                maxHeight -= this.element.outerHeight() - this.element.height();
                this.element.siblings(":visible").each(function() {
                    var elem = $(this), position = elem.css("position");
                    "absolute" !== position && "fixed" !== position && (maxHeight -= elem.outerHeight(!0));
                });
                this.element.children().not(this.panels).each(function() {
                    maxHeight -= $(this).outerHeight(!0);
                });
                this.panels.each(function() {
                    $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
                }).css("overflow", "auto");
            } else if ("auto" === heightStyle) {
                maxHeight = 0;
                this.panels.each(function() {
                    maxHeight = Math.max(maxHeight, $(this).height("").height());
                }).height(maxHeight);
            }
        },
        _eventHandler: function(event) {
            var options = this.options, active = this.active, anchor = $(event.currentTarget), tab = anchor.closest("li"), clickedIsActive = tab[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : this._getPanelForTab(tab), toHide = active.length ? this._getPanelForTab(active) : $(), eventData = {
                oldTab: active,
                oldPanel: toHide,
                newTab: collapsing ? $() : tab,
                newPanel: toShow
            };
            event.preventDefault();
            if (!(tab.hasClass("ui-state-disabled") || tab.hasClass("ui-tabs-loading") || this.running || clickedIsActive && !options.collapsible || this._trigger("beforeActivate", event, eventData) === !1)) {
                options.active = collapsing ? !1 : this.tabs.index(tab);
                this.active = clickedIsActive ? $() : tab;
                this.xhr && this.xhr.abort();
                toHide.length || toShow.length || $.error("jQuery UI Tabs: Mismatching fragment identifier.");
                toShow.length && this.load(this.tabs.index(tab), event);
                this._toggle(event, eventData);
            }
        },
        _toggle: function(event, eventData) {
            function complete() {
                that.running = !1;
                that._trigger("activate", event, eventData);
            }
            function show() {
                eventData.newTab.closest("li").addClass("ui-tabs-active ui-state-active");
                if (toShow.length && that.options.show) that._show(toShow, that.options.show, complete); else {
                    toShow.show();
                    complete();
                }
            }
            var that = this, toShow = eventData.newPanel, toHide = eventData.oldPanel;
            this.running = !0;
            if (toHide.length && this.options.hide) this._hide(toHide, this.options.hide, function() {
                eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                show();
            }); else {
                eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                toHide.hide();
                show();
            }
            toHide.attr("aria-hidden", "true");
            eventData.oldTab.attr({
                "aria-selected": "false",
                "aria-expanded": "false"
            });
            toShow.length && toHide.length ? eventData.oldTab.attr("tabIndex", -1) : toShow.length && this.tabs.filter(function() {
                return 0 === $(this).attr("tabIndex");
            }).attr("tabIndex", -1);
            toShow.attr("aria-hidden", "false");
            eventData.newTab.attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            });
        },
        _activate: function(index) {
            var anchor, active = this._findActive(index);
            if (active[0] !== this.active[0]) {
                active.length || (active = this.active);
                anchor = active.find(".ui-tabs-anchor")[0];
                this._eventHandler({
                    target: anchor,
                    currentTarget: anchor,
                    preventDefault: $.noop
                });
            }
        },
        _findActive: function(index) {
            return index === !1 ? $() : this.tabs.eq(index);
        },
        _getIndex: function(index) {
            "string" == typeof index && (index = this.anchors.index(this.anchors.filter("[href$='" + index + "']")));
            return index;
        },
        _destroy: function() {
            this.xhr && this.xhr.abort();
            this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible");
            this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role");
            this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId();
            this.tablist.unbind(this.eventNamespace);
            this.tabs.add(this.panels).each(function() {
                $.data(this, "ui-tabs-destroy") ? $(this).remove() : $(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role");
            });
            this.tabs.each(function() {
                var li = $(this), prev = li.data("ui-tabs-aria-controls");
                prev ? li.attr("aria-controls", prev).removeData("ui-tabs-aria-controls") : li.removeAttr("aria-controls");
            });
            this.panels.show();
            "content" !== this.options.heightStyle && this.panels.css("height", "");
        },
        enable: function(index) {
            var disabled = this.options.disabled;
            if (disabled !== !1) {
                if (void 0 === index) disabled = !1; else {
                    index = this._getIndex(index);
                    disabled = $.isArray(disabled) ? $.map(disabled, function(num) {
                        return num !== index ? num : null;
                    }) : $.map(this.tabs, function(li, num) {
                        return num !== index ? num : null;
                    });
                }
                this._setupDisabled(disabled);
            }
        },
        disable: function(index) {
            var disabled = this.options.disabled;
            if (disabled !== !0) {
                if (void 0 === index) disabled = !0; else {
                    index = this._getIndex(index);
                    if (-1 !== $.inArray(index, disabled)) return;
                    disabled = $.isArray(disabled) ? $.merge([ index ], disabled).sort() : [ index ];
                }
                this._setupDisabled(disabled);
            }
        },
        load: function(index, event) {
            index = this._getIndex(index);
            var that = this, tab = this.tabs.eq(index), anchor = tab.find(".ui-tabs-anchor"), panel = this._getPanelForTab(tab), eventData = {
                tab: tab,
                panel: panel
            };
            if (!this._isLocal(anchor[0])) {
                this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));
                if (this.xhr && "canceled" !== this.xhr.statusText) {
                    tab.addClass("ui-tabs-loading");
                    panel.attr("aria-busy", "true");
                    this.xhr.success(function(response) {
                        setTimeout(function() {
                            panel.html(response);
                            that._trigger("load", event, eventData);
                        }, 1);
                    }).complete(function(jqXHR, status) {
                        setTimeout(function() {
                            "abort" === status && that.panels.stop(!1, !0);
                            tab.removeClass("ui-tabs-loading");
                            panel.removeAttr("aria-busy");
                            jqXHR === that.xhr && delete that.xhr;
                        }, 1);
                    });
                }
            }
        },
        _ajaxSettings: function(anchor, event, eventData) {
            var that = this;
            return {
                url: anchor.attr("href"),
                beforeSend: function(jqXHR, settings) {
                    return that._trigger("beforeLoad", event, $.extend({
                        jqXHR: jqXHR,
                        ajaxSettings: settings
                    }, eventData));
                }
            };
        },
        _getPanelForTab: function(tab) {
            var id = $(tab).attr("aria-controls");
            return this.element.find(this._sanitizeSelector("#" + id));
        }
    }), $.widget("ui.tooltip", {
        version: "1.11.1",
        options: {
            content: function() {
                var title = $(this).attr("title") || "";
                return $("<a>").text(title).html();
            },
            hide: !0,
            items: "[title]:not([disabled])",
            position: {
                my: "left top+15",
                at: "left bottom",
                collision: "flipfit flip"
            },
            show: !0,
            tooltipClass: null,
            track: !1,
            close: null,
            open: null
        },
        _addDescribedBy: function(elem, id) {
            var describedby = (elem.attr("aria-describedby") || "").split(/\s+/);
            describedby.push(id);
            elem.data("ui-tooltip-id", id).attr("aria-describedby", $.trim(describedby.join(" ")));
        },
        _removeDescribedBy: function(elem) {
            var id = elem.data("ui-tooltip-id"), describedby = (elem.attr("aria-describedby") || "").split(/\s+/), index = $.inArray(id, describedby);
            -1 !== index && describedby.splice(index, 1);
            elem.removeData("ui-tooltip-id");
            describedby = $.trim(describedby.join(" "));
            describedby ? elem.attr("aria-describedby", describedby) : elem.removeAttr("aria-describedby");
        },
        _create: function() {
            this._on({
                mouseover: "open",
                focusin: "open"
            });
            this.tooltips = {};
            this.parents = {};
            this.options.disabled && this._disable();
            this.liveRegion = $("<div>").attr({
                role: "log",
                "aria-live": "assertive",
                "aria-relevant": "additions"
            }).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body);
        },
        _setOption: function(key, value) {
            var that = this;
            if ("disabled" !== key) {
                this._super(key, value);
                "content" === key && $.each(this.tooltips, function(id, element) {
                    that._updateContent(element);
                });
            } else {
                this[value ? "_disable" : "_enable"]();
                this.options[key] = value;
            }
        },
        _disable: function() {
            var that = this;
            $.each(this.tooltips, function(id, element) {
                var event = $.Event("blur");
                event.target = event.currentTarget = element[0];
                that.close(event, !0);
            });
            this.element.find(this.options.items).addBack().each(function() {
                var element = $(this);
                element.is("[title]") && element.data("ui-tooltip-title", element.attr("title")).removeAttr("title");
            });
        },
        _enable: function() {
            this.element.find(this.options.items).addBack().each(function() {
                var element = $(this);
                element.data("ui-tooltip-title") && element.attr("title", element.data("ui-tooltip-title"));
            });
        },
        open: function(event) {
            var that = this, target = $(event ? event.target : this.element).closest(this.options.items);
            if (target.length && !target.data("ui-tooltip-id")) {
                target.attr("title") && target.data("ui-tooltip-title", target.attr("title"));
                target.data("ui-tooltip-open", !0);
                event && "mouseover" === event.type && target.parents().each(function() {
                    var blurEvent, parent = $(this);
                    if (parent.data("ui-tooltip-open")) {
                        blurEvent = $.Event("blur");
                        blurEvent.target = blurEvent.currentTarget = this;
                        that.close(blurEvent, !0);
                    }
                    if (parent.attr("title")) {
                        parent.uniqueId();
                        that.parents[this.id] = {
                            element: this,
                            title: parent.attr("title")
                        };
                        parent.attr("title", "");
                    }
                });
                this._updateContent(target, event);
            }
        },
        _updateContent: function(target, event) {
            var content, contentOption = this.options.content, that = this, eventType = event ? event.type : null;
            if ("string" == typeof contentOption) return this._open(event, target, contentOption);
            content = contentOption.call(target[0], function(response) {
                target.data("ui-tooltip-open") && that._delay(function() {
                    event && (event.type = eventType);
                    this._open(event, target, response);
                });
            });
            content && this._open(event, target, content);
        },
        _open: function(event, target, content) {
            function position(event) {
                positionOption.of = event;
                tooltip.is(":hidden") || tooltip.position(positionOption);
            }
            var tooltip, events, delayedShow, a11yContent, positionOption = $.extend({}, this.options.position);
            if (content) {
                tooltip = this._find(target);
                if (tooltip.length) tooltip.find(".ui-tooltip-content").html(content); else {
                    target.is("[title]") && (event && "mouseover" === event.type ? target.attr("title", "") : target.removeAttr("title"));
                    tooltip = this._tooltip(target);
                    this._addDescribedBy(target, tooltip.attr("id"));
                    tooltip.find(".ui-tooltip-content").html(content);
                    this.liveRegion.children().hide();
                    if (content.clone) {
                        a11yContent = content.clone();
                        a11yContent.removeAttr("id").find("[id]").removeAttr("id");
                    } else a11yContent = content;
                    $("<div>").html(a11yContent).appendTo(this.liveRegion);
                    if (this.options.track && event && /^mouse/.test(event.type)) {
                        this._on(this.document, {
                            mousemove: position
                        });
                        position(event);
                    } else tooltip.position($.extend({
                        of: target
                    }, this.options.position));
                    this.hiding = !1;
                    this.closing = !1;
                    tooltip.hide();
                    this._show(tooltip, this.options.show);
                    this.options.show && this.options.show.delay && (delayedShow = this.delayedShow = setInterval(function() {
                        if (tooltip.is(":visible")) {
                            position(positionOption.of);
                            clearInterval(delayedShow);
                        }
                    }, $.fx.interval));
                    this._trigger("open", event, {
                        tooltip: tooltip
                    });
                    events = {
                        keyup: function(event) {
                            if (event.keyCode === $.ui.keyCode.ESCAPE) {
                                var fakeEvent = $.Event(event);
                                fakeEvent.currentTarget = target[0];
                                this.close(fakeEvent, !0);
                            }
                        }
                    };
                    target[0] !== this.element[0] && (events.remove = function() {
                        this._removeTooltip(tooltip);
                    });
                    event && "mouseover" !== event.type || (events.mouseleave = "close");
                    event && "focusin" !== event.type || (events.focusout = "close");
                    this._on(!0, target, events);
                }
            }
        },
        close: function(event) {
            var that = this, target = $(event ? event.currentTarget : this.element), tooltip = this._find(target);
            if (!this.closing) {
                clearInterval(this.delayedShow);
                target.data("ui-tooltip-title") && !target.attr("title") && target.attr("title", target.data("ui-tooltip-title"));
                this._removeDescribedBy(target);
                this.hiding = !0;
                tooltip.stop(!0);
                this._hide(tooltip, this.options.hide, function() {
                    that._removeTooltip($(this));
                    this.hiding = !1;
                    this.closing = !1;
                });
                target.removeData("ui-tooltip-open");
                this._off(target, "mouseleave focusout keyup");
                target[0] !== this.element[0] && this._off(target, "remove");
                this._off(this.document, "mousemove");
                event && "mouseleave" === event.type && $.each(this.parents, function(id, parent) {
                    $(parent.element).attr("title", parent.title);
                    delete that.parents[id];
                });
                this.closing = !0;
                this._trigger("close", event, {
                    tooltip: tooltip
                });
                this.hiding || (this.closing = !1);
            }
        },
        _tooltip: function(element) {
            var tooltip = $("<div>").attr("role", "tooltip").addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content " + (this.options.tooltipClass || "")), id = tooltip.uniqueId().attr("id");
            $("<div>").addClass("ui-tooltip-content").appendTo(tooltip);
            tooltip.appendTo(this.document[0].body);
            this.tooltips[id] = element;
            return tooltip;
        },
        _find: function(target) {
            var id = target.data("ui-tooltip-id");
            return id ? $("#" + id) : $();
        },
        _removeTooltip: function(tooltip) {
            tooltip.remove();
            delete this.tooltips[tooltip.attr("id")];
        },
        _destroy: function() {
            var that = this;
            $.each(this.tooltips, function(id, element) {
                var event = $.Event("blur");
                event.target = event.currentTarget = element[0];
                that.close(event, !0);
                $("#" + id).remove();
                if (element.data("ui-tooltip-title")) {
                    element.attr("title") || element.attr("title", element.data("ui-tooltip-title"));
                    element.removeData("ui-tooltip-title");
                }
            });
            this.liveRegion.remove();
        }
    });
});

define("SmartMenu/SmartMenuJQ", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../Undomanager/undomanager", "jquery", "jqueryui" ], function(require, exports, impError, impWatch, impCommon, impUndoManager, jQuery, jQueryUI) {
    "use strict";
    var Smart, isSmartMenuReady = !1, isChangedWidth = !1, prevWidthValue = 0;
    !function(Smart) {
        var SmartMenuJQ = function() {
            function SmartMenuJQ() {}
            SmartMenuJQ.prototype.Init = function() {
                SmartMenuJQ.AttachSmartMenu();
            };
            SmartMenuJQ.ImageHeightProcessing = function(selectedElement, heightVal, widthVal) {
                if (selectedElement.hasClass("jq-image-block-image")) {
                    if ("" != heightVal) {
                        var htv = Number(heightVal) + 55;
                        selectedElement.parent().closest(".key").css("height", htv + "px");
                        selectedElement.parent().closest(".jq-image-block").css("height", Number(heightVal) + 20 + "px");
                    }
                    if ("" != widthVal) {
                        var wtv = Number(widthVal) + 35;
                        selectedElement.parent().closest(".key").css("width", wtv + "px");
                        selectedElement.parent().closest(".jq-image-block").css("width", Number(widthVal) + 20 + "px");
                    }
                }
                if (selectedElement.hasClass("jq-image-block-container")) {
                    if ("" != heightVal) {
                        var htv = Number(heightVal) - 60;
                        selectedElement.find(".key").css("height", htv + "px");
                        selectedElement.find(".jq-image-block").css("height", Number(heightVal) - 30 + "px");
                    }
                    if ("" != widthVal) {
                        var wtv = Number(widthVal) - 35;
                        selectedElement.find(".key").css("width", wtv + "px");
                        selectedElement.find(".jq-image-block").css("width", Number(widthVal) - 15 + "px");
                    }
                }
            };
            SmartMenuJQ.TextBlockProcessing = function(selectedElement, heightVal, widthVal) {
                if (selectedElement.hasClass("jq-text-block")) {
                    if ("" != heightVal) {
                        var htv = Number(heightVal);
                        selectedElement.parent().closest(".key").css("height", htv + "px");
                    }
                    if ("" != widthVal) {
                        var wtv = Number(widthVal);
                        selectedElement.parent().closest(".key").css("width", wtv + "px");
                    }
                }
                if (selectedElement.hasClass("jq-text-block-container")) {
                    if ("" != heightVal) {
                        var htv = Number(heightVal);
                        selectedElement.find(".key").css("height", htv + "px");
                    }
                    if ("" != widthVal) {
                        var wtv = Number(widthVal);
                        selectedElement.find(".key").css("width", wtv + "px");
                    }
                }
            };
            SmartMenuJQ.AttachSmartMenu = function() {
                jQuery(document).ready(function() {
                    if (0 == isSmartMenuReady) {
                        isSmartMenuReady = !0;
                        jQuery("#sm").on("click", function() {});
                        jQuery(".smart-menu-width").spinner({
                            min: 0,
                            max: 2e3,
                            step: 1,
                            change: function(event, ui) {},
                            spin: function(event, ui) {},
                            stop: function(event, ui) {
                                prevWidthValue != jQuery(this).val() && (isChangedWidth = !0);
                                var flag = "-";
                                flag = prevWidthValue > jQuery(this).val() ? "+" : "-";
                                prevWidthValue = jQuery(this).val();
                                if (1 == isChangedWidth) {
                                    isChangedWidth = !1;
                                    0 == SmartMenuJQ.isSelectProcessing && SmartMenuJQ.OnChange(this, "width");
                                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                                    if (void 0 != selectedElement && !selectedElement.hasClass("row") && !selectedElement.hasClass("root-elements")) {
                                        var undo = new impUndoManager.Manager.UndoManager();
                                        undo.BeforeOperation();
                                    }
                                }
                            }
                        });
                        jQuery(".smart-menu-height").spinner({
                            min: 0,
                            max: 5e3,
                            step: 1,
                            change: function(event, ui) {
                                0 == SmartMenuJQ.isSelectProcessing && SmartMenuJQ.OnChange(this, "height");
                            },
                            slide: function(event, ui) {
                                0 == SmartMenuJQ.isSelectProcessing && SmartMenuJQ.OnChange(this, "height");
                            },
                            stop: function(event, ui) {
                                0 == SmartMenuJQ.isSelectProcessing && SmartMenuJQ.OnChange(this, "height");
                                var undo = (impWatch.Watch.MouseJQ.selectedElement, new impUndoManager.Manager.UndoManager());
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".smart-menu-collapse-close").on("click", function() {
                            jQuery("#sm").find(".smart-menu-controls").slideUp();
                            jQuery("#sm").find(".smart-menu-collapse-show").removeClass("hide");
                            jQuery(this).addClass("hide");
                        });
                        jQuery(".smart-menu-collapse-show").on("click", function() {
                            jQuery("#sm").find(".smart-menu-controls").slideDown();
                            jQuery("#sm").find(".smart-menu-collapse-close").removeClass("hide");
                            jQuery(this).addClass("hide");
                        });
                        jQuery(".smart-menu-controls").on("mouseenter", function() {});
                        jQuery(".smart-menu-controls").on("mouseleave", function() {
                            jQuery(impError.ErrorHandle.ErrorJQ.notifyId).html("");
                            jQuery(impError.ErrorHandle.ErrorJQ.notifyId).css("display", "none");
                        });
                        jQuery(".smart-menu-button-apply").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement, widthVal = (new impError.ErrorHandle.ErrorJQ(), 
                            jQuery(this).closest(".smart-menu-controls-table").find(".smart-menu-width").spinner("value")), heightVal = jQuery(this).closest(".smart-menu-controls-table").find(".smart-menu-height").spinner("value");
                            if (void 0 != selectedElement) if (selectedElement.hasClass("column")) {
                                SmartMenuJQ.ProcessColumnWidth(widthVal);
                                selectedElement.css("min-height", heightVal + "px");
                            } else {
                                selectedElement.css("width", widthVal + "px");
                                selectedElement.hasClass("row") || selectedElement.hasClass("column") ? selectedElement.css("min-height", heightVal + "px") : selectedElement.css("height", heightVal + "px");
                            }
                        });
                    }
                });
            };
            SmartMenuJQ.OnChange = function($this, whclass) {
                impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-text-block-container").first() : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image").first());
                if (void 0 != selectedElement) {
                    var widthVal = (new impError.ErrorHandle.ErrorJQ(), jQuery($this).closest(".smart-menu-controls-table").find(".smart-menu-width").spinner("value")), heightVal = jQuery($this).closest(".smart-menu-controls-table").find(".smart-menu-height").spinner("value");
                    if (selectedElement.hasClass("column")) {
                        "width" == whclass && SmartMenuJQ.ProcessColumnWidth(widthVal);
                        "height" == whclass && selectedElement.css("min-height", heightVal + "px");
                    } else {
                        "width" == whclass && (selectedElement.hasClass("root-elements") || selectedElement.hasClass("row") || selectedElement.css("width", widthVal + "px"));
                        if ("height" == whclass) if (selectedElement.hasClass("row") || selectedElement.hasClass("column") || selectedElement.hasClass("root-elements")) selectedElement.css("min-height", heightVal + "px"); else {
                            selectedElement.css("min-height", heightVal + "px");
                            selectedElement.css("height", heightVal + "px");
                        }
                    }
                }
            };
            SmartMenuJQ.ProcessColumnWidth = function(width) {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text").first() : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image").first());
                if (void 0 != selectedElement) {
                    var width = width, originalWidth = selectedElement.width(), rowWidth = jQuery(selectedElement).parent().width(), onePercentPixels = Math.floor(1 * rowWidth / 100), colXsOnePercentage = 2, colXsOnePixels = colXsOnePercentage * onePercentPixels, commonMethods = new impCommon.Common.CommonMethodsJQ();
                    jQuery(selectedElement).attr("style");
                    commonMethods.RemoveStyle(selectedElement, "min-width");
                    commonMethods.RemoveStyle(selectedElement, "width");
                    var twoFour = 48;
                    if (width > originalWidth) {
                        var emptyXsCount = 0, nextElements = jQuery(selectedElement).nextAll(".column");
                        try {
                            for (var columns = selectedElement.parent().children(".column"), count = 0, j = 0; j < columns.length; j++) {
                                var size = jQuery(columns[j]).attr("xs-column-size");
                                if (void 0 != size && "" != size) {
                                    var num = Number(size);
                                    count += num;
                                }
                            }
                            twoFour > count && (emptyXsCount = twoFour - count);
                            var extenedWidth = width - originalWidth, colXs = Math.floor(extenedWidth / colXsOnePixels);
                            0 == colXs && (colXs = 1);
                            var nextElementsCount = jQuery(selectedElement).nextAll(".column").length, eachXs = Math.floor(colXs / nextElementsCount);
                            0 == eachXs && (eachXs = 1);
                            for (var colXsTemp = colXs, i = 0; i < nextElements.length && colXsTemp > 0; i++) {
                                var nextXsSize = Number(jQuery(nextElements[i]).attr("xs-column-size"));
                                if (1 != nextXsSize) {
                                    var newNextXsSize = nextXsSize - eachXs;
                                    if (1 > newNextXsSize) {
                                        colXsTemp = colXsTemp - eachXs + 1;
                                        newNextXsSize = 1;
                                    } else colXsTemp -= eachXs;
                                    jQuery(nextElements[i]).removeClass("col-xs-" + nextXsSize);
                                    jQuery(nextElements[i]).addClass("col-xs-" + newNextXsSize);
                                    jQuery(nextElements[i]).attr("xs-column-size", newNextXsSize);
                                }
                            }
                            var xsSize = Number(selectedElement.attr("xs-column-size")), newXsSize = xsSize + colXs - colXsTemp;
                            colXs == colXsTemp && (newXsSize += colXsTemp);
                            var allXs = 0;
                            selectedElement.parent().children(".column").each(function() {
                                allXs += Number(jQuery(this).attr("xs-column-size"));
                            });
                            for (var overallMinusCurrent = allXs - xsSize, g = overallMinusCurrent + newXsSize; g > twoFour; ) {
                                newXsSize--;
                                g--;
                            }
                            jQuery(selectedElement).removeClass("col-xs-" + xsSize);
                            jQuery(selectedElement).addClass("col-xs-" + newXsSize);
                            selectedElement.attr("xs-column-size", newXsSize);
                        } catch (ex) {}
                        nextElements.show();
                    } else if (originalWidth > width) {
                        var nextElements = jQuery(selectedElement).nextAll(".column");
                        try {
                            var extenedWidth = originalWidth - width, colXs = Math.floor(extenedWidth / colXsOnePixels);
                            0 == colXs && (colXs = 1);
                            var eachXs = Math.floor(colXs / 1);
                            0 == eachXs && (eachXs = 1);
                            var xsSize = Number(selectedElement.attr("xs-column-size"));
                            if (xsSize > 1) {
                                var eachXsTemp = eachXs, newXsSize = xsSize - eachXs;
                                if (0 > newXsSize) {
                                    eachXsTemp = eachXs + newXsSize;
                                    newXsSize = 1;
                                }
                                if (0 == newXsSize) {
                                    eachXsTemp = eachXs - 1;
                                    newXsSize = 1;
                                }
                                jQuery(selectedElement).removeClass("col-xs-" + xsSize);
                                jQuery(selectedElement).addClass("col-xs-" + newXsSize);
                                selectedElement.attr("xs-column-size", newXsSize);
                                var colXsTemp = colXs;
                                if (colXsTemp > 0) {
                                    var nextXsSize = Number(jQuery(nextElements[0]).attr("xs-column-size")), newNextXsSize = nextXsSize + eachXsTemp, allXs = 0;
                                    selectedElement.parent().children(".column").each(function() {
                                        allXs += Number(jQuery(this).attr("xs-column-size"));
                                    });
                                    for (var overallMinusNext = allXs - Number(jQuery(nextElements[0]).attr("xs-column-size")), g = overallMinusNext + newNextXsSize; g > twoFour; ) {
                                        newNextXsSize--;
                                        g--;
                                    }
                                    jQuery(nextElements[0]).removeClass("col-xs-" + nextXsSize);
                                    jQuery(nextElements[0]).addClass("col-xs-" + newNextXsSize);
                                    jQuery(nextElements[0]).attr("xs-column-size", newNextXsSize);
                                }
                            }
                        } catch (ex) {}
                        nextElements.show();
                    }
                    var nextElementsToShow = jQuery(selectedElement).nextAll(".column");
                    nextElementsToShow.show();
                }
            };
            SmartMenuJQ.ProcessSelectedValues = function() {
                SmartMenuJQ.isSelectProcessing = !0;
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text").first() : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image").first());
                if (void 0 != selectedElement) {
                    var heightstr = selectedElement.css("height");
                    if (void 0 != heightstr) {
                        heightstr.replace("%", "");
                        heightstr.indexOf("%") > -1 || (heightstr = heightstr.replace("px", ""));
                    }
                    var widthstr = selectedElement.css("width");
                    if (void 0 != widthstr) {
                        widthstr.replace("%", "");
                        widthstr.indexOf("%") > -1 || (widthstr = widthstr.replace("px", ""));
                    }
                    jQuery(".smart-menu-height").spinner("value", heightstr);
                    jQuery(".smart-menu-width").spinner("value", widthstr);
                    SmartMenuJQ.isSelectProcessing = !1;
                }
            };
            SmartMenuJQ.ProcessSelectNotify = function() {
                SmartMenuJQ.ProcessSelectedValues();
            };
            SmartMenuJQ.smartMenuIconId = ".smart-menu-icon";
            SmartMenuJQ.smartMenuId = ".smart-menu";
            SmartMenuJQ.isSelectProcessing = !1;
            return SmartMenuJQ;
        }();
        Smart.SmartMenuJQ = SmartMenuJQ;
    }(Smart = exports.Smart || (exports.Smart = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Controls/ControlsJQ", [ "require", "exports", "../Page/Context/ContextJQ", "../_Classes/CssClass", "../Constants/ConstantsJQ", "../ControlNames/PageControlNamesJQ", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "./FontJQ", "./TextJQ", "../SmartMenu/SmartMenuJQ", "../Common/OperationJQ", "jquery" ], function(require, exports, impPageCtx, impCss, impConsts, impPageControlNames, impError, impWatch, impFontList, impText, impSmartMenu, impOperaction, jQuery) {
    "use strict";
    var Page;
    !function(Page) {
        var RequiredJQ = function() {
            function RequiredJQ() {}
            RequiredJQ.prototype.Prepare = function(pageId) {
                jQuery(pageId).find(".required-symbol").remove();
                jQuery(pageId).find(".required").after("<span class='required-symbol'>*</span");
            };
            return RequiredJQ;
        }();
        Page.RequiredJQ = RequiredJQ;
        var AddRowJQ = function(_super) {
            function AddRowJQ() {
                _super.call(this);
            }
            __extends(AddRowJQ, _super);
            AddRowJQ.prototype.Init = function() {
                this.AttachPageAddRowJQ();
                this.AttachFontJQ();
                this.AttachInsertTextJQ();
                this.AttachSmartMenu();
                this.AttachReset();
            };
            AddRowJQ.prototype.AttachReset = function() {
                jQuery("#btnResetAddRowControls").on("click", function() {
                    var ar = new AddRowJQ();
                    ar.ResetAddRowsControls();
                });
            };
            AddRowJQ.prototype.AttachSmartMenu = function() {
                new impSmartMenu.Smart.SmartMenuJQ().Init();
            };
            AddRowJQ.prototype.AttachFontJQ = function() {
                new impFontList.Font.FontJQ().Init();
            };
            AddRowJQ.prototype.AttachInsertTextJQ = function() {
                new impText.Text.TextJQ().Init();
            };
            AddRowJQ.prototype.AttachPageAddRowJQ = function() {
                this.LoadEvent();
                this.AddRow(this.ResetAddRowsControls);
                this.RowColumnNamesDDN();
                this.ControlColumns();
                this.ControlRowHeight();
                this.ControlColumnHeight();
                new RequiredJQ().Prepare(AddRowJQ.pageId);
            };
            AddRowJQ.prototype.LoadEvent = function() {
                jQuery(AddRowJQ.pageId).on("cust_loaded", function() {
                    if (impWatch.Watch.MouseJQ.selectedElement.hasClass("jq-Content")) {
                        AddRowJQ.SetRowHeightControl("400");
                        AddRowJQ.SetColumnHeightControl("400");
                    } else {
                        AddRowJQ.SetRowHeightControl(impConsts.Constants.ConstantsJQ.HEIGHTCONTROLRESETVALUE);
                        AddRowJQ.SetColumnHeightControl(impConsts.Constants.ConstantsJQ.HEIGHTCONTROLRESETVALUE);
                    }
                });
            };
            AddRowJQ.SetRowHeightControl = function(val) {
                jQuery(AddRowJQ.pageId).find(AddRowJQ.ROW_HEIGHT_CONTROL).val(val);
                jQuery(AddRowJQ.pageId).find(AddRowJQ.ROW_HEIGHT_VALUE_CONTROL).text(jQuery(AddRowJQ.ROW_HEIGHT_CONTROL).val() + " pixels");
            };
            AddRowJQ.SetColumnHeightControl = function(val) {
                jQuery(AddRowJQ.pageId).find(AddRowJQ.COLUMN_HEIGHT_CONTROL).val(val);
                jQuery(AddRowJQ.pageId).find(AddRowJQ.COLUMN_HEIGHT_VALUE_CONTROL).text(jQuery(AddRowJQ.COLUMN_HEIGHT_CONTROL).val() + " pixels");
            };
            AddRowJQ.prototype.RowColumnNamesDDN = function() {
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).on("change", function() {
                    var selectedRowOrColumn = jQuery("#rows-columns option:selected").val();
                    if (".jq-Content" == selectedRowOrColumn) {
                        AddRowJQ.SetColumnHeightControl("400");
                        AddRowJQ.SetRowHeightControl("400");
                    }
                });
            };
            AddRowJQ.prototype.ResetAddRowsControls = function() {
                var tempControl = new AddRowJQ();
                tempControl.LoadRowsAndColumnsNames();
                tempControl.ResetColumnControl();
                tempControl.ResetRowHeightControl();
                tempControl.ResetColumnHeightControl();
            };
            AddRowJQ.prototype.ResetColumnControl = function() {
                jQuery(AddRowJQ.CONTROL_COLUMNS).each(function() {
                    jQuery(this).attr("data-set", "0");
                    jQuery(this).removeClass("highlight-column");
                });
            };
            AddRowJQ.prototype.ResetRowHeightControl = function() {
                AddRowJQ.SetRowHeightControl(impConsts.Constants.ConstantsJQ.HEIGHTCONTROLRESETVALUE);
            };
            AddRowJQ.prototype.ResetColumnHeightControl = function() {
                AddRowJQ.SetColumnHeightControl(impConsts.Constants.ConstantsJQ.HEIGHTCONTROLRESETVALUE);
            };
            AddRowJQ.prototype.LoadRowsAndColumnsNames = function() {
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).empty();
                var rows = jQuery(".debug-row-css"), columns = jQuery(".debug-column-css"), selectOption = "<option value='select'>-- Select --</option>";
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(selectOption);
                var defaultOption = "<option value='.jq-Header'>Header</option>";
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(defaultOption);
                var defaultOption = "<option value='.jq-MenuBar'>MenuBar</option>";
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(defaultOption);
                defaultOption = "<option value='.jq-Content'>Body</option";
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(defaultOption);
                defaultOption = "<option value='.jq-Footer'>Footer</option";
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(defaultOption);
                if (rows.length > 0) for (var i = 0; i < rows.length; i++) {
                    var rowOption = "<option value='" + jQuery(rows[i]).text() + "'>" + jQuery(rows[i]).text() + "</option>";
                    jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(rowOption);
                }
                if (columns.length > 0) for (var i = 0; i < columns.length; i++) {
                    var columnOption = "<option value='" + jQuery(columns[i]).text() + "'>" + jQuery(columns[i]).text() + "</option>";
                    jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(columnOption);
                }
            };
            AddRowJQ.prototype.AddRow = function(callBackLoadRowAndColumnNames) {
                jQuery(".control-columns").on("click", function() {
                    var columnSet = jQuery(this).attr("data-set");
                    if ("1" == columnSet) {
                        jQuery(this).attr("data-set", "0");
                        jQuery(this).removeClass("highlight-column");
                    } else {
                        jQuery(this).attr("data-set", "1");
                        jQuery(this).addClass("highlight-column");
                    }
                    var errorHandler = new impError.ErrorHandle.ErrorJQ();
                    errorHandler.SetErrorClassName("page-add-row");
                    for (var cols = jQuery(".control-columns[data-set=1]"), colsClasses = "", colPrevNumber = 0, columnNumber = 0, i = 0; i < cols.length; i++) {
                        columnNumber = Number(jQuery(cols[i]).attr("data-number"));
                        i > 0 && (columnNumber -= colPrevNumber);
                        colPrevNumber = columnNumber + colPrevNumber;
                        colsClasses += 0 == i ? "col-xs-" + columnNumber : " col-xs-" + columnNumber;
                    }
                    var lastColClassNumber = 48 - colPrevNumber;
                    lastColClassNumber > 0 && (colsClasses += " col-xs-" + lastColClassNumber);
                    var ctx = new impPageCtx.Page.ContextJQ(), selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                    impWatch.Watch.MouseJQ.nearestElement.length > 0 && selectedRowOrColumn.hasClass("column") && (selectedRowOrColumn = impWatch.Watch.MouseJQ.nearestElement);
                    if (void 0 != selectedRowOrColumn) {
                        var adjustRow = new impCss.CssClass.AdjustJQ(), adjustColumn = new impCss.CssClass.AdjustJQ();
                        adjustColumn.height = jQuery(AddRowJQ.pageId).find(AddRowJQ.COLUMN_HEIGHT_CONTROL).val();
                        selectedRowOrColumn.hasClass("empty-container") && (adjustColumn.height = adjustRow.height);
                        selectedRowOrColumn.attr("scopeId");
                        jQuery(".removable-row").remove();
                        impOperaction.Operation.AfterOperationJQ.Execute();
                        selectedRowOrColumn.children(".debug-column-css").hide();
                        selectedRowOrColumn.css("padding", "0");
                        var beforeAfter = void 0;
                        selectedRowOrColumn.hasClass("row") && (beforeAfter = !0);
                        selectedRowOrColumn.hasClass("image-text-other") && (beforeAfter = !1);
                        AddRowJQ.addedRow = ctx.Page.Any.AddRow(selectedRowOrColumn, colsClasses, "", adjustRow, adjustColumn, beforeAfter);
                        if (void 0 != AddRowJQ.addedRow) {
                            AddRowJQ.addedRow.addClass("removable-row");
                            AddRowJQ.addedRow.children(".column").addClass("columns-pending");
                        }
                        "none" != jQuery(".jq-show-plus").css("display") && jQuery(".jq-row-plus-container").hide();
                        jQuery("#control-common-execute").trigger("click");
                    }
                });
                jQuery(AddRowJQ.pageId).find(AddRowJQ.BTN_ADD_ROW).on("click", function(e, s) {
                    jQuery(".removable-row").removeClass("removable-row");
                    void 0 != callBackLoadRowAndColumnNames && callBackLoadRowAndColumnNames();
                });
            };
            AddRowJQ.prototype.ControlColumns = function() {
                jQuery(AddRowJQ.pageId).find(AddRowJQ.CONTROL_COLUMNS).on("click", function(e, s) {});
            };
            AddRowJQ.prototype.ControlRowHeight = function() {
                AddRowJQ.SetRowHeightControl(impConsts.Constants.ConstantsJQ.HEIGHTCONTROLRESETVALUE);
                jQuery(AddRowJQ.pageId).find(AddRowJQ.ROW_HEIGHT_CONTROL).on("change", function() {
                    jQuery(AddRowJQ.pageId).find(AddRowJQ.ROW_HEIGHT_VALUE_CONTROL).text(jQuery(this).val() + " pixels");
                });
            };
            AddRowJQ.prototype.ControlColumnHeight = function() {
                AddRowJQ.SetColumnHeightControl(impConsts.Constants.ConstantsJQ.HEIGHTCONTROLRESETVALUE);
                jQuery(AddRowJQ.pageId).find(AddRowJQ.COLUMN_HEIGHT_CONTROL).on("change", function() {
                    jQuery(AddRowJQ.pageId).find(AddRowJQ.COLUMN_HEIGHT_VALUE_CONTROL).text(jQuery(this).val() + " pixels");
                });
            };
            AddRowJQ.ProcessSelectNotify = function() {
                impWatch.Watch.MouseJQ.selectedElement;
                jQuery(".removable-row").removeClass("removable-row");
                jQuery(".columns-pending").removeClass("columns-pending");
                var ar = new AddRowJQ();
                ar.ResetColumnControl();
            };
            AddRowJQ.pageId = "#control-add-row";
            return AddRowJQ;
        }(impPageControlNames.PageControlNamesJQ.Page.AddRow.Controls);
        Page.AddRowJQ = AddRowJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Controls/ImageJQ", [ "require", "exports", "../Error/ErrorJQ", "../ControlNames/PageControlNamesJQ", "../Page/Context/ContextJQ", "../Watch/WatchMouseJQ", "./ControlCommonJQ", "../Common/OperationJQ", "../UndoManager/UndoManager", "jquery" ], function(require, exports, impError, impPageControlNames, impPageCtx, impWatch, impCommonCode, impOperaction, impUndoManager, jQuery) {
    "use strict";
    var Image, debug = !0, globalImageBlockId = 0, globalImageBlockContainerId = 0;
    !function(Image) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        Image.SmartObj = SmartObj;
        var SelfJQ = function(_super) {
            function SelfJQ() {
                _super.apply(this, arguments);
            }
            __extends(SelfJQ, _super);
            SelfJQ.prototype.Init = function() {
                this.AttachUserImages();
                this.AttachSelectImage();
                this.AttachInsertImage();
            };
            SelfJQ.prototype.GenerateTextBlockScopeId = function() {
                return "Image_Block_" + ++globalImageBlockId;
            };
            SelfJQ.prototype.GenerateContainerScopeId = function() {
                return "Image_Block_Container_" + ++globalImageBlockContainerId;
            };
            SelfJQ.prototype.AttachSelectImage = function() {
                jQuery("#control-image-bi-library").on("click", ".image-library-image", function() {
                    jQuery(".image-library-image").removeClass("image-library-select");
                    jQuery(".image-library-image").removeClass("image-library-bi-select");
                    jQuery(this).addClass("image-library-select");
                    jQuery(this).addClass("image-library-bi-select");
                });
                jQuery(SelfJQ.controlId).on("click", ".image-library-image", function() {
                    jQuery(".image-library-image").removeClass("image-library-select");
                    jQuery(this).addClass("image-library-select");
                });
            };
            SelfJQ.IsImageUrl = function(s) {
                var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
                if (1 == regexp.test(s) && s.length >= 5) for (var lowerUrl = s.toLowerCase(), types = [ "jpeg", "jpg", "png", "gif" ], i = 0; i < types.length; i++) {
                    var _type = lowerUrl.substr(lowerUrl.length - 5, 5), ts = _type.split(".");
                    if (ts.length >= 2 && ts[1] == types[i]) return !0;
                }
                return !1;
            };
            SelfJQ.prototype.AttachInsertImage = function() {
                jQuery(SelfJQ.controlId).find(".action-button-insert-image").on("click", function() {
                    "" != jQuery(".internet-image-url").val() ? SelfJQ.InsertImage(jQuery(".internet-image-url").val()) : SelfJQ.InsertImage(void 0);
                });
                jQuery(".action-button-change-image").on("click", function() {
                    var selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedRowOrColumn && selectedRowOrColumn.hasClass("empty-container-image")) {
                        var imgSrc = jQuery(".image-library-select").attr("src");
                        if ("" != imgSrc) {
                            selectedRowOrColumn.find(".jq-plus-container-image").find("img").attr("src", imgSrc);
                            var undo = new impUndoManager.Manager.UndoManager();
                            undo.BeforeOperation();
                        }
                    } else {
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionFail("please select a image change.");
                    }
                    jQuery("#control-image-library").hide();
                });
            };
            SelfJQ.ChangeImage = function() {
                jQuery(".action-button-insert-image").hide();
                jQuery(".action-button-change-image").show();
                jQuery("#control-image-library").show();
                jQuery("#control-image-library").trigger("custom_loaded");
            };
            SelfJQ.InsertImage = function(url) {
                var imageObj = new SelfJQ(), errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.SetErrorClassName("page-insert-image");
                var ctx = new impPageCtx.Page.ContextJQ(), selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                if (!selectedRowOrColumn.hasClass("column") && (null == window.smartObj || null == window.smartObj.currentObj)) {
                    window.smartObj = new SmartObj();
                    window.smartObj.currentObj = selectedRowOrColumn;
                    window.smartObj.command = "n";
                }
                void 0 == selectedRowOrColumn && (selectedRowOrColumn = jQuery("#nnnoelement"));
                if (void 0 != selectedRowOrColumn) {
                    var tbImageContainer = document.createElement("div"), tbImage = document.createElement("div"), tbImageWrapper = document.createElement("div"), tbImg = document.createElement("img");
                    jQuery(tbImg).addClass("jq-image-block-image ");
                    jQuery(tbImg).addClass("normal-element image-element");
                    jQuery(tbImageWrapper).addClass("jq-image-block-image-wrapper ");
                    var imgSrc;
                    imgSrc = void 0 == url ? jQuery(".image-library-select").attr("src") : url;
                    jQuery(tbImg).attr("src", imgSrc);
                    jQuery(tbImageWrapper).append(tbImg);
                    jQuery(tbImage).append(tbImageWrapper);
                    jQuery(tbImage).addClass(SelfJQ.CSSCLASS);
                    var tbScopeId = imageObj.GenerateTextBlockScopeId();
                    1 == debug && void 0 != tbImage && jQuery(tbImage).prepend("<span class='debug-image-block-css debug-css' scopeId='" + tbScopeId + "'> " + tbScopeId + " </span> ");
                    jQuery(tbImage).attr("scopeId", tbScopeId);
                    jQuery(tbImageContainer).append(tbImage);
                    var tbcScopeId = imageObj.GenerateContainerScopeId();
                    1 == debug && jQuery(tbImageContainer).append(" <span class='debug-image-block-container-css debug-css' scopeId='" + tbcScopeId + "'> " + tbcScopeId + " </span> ");
                    jQuery(tbImageContainer).addClass(SelfJQ.CONTAINER_CSS_CLASS);
                    jQuery(tbImageContainer).attr("scopeId", tbcScopeId);
                    if (1 == selectedRowOrColumn.hasClass("column") || null != window.smartObj) {
                        var plusContainer = jQuery(".jq-plus-container.jq-plus-container-not-used").clone();
                        plusContainer.removeClass("jq-plus-container-not-used");
                        plusContainer.addClass("jq-plus-container-image");
                        plusContainer.addClass("design-css");
                        plusContainer.addClass("design-empty-text-css");
                        plusContainer.removeClass("jq-plus-container");
                        plusContainer.find(".jq-plus-element-content").addClass("jq-plus-element-content-image");
                        var emptycontainer = document.createElement("div");
                        plusContainer.find(".adjust-image-text-other").remove();
                        plusContainer.css("height", "200px");
                        plusContainer.css("width", "200px");
                        var jEc = jQuery(emptycontainer);
                        jEc.prepend("<div class='adjust-image-text-other-left design-css design-adjust-image-text-other'></div>");
                        jEc.prepend("<div class='adjust-image-text-other design-css design-adjust-image-text-other'></div>");
                        jEc.addClass("empty-container-image image-text-other key design-css design-empty-text-css");
                        jEc.append(plusContainer);
                        plusContainer.find(".jq-plus-content").append(tbImageContainer);
                        impOperaction.Operation.AfterOperationJQ.Execute();
                        null == window.smartObj || "" == window.smartObj.command ? ctx.Page.Any.Add(selectedRowOrColumn, jEc, "", void 0, void 0, void 0, void 0) : ctx.Page.Any.Add(selectedRowOrColumn, jEc, "", void 0, void 0, !0, void 0);
                        if (selectedRowOrColumn.hasClass("jq-image-block-container")) {
                            var tbOrTbcWithScopeId = selectedRowOrColumn.attr("scopeId");
                            selectedRowOrColumn.find(".debug-image-block-container-css[scopeId=" + tbOrTbcWithScopeId + "]").remove();
                            void 0 != tbOrTbcWithScopeId && selectedRowOrColumn.append('<span class="debug-image-block-container-css debug-css" scopeId="' + tbOrTbcWithScopeId + '" > ' + tbOrTbcWithScopeId + "</span>");
                        }
                        jQuery(tbImageContainer).find(".debug-css").remove();
                        errorHandler.ActionSuccess("");
                        jQuery(SelfJQ.controlId).hide();
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                    } else errorHandler.ActionFail("You can only insert in a column block.");
                }
                jQuery(".image-library-image").removeClass("image-library-select");
                jQuery(".internet-image-url").val("");
            };
            SelfJQ.prototype.AttachUserImages = function() {
                jQuery(".load-more-images").on("click", function() {
                    SelfJQ.GetImages();
                });
                jQuery(SelfJQ.controlId).on("custom_loaded", function() {
                    SelfJQ.ClearImageGalaryPagingValue();
                    SelfJQ.GetImages();
                });
            };
            SelfJQ.SetImageGalaryPagingValue = function() {
                jQuery(".imges-get-start").val((Number(jQuery(".imges-get-start").val()) + 20).toString());
            };
            SelfJQ.GetImageGalaryPagingValue = function() {
                if (0 == jQuery(".imges-get-start").length) {
                    var pagingElement = jQuery(document.createElement("input"));
                    pagingElement.addClass("imges-get-start hide");
                    jQuery("body").append(pagingElement);
                    jQuery(".imges-get-start").val("0");
                }
                return jQuery(".imges-get-start").val();
            };
            SelfJQ.GetImages = function() {
                var data = {
                    start: SelfJQ.GetImageGalaryPagingValue(),
                    pageSize: 20
                }, dataStrfy = JSON.stringify(data);
                jQuery.ajax({
                    type: "POST",
                    url: "/services/ImageService.asmx/GetImages",
                    data: dataStrfy,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SelfJQ.OnGetImagesSuccess,
                    error: SelfJQ.OnGetImagesError
                });
            };
            SelfJQ.ClearImageGalaryPagingValue = function() {
                jQuery(".imges-get-start").val("0");
            };
            SelfJQ.OnGetImagesSuccess = function(data, status) {
                var resultImages;
                resultImages = data.d;
                if (resultImages.length > 0) {
                    "0" == SelfJQ.GetImageGalaryPagingValue() && jQuery(".image-library").html("");
                    SelfJQ.SetImageGalaryPagingValue();
                }
                for (var i = 0; i < resultImages.length; i++) {
                    var imageContainer = document.createElement("div");
                    jQuery(imageContainer).addClass("image-lib-container");
                    var image = document.createElement("img");
                    jQuery(image).attr("src", resultImages[i].Path);
                    jQuery(image).addClass("image-library-image");
                    jQuery(image).addClass("img-thumbnail");
                    jQuery(imageContainer).append(image);
                    jQuery(".image-library").append(imageContainer);
                }
            };
            SelfJQ.OnGetImagesError = function(request, status, error) {
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.ActionFail("Some Problem !. <br>Try again latter.");
            };
            SelfJQ.ProcessSelectNotify = function() {
                var selectedElement = (new impError.ErrorHandle.ErrorJQ(), impWatch.Watch.MouseJQ.selectedElement);
                void 0 != selectedElement && (selectedElement.hasClass("row") || selectedElement.hasClass("normal-element"));
            };
            SelfJQ.controlId = "#control-image-library";
            SelfJQ.CSSCLASS = "jq-image-block design-image-block normal-element";
            SelfJQ.CONTAINER_CSS_CLASS = "jq-image-block-container design-image-block normal-element jq-container";
            return SelfJQ;
        }(impPageControlNames.PageControlNamesJQ.Page.Image.Controls);
        Image.SelfJQ = SelfJQ;
    }(Image = exports.Image || (exports.Image = {}));
});

!function(factory) {
    "function" == typeof define && define.amd ? define("ColorPicker", [ "jquery", "jqueryui" ], factory) : factory(jQuery);
}(function($, undefined) {
    var _idx = 0, ua = window.navigator.userAgent, isIE = ua.indexOf("MSIE ") > 0, _ie = isIE ? "-ie" : "", isMoz = isIE ? !1 : /mozilla/.test(ua.toLowerCase()) && !/webkit/.test(ua.toLowerCase()), history = [], baseThemeColors = [ "ffffff", "000000", "eeece1", "1f497d", "4f81bd", "c0504d", "9bbb59", "8064a2", "4bacc6", "f79646" ], subThemeColors = [ "f2f2f2", "7f7f7f", "ddd9c3", "c6d9f0", "dbe5f1", "f2dcdb", "ebf1dd", "e5e0ec", "dbeef3", "fdeada", "d8d8d8", "595959", "c4bd97", "8db3e2", "b8cce4", "e5b9b7", "d7e3bc", "ccc1d9", "b7dde8", "fbd5b5", "bfbfbf", "3f3f3f", "938953", "548dd4", "95b3d7", "d99694", "c3d69b", "b2a2c7", "92cddc", "fac08f", "a5a5a5", "262626", "494429", "17365d", "366092", "953734", "76923c", "5f497a", "31859b", "e36c09", "7f7f7f", "0c0c0c", "1d1b10", "0f243e", "244061", "632423", "4f6128", "3f3151", "205867", "974806" ], standardColors = [ "c00000", "ff0000", "ffc000", "ffff00", "92d050", "00b050", "00b0f0", "0070c0", "FF00FF", "7030a0" ], webColors = [ [ "003366", "336699", "3366cc", "003399", "000099", "0000cc", "000066" ], [ "006666", "006699", "0099cc", "0066cc", "0033cc", "0000ff", "3333ff", "333399" ], [ "669999", "009999", "33cccc", "00ccff", "0099ff", "0066ff", "3366ff", "3333cc", "666699" ], [ "339966", "00cc99", "00ffcc", "00ffff", "33ccff", "3399ff", "6699ff", "6666ff", "6600ff", "6600cc" ], [ "339933", "00cc66", "00ff99", "66ffcc", "66ffff", "66ccff", "99ccff", "9999ff", "9966ff", "9933ff", "9900ff" ], [ "006600", "00cc00", "00ff00", "66ff99", "99ffcc", "ccffff", "ccccff", "cc99ff", "cc66ff", "cc33ff", "cc00ff", "9900cc" ], [ "003300", "009933", "33cc33", "66ff66", "99ff99", "ccffcc", "ffffff", "ffccff", "ff99ff", "ff66ff", "ff00ff", "cc00cc", "660066" ], [ "333300", "009900", "66ff33", "99ff66", "ccff99", "ffffcc", "ffcccc", "ff99cc", "ff66cc", "ff33cc", "cc0099", "993399" ], [ "336600", "669900", "99ff33", "ccff66", "ffff99", "ffcc99", "ff9999", "ff6699", "ff3399", "cc3399", "990099" ], [ "666633", "99cc00", "ccff33", "ffff66", "ffcc66", "ff9966", "ff6666", "ff0066", "d60094", "993366" ], [ "a58800", "cccc00", "ffff00", "ffcc00", "ff9933", "ff6600", "ff0033", "cc0066", "660033" ], [ "996633", "cc9900", "ff9900", "cc6600", "ff3300", "ff0000", "cc0000", "990033" ], [ "663300", "996600", "cc3300", "993300", "990000", "800000", "993333" ] ], transColor = "#0000ffff", int2Hex = function(i) {
        var h = i.toString(16);
        1 == h.length && (h = "0" + h);
        return h;
    }, st2Hex = function(s) {
        return int2Hex(Number(s));
    }, int2Hex3 = function(i) {
        var h = int2Hex(i);
        return h + h + h;
    }, toHex3 = function(c) {
        if (c.length > 10) {
            var p1 = 1 + c.indexOf("("), p2 = c.indexOf(")"), cs = c.substring(p1, p2).split(",");
            return [ "#", st2Hex(cs[0]), st2Hex(cs[1]), st2Hex(cs[2]) ].join("");
        }
        return c;
    };
    $.widget("evol.colorpicker", {
        version: "3.2.1",
        options: {
            color: null,
            showOn: "both",
            hideButton: !1,
            displayIndicator: !0,
            transparentColor: !1,
            history: !0,
            defaultPalette: "theme",
            strings: "Theme Colors,Standard Colors,Web Colors,Theme Colors,Back to Palette,History,No history yet."
        },
        _active: !1,
        _create: function() {
            var that = this;
            this._paletteIdx = "theme" == this.options.defaultPalette ? 1 : 2;
            this._id = "evo-cp" + _idx++;
            this._enabled = !0;
            this.options.showOn = this.options.hideButton ? "focus" : this.options.showOn;
            switch (this.element.get(0).tagName) {
              case "INPUT":
                var color = this.options.color, e = this.element, css = ("focus" === this.options.showOn ? "" : "evo-pointer ") + "evo-colorind" + (isMoz ? "-ff" : _ie) + (this.options.hideButton ? " evo-hidden-button" : ""), style = "";
                this._isPopup = !0;
                this._palette = null;
                var v = e.val();
                null !== color ? color != v && e.val(color).change() : "" !== v && (color = this.options.color = v);
                color === transColor ? css += " evo-transparent" : style = null !== color ? "background-color:" + color : "";
                e.addClass("colorPicker " + this._id).wrap('<div style="width:' + (this.options.hideButton ? this.element.width() : this.element.width() + 32) + "px;" + (isIE ? "margin-bottom:-21px;" : "") + (isMoz ? "padding:1px 0;" : "") + '" class="evo-cp-wrap"></div>').after('<div class="' + css + '" style="' + style + '"></div>').on("keyup onpaste", function(evt) {
                    var c = $(this).val();
                    c != that.options.color && that._setValue(c, !0);
                });
                var showOn = this.options.showOn;
                ("both" === showOn || "focus" === showOn) && e.on("focus", function() {
                    that.showPalette();
                });
                ("both" === showOn || "button" === showOn) && e.next().on("click", function(evt) {
                    evt.stopPropagation();
                    that.showPalette();
                    return !1;
                });
                break;

              default:
                this._isPopup = !1;
                this._palette = this.element.html(this._paletteHTML()).attr("aria-haspopup", "true");
                this._bindColors();
            }
            if (this.options.history) {
                color && this._add2History(color);
                if (this.options.initialHistory) {
                    var c = this.options.initialHistory;
                    for (var i in c) this._add2History(c[i]);
                }
            }
        },
        _paletteHTML: function() {
            var pIdx = this._paletteIdx = Math.abs(this._paletteIdx), opts = this.options, labels = opts.strings.split(","), h = '<div class="evo-pop' + _ie + ' ui-widget ui-widget-content ui-corner-all"' + (this._isPopup ? ' style="position:fixed"' : "") + "><span>" + this["_paletteHTML" + pIdx]() + '</span><div class="evo-more"><a href="javascript:void(0)" class="btn btn-danger white">' + labels[1 + pIdx] + "</a>";
            opts.history && (h += '<a href="javascript:void(0)" class="evo-hist btn btn-danger white" >' + labels[5] + "</a>");
            h += "</div>";
            opts.displayIndicator && (h += this._colorIndHTML(this.options.color) + this._colorIndHTML(""));
            h += "</div>";
            return h;
        },
        _colorIndHTML: function(c) {
            var css = isIE ? "evo-colorbox-ie " : "", style = "";
            c ? c === transColor ? css += "evo-transparent" : style = "background-color:" + c : style = "display:none";
            return '<div class="evo-color" style="float:left"><div style="' + style + '" class="' + css + '"></div><span>' + (c ? c : "") + "</span></div>";
        },
        _paletteHTML1: function() {
            for (var opts = this.options, labels = opts.strings.split(","), oTD = '<td style="background-color:#', cTD = isIE ? '"><div style="width:2px;"></div></td>' : '"><span/></td>', oTRTH = '<tr><th colspan="10" class="ui-widget-content">', h = '<table class="evo-palette' + _ie + '">' + oTRTH + labels[0] + "</th></tr><tr>", i = 0; 10 > i; i++) h += oTD + baseThemeColors[i] + cTD;
            h += "</tr>";
            isIE || (h += '<tr><th colspan="10"></th></tr>');
            h += '<tr class="top">';
            for (i = 0; 10 > i; i++) h += oTD + subThemeColors[i] + cTD;
            for (var r = 1; 4 > r; r++) {
                h += '</tr><tr class="in">';
                for (i = 0; 10 > i; i++) h += oTD + subThemeColors[10 * r + i] + cTD;
            }
            h += '</tr><tr class="bottom">';
            for (i = 40; 50 > i; i++) h += oTD + subThemeColors[i] + cTD;
            h += "</tr>" + oTRTH;
            opts.transparentColor && (h += '<div class="evo-transparent evo-tr-box"></div>');
            h += labels[1] + "</th></tr><tr>";
            for (i = 0; 10 > i; i++) h += oTD + standardColors[i] + cTD;
            h += "</tr></table>";
            return h;
        },
        _paletteHTML2: function() {
            for (var i, iMax, oTD = '<td style="background-color:#', cTD = isIE ? '"><div style="width:5px;"></div></td>' : '"><span/></td>', oTableTR = '<table class="evo-palette2' + _ie + '"><tr>', cTableTR = "</tr></table>", h = '<div class="evo-palcenter">', r = 0, rMax = webColors.length; rMax > r; r++) {
                h += oTableTR;
                var cs = webColors[r];
                for (i = 0, iMax = cs.length; iMax > i; i++) h += oTD + cs[i] + cTD;
                h += cTableTR;
            }
            h += '<div class="evo-sep"/>';
            var h2 = "";
            h += oTableTR;
            for (i = 255; i > 10; i -= 10) {
                h += oTD + int2Hex3(i) + cTD;
                i -= 10;
                h2 += oTD + int2Hex3(i) + cTD;
            }
            h += cTableTR + oTableTR + h2 + cTableTR + "</div>";
            return h;
        },
        _switchPalette: function(link) {
            if (this._enabled) {
                var idx, content, label, labels = this.options.strings.split(",");
                if ($(link).hasClass("evo-hist")) {
                    var h = [ '<table class="evo-palette"><tr><th class="ui-widget-content">', labels[5], "</th></tr></tr></table>", '<div class="evo-cHist">' ];
                    if (0 === history.length) h.push("<p>&nbsp;", labels[6], "</p>"); else for (var i = history.length - 1; i > -1; i--) 9 === history[i].length ? h.push('<div class="evo-transparent"></div>') : h.push('<div style="background-color:', history[i], '"></div>');
                    h.push("</div>");
                    idx = -this._paletteIdx;
                    content = h.join("");
                    label = labels[4];
                } else {
                    if (this._paletteIdx < 0) {
                        idx = -this._paletteIdx;
                        this._palette.find(".evo-hist").show();
                    } else idx = 2 == this._paletteIdx ? 1 : 2;
                    content = this["_paletteHTML" + idx]();
                    label = labels[idx + 1];
                    this._paletteIdx = idx;
                }
                this._paletteIdx = idx;
                var e = this._palette.find(".evo-more").prev().html(content).end().children().eq(0).html(label);
                0 > idx && e.next().hide();
            }
        },
        _downOrUpPositioning: function() {
            for (var el = this.element, i = 0; null !== el && 100 > i; ) {
                if ("visible" != el.css("overflow")) {
                    var bott = this._palette.offset().top + this._palette.height(), pBott = el.offset().top + el.height(), top = this._palette.offset().top - this._palette.height() - this.element.outerHeight(), pTop = el.offset().top, openUp = bott > pBott && top > pTop;
                    openUp ? this._palette.css({
                        bottom: this.element.outerHeight() + "px"
                    }) : this._palette.css({
                        bottom: "auto"
                    });
                    break;
                }
                if ("HTML" == el[0].tagName) break;
                el = el.offsetParent();
                i++;
            }
        },
        showPalette: function() {
            if (this._enabled) {
                this._active = !0;
                $(".colorPicker").not("." + this._id).colorpicker("hidePalette");
                if (null === this._palette) {
                    this._palette = this.element.next().after(this._paletteHTML()).next().on("click", function(evt) {
                        evt.stopPropagation();
                        return !1;
                    });
                    this._bindColors();
                    var that = this;
                    if (this._isPopup) {
                        this._downOrUpPositioning();
                        $(document.body).on("click." + that._id, function(evt) {
                            evt.target != that.element.get(0) && that.hidePalette();
                        }).on("keyup." + that._id, function(evt) {
                            27 === evt.keyCode && that.hidePalette();
                        });
                    }
                    $(this._palette).css("position", "fixed");
                    $(this._palette).css("bottom", "");
                    $(this._palette).css("right", "");
                    $(document);
                    $(this._palette).appendTo("body");
                    $(this._palette).offset({
                        top: -1e3,
                        left: -1e3
                    });
                    for (var i = 0; 2 > i; i++) {
                        0 == i && $(this._palette).offset({
                            top: $(this.element).offset().top + 20,
                            left: $(this.element).offset().left - 150
                        });
                        if (isOnScreen(this._palette)) break;
                        1 == i && $(this._palette).offset({
                            top: $(this.element).offset().top - 260,
                            left: $(this.element).offset().left - 150
                        });
                    }
                }
            }
            return this;
        },
        hidePalette: function() {
            if (this._isPopup && this._palette) {
                $(document.body).off("click." + this._id);
                var that = this;
                this._palette.off("mouseover click", "td,.evo-transparent").fadeOut(function() {
                    that._palette.remove();
                    that._palette = that._cTxt = null;
                }).find(".evo-more a").off("click");
            }
            return this;
        },
        _bindColors: function() {
            var that = this, opts = this.options, es = this._palette.find("div.evo-color"), sel = opts.history ? "td,.evo-cHist>div" : "td";
            opts.transparentColor && (sel += ",.evo-transparent");
            this._cTxt1 = es.eq(0).children().eq(0);
            this._cTxt2 = es.eq(1).children().eq(0);
            this._palette.on("click", sel, function(evt) {
                if (that._enabled) {
                    var $this = $(this);
                    that._setValue($this.hasClass("evo-transparent") ? transColor : toHex3($this.attr("style").substring(17)));
                    that._active = !1;
                }
            }).on("mouseover", sel, function(evt) {
                if (that._enabled) {
                    var $this = $(this), c = $this.hasClass("evo-transparent") ? transColor : toHex3($this.attr("style").substring(17));
                    that.options.displayIndicator && that._setColorInd(c, 2);
                    that._active && that.element.trigger("mouseover.color", c);
                }
            }).find(".evo-more a").on("click", function() {
                that._switchPalette(this);
            });
        },
        val: function(value) {
            if ("undefined" == typeof value) return this.options.color;
            this._setValue(value);
            return this;
        },
        _setValue: function(c, noHide) {
            c = c.replace(/ /g, "");
            this.options.color = c;
            if (this._isPopup) {
                noHide || this.hidePalette();
                this._setBoxColor(this.element.val(c).change().next(), c);
            } else this._setColorInd(c, 1);
            this.options.history && this._paletteIdx > 0 && this._add2History(c);
            this.element.trigger("change.color", c);
        },
        _setColorInd: function(c, idx) {
            var $box = this["_cTxt" + idx];
            this._setBoxColor($box, c);
            $box.next().html(c);
        },
        _setBoxColor: function($box, c) {
            c === transColor ? $box.addClass("evo-transparent").removeAttr("style") : $box.removeClass("evo-transparent").attr("style", "background-color:" + c);
        },
        _setOption: function(key, value) {
            "color" == key ? this._setValue(value, !0) : this.options[key] = value;
        },
        _add2History: function(c) {
            for (var iMax = history.length, i = 0; iMax > i; i++) if (c == history[i]) return;
            iMax > 27 && history.shift();
            history.push(c);
        },
        clear: function() {
            this.hidePalette().val("");
        },
        enable: function() {
            var e = this.element;
            this._isPopup ? e.removeAttr("disabled") : e.css({
                opacity: "1",
                "pointer-events": "auto"
            });
            "focus" !== this.options.showOn && this.element.next().addClass("evo-pointer");
            e.removeAttr("aria-disabled");
            this._enabled = !0;
            return this;
        },
        disable: function() {
            var e = this.element;
            if (this._isPopup) e.attr("disabled", "disabled"); else {
                this.hidePalette();
                e.css({
                    opacity: "0.3",
                    "pointer-events": "none"
                });
            }
            "focus" !== this.options.showOn && this.element.next().removeClass("evo-pointer");
            e.attr("aria-disabled", "true");
            this._enabled = !1;
            return this;
        },
        isDisabled: function() {
            return !this._enabled;
        },
        destroy: function() {
            $(document.body).off("click." + this._id);
            if (this._palette) {
                this._palette.off("mouseover click", "td,.evo-cHist>div,.evo-transparent").find(".evo-more a").off("click");
                this._isPopup && this._palette.remove();
                this._palette = this._cTxt = null;
            }
            this._isPopup && this.element.next().off("click").remove().end().off("focus").unwrap();
            this.element.removeClass("colorPicker " + this.id).empty();
            $.Widget.prototype.destroy.call(this);
        }
    });
});

define("Controls/BorderJQ", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../UndoManager/UndoManager", "jquery", "jqueryui", "ColorPicker" ], function(require, exports, impError, impWatch, impCommon, impUndoManager, jQuery, jQueryUI, ColorPicker) {
    "use strict";
    var Border, isBorderReady = !1, borderFirstTime = 0;
    !function(Border) {
        var BorderJQ = function() {
            function BorderJQ() {}
            BorderJQ.prototype.Init = function() {
                BorderJQ.AttachBorder();
            };
            BorderJQ.AttachBorder = function() {
                jQuery(document).ready(function() {
                    if (0 == isBorderReady) {
                        isBorderReady = !0;
                        jQuery(".border-style").on("click", function() {
                            jQuery(".border-style").parent().removeClass("border-style-selected");
                            jQuery(this).parent().addClass("border-style-selected");
                            BorderJQ.OnChange(this);
                        });
                        jQuery(".border-advanced-show").on("click", function() {
                            jQuery(".jq-border-advanced").fadeToggle(1);
                        });
                        jQuery(".control-border-thickness-radius").spinner({
                            min: 0,
                            max: 5e3,
                            step: 1,
                            change: function(event, ui) {
                                0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                            },
                            spin: function(event, ui) {
                                0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-border-thickness").spinner({
                            min: 0,
                            max: 50,
                            step: 1,
                            value: 0,
                            change: function(event, ui) {
                                0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                            },
                            spin: function(event, ui) {
                                0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".color-picker").colorpicker();
                        jQuery(".color-picker").on("change", function() {
                            0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                        });
                        jQuery(BorderJQ.controlBtnApply).on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                var common = (new impError.ErrorHandle.ErrorJQ(), new impCommon.Common.CommonMethodsJQ()), borderLeft = jQuery(this).closest(".control-border-controls").find(".control-border-thickness-left").spinner("value"), borderTop = jQuery(this).closest(".control-border-controls").find(".control-border-thickness-top").spinner("value"), borderRight = jQuery(this).closest(".control-border-controls").find(".control-border-thickness-right").spinner("value"), borderBottom = jQuery(this).closest(".control-border-controls").find(".control-border-thickness-bottom").spinner("value"), borderRadius = jQuery(this).closest(".control-border-controls").find(".control-border-thickness-radius").spinner("value");
                                void 0 != borderRadius && selectedElement.css("border-radius", borderRadius + "px");
                                if (void 0 != borderLeft) {
                                    selectedElement.css("border-left-width", borderLeft + "px");
                                    var color = jQuery(this).closest(".control-border-controls").find(".color-picker-left").val();
                                    selectedElement.css("border-left-color", "#" + color);
                                }
                                if (void 0 != borderTop) {
                                    selectedElement.css("border-top-width", borderTop + "px");
                                    var color = jQuery(this).closest(".control-border-controls").find(".color-picker-top").val();
                                    selectedElement.css("border-top-color", "#" + color);
                                }
                                if (void 0 != borderRight) {
                                    selectedElement.css("border-right-width", borderRight + "px");
                                    var color = jQuery(this).closest(".control-border-controls").find(".color-picker-right").val();
                                    selectedElement.css("border-right-color", "#" + color);
                                }
                                if (void 0 != borderBottom) {
                                    selectedElement.css("border-bottom-width", borderBottom + "px");
                                    var color = jQuery(this).closest(".control-border-controls").find(".color-picker-bottom").val();
                                    selectedElement.css("border-bottom-color", "#" + color);
                                }
                                selectedElement.css("border-style", "solid");
                                if (0 == borderLeft && 0 == borderTop && 0 == borderRight && 0 == borderBottom) {
                                    common.RemoveStyle(selectedElement, "border-left-width");
                                    common.RemoveStyle(selectedElement, "border-top-width");
                                    common.RemoveStyle(selectedElement, "border-bottom-width");
                                    common.RemoveStyle(selectedElement, "border-right-width");
                                    common.RemoveStyle(selectedElement, "border-color");
                                    common.RemoveStyle(selectedElement, "border");
                                }
                            }
                        });
                    }
                });
            };
            BorderJQ.OnChange = function($this) {
                BorderJQ.isSelectProcessing = !0;
                try {
                    if (0 != borderFirstTime) {
                        borderFirstTime = 1;
                        impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                    }
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                    if (void 0 != selectedElement) {
                        new impError.ErrorHandle.ErrorJQ();
                        jQuery($this).hasClass("control-border-thickness-all") && jQuery(".control-border-thickness").not(".control-border-thickness-all").not(".control-border-thickness-radius").spinner("value", jQuery($this).val());
                        jQuery($this).hasClass("color-picker-left") && 0 == jQuery(".control-border-thickness-left").spinner("value") && jQuery(".control-border-thickness-left").spinner("value", 1);
                        jQuery($this).hasClass("color-picker-top") && 0 == jQuery(".control-border-thickness-top").spinner("value") && jQuery(".control-border-thickness-top").spinner("value", 1);
                        jQuery($this).hasClass("color-picker-right") && 0 == jQuery(".control-border-thickness-right").spinner("value") && jQuery(".control-border-thickness-right").spinner("value", 1);
                        jQuery($this).hasClass("color-picker-bottom") && 0 == jQuery(".control-border-thickness-bottom").spinner("value") && jQuery(".control-border-thickness-bottom").spinner("value", 1);
                        if (jQuery($this).hasClass("color-picker-all") && 0 == jQuery(".control-border-thickness-all").spinner("value")) {
                            jQuery(".control-border-thickness-left").spinner("value", 1);
                            jQuery(".control-border-thickness-top").spinner("value", 1);
                            jQuery(".control-border-thickness-right").spinner("value", 1);
                            jQuery(".control-border-thickness-bottom").spinner("value", 1);
                            jQuery(".control-border-thickness-all").spinner("value", 1);
                        }
                        var common = new impCommon.Common.CommonMethodsJQ(), borderLeft = jQuery(".control-border-thickness-left").spinner("value"), borderTop = jQuery(".control-border-thickness-top").spinner("value"), borderRight = jQuery(".control-border-thickness-right").spinner("value"), borderBottom = jQuery(".control-border-thickness-bottom").spinner("value"), borderRadius = jQuery(".control-border-thickness-radius").spinner("value");
                        void 0 != borderRadius && selectedElement.css("border-radius", borderRadius + "px");
                        if (jQuery($this).hasClass("color-picker-all")) {
                            jQuery(".color-picker").val(jQuery($this).val());
                            jQuery(".color-picker").keyup();
                        }
                        if (void 0 != borderLeft) {
                            selectedElement.css("border-left-width", borderLeft + "px");
                            var color = jQuery($this).closest(".control-border-controls").find(".color-picker-left").val();
                            selectedElement.css("border-left-color", "#" + color);
                        }
                        if (void 0 != borderTop) {
                            selectedElement.css("border-top-width", borderTop + "px");
                            var color = jQuery($this).closest(".control-border-controls").find(".color-picker-top").val();
                            selectedElement.css("border-top-color", "#" + color);
                        }
                        if (void 0 != borderRight) {
                            selectedElement.css("border-right-width", borderRight + "px");
                            var color = jQuery($this).closest(".control-border-controls").find(".color-picker-right").val();
                            selectedElement.css("border-right-color", "#" + color);
                        }
                        if (void 0 != borderBottom) {
                            selectedElement.css("border-bottom-width", borderBottom + "px");
                            var color = jQuery($this).closest(".control-border-controls").find(".color-picker-bottom").val();
                            selectedElement.css("border-bottom-color", "#" + color);
                        }
                        jQuery(".border-style-selected").find(".border-style").hasClass("border-style-solid") ? selectedElement.css("border-style", "solid") : jQuery(".border-style-selected").find(".border-style").hasClass("border-style-dotted") ? selectedElement.css("border-style", "dotted") : jQuery(".border-style-selected").find(".border-style").hasClass("border-style-dashed") ? selectedElement.css("border-style", "dashed") : jQuery(".border-style-selected").find(".border-style").hasClass("border-style-groove") && selectedElement.css("border-style", "groove");
                        if (0 == borderLeft && 0 == borderTop && 0 == borderRight && 0 == borderBottom) {
                            common.RemoveStyle(selectedElement, "border-left-width");
                            common.RemoveStyle(selectedElement, "border-top-width");
                            common.RemoveStyle(selectedElement, "border-bottom-width");
                            common.RemoveStyle(selectedElement, "border-right-width");
                            common.RemoveStyle(selectedElement, "border-color");
                            common.RemoveStyle(selectedElement, "border");
                        }
                        selectedElement.removeClass("image-selection");
                    }
                } catch (ex) {}
                BorderJQ.isSelectProcessing = !1;
            };
            BorderJQ.ProcessSelectedValues = function() {
                BorderJQ.isSelectProcessing = !0;
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                if (void 0 != selectedElement) {
                    selectedElement.removeClass("image-selection");
                    var borderLeft = selectedElement.css("border-left-width"), borderTop = selectedElement.css("border-top-width"), borderRight = selectedElement.css("border-right-width"), borderBottom = selectedElement.css("border-bottom-width"), borderRadius = selectedElement.css("border-top-left-radius"), colorLeft = selectedElement.css("border-left-color"), colorTop = selectedElement.css("border-top-color"), colorRight = selectedElement.css("border-right-color"), colorBottom = selectedElement.css("border-bottom-color");
                    if (void 0 != borderRadius) {
                        borderRadius = borderRadius.replace("px", "");
                        jQuery(".control-border-thickness-radius").spinner("value", borderRadius);
                    }
                    if (void 0 != borderLeft) {
                        borderLeft = borderLeft.replace("px", "");
                        jQuery(".control-border-thickness-left").spinner("value", borderLeft);
                    }
                    if (void 0 != borderTop) {
                        borderTop = borderTop.replace("px", "");
                        jQuery(".control-border-thickness-top").spinner("value", borderTop);
                    }
                    if (void 0 != borderRight) {
                        borderRight = borderRight.replace("px", "");
                        jQuery(".control-border-thickness-right").spinner("value", borderRight);
                    }
                    if (void 0 != borderBottom) {
                        borderBottom = borderBottom.replace("px", "");
                        jQuery(".control-border-thickness-bottom").spinner("value", borderBottom);
                    }
                    borderLeft == borderTop && borderLeft == borderRight && borderLeft == borderBottom && jQuery(".control-border-thickness-all").spinner("value", borderLeft);
                    if (void 0 != colorLeft) {
                        colorLeft = BorderJQ.RgbToHex(colorLeft);
                        jQuery(".color-picker-left").val("#" + colorLeft);
                    }
                    if (void 0 != colorTop) {
                        colorTop = BorderJQ.RgbToHex(colorTop);
                        jQuery(".color-picker-top").val("#" + colorTop);
                    }
                    if (void 0 != colorRight) {
                        colorRight = BorderJQ.RgbToHex(colorRight);
                        jQuery(".color-picker-right").val("#" + colorRight);
                    }
                    if (void 0 != colorBottom) {
                        colorBottom = BorderJQ.RgbToHex(colorBottom);
                        jQuery(".color-picker-bottom").val("#" + colorBottom);
                    }
                    colorLeft == colorTop && colorLeft == colorRight && colorLeft == colorBottom && jQuery(".color-picker-all").val("#" + colorLeft);
                    jQuery(".color-picker").keyup();
                    "inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display") && selectedElement.addClass("image-selection");
                }
                BorderJQ.isSelectProcessing = !1;
            };
            BorderJQ.RgbToHex = function(str) {
                try {
                    var r, g, b, rgb = str.replace(/^(rgb|rgba)\(/, "").replace(/\)$/, "").replace(/\s/g, "").split(",");
                    r = Number(rgb[0]);
                    g = Number(rgb[1]);
                    b = Number(rgb[2]);
                    return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
                } catch (ex) {
                    return "";
                }
            };
            BorderJQ.ProcessSelectNotify = function() {
                BorderJQ.ProcessSelectedValues();
            };
            BorderJQ.controlId = ".control-border";
            BorderJQ.controlBtnApply = ".action-button-border-apply";
            BorderJQ.isSelectProcessing = !1;
            return BorderJQ;
        }();
        Border.BorderJQ = BorderJQ;
    }(Border = exports.Border || (exports.Border = {}));
});

define("common/commonmethodsjq", [ "require", "exports", "jquery" ], function(require, exports, jQuery) {
    "use strict";
    var Common;
    !function(Common) {
        var CommonMethodsJQ = function() {
            function CommonMethodsJQ() {}
            CommonMethodsJQ.prototype.Trim = function(str) {
                return void 0 != str && "string" == typeof str.toLowerCase() ? this.TrimRight(this.TrimLeft(str)) : void 0;
            };
            CommonMethodsJQ.prototype.RemoveStyle = function(element, style) {
                if (void 0 != style) {
                    style = style.toLowerCase();
                    var search = new RegExp(style + "[^;]+;?", "g");
                    jQuery(element).each(function() {
                        jQuery(this).attr("style", function(i, style) {
                            if (void 0 != style) {
                                var result = style.replace(search, "");
                                return result;
                            }
                        });
                    });
                }
            };
            CommonMethodsJQ.prototype.RemoveSingleStyle = function(element, style) {
                if (void 0 != style) {
                    style = style.toLowerCase();
                    var search = new RegExp(style + "s*:.*?;", "g");
                    jQuery(element).each(function() {
                        jQuery(this).attr("style", function(i, style) {
                            if (void 0 != style) {
                                var result = style.replace(search, "");
                                return result;
                            }
                        });
                    });
                }
            };
            CommonMethodsJQ.prototype.TrimLeft = function(str) {
                if (void 0 != str && "string" == typeof str.toLowerCase()) {
                    for (var trimmedIndex = 0, i = 0; i < str.length; i++) {
                        " " == str[i] && (trimmedIndex = i + 1);
                        if (i + 1 < str.length && " " != str[i + 1]) break;
                    }
                    trimmedIndex < str.length && (str = str.toString().slice(trimmedIndex));
                }
                return str;
            };
            CommonMethodsJQ.prototype.TrimRight = function(str) {
                if (void 0 != str && "string" == typeof str.toLowerCase()) {
                    for (var trimmedIndex = str.length, i = str.length - 1; i > -1; i--) {
                        " " == str[i] && (trimmedIndex = i);
                        if (i - 1 > -1 && " " != str[i - 1]) break;
                    }
                    trimmedIndex > -1 && (str = str.toString().slice(0, trimmedIndex));
                    return str;
                }
            };
            CommonMethodsJQ.prototype.RemoveSpaces = function(str) {
                void 0 != str && "string" == typeof str.toLowerCase() && (str = str.replace(/ /g, ""));
                return str;
            };
            CommonMethodsJQ.prototype.Insert = function(index, sourceString, insertString) {
                return void 0 != sourceString && void 0 != insertString && "string" == typeof sourceString.toLowerCase() && "string" == typeof insertString.toLowerCase() ? index > 0 && index < sourceString.length ? sourceString.substring(0, index) + insertString + sourceString.substring(index, sourceString.length) : sourceString : void 0;
            };
            return CommonMethodsJQ;
        }();
        Common.CommonMethodsJQ = CommonMethodsJQ;
    }(Common = exports.Common || (exports.Common = {}));
});

define("Controls/ColorJQ", [ "require", "exports", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../common/commonmethodsjq", "jquery", "ColorPicker" ], function(require, exports, impWatch, impUndoManager, impCommon, jQuery, ColorPicker) {
    "use strict";
    var Color, isColorReady = !1;
    !function(Color) {
        var ColorJQ = function() {
            function ColorJQ() {}
            ColorJQ.prototype.Init = function() {
                ColorJQ.AttachColor();
            };
            ColorJQ.AttachColor = function() {
                jQuery(document).ready(function() {
                    if (0 == isColorReady) {
                        isColorReady = !0;
                        jQuery(".remove-bi").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                var comm = new impCommon.Common.CommonMethodsJQ();
                                comm.RemoveSingleStyle(selectedElement, "background-image");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                                impWatch.Watch.MouseJQ.ResetAfterClear();
                            }
                        });
                        jQuery(".remove-border").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                var comm = new impCommon.Common.CommonMethodsJQ();
                                comm.RemoveStyle(selectedElement, "border");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                                impWatch.Watch.MouseJQ.ResetAfterClear();
                            }
                        });
                        jQuery(".remove-opacity").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                var comm = new impCommon.Common.CommonMethodsJQ();
                                comm.RemoveStyle(selectedElement, "opacity");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                                impWatch.Watch.MouseJQ.ResetAfterClear();
                            }
                        });
                        jQuery(".remove-padding").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                var comm = new impCommon.Common.CommonMethodsJQ();
                                comm.RemoveStyle(selectedElement, "padding");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                                impWatch.Watch.MouseJQ.ResetAfterClear();
                            }
                        });
                        jQuery(".remove-margin").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                var comm = new impCommon.Common.CommonMethodsJQ();
                                comm.RemoveStyle(selectedElement, "margin");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                                impWatch.Watch.MouseJQ.ResetAfterClear();
                            }
                        });
                        jQuery(".remove-gradient").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text") : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image"));
                            if (void 0 != selectedElement) {
                                var comm = new impCommon.Common.CommonMethodsJQ();
                                comm.RemoveSingleStyle(selectedElement, "background");
                                comm.RemoveSingleStyle(selectedElement, "background-color");
                                comm.RemoveSingleStyle(selectedElement, "color");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                                impWatch.Watch.MouseJQ.ResetAfterClear();
                            }
                        });
                        jQuery(".fb-color-picker-gradient").colorpicker();
                        jQuery(".fb-color-picker").colorpicker();
                        jQuery(".fb-color-picker").trigger("keyup");
                        jQuery(".fb-color-picker").on("change", function() {
                            if (0 == ColorJQ.isSelectProcessing) {
                                impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                                selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text") : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image"));
                                if (void 0 != selectedElement) {
                                    if (jQuery(this).hasClass("control-color-foreground-color")) {
                                        var colorForeground = jQuery(this).closest(".control-color-controls").find(".control-color-foreground-color").val();
                                        colorForeground = colorForeground.replace("#", "");
                                        selectedElement.css("color", "#" + colorForeground);
                                        "" != colorForeground && selectedElement.each(function(index, $this) {
                                            var $$this = jQuery($this);
                                            if ($$this.hasClass("jq-editor-link") || $$this.hasClass("jq-normal-link")) {
                                                if (jQuery("page").find("." + $$this.find("a").first().attr("id")).length > 0) jQuery("page").find("." + $$this.find("a").first().attr("id")).html(""); else {
                                                    var style = "<style class='" + $$this.find("a").first().attr("id") + "'> </span>";
                                                    jQuery("page").append(style);
                                                }
                                                var linkId = "#" + $$this.find("a").first().attr("id"), linkColor = "#" + colorForeground, style = " " + linkId + ":link { color:" + linkColor + ";}" + linkId + ":visited { color:" + linkColor + ";}" + linkId + ":hover { color:" + linkColor + ";}" + linkId + ":active { color:" + linkColor + ";}";
                                                jQuery("page").find("." + $$this.find("a").first().attr("id")).html(style);
                                            }
                                        });
                                    } else if (jQuery(this).hasClass("control-color-background-color")) {
                                        var colorBackground = jQuery(this).closest(".control-color-controls").find(".control-color-background-color").val();
                                        selectedElement.hasClass("empty-container-text");
                                        colorBackground = colorBackground.replace("#", "");
                                        selectedElement.css("background-color", "#" + colorBackground);
                                    }
                                    var undo = new impUndoManager.Manager.UndoManager();
                                    undo.BeforeOperation();
                                }
                            }
                        });
                        jQuery(".fb-color-picker-gradient").on("change", function() {
                            impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text") : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image"));
                            if (void 0 != selectedElement) {
                                var colorOne = jQuery(this).closest(".control-color-controls").find(".control-color-gradient-color-1").val(), colorTwo = jQuery(this).closest(".control-color-controls").find(".control-color-gradient-color-2").val();
                                colorOne = colorOne.replace("#", "");
                                colorTwo = colorTwo.replace("#", "");
                                for (var browserSpecificGradient = [ "-webkit-linear-gradient", "-o-linear-gradient", "-moz-linear-gradient", "linear-gradient" ], i = 0; i < browserSpecificGradient.length; i++) selectedElement.css("background", "" + browserSpecificGradient[i] + "(#" + colorOne + ",#" + colorTwo + ")");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(ColorJQ.controlBtnApply).on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text") : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image"));
                            if (void 0 != selectedElement) {
                                var colorForeground = jQuery(this).closest(".control-color-controls").find(".control-color-foreground-color").val();
                                selectedElement.css("color", "#" + colorForeground);
                                var colorBackground = jQuery(this).closest(".control-color-controls").find(".control-color-background-color").val();
                                selectedElement.css("background-color", "#" + colorBackground);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            ColorJQ.ProcessSelectedValues = function() {
                ColorJQ.isSelectProcessing = !0;
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text") : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image"));
                if (void 0 != selectedElement) {
                    var str = selectedElement.css("color");
                    if (void 0 != str) {
                        str = ColorJQ.RgbToHex(str);
                        jQuery(".control-color-foreground-color").val("#" + str);
                        jQuery(".control-color-foreground-color").trigger("keyup");
                    }
                    var str = selectedElement.css("background-color");
                    if (void 0 != str && "transparent" != str && "rgba(0, 0, 0, 0)" != str) {
                        str = ColorJQ.RgbToHex(str);
                        jQuery(".control-color-background-color").val("#" + str);
                        jQuery(".control-color-background-color").trigger("keyup");
                    } else {
                        str = "transparent";
                        jQuery(".control-color-background-color").val(str);
                        jQuery(".control-color-background-color").trigger("keyup");
                    }
                }
                ColorJQ.isSelectProcessing = !1;
            };
            ColorJQ.RgbToHex = function(str) {
                try {
                    var r, g, b, rgb = str.replace(/^(rgb|rgba)\(/, "").replace(/\)$/, "").replace(/\s/g, "").split(",");
                    r = Number(rgb[0]);
                    g = Number(rgb[1]);
                    b = Number(rgb[2]);
                    return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
                } catch (ex) {
                    return "";
                }
            };
            ColorJQ.ProcessSelectNotify = function() {
                ColorJQ.ProcessSelectedValues();
            };
            ColorJQ.controlId = "#control-color";
            ColorJQ.controlBtnApply = ".action-button-color-apply";
            ColorJQ.isSelectProcessing = !1;
            return ColorJQ;
        }();
        Color.ColorJQ = ColorJQ;
    }(Color = exports.Color || (exports.Color = {}));
});

define("Watch/ClipBoardJQ", [ "require", "exports", "../Controls/ImageJQ" ], function(require, exports, impImage) {
    "use strict";
    var ClipBoard;
    !function(ClipBoard) {
        var ClipBoardJQ = function() {
            function ClipBoardJQ() {}
            ClipBoardJQ.prototype.InsertImage = function(url) {
                impImage.Image.SelfJQ.InsertImage(url);
            };
            ClipBoardJQ.prototype.InsertText = function(text) {};
            return ClipBoardJQ;
        }();
        ClipBoard.ClipBoardJQ = ClipBoardJQ;
    }(ClipBoard = exports.ClipBoard || (exports.ClipBoard = {}));
});

define("Watch/CopyPasteJQ", [ "require", "exports", "./WatchMouseJQ", "../Error/ErrorJQ", "../Controls/ControlCommonJQ", "../UndoManager/UndoManager", "./ClipBoardJQ", "../Common/OperationJQ", "jquery" ], function(require, exports, impWatch, impError, impCommonCode, impUndoManager, impClipboard, impOperaction, jQuery) {
    "use strict";
    var CopiedElement, CopyPaste, isCut = !1, ClipBorad = function() {
        function ClipBorad() {}
        return ClipBorad;
    }();
    !function(CopyPaste) {
        var CopyPasteJQ = function() {
            function CopyPasteJQ() {}
            CopyPasteJQ.Const = function() {
                CopyPasteJQ.ClipBoardData = new ClipBorad();
            };
            CopyPasteJQ.prototype.Init = function() {};
            CopyPasteJQ.SetClipBoard = function(clipText) {
                CopyPasteJQ.ClipBoardData.data = clipText;
            };
            CopyPasteJQ.IsImageUrl = function(s) {
                var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
                if (1 == regexp.test(s) && s.length >= 5) for (var lowerUrl = s.toLowerCase(), types = [ "jpeg", "jpg", "png", "gif" ], i = 0; i < types.length; i++) {
                    var _type = lowerUrl.substr(lowerUrl.length - 5, 5), ts = _type.split(".");
                    if (ts.length >= 2 && ts[1] == types[i]) return !0;
                }
                return !1;
            };
            CopyPasteJQ.CreateLinkContainer = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                void 0 == selectedElement && (selectedElement = jQuery("#nononoelement"));
                var container = jQuery(document.createElement("div"));
                impOperaction.Operation.AfterOperationJQ.Execute();
                container.addClass("key empty-container links-container image-text-other");
                selectedElement.append(container);
                var undo = new impUndoManager.Manager.UndoManager();
                undo.BeforeOperation();
                impCommonCode.ControlCommon.Code.DestroyResizable();
                impCommonCode.ControlCommon.Code.Execute();
            };
            CopyPasteJQ.Delete = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                new impError.ErrorHandle.ErrorJQ();
                if (void 0 != selectedElement) {
                    if (selectedElement.hasClass("jq-Header") || selectedElement.hasClass("jq-MenuBar") || selectedElement.hasClass("jq-Content") || selectedElement.hasClass("jq-Footer")) selectedElement.hide(); else if (selectedElement.hasClass("jq-image-block-image")) selectedElement.closest(".jq-plus-container").remove(); else if (selectedElement.hasClass("jq-text-block")) selectedElement.closest(".jq-plus-container").remove(); else if (selectedElement.hasClass("column")) {
                        var columnsCount = selectedElement.closest(".row").children(".column").length, columnSize = "", columnClass = "";
                        if (2 == columnsCount) {
                            columnClass = "col-xs-48";
                            columnSize = "48";
                        }
                        if (3 == columnsCount) {
                            columnClass = "col-xs-24";
                            columnSize = "24";
                        }
                        if (4 == columnsCount) {
                            columnClass = "col-xs-16";
                            columnSize = "16";
                        }
                        var lastColumn;
                        selectedElement.closest(".row").children(".column").each(function() {
                            lastColumn = jQuery(this);
                            var prevSize = jQuery(this).attr("xs-column-size"), cssClass = "col-xs-" + prevSize;
                            if (cssClass != columnClass) {
                                jQuery(this).addClass(columnClass);
                                jQuery(this).attr("xs-column-size", columnSize);
                                jQuery(this).removeClass(cssClass);
                            }
                        });
                        selectedElement.remove();
                    } else selectedElement.remove();
                    var undomanager = new impUndoManager.Manager.UndoManager();
                    undomanager.BeforeOperation();
                }
            };
            CopyPasteJQ.Cut = function() {
                isCut = !0;
                var selecedElement = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selecedElement) {
                    selecedElement.removeClass("image-selection");
                    if (selecedElement.hasClass("root-elements")) {
                        CopiedElement = jQuery("#noelement--x");
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionFail("You can only cut Text , Image.");
                    } else CopiedElement = selecedElement.hasClass("jq-image-block-image") ? selecedElement.closest(".jq-plus-container") : selecedElement.hasClass("jqte") ? selecedElement.closest(".jq-plus-container") : selecedElement;
                }
            };
            CopyPasteJQ.Copy = function() {
                isCut = !1;
                var selecedElement = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selecedElement) if (selecedElement.hasClass("root-elements")) {
                    CopiedElement = jQuery("#noelement--x");
                    var errorHandler = new impError.ErrorHandle.ErrorJQ();
                    errorHandler.ActionSuccess("You can only copy Text , Image.");
                } else {
                    selecedElement.removeClass("image-selection");
                    impCommonCode.ControlCommon.Code.DestroyResizable();
                    CopiedElement = selecedElement.hasClass("jq-image-block-image") ? selecedElement.closest(".jq-plus-container").clone() : selecedElement.hasClass("jqte") ? selecedElement.closest(".jq-plus-container").clone() : selecedElement.clone();
                    impCommonCode.ControlCommon.Code.DestroyResizable();
                    impCommonCode.ControlCommon.Code.Execute();
                }
            };
            CopyPasteJQ.Paste = function(isFromKeyboard) {
                void 0 === isFromKeyboard && (isFromKeyboard = !1);
                var selecedElement = impWatch.Watch.MouseJQ.selectedElement, errorHandler = new impError.ErrorHandle.ErrorJQ();
                if (0 != jQuery(CopiedElement).length) {
                    if (void 0 != selecedElement) if (selecedElement.hasClass("column") || selecedElement.hasClass("image-text-other")) {
                        CopiedElement.each(function(index, $this) {
                            if (jQuery($this).hasClass("image-text-other")) if (jQuery.contains(jQuery($this)[0], selecedElement[0])) errorHandler.ActionFail("You can only cut and paste element in to same element."); else {
                                jQuery($this).children(".ui-resizable-handle").css("margin", "0px");
                                impOperaction.Operation.AfterOperationJQ.Execute();
                                selecedElement.hasClass("column") ? 0 == isFromKeyboard && void 0 != impWatch.Watch.MouseJQ.nearestElement && impWatch.Watch.MouseJQ.nearestElement.length > 0 ? impWatch.Watch.MouseJQ.nearestElement.after(jQuery($this)) : selecedElement.append(jQuery($this)) : selecedElement.after(jQuery($this));
                            }
                        });
                        CopiedElement = 1 == isCut ? jQuery("#noelement--x") : CopiedElement.clone();
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        isCut = !1;
                    } else errorHandler.ActionFail("Please select a [Column] to paste.");
                } else errorHandler.ActionFail("Please copy/cut a element.");
            };
            CopyPasteJQ.PasteClipBoard = function() {
                var selecedElement = impWatch.Watch.MouseJQ.selectedElement, errorHandler = new impError.ErrorHandle.ErrorJQ();
                if (void 0 != selecedElement) {
                    if (selecedElement.hasClass("empty-container") || selecedElement.hasClass("column")) {
                        if (void 0 != CopyPasteJQ.ClipBoardData.data && "" != CopyPasteJQ.ClipBoardData.data) if (CopyPasteJQ.IsImageUrl(CopyPasteJQ.ClipBoardData.data)) {
                            var clp = new impClipboard.ClipBoard.ClipBoardJQ();
                            clp.InsertImage(CopyPasteJQ.ClipBoardData.data);
                        } else {
                            var clp = new impClipboard.ClipBoard.ClipBoardJQ();
                            clp.InsertText(CopyPasteJQ.ClipBoardData.data);
                        }
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                } else errorHandler.ActionFail("You can only paste element to a column and empty blocks.");
            };
            CopyPasteJQ.staticRun = CopyPasteJQ.Const();
            return CopyPasteJQ;
        }();
        CopyPaste.CopyPasteJQ = CopyPasteJQ;
    }(CopyPaste = exports.CopyPaste || (exports.CopyPaste = {}));
});

define("cssManager/cssManagerJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var CssManager;
    !function(CssManager) {
        var Menu = function() {
            function Menu() {}
            return Menu;
        }();
        CssManager.Menu = Menu;
        var CssManagerJQ = function() {
            function CssManagerJQ() {
                this.cssPath = "/Content/Menus/[MenuName]/[Color]/menu.css";
                this.jsPath = "/Content/Menus/[MenuName]/[Color]/menu.js";
                this.htmlPath = "/Content/Menus/[MenuName]/[Color]/index.html";
                this.Menus = [ {
                    Id: 1,
                    MenuName: "2",
                    Color: "green",
                    HtmlPath: "",
                    MenuId: 2
                }, {
                    Id: 2,
                    MenuName: "2",
                    Color: "blue",
                    HtmlPath: "",
                    MenuId: 3
                } ];
            }
            CssManagerJQ.prototype.GetHtml = function(fileId) {
                try {
                    this.Menus[fileId];
                    var m;
                    m = this.Menus[fileId];
                    var html = this.htmlPath.replace("[MenuName]", m.MenuName);
                    html = html.replace("[Color]", m.Color);
                    return html;
                } catch (ex) {}
            };
            CssManagerJQ.prototype.Add = function(fileId) {
                try {
                    this.Menus[fileId];
                    var m;
                    m = this.Menus[fileId];
                    var css = this.cssPath.replace("[MenuName]", m.MenuName);
                    css = css.replace("[Color]", m.Color);
                    var js = this.jsPath.replace("[MenuName]", m.MenuName);
                    js = js.replace("[Color]", m.Color);
                    jQuery("head").append("<link menu-id='" + m.Id + "' rel='stylesheet' href='" + css + "'/>");
                    jQuery("head").append("<script menu-id='" + m.Id + "' type='text/javascript' src='" + js + "'> </script>");
                } catch (ex) {}
            };
            CssManagerJQ.prototype.Remove = function(fileId) {
                try {
                    this.Menus[fileId];
                    jQuery("link[menu-id=' " + fileId + "']").remove();
                    jQuery("script[menu-id='" + fileId + "']").remove();
                } catch (ex) {}
            };
            return CssManagerJQ;
        }();
        CssManager.CssManagerJQ = CssManagerJQ;
    }(CssManager = exports.CssManager || (exports.CssManager = {}));
});

define("Menu/MenuLinksJQ", [ "require", "exports", "../Error/ErrorJQ" ], function(require, exports, impError) {
    "use strict";
    var Page;
    !function(Page) {
        var Menu;
        !function(Menu) {
            var MenuLinksJQ = function() {
                function MenuLinksJQ() {}
                MenuLinksJQ.prototype.Get = function(id) {
                    var MenuLinks;
                    if (1 == id) return MenuLinks = [ {
                        name: "home",
                        pageLocation: "#",
                        text: "Home",
                        subLinks: [ {
                            name: "SubLink Home 1",
                            pageLocation: "/x2",
                            text: "SubLink Home 1",
                            subLinks: [ {
                                name: "SubLink Home 1.1",
                                pageLocation: "/x1",
                                text: "SubLink Home 1.1   ",
                                subLinks: [ {
                                    name: "SubLink Home 1.1.1",
                                    pageLocation: "x2",
                                    text: "SubLink Home 1.1.1",
                                    subLinks: []
                                } ]
                            } ]
                        } ]
                    }, {
                        name: "Contact",
                        pageLocation: "/eventvideos",
                        text: "Contact Us",
                        subLinks: []
                    }, {
                        name: "About",
                        pageLocation: "#",
                        text: "About Us",
                        subLinks: [ {
                            name: "SubLink Home 1",
                            pageLocation: "/x2",
                            text: "SubLink Home 1",
                            subLinks: [ {
                                name: "SubLink Home 1.1",
                                pageLocation: "/x1",
                                text: "SubLink Home 1.1   ",
                                subLinks: [ {
                                    name: "SubLink Home 1.1.1",
                                    pageLocation: "x2",
                                    text: "SubLink Home 1.1.1",
                                    subLinks: []
                                } ]
                            } ]
                        } ]
                    } ];
                    if (2 == id) return [ {
                        name: "Home",
                        pageLocation: "/x1",
                        text: "Home",
                        subLinks: [ {
                            name: "SubLink Home 1",
                            pageLocation: "/x2",
                            text: "SubLink Home 1",
                            subLinks: [ {
                                name: "SubLink Home 1.1",
                                pageLocation: "/x1",
                                text: "SubLink Home 1.1   ",
                                subLinks: [ {
                                    name: "SubLink Home 1.1.1",
                                    pageLocation: "x2",
                                    text: "SubLink Home 1.1.1",
                                    subLinks: []
                                } ]
                            } ]
                        } ]
                    }, {
                        name: "About",
                        pageLocation: "x1",
                        text: "About",
                        externalLocation: !0,
                        subLinks: [ {
                            name: "SubLink About 1",
                            pageLocation: "/x2",
                            text: "SubLink About 1",
                            subLinks: [ {
                                name: "SubLink About 1.1",
                                pageLocation: "/x1",
                                text: "SubLink About 1.1",
                                subLinks: [ {
                                    name: "SubLink About 1.1.1",
                                    pageLocation: "x2",
                                    text: "SubLink About 1.1.1",
                                    subLinks: []
                                } ]
                            } ]
                        } ]
                    } ];
                    if (3 == id) return [ {
                        name: "Home",
                        pageLocation: "/nopage",
                        text: "Home",
                        subLinks: [ {
                            name: "SubLink Home 1",
                            pageLocation: "x1",
                            text: "SubLink Home 1",
                            subLinks: []
                        } ]
                    }, {
                        name: "About",
                        pageLocation: "x2",
                        text: "About",
                        externalLocation: !0,
                        subLinks: []
                    }, {
                        name: "Video Samples",
                        pageLocation: "http://www.http.com",
                        text: "Video Samples",
                        subLinks: []
                    }, {
                        name: "Event",
                        pageLocation: "/eventvideos",
                        text: "Event",
                        subLinks: [ {
                            name: "Videos",
                            pageLocation: "/eventvideos",
                            text: "Videos",
                            subLinks: []
                        } ]
                    } ];
                    new impError.ErrorHandle.ErrorJQ().LogMessage("menu not found");
                };
                return MenuLinksJQ;
            }();
            Menu.MenuLinksJQ = MenuLinksJQ;
        }(Menu = Page.Menu || (Page.Menu = {}));
    }(Page = exports.Page || (exports.Page = {}));
});

define("Menu/MenuTemplateJQ", [ "require", "exports", "../_Classes/UrlJQ", "../Menu/MenuLinksJQ", "jquery" ], function(require, exports, impCommonUrl, impMenuLinks, jQuery) {
    "use strict";
    var Page, firstElementActive = !1;
    !function(Page) {
        var Menu;
        !function(Menu) {
            var MenuTemplateJQ = function() {
                function MenuTemplateJQ() {
                    this.menuOneId = 1;
                    this.menuTwoId = 2;
                    this.menuThreeId = 3;
                    this.menuFourId = 4;
                    this.menuFiveId = 5;
                }
                MenuTemplateJQ.prototype.CreateMenuTemplate = function(id, className, menuLinks, menuDesignId) {
                    if (void 0 == menuLinks) {
                        menuLinks = new impMenuLinks.Page.Menu.MenuLinksJQ().Get(id);
                        this.currentMenuLinks = menuLinks;
                    }
                    var menuContainer;
                    if (void 0 != menuLinks && menuLinks.length > 0) {
                        menuContainer = jQuery("<div  id='menu-" + menuDesignId + "' class='jqMenuContainer" + className + "'> </div>");
                        var menuUl = this.CreateUL("menu", menuLinks);
                        menuContainer.append(menuUl);
                        menuContainer.prepend("<div class='rotator'></div>");
                    }
                    return menuContainer;
                };
                MenuTemplateJQ.prototype.CreateUL = function(ulName, menuLinks, level) {
                    void 0 === level && (level = 1);
                    for (var menuUl = jQuery("<ul class='" + ulName + "'> </ul>"), urlJQ = new impCommonUrl.Common.UrlJQ(), i = 0; i < menuLinks.length; i++) {
                        var pageLocation = menuLinks[i].pageLocation, href = urlJQ.PreparePageHref(pageLocation), parent = "";
                        void 0 != menuLinks[i].subLinks && menuLinks[i].subLinks.length > 0 && (parent = "has-children");
                        var menuitemLink = ' <a class="li ' + parent + '" href="' + href + '"> ' + menuLinks[i].text + "</a> ";
                        void 0 == menuitemLink && (menuitemLink = "");
                        var idName = menuLinks[i].name;
                        if (void 0 != idName) {
                            idName = idName.toString().replace(/\s+/g, "");
                            idName = idName.toUpperCase();
                            idName = "jqPrimaryMenu-" + idName;
                        }
                        var menuitem = jQuery("<li> " + menuitemLink + "</li> ");
                        menuUl.append(menuitem);
                        var subMenuUl;
                        if (void 0 != menuLinks[i].subLinks && menuLinks[i].subLinks.length > 0) {
                            level++;
                            subMenuUl = this.CreateUL("jqSubMenuUl", menuLinks[i].subLinks, level);
                            level--;
                        }
                        void 0 != subMenuUl && jQuery(menuitem).append(subMenuUl);
                        if (1 == level && 0 == firstElementActive) {
                            firstElementActive = !0;
                            menuitem.addClass("active");
                            menuitem.find(".li").first().addClass("active-link");
                        }
                        menuitem.addClass("level-" + level);
                    }
                    return menuUl;
                };
                return MenuTemplateJQ;
            }();
            Menu.MenuTemplateJQ = MenuTemplateJQ;
        }(Menu = Page.Menu || (Page.Menu = {}));
    }(Page = exports.Page || (exports.Page = {}));
});

define("Controls/Menujq", [ "require", "exports", "../Error/ErrorJQ", "../Page/Context/ContextJQ", "../Watch/WatchMouseJQ", "./ControlCommonJQ", "../cssManager/cssManagerJQ", "../Menu/MenuTemplateJQ", "jquery" ], function(require, exports, impError, impPageCtx, impWatch, impCommonCode, impCssManager, impMenuTemplate, jQuery) {
    "use strict";
    var Menu, globalMenuontainerId = 0, isMenuJQReady = !1, isTextInit = !1, nextId = 0;
    !function(Menu) {
        var MenuJQ = function() {
            function MenuJQ() {}
            MenuJQ.prototype.InitInsert = function() {};
            MenuJQ.prototype.GenerateContainerScopeId = function() {
                return "Menu_Container_" + ++globalMenuontainerId;
            };
            MenuJQ.prototype.Init = function() {
                if (0 == isTextInit) {
                    isTextInit = !0;
                    jQuery(document).ready(function() {
                        if (0 == isMenuJQReady) {
                            isMenuJQReady = !0;
                            MenuJQ.AttachClose();
                            MenuJQ.AttachInsertMenu();
                            MenuJQ.AttachNextMenu();
                            MenuJQ.AttachPrevMenu();
                        }
                    });
                }
            };
            MenuJQ.AttachNextMenu = function() {
                jQuery(".control-menu-next").on("click", function() {
                    var cssman = new impCssManager.CssManager.CssManagerJQ();
                    nextId++;
                    if (nextId < cssman.Menus.length) {
                        var src = cssman.GetHtml(nextId), iframe = jQuery(document.createElement("iframe"));
                        iframe.attr("src", src);
                        iframe.addClass("menu-iframe");
                        jQuery(".control-menu-styles").html("");
                        jQuery(".control-menu-styles").append(iframe);
                    } else nextId = cssman.Menus.length - 1;
                });
            };
            MenuJQ.AttachPrevMenu = function() {
                jQuery(".control-menu-prev").on("click", function() {
                    var cssman = new impCssManager.CssManager.CssManagerJQ();
                    nextId--;
                    if (nextId >= 0) {
                        var src = cssman.GetHtml(nextId), iframe = jQuery(document.createElement("iframe"));
                        iframe.attr("src", src);
                        iframe.addClass("menu-iframe");
                        jQuery(".control-menu-styles").html("");
                        jQuery(".control-menu-styles").append(iframe);
                    } else nextId = 0;
                });
            };
            MenuJQ.AttachClose = function() {
                jQuery(".control-menu").find(".close-button").on("click", function() {
                    jQuery(this).closest(".control-page").hide();
                    jQuery(impError.ErrorHandle.ErrorJQ.notifyId).css("display", "none");
                    jQuery(impError.ErrorHandle.ErrorJQ.notifyId).html("");
                });
            };
            MenuJQ.AttachInsertMenu = function() {
                jQuery(".control-menu").find(".control-menu-insert").on("click", function(e, s) {
                    var cssMan = new impCssManager.CssManager.CssManagerJQ();
                    if (nextId >= 0 && nextId < cssMan.Menus.length) {
                        var menuDesignId = cssMan.Menus[nextId].MenuId, mt = new impMenuTemplate.Page.Menu.MenuTemplateJQ(), menu = mt.CreateMenuTemplate(1, "", void 0, menuDesignId), menuObj = new MenuJQ(), ctx = new impPageCtx.Page.ContextJQ(), selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                        if (void 0 != selectedRowOrColumn) {
                            var tbContainer = document.createElement("div");
                            jQuery(tbContainer).append(menu);
                            var tbcScopeId = menuObj.GenerateContainerScopeId();
                            jQuery(tbContainer).attr("scopeId", tbcScopeId);
                            if (1 == selectedRowOrColumn.hasClass("column") || selectedRowOrColumn.hasClass("empty-container")) {
                                var emptyc = document.createElement("span");
                                jQuery(emptyc).addClass("empty-container-menu key image-text-other ");
                                jQuery(emptyc).css("font-size", "14px");
                                var plusContainer = jQuery(".jq-plus-container.jq-plus-container-not-used").clone();
                                plusContainer.removeClass("jq-plus-container");
                                plusContainer.addClass("jq-plus-container-text");
                                plusContainer.removeClass("jq-plus-container-not-used");
                                plusContainer.find(".jq-plus-content").append(tbContainer);
                                jQuery(emptyc).append(plusContainer);
                                ctx.Page.Any.Add(selectedRowOrColumn, jQuery(emptyc), "", void 0, void 0, !0, void 0);
                                impCommonCode.ControlCommon.Code.DestroyResizable();
                                impCommonCode.ControlCommon.Code.Execute();
                            }
                            cssMan.Add(nextId);
                        }
                    }
                });
            };
            MenuJQ.ProcessShow = function() {
                var cssman = new impCssManager.CssManager.CssManagerJQ();
                nextId = 0;
                var src = cssman.GetHtml(nextId), iframe = jQuery(document.createElement("iframe"));
                iframe.attr("src", src);
                iframe.addClass("menu-iframe");
                jQuery(".control-menu-styles").html("");
                jQuery(".control-menu-styles").append(iframe);
            };
            MenuJQ.ProcessSelectNotify = function() {
                var errorHandler = new impError.ErrorHandle.ErrorJQ(), selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                void 0 != selectedElement && (selectedElement.hasClass("row") || selectedElement.hasClass("normal-element")) && errorHandler.ActionHelp("Help : You cannot [Text] insert here.");
            };
            return MenuJQ;
        }();
        Menu.MenuJQ = MenuJQ;
    }(Menu = exports.Menu || (exports.Menu = {}));
});

define("controls/JQueryUI", [ "require", "exports", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../UndoManager/UndoManager", "../Controls/TextJQ", "jquery", "jqueryui" ], function(require, exports, impWatch, impCommonMethods, impUndoManager, impText, jQuery, jQueryUI) {
    "use strict";
    var JQueryUI;
    !function(JQueryUI) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        JQueryUI.SmartObj = SmartObj;
        var UIHelper = function() {
            function UIHelper() {}
            return UIHelper;
        }();
        JQueryUI.UIHelper = UIHelper;
        var CommonCode = function() {
            function CommonCode() {}
            CommonCode.Draggable = function(element, cancelableCss) {
                jQuery(element).draggable({
                    cancel: cancelableCss,
                    revert: "invalid",
                    helper: "clone",
                    appendTo: "body",
                    distance: 5,
                    start: function(event, ui) {
                        CommonCode.DragStopped = !1;
                        jQuery("#interface_bottom").hide();
                        jQuery(ui.helper).addClass("jq-dragging");
                        jQuery("page").addClass("dragging");
                        CommonCode.DroppableEventCount = 0;
                        CommonCode.droppableCount++;
                        ui.helper.css("z-index", "9999999999");
                        ui.helper.css("opacity", "0.8");
                    },
                    stop: function(event, ui) {
                        CommonCode.DragStopped = !0;
                        jQuery("#interface_bottom").show();
                        jQuery(ui.helper).removeClass("jq-dragging");
                        jQuery("page").removeClass("dragging");
                        CommonCode.droppableCount = 2;
                        jQuery(".image-selection-drag-original").removeClass("image-selection-drag-original");
                        ui.helper.css("opacity", "1");
                        ui.helper.css("z-index", "0");
                    },
                    drag: function(event, ui) {
                        var element = jQuery(event.target).hasClass("key") ? jQuery(event.target) : jQuery(event.target).closest(".key");
                        element.addClass("image-selection-drag-original");
                    }
                });
            };
            CommonCode.ResizableImage = function() {
                var handleDefault = "e,se,s";
                jQuery(".image-element").resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    delay: 0,
                    start: function(event, ui) {
                        var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-width");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "width");
                    },
                    stop: function(event, ui) {
                        var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-width");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "width");
                    },
                    resize: function(event, ui) {
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                        var uiHelper = new UIHelper();
                        uiHelper.helper = jQuery(this).closest(".column");
                        CommonCode.commonHeight(100, uiHelper);
                    }
                });
            };
            CommonCode.commonHeight = function(height, ui) {
                return "error";
            };
            CommonCode.ResizableColumn = function() {
                var handleDefault = "e,s";
                jQuery(".column").resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    distance: 0,
                    start: function(event, ui) {
                        jQuery("page").addClass("resizing");
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                        jQuery(ui.element).children(".ui-resizable-handle").find(".jq-square-" + axis).parent().addClass("ui-resizable-handle-hover");
                        if ("se" == jQuery(ui.element).data("ui-resizable").axis || "s" == jQuery(ui.element).data("ui-resizable").axis) {
                            ui.element.height(ui.element.height());
                            CommonCode.originalHeightBeforeDragStartStr = jQuery(ui.helper).css("min-height");
                            var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                            commonMethods.RemoveStyle(ui.helper, "min-height");
                        }
                        var nextElements = jQuery(ui.helper).nextAll(".column");
                        nextElements.hide();
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                    },
                    stop: function(event, ui) {
                        jQuery("page").removeClass("resizing");
                        jQuery(ui.element).find(".ui-resizable-handle").removeClass("ui-resizable-handle-hover");
                        jQuery(".ui-resizable-se").removeClass("selected-resizable");
                        var height = ui.size.height, width = ui.size.width, originalHeight = ui.originalSize.height, originalWidth = ui.originalSize.width, rowWidth = jQuery(ui.helper).parent().width(), onePercentPixels = Math.floor(1 * rowWidth / 100), colXsOnePercentage = 2, colXsOnePixels = colXsOnePercentage * onePercentPixels, commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                        jQuery(ui.helper).attr("style");
                        if (height != originalHeight) {
                            CommonCode.commonHeight(height, ui);
                            commonMethods.RemoveSingleStyle(ui.helper, "height");
                            jQuery(ui.helper).css("min-height", height);
                        }
                        commonMethods.RemoveStyle(ui.helper, "min-width");
                        commonMethods.RemoveStyle(ui.helper, "width");
                        var twoFour = 48;
                        if (width > originalWidth) {
                            var emptyXsCount = 0, nextElements = jQuery(ui.helper).nextAll(".column");
                            try {
                                for (var columns = ui.helper.parent().children(".column"), count = 0, j = 0; j < columns.length; j++) {
                                    var size = jQuery(columns[j]).attr("xs-column-size");
                                    if (void 0 != size && "" != size) {
                                        var num = Number(size);
                                        count += num;
                                    }
                                }
                                twoFour > count && (emptyXsCount = twoFour - count);
                                var extenedWidth = width - originalWidth, colXs = Math.floor(extenedWidth / colXsOnePixels);
                                0 == colXs && (colXs = 1);
                                var nextElementsCount = jQuery(ui.helper).nextAll(".column").length, eachXs = Math.floor(colXs / nextElementsCount);
                                0 == eachXs && (eachXs = 1);
                                for (var colXsTemp = colXs, i = 0; i < nextElements.length && colXsTemp > 0; i++) {
                                    var nextXsSize = Number(jQuery(nextElements[i]).attr("xs-column-size"));
                                    if (1 != nextXsSize) {
                                        var newNextXsSize = nextXsSize - eachXs;
                                        if (1 > newNextXsSize) {
                                            colXsTemp = colXsTemp - eachXs + 1;
                                            newNextXsSize = 1;
                                        } else colXsTemp -= eachXs;
                                        jQuery(nextElements[i]).removeClass("col-xs-" + nextXsSize);
                                        jQuery(nextElements[i]).addClass("col-xs-" + newNextXsSize);
                                        jQuery(nextElements[i]).attr("xs-column-size", newNextXsSize);
                                    }
                                }
                                var xsSize = Number(ui.helper.attr("xs-column-size")), newXsSize = xsSize + colXs - colXsTemp;
                                colXs == colXsTemp && (newXsSize += colXsTemp);
                                var allXs = 0;
                                ui.helper.parent().children(".column").each(function() {
                                    allXs += Number(jQuery(this).attr("xs-column-size"));
                                });
                                for (var overallMinusCurrent = allXs - xsSize, g = overallMinusCurrent + newXsSize; g > twoFour; ) {
                                    newXsSize--;
                                    g--;
                                }
                                jQuery(ui.helper).removeClass("col-xs-" + xsSize);
                                jQuery(ui.helper).addClass("col-xs-" + newXsSize);
                                ui.helper.attr("xs-column-size", newXsSize);
                            } catch (ex) {}
                            nextElements.show();
                        } else if (originalWidth > width) {
                            var nextElements = jQuery(ui.helper).nextAll(".column");
                            try {
                                var extenedWidth = originalWidth - width, colXs = Math.floor(extenedWidth / colXsOnePixels);
                                0 == colXs && (colXs = 1);
                                var eachXs = Math.floor(colXs / 1);
                                0 == eachXs && (eachXs = 1);
                                var xsSize = Number(ui.helper.attr("xs-column-size"));
                                if (xsSize > 1) {
                                    var eachXsTemp = eachXs, newXsSize = xsSize - eachXs;
                                    if (0 > newXsSize) {
                                        eachXsTemp = eachXs + newXsSize;
                                        newXsSize = 1;
                                    }
                                    if (0 == newXsSize) {
                                        eachXsTemp = eachXs - 1;
                                        newXsSize = 1;
                                    }
                                    jQuery(ui.helper).removeClass("col-xs-" + xsSize);
                                    jQuery(ui.helper).addClass("col-xs-" + newXsSize);
                                    ui.helper.attr("xs-column-size", newXsSize);
                                    var colXsTemp = colXs;
                                    if (colXsTemp > 0) {
                                        var nextXsSize = Number(jQuery(nextElements[0]).attr("xs-column-size")), newNextXsSize = nextXsSize + eachXsTemp, allXs = 0;
                                        ui.helper.parent().children(".column").each(function() {
                                            allXs += Number(jQuery(this).attr("xs-column-size"));
                                        });
                                        for (var overallMinusNext = allXs - Number(jQuery(nextElements[0]).attr("xs-column-size")), g = overallMinusNext + newNextXsSize; g > twoFour; ) {
                                            newNextXsSize--;
                                            g--;
                                        }
                                        jQuery(nextElements[0]).removeClass("col-xs-" + nextXsSize);
                                        jQuery(nextElements[0]).addClass("col-xs-" + newNextXsSize);
                                        jQuery(nextElements[0]).attr("xs-column-size", newNextXsSize);
                                    }
                                }
                            } catch (ex) {}
                            nextElements.show();
                        }
                        var nextElementsToShow = jQuery(ui.helper).nextAll(".column");
                        nextElementsToShow.show();
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {}
                });
            };
            CommonCode.OnResize = function(event, ui) {
                "se" == jQuery(ui.element).data("ui-resizable").axis || ("s" == jQuery(ui.element).data("ui-resizable").axis ? ui.helper.height(ui.helper.height() + 20) : "s" == jQuery(ui.element).data("ui-resizable").axis);
            };
            CommonCode.JustResizable = function(elementCss, handle) {
                var handleDefault = "e,se,s";
                void 0 != handle && "" != handle && (handleDefault = handle);
                jQuery(elementCss).resizable({
                    handles: handleDefault,
                    minHeight: 0,
                    minWidth: 0,
                    delay: 0,
                    start: function(event, ui) {
                        jQuery("page").addClass("resizing");
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                        jQuery(ui.element).children(".ui-resizable-handle").find(".jq-square-" + axis).parent().addClass("ui-resizable-handle-hover");
                    },
                    stop: function(event, ui) {
                        jQuery("page").removeClass("resizing");
                        jQuery(ui.element).find(".ui-resizable-handle").removeClass("ui-resizable-handle-hover");
                        ui.size.height, ui.size.width;
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                        var uiHelper = new UIHelper();
                        uiHelper.helper = jQuery(this).closest(".column");
                        CommonCode.commonHeight(100, uiHelper);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {}
                });
            };
            CommonCode.ResizableRootElements = function(elementCss, handle) {
                var handleDefault = "e,se,s";
                void 0 != handle && "" != handle && (handleDefault = handle);
                jQuery(elementCss).resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    delay: 0,
                    start: function(event, ui) {
                        if ("se" == jQuery(ui.element).data("ui-resizable").axis || "s" == jQuery(ui.element).data("ui-resizable").axis) {
                            var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                            commonMethods.RemoveStyle(ui.helper, "min-height");
                            commonMethods.RemoveStyle(ui.helper, "height");
                        }
                    },
                    stop: function(event, ui) {
                        var height = ui.size.height;
                        ui.size.width;
                        if (jQuery(this).hasClass("empty-container-text") || jQuery(this).hasClass("root-elements")) {
                            var common = new impCommonMethods.Common.CommonMethodsJQ();
                            common.RemoveStyle(jQuery(this), "min-height");
                            common.RemoveStyle(jQuery(this), "height");
                            jQuery(this).css("min-height", height);
                        }
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                    }
                });
            };
            CommonCode.ResizeCommon = function(selectedElement) {
                try {
                    var box = jQuery(selectedElement)[0].getBoundingClientRect(), circleLeftTopElement = jQuery("<div class='circle-deg' style='width:12px; border-radius:50%; height:12px; position:absolute; background-color:#00A1FF;'></div>"), circleRightTopElement = jQuery(circleLeftTopElement).clone(), circleLeftBottomElement = jQuery(circleLeftTopElement).clone(), circleRightBottomElement = jQuery(circleLeftTopElement).clone();
                    circleRightBottomElement.addClass("z-index-back");
                    var body = document.body, docElem = document.documentElement, scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop, scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft, clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, top = box.top + scrollTop - clientTop, left = box.left + scrollLeft - clientLeft, width = jQuery(selectedElement).css("width"), height = jQuery(selectedElement).css("height"), widthf = parseFloat(width.replace("px", "")), heightf = parseFloat(height.replace("px", ""));
                    circleLeftTopElement.css("left", left - 5);
                    circleLeftTopElement.css("top", top - 5);
                    circleLeftBottomElement.css("left", left - 5);
                    circleLeftBottomElement.css("top", top + heightf - 5);
                    circleRightTopElement.css("left", left + widthf - 5);
                    circleRightTopElement.css("top", top - 5);
                    circleRightBottomElement.css("left", left + widthf - 5);
                    circleRightBottomElement.css("top", top + heightf - 5);
                    jQuery(".circle-deg").remove();
                    jQuery("body").append(circleLeftTopElement);
                    jQuery("body").append(circleLeftBottomElement);
                    jQuery("body").append(circleRightTopElement);
                    jQuery("body").append(circleRightBottomElement);
                } catch (ex) {}
            };
            CommonCode.Resizable = function(elementCss, handle) {
                var handleDefault = "e,se,s";
                void 0 != handle && "" != handle && (handleDefault = handle);
                jQuery(elementCss).resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    distance: 0,
                    start: function(event, ui) {
                        jQuery("page").addClass("resizing");
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                        jQuery(ui.element).children(".ui-resizable-handle").find(".jq-square-" + axis).parent().addClass("ui-resizable-handle-hover");
                        jQuery(ui.helper).closest(".key").after("<div class='height float-right dummy-div'></div>");
                        jQuery(".dummy-div").height(ui.helper.height() + 2);
                        if ("se" == jQuery(ui.element).data("ui-resizable").axis || "s" == jQuery(ui.element).data("ui-resizable").axis) {
                            ui.helper.css("height", ui.helper.css("min-height"));
                            var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                            commonMethods.RemoveStyle(ui.helper, "min-height");
                        }
                    },
                    stop: function(event, ui) {
                        jQuery("page").removeClass("resizing");
                        jQuery(".dummy-div").remove();
                        var height = ui.size.height;
                        ui.size.width;
                        if (jQuery(this).hasClass("empty-container-text") || jQuery(this).hasClass("empty-container-image") || jQuery(this).hasClass("empty-container") || jQuery(this).hasClass("jq-plus-container-text") || jQuery(this).hasClass("jq-plus-container-image") || jQuery(this).hasClass("jq-text-block-container") || jQuery(this).hasClass("root-elements")) if (jQuery(this).hasClass("jq-plus-container-image") || jQuery(this).hasClass("empty-container-spacer")) {
                            jQuery(this).css("height", height);
                            jQuery(this).css("min-height", height);
                        } else {
                            jQuery(this).css("height", height);
                            jQuery(this).css("min-height", height);
                        }
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                        var uiHelper = new UIHelper();
                        uiHelper.helper = jQuery(this).closest(".column");
                        CommonCode.commonHeight(100, uiHelper);
                        jQuery(ui.element).find(".ui-resizable-handle").removeClass("ui-resizable-handle-hover");
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {
                        window.setTimeout(function() {
                            jQuery(".dummy-div").height() < ui.helper.height() && jQuery(".dummy-div").height(jQuery(".dummy-div").height() + 2);
                        }, 10);
                    }
                });
            };
            CommonCode.Droppable = function(elementCss) {
                jQuery(elementCss).droppable({
                    greedy: !0,
                    tolerance: "pointer",
                    accept: ".bldr-draggable, .image-text-other",
                    drop: function(event, ui) {
                        if (1 != CommonCode.DroppableEventCount) {
                            CommonCode.DroppableEventCount = 1;
                            try {
                                window.smartObj = new JQueryUI.SmartObj();
                                window.smartObj.currentObj = void 0;
                                window.smartObj.command = "";
                                impWatch.Watch.MouseJQ.nearestElement = jQuery("#nononononelement");
                                var x = event.clientX, y = event.clientY + jQuery(document).scrollTop();
                                jQuery(".nearest-element").removeClass("nearest-element");
                                impWatch.Watch.MouseJQ.selectedElement.hasClass("image-text-other") && (impWatch.Watch.MouseJQ.selectedElement = impWatch.Watch.MouseJQ.selectedElement.closest(".column"));
                                if (impWatch.Watch.MouseJQ.selectedElement.hasClass("column")) {
                                    var $elements = impWatch.Watch.MouseJQ.selectedElement.find(".image-text-other"), nearestLeftArray = [], nearestTopArray = [];
                                    if ($elements.length > 0) {
                                        $elements.each(function(index, _this) {
                                            var $this = jQuery(_this), top = parseFloat($this.attr("top")), bottom = parseFloat($this.attr("bottom")), left = parseFloat($this.attr("left"));
                                            if (y >= top && bottom >= y && x >= left) {
                                                nearestLeftArray.push(left);
                                                nearestTopArray.push(top);
                                            }
                                        });
                                        var nearestLeft = 0, nearestTop = 0;
                                        nearestLeftArray.length > 0 && (nearestLeft = Math.max.apply(Math, nearestLeftArray));
                                        nearestTopArray.length > 0 && (nearestTop = Math.max.apply(Math, nearestTopArray));
                                        impWatch.Watch.MouseJQ.selectedElement.find(".image-text-other[left='" + nearestLeft + "'][top='" + nearestTop + "']").addClass("nearest-element");
                                        impWatch.Watch.MouseJQ.nearestElement = jQuery(".nearest-element").first();
                                        if (impWatch.Watch.MouseJQ.nearestElement.length > 0) {
                                            window.smartObj.currentObj = impWatch.Watch.MouseJQ.nearestElement;
                                            window.smartObj.command = "n";
                                        }
                                    }
                                }
                            } catch (ex) {}
                            impWatch.Watch.MouseJQ.selectedElement = jQuery(".image-selection-drag");
                            if (CommonCode.droppableCount >= 2 && void 0 != CommonCode.currentTarget && !ui.draggable.hasClass("control-drag-anywhere") && !ui.draggable.hasClass("bldr-draggable")) {
                                CommonCode.droppableCount++;
                                ui.draggable.css("opacity", "1");
                                if (ui.draggable.find(".jq-image-block-image").length > 0) {
                                    ui.draggable.css("position", "relative").css("left", "").css("top", "");
                                    void 0 != impWatch.Watch.MouseJQ.nearestElement && impWatch.Watch.MouseJQ.nearestElement.length > 0 ? impWatch.Watch.MouseJQ.nearestElement.after(ui.draggable.closest(".empty-container-image")) : CommonCode.currentTarget.closest(".key").hasClass("column") ? CommonCode.currentTarget.closest(".key").append(ui.draggable.closest(".empty-container-image")) : CommonCode.currentTarget.closest(".key").after(ui.draggable.closest(".empty-container-image"));
                                } else void 0 != impWatch.Watch.MouseJQ.nearestElement && impWatch.Watch.MouseJQ.nearestElement.length > 0 ? impWatch.Watch.MouseJQ.nearestElement.after(ui.draggable.css("position", "relative").css("left", "").css("top", "")) : CommonCode.currentTarget.closest(".key").hasClass("column") ? CommonCode.currentTarget.closest(".key").append(ui.draggable.css("position", "relative").css("left", "").css("top", "")) : CommonCode.currentTarget.closest(".key").after(ui.draggable.css("position", "relative").css("left", "").css("top", ""));
                                jQuery(".image-selection").removeClass("image-selection");
                                event.stopPropagation();
                                CommonCode.currentTarget = null;
                                jQuery(".image-text-other").each(function(index, _this) {
                                    var $this = jQuery(_this), bottom = $this.offset().top + $this.height(), top = $this.offset().top, left = $this.offset().left;
                                    $this.attr("top", top);
                                    $this.attr("bottom", bottom);
                                    $this.attr("left", left);
                                });
                                jQuery(".image-selection-drag").removeClass("image-selection-drag");
                                jQuery(".empty").removeClass("empty");
                                jQuery("#control-common-execute").trigger("click");
                                var undomanager = new impUndoManager.Manager.UndoManager();
                                undomanager.BeforeOperation();
                            } else if (!ui.draggable.hasClass("control-drag-anywhere")) {
                                ui.draggable.css("position", "relative").css("left", "").css("top", "");
                                if (ui.draggable.hasClass("bldr-draggable")) {
                                    var id = ui.draggable.attr("id");
                                    switch (id) {
                                      case "bldr-drgb-text":
                                        impText.Text.TextJQ.InsertTextBlock("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.");
                                        break;

                                      case "bldr-drgb-title":
                                        impText.Text.TextJQ.InsertTextBlock("<h2>Title Here.</h2>");
                                    }
                                }
                            }
                            jQuery(".image-selection-drag").removeClass("image-selection-drag");
                        }
                    },
                    out: function(event, ui) {
                        CommonCode.droppableCount++;
                    },
                    over: function(event, ui) {
                        jQuery(".image-selection-drag").removeClass("image-selection-drag");
                        CommonCode.currentTarget = jQuery(event.target);
                        if (jQuery(event.target).hasClass("key")) {
                            if ("inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display")) {
                                jQuery(event.target).addClass("image-selection-drag");
                                impWatch.Watch.MouseJQ.selectedElement = jQuery(event.target);
                            }
                        } else if ("inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display")) {
                            jQuery(event.target).closest(".key").addClass("image-selection-drag");
                            impWatch.Watch.MouseJQ.selectedElement = jQuery(event.target).closest(".key");
                        }
                    }
                });
            };
            CommonCode.DraggableDestroy = function(element) {
                jQuery(element).each(function(index, _this) {
                    try {
                        var $this = jQuery(_this);
                        $this.draggable("destroy");
                    } catch (ex) {}
                });
            };
            CommonCode.DroppableDestroy = function(elementCss) {
                jQuery(elementCss).each(function(index, _this) {
                    try {
                        var $this = jQuery(_this);
                        $this.droppable("destroy");
                        $this.removeClass("ui-droppable");
                    } catch (ex) {}
                });
            };
            CommonCode.ResizableDestroy = function(elementCss) {
                jQuery(elementCss).each(function(index, _this) {
                    try {
                        var $this = jQuery(_this);
                        $this.resizable("destroy");
                        jQuery($this).find("div").remove(".ui-resizable-handle");
                    } catch (ex) {
                        jQuery($this).find("div").remove(".ui-resizable-handle");
                    }
                });
            };
            CommonCode.droppableCount = 2;
            CommonCode.DroppableEventCount = 0;
            CommonCode.DragStopped = !0;
            CommonCode.originalHeightBeforeDragStartStr = "";
            return CommonCode;
        }();
        JQueryUI.CommonCode = CommonCode;
    }(JQueryUI = exports.JQueryUI || (exports.JQueryUI = {}));
});

define("page/PageElementBaseJQ", [ "require", "exports", "../PageElements/ElementJQ", "../Error/ErrorJQ", "../Common/CommonMethodsJQ", "../_Classes/UrlJQ", "../_Classes/Auth", "../Constants/ConstantsJQ", "../UndoManager/UndoManager", "../MalFormed/MalFormedJQ", "jquery" ], function(require, exports, impElements, impError, impCommon, impUrl, impAuth, impConstants, impUndoManager, impmal, jQuery) {
    "use strict";
    var Page, uniqureId = 5;
    !function(Page) {
        var debug, globalColumnId, globalRowId;
        globalColumnId = 0;
        globalRowId = 0;
        debug = !0;
        var PageElementBaseJQ = function() {
            function PageElementBaseJQ(page, typeName, paramRootWrapper, extra) {
                this.scopeId = "body";
                this.typeName = typeName;
                this.rootWrapper = paramRootWrapper;
                this.cssClassName = "jq-" + this.typeName;
                this.cssBackClassName = "jq-back-" + this.typeName;
                this.cssAdditionalStylingClassName = "jq-additional-" + this.typeName;
                this.templatePath = this.typeName;
                this.templateName = this.typeName + ".html";
                this.qualifiedTemplatePath = this.templatePath + "/" + this.templateName;
            }
            PageElementBaseJQ.prototype.GenerateColumnScopeId = function() {
                return "Column_" + ++globalColumnId;
            };
            PageElementBaseJQ.prototype.GenerateRowScopeId = function() {
                return "Row_" + ++globalRowId;
            };
            PageElementBaseJQ.prototype.Log = function(msg) {
                new impError.ErrorHandle.ErrorJQ().LogMessage(this.typeName + "JQ : " + msg);
            };
            PageElementBaseJQ.prototype.GetClassName = function() {
                return this.cssClassName;
            };
            PageElementBaseJQ.prototype.GetDotClassName = function() {
                return "." + this.GetClassName();
            };
            PageElementBaseJQ.prototype.GetScope = function() {
                if (void 0 == this.scopeId || "" == this.scopeId) {
                    this.scopeId = "body";
                    return jQuery(this.scopeId);
                }
                return jQuery(this.scopeId);
            };
            PageElementBaseJQ.prototype.SetScope = function(scopeid) {
                this.scopeId = scopeid;
                return this;
            };
            PageElementBaseJQ.prototype.Get = function() {
                return jQuery(this.GetScope()).find(this.GetDotClassName());
            };
            PageElementBaseJQ.prototype.Remove = function() {
                jQuery(this.Get()).remove();
            };
            PageElementBaseJQ.prototype.GetWrapper = function() {
                return 1 == this.ProcessKey() ? "body" == this.rootWrapper.toString().toLowerCase() ? jQuery(this.rootWrapper) : jQuery(this.GetScope()).find(this.rootWrapper) : void 0;
            };
            PageElementBaseJQ.prototype.Create = function(className) {
                if (1 == this.ProcessKey()) {
                    if (0 == this.Get().length) {
                        var elements = new impElements.Page.Elements.ElementJQ();
                        this.Add(this.GetWrapper(), elements.CreateDiv("", this.GetClassName() + " " + this.cssBackClassName + " " + this.cssAdditionalStylingClassName + "  key design-row row root-elements page-element jqMargin-0 "), void 0, void 0, void 0, void 0, void 0);
                    }
                    return this;
                }
            };
            PageElementBaseJQ.prototype.CreateNotExist = function() {
                0 == this.Get().length && this.Create(void 0);
            };
            PageElementBaseJQ.prototype.AddRow = function(root, colClassNames, className, adjustRow, adjustColumn, beforeAfter) {
                if (1 == this.ProcessKey()) {
                    var row;
                    0 == this.Get().length && this.Create(void 0);
                    if (void 0 != colClassNames && colClassNames.length > 0) {
                        var cols;
                        cols = colClassNames.toString().split(" ");
                        var elements = new impElements.Page.Elements.ElementJQ();
                        row = elements.CreateDiv("", "row key jqRootRow design-row");
                        for (var commonMethods = new impCommon.Common.CommonMethodsJQ(), i = 0; i < cols.length; i++) {
                            var colClassName = "", columnSize = "";
                            if (void 0 != cols[i] && "" != commonMethods.Trim(cols[i])) {
                                colClassName = cols[i].toString().replace(/,/g, " ");
                                columnSize = colClassName.toString().replace("col-xs-", "");
                                var column, elements2 = new impElements.Page.Elements.ElementJQ(), columnCss = colClassName + " " + className + " column key design-column column-number-" + i, contentClassName = "", contentCssClass = "";
                                if ("Content" == this.typeName || jQuery(root).hasClass("jq-Content")) {
                                    contentCssClass = "";
                                    0 == i ? contentCssClass = "SideBarLeft" : 1 == i ? contentCssClass = "MiddleContent" : 2 == i && (contentCssClass = "SideBarRight");
                                    contentClassName = "jq-" + contentCssClass + " jq-back-" + contentCssClass + " jq-additional-" + contentCssClass;
                                }
                                column = elements2.CreateDiv("", columnCss + " " + contentClassName);
                                var columnScopeId = this.GenerateColumnScopeId();
                                1 == debug && void 0 != column && column.append("<span class='debug-column-css debug-css' scopeId='" + columnScopeId + "'> " + columnScopeId + " </span> ");
                                column.attr("scopeId", columnScopeId);
                                column.attr("column-number", i);
                                column.attr("xs-column-size", columnSize);
                                column.css("min-height", "100px");
                                column.addClass("column-padding");
                                "" != contentClassName ? column.attr("key-css", ".jq-" + contentClassName) : void 0 != root ? column.attr("key-css", jQuery(root).attr("key-css") + " column") : column.attr("key-css", this.GetDotClassName() + " column");
                                void 0 != root ? row.attr("key-css", jQuery(root).attr("key-css") + " row") : row.attr("key-css", this.GetDotClassName() + " row");
                                jQuery(row).append(column);
                                void 0 != adjustColumn && this.AdjustElement(column, adjustColumn);
                            }
                        }
                    }
                    var rowScopeId = this.GenerateRowScopeId();
                    row.attr("scopeId", rowScopeId);
                    var nextPlus = "<div class='jq-row-plus-container jq-next-row-container'> <span class='jq-row-plus jq-next-row'> + </span> </div>", prevPlus = "<div class='jq-row-plus-container jq-prev-row-container'> <span class='jq-row-plus jq-prev-row'> + </span> </div>";
                    void 0 != adjustRow && this.AdjustElement(row, adjustRow);
                    void 0 == root && (root = this.Get());
                    jQuery(row).prepend("<span title='Row' class=\"design-page-row \"> <span class='design-square-row'>Row</span> <span class='columns-add-text'>Columns <button class='jq-add-column btn btn-xs btn-danger'>+</button></span> </span>");
                    if (void 0 != row) {
                        row.prepend(prevPlus);
                        row.append(nextPlus);
                    }
                    this.Add(root, row, void 0, void 0, void 0, void 0, beforeAfter);
                    root.hasClass("key") || (root = root.closest(".key"));
                    if ((root.hasClass("empty-container-image") || root.hasClass("empty-container-text")) && !row.hasClass("row")) {
                        row.wrap("<div class='table-row'></div>");
                        row.before("<div class='table-cell'></div>");
                        row.addClass("table-cell");
                        return row.parent();
                    }
                    return row;
                }
            };
            PageElementBaseJQ.prototype.AdjustElement = function(element, adjust) {
                if (1 == this.ProcessKey() && void 0 != element && void 0 != adjust) {
                    void 0 != adjust.height && jQuery(element).css("min-height", adjust.height + "px");
                    void 0 != adjust.width && jQuery(element).css("width", adjust.width + "px");
                    if (void 0 != adjust.padding) {
                        var padding = adjust.padding;
                        if (void 0 != padding.all) jQuery(element).css("padding", padding.all + "px"); else {
                            void 0 != padding.left && jQuery(element).css("padding-left", padding.left + "px");
                            void 0 != padding.top && jQuery(element).css("padding-top", padding.top + "px");
                            void 0 != padding.right && jQuery(element).css("padding-right", padding.right + "px");
                            void 0 != padding.bottom && jQuery(element).css("padding-bottom", padding.bottom + "px");
                        }
                    }
                    if (void 0 != adjust.margin) {
                        var margin = adjust.margin;
                        if (void 0 != margin.all) jQuery(element).css("margin", margin.all + "px"); else {
                            void 0 != margin.left && jQuery(element).css("margin-left", margin.left + "px");
                            void 0 != margin.top && jQuery(element).css("margin-top", margin.top + "px");
                            void 0 != margin.right && jQuery(element).css("margin-right", margin.right + "px");
                            void 0 != margin.bottom && jQuery(element).css("margin-bottom", margin.bottom + "px");
                        }
                    }
                }
            };
            PageElementBaseJQ.prototype.Add = function(root, element, className, rowcolumn, front, useSmartObj, beforeAfter) {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed && 1 == this.ProcessKey()) {
                    void 0 != element && element.find(".debug-css").html("");
                    var row = 0, column = 0;
                    void 0 == root && (root = this.Get());
                    if (void 0 != rowcolumn) {
                        if ("" != rowcolumn) {
                            var rowcolumNumber = rowcolumn.toString().split(" ");
                            try {
                                var tempForTry = Number(rowcolumNumber[0]);
                                tempForTry = Number(rowcolumNumber[1]);
                            } catch (ex) {
                                this.Log("Add(): Row or Column is not a number : provided values (" + rowcolumn + ")");
                                return;
                            }
                            if (void 0 != rowcolumNumber && rowcolumNumber.length > 1) {
                                row = Number(rowcolumNumber[0]) + 1;
                                column = Number(rowcolumNumber[1]);
                            }
                        }
                        if (!(jQuery(root).find(".jqRootRow:nth-child(" + row + ")").children().eq(column).length > 0)) {
                            this.Log(" Add() : [" + jQuery(root).attr("class") + "] do not have row column [" + row + "," + column + "] to add element");
                            return;
                        }
                        root = jQuery(root).find(".jqRootRow:nth-child(" + row + ")").children().eq(column);
                    } else this.Log("Warning : Please Add Row to  [" + jQuery(root).attr("class") + "] ");
                    if (void 0 != element) {
                        if ("object" != typeof element) {
                            var tempElement = document.createElement("span");
                            jQuery(tempElement).append(element);
                            element = jQuery(tempElement);
                        }
                        jQuery(element).addClass(className);
                    }
                    element.attr("class");
                    if (1 == useSmartObj && null != window.smartObj && null != window.smartObj.currentObj && "" != window.smartObj.command) if ("n" == window.smartObj.command || "" == window.smartObj.command) {
                        jQuery(window.smartObj.currentObj).after(element);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    } else {
                        jQuery(window.smartObj.currentObj).before(element);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    } else if (1 == front) jQuery("div[src='xa.xml']").length > 2 && 1 == impAuth.Auth.AuthJQ.IsAuth && jQuery(root).prepend(element); else if (jQuery("div[src='xa.xml']").length > 2 && 1 == impAuth.Auth.AuthJQ.IsAuth) {
                        if (void 0 == jQuery(root).attr("unique-id")) {
                            uniqureId++;
                            jQuery(root).attr("unique-id", uniqureId);
                        }
                        void 0 == beforeAfter ? jQuery(root).append(element) : 1 == beforeAfter ? jQuery(root).before(element) : jQuery(root).after(element);
                        if (jQuery(element).hasClass("jq-Any")) {
                            var undomanager = new impUndoManager.Manager.UndoManager();
                            undomanager.BeforeOperation();
                        } else {
                            var undomanager = new impUndoManager.Manager.UndoManager();
                            undomanager.BeforeOperation();
                        }
                    }
                }
            };
            PageElementBaseJQ.prototype.AddContent = function(content, className, rowcolumn, front) {
                this.CreateNotExist();
                void 0 != content && "" != content && this.Add(this.Get(), content, className, rowcolumn, front, void 0, void 0);
            };
            PageElementBaseJQ.prototype.AddTemplate = function(root, template, className, rowcolumn) {
                if (void 0 != root) {
                    (void 0 == template || "" == template) && (template = this.qualifiedTemplatePath);
                    template.indexOf(".html") > 0 ? this.Add(jQuery(root), jQuery('<div class="' + className + '" ng-include="\'/static/' + template + "'\"></div>"), className, rowcolumn, !1, void 0, void 0) : this.Add(jQuery(root), jQuery('<div class="' + className + '" ng-include="\'' + template + "'\"></div>"), className, rowcolumn, !1, void 0, void 0);
                } else new impError.ErrorHandle.ErrorJQ().LogMessage(" AddTemlate() > root is undefined");
            };
            PageElementBaseJQ.prototype.RemoveColumn = function(rowNumber, columnNumber) {
                var row = jQuery(this.Get()).find(".jqRootRow:nth-child(" + rowNumber + ")");
                jQuery(row).length > 0 ? jQuery(jQuery(row).children().eq(columnNumber)).remove() : this.Log("[" + rowNumber + "," + columnNumber + "] column not found");
            };
            PageElementBaseJQ.prototype.GetRow = function(rowNumber) {
                var row = jQuery(this.Get()).find(".jqRootRow:nth-child(" + rowNumber + ")");
                if (jQuery(row).length > 0) return jQuery(row);
                this.Log("[" + rowNumber + "] row not found");
            };
            PageElementBaseJQ.prototype.GetColumn = function(rowNumber, columnNumber) {
                rowNumber += 1;
                var row = jQuery(this.Get()).find(".jqRootRow:nth-child(" + rowNumber + ")");
                if (jQuery(row).length > 0) return jQuery(row).children().eq(columnNumber);
                this.Log("[" + rowNumber + "," + columnNumber + "] column not found");
            };
            PageElementBaseJQ.prototype.ProcessKey = function() {
                try {
                    var str = this.GetKey();
                    if (1 == this.IsInIframe()) return !1;
                    if (7 != impConstants.Constants.ConstantsJQ.SecureStrLength) return !1;
                    for (var j = 0, i = 6; i >= 0; i--) {
                        if (this.NextChar(str[j]) != impConstants.Constants.ConstantsJQ.Str[i]) return !1;
                        j++;
                    }
                    return !0;
                } catch (ex) {
                    return !1;
                }
            };
            PageElementBaseJQ.prototype.GetKey = function() {
                return new impUrl.Common.UrlJQ().GetDocumentLocation();
            };
            PageElementBaseJQ.prototype.IsInIframe = function() {
                try {
                    return window.self !== window.top;
                } catch (e) {
                    return !0;
                }
            };
            PageElementBaseJQ.prototype.NextChar = function(c) {
                return String.fromCharCode(c.charCodeAt(0) + 1);
            };
            return PageElementBaseJQ;
        }();
        Page.PageElementBaseJQ = PageElementBaseJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("page/anyjq", [ "require", "exports", "./PageElementBaseJQ", "../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var AnyJQ = function(_super) {
            function AnyJQ(extra) {
                _super.call(this, null, "Any", impConsts.Constants.ConstantsJQ.PAGEROOT, null);
            }
            __extends(AnyJQ, _super);
            return AnyJQ;
        }(impPage.Page.PageElementBaseJQ);
        Page.AnyJQ = AnyJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

define("common/on", [ "require", "exports", "../page/anyjq", "../Watch/WatchMouseJQ", "jquery" ], function(require, exports, impAny, impWatch, jQuery) {
    "use strict";
    var On;
    !function(On) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        On.SmartObj = SmartObj;
        var Code = function() {
            function Code() {}
            Code.Execute = function() {
                Code.BindPlus();
                Code.BindEC();
            };
            Code.BindEC = function() {
                jQuery(".empty-container").unbind("click");
                jQuery(".empty-container").on("click", function() {
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    void 0 != selectedElement && selectedElement.hasClass("empty-container");
                });
            };
            Code.BindPlus = function() {
                jQuery(".jq-prev-row").unbind("click");
                jQuery(".jq-prev-row").on("click", function() {
                    var currentRow = jQuery(this).closest(".row"), anyjq = new impAny.Page.AnyJQ("");
                    anyjq.AddRow(currentRow, "col-xs-48", "", void 0, void 0, !0);
                    jQuery("#control-common-execute").trigger("click");
                });
                jQuery(".jq-next-row").unbind("click");
                jQuery(".jq-next-row").on("click", function() {
                    var currentRow = jQuery(this).closest(".row"), anyjq = new impAny.Page.AnyJQ("");
                    anyjq.AddRow(currentRow, "col-xs-48", "", void 0, void 0, !1);
                    jQuery("#control-common-execute").trigger("click");
                });
                jQuery(".jq-plus-prev").unbind("click");
                jQuery(".jq-plus-prev").on("click", function(e) {
                    window.smartObj = new SmartObj();
                    jQuery(this).hasClass("image-text-other") ? window.smartObj.currentObj = jQuery(this) : window.smartObj.currentObj = jQuery(this).closest(".image-text-other");
                    window.smartObj.command = "p";
                    window.smartObj.isDirty = !1;
                    e.stopPropagation();
                    var pageY = e.pageY;
                    jQuery(window).scrollTop() + pageY >= jQuery(window).height() - 250 && (pageY = e.pageY - 250);
                    var pageX = e.pageX;
                    e.pageX > jQuery(document).width() - 200 && (pageX = e.pageX - 150);
                    jQuery("#smInsertNextPrev").css("left", pageX + "px");
                    jQuery("#smInsertNextPrev").css("top", pageY + "px");
                    jQuery("#smInsertNextPrev").fadeIn(500);
                });
                jQuery(".jq-plus-next").unbind("click");
                jQuery(".jq-plus-next").on("click", function(e) {
                    window.smartObj = new SmartObj();
                    jQuery(this).hasClass("image-text-other") ? window.smartObj.currentObj = jQuery(this) : window.smartObj.currentObj = jQuery(this).closest(".image-text-other");
                    window.smartObj.command = "n";
                    window.smartObj.isDirty = !1;
                    e.stopPropagation();
                    var pageY = e.pageY;
                    jQuery(window).scrollTop() + pageY >= jQuery(window).height() - 250 && (pageY = e.pageY - 180);
                    var pageX = e.pageX;
                    e.pageX > jQuery(document).width() - 200 && (pageX = e.pageX - 150);
                    jQuery("#smInsertNextPrev").css("left", pageX + "px");
                    jQuery("#smInsertNextPrev").css("top", pageY + "px");
                    jQuery("#smInsertNextPrev").fadeIn(500);
                });
            };
            return Code;
        }();
        On.Code = Code;
    }(On = exports.On || (exports.On = {}));
});

define("JQte/OnInsert", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../Controls/ControlCommonJQ", "../jqte/MyJQte", "../PageElements/ElementJQ", "jquery" ], function(require, exports, impError, impWatch, impUndoManager, impCommonCode, impJQte, impElements, jQuery) {
    "use strict";
    var OnInsert, changed = !1;
    !function(OnInsert) {
        var Code = function() {
            function Code() {}
            Code.prototype.Init = function() {
                jQuery("page .jq-add-column").unbind("click");
                jQuery("page .jq-add-column").on("click", function() {
                    var columnsCount = jQuery(this).closest(".row").children(".column").length;
                    if (!(columnsCount >= 4)) {
                        var columnSize = "", columnClass = "";
                        if (1 == columnsCount) {
                            columnClass = "col-xs-24";
                            columnSize = "24";
                        }
                        if (2 == columnsCount) {
                            columnClass = "col-xs-16";
                            columnSize = "16";
                        }
                        if (3 == columnsCount) {
                            columnClass = "col-xs-12";
                            columnSize = "12";
                        }
                        var lastColumn;
                        jQuery(this).closest(".row").children(".column").each(function() {
                            lastColumn = jQuery(this);
                            var prevSize = jQuery(this).attr("xs-column-size"), cssClass = "col-xs-" + prevSize;
                            if (cssClass != columnClass) {
                                jQuery(this).addClass(columnClass);
                                jQuery(this).attr("xs-column-size", columnSize);
                                jQuery(this).removeClass(cssClass);
                            }
                        });
                        var column, elements2 = new impElements.Page.Elements.ElementJQ(), columnCss = columnClass + "  from-column-add-click column key design-column column-number-" + (columnsCount + 1);
                        column = elements2.CreateDiv("", columnCss);
                        column.attr("column-number", columnsCount + 1);
                        column.attr("xs-column-size", columnSize);
                        column.css("min-height", "100px");
                        column.addClass("column-padding");
                        column.addClass("newly-added-column");
                        jQuery(this).closest(".row").children(".column").last().after(column);
                        jQuery("#control-common-execute").trigger("click");
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        return !1;
                    }
                    var error = new impError.ErrorHandle.ErrorJQ();
                    error.ActionHelp("Cannot add more than 4 columns");
                });
                jQuery("page a").not(".jq-logout").unbind("click");
                jQuery("page a").not(".jq-logout").click(function() {
                    impCommonCode.ControlCommon.Code.AnchorClicked = !0;
                });
                jQuery("page .jqte-editor").unbind("click");
                jQuery("page .jqte-editor").on("click", function() {
                    jQuery(".jqte-editor, .column").removeClass("current-editor-scope");
                    jQuery(this).addClass("current-editor-scope");
                });
                jQuery("page .column").unbind("click");
                jQuery("page .column").on("click", function() {
                    if ("none" == jQuery("#jqte-edit-stop").css("display")) {
                        jQuery(".jqte-editor, .column").removeClass("current-editor-scope");
                        jQuery(this).addClass("current-editor-scope");
                    }
                });
                jQuery("page .jqte-editor").unbind("keydown");
                jQuery("page .jqte-editor").on("keydown", function() {
                    Code.BackPassed = !0;
                });
                jQuery("page .jqte-editor").unbind("keyup");
                jQuery("page .jqte-editor").on("keyup", function() {
                    changed = !0;
                });
                jQuery("page .jqte-editor").unbind("focusout");
                jQuery("page .jqte-editor").on("focusout", function() {
                    if (1 == changed) {
                        changed = !1;
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                });
                jQuery(".empty-container-image").unbind("dblclick");
                jQuery(".empty-container-image").on("dblclick", function() {});
                jQuery(".empty-container-text").unbind("dblclick");
                jQuery(".empty-container-text").on("dblclick", function() {
                    jQuery(".empty-container-text").draggable({
                        disabled: !1
                    });
                    jQuery("page .empty-container-text").find(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "move");
                    jQuery("page .jq-text-block-content").removeAttr("contentEditable");
                    jQuery(".current-editor-scope").removeClass("current-editor-scope");
                    jQuery(this).find(".jq-text-block-content").addClass("current-editor-scope");
                    jQuery(".editor").show();
                    jQuery(this).draggable({
                        disabled: !0
                    });
                    jQuery(".current-editor-scope").focus();
                    jQuery(".current-editor-scope").closest(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "text");
                    jQuery(".current-editor-scope").attr("contentEditable", "true");
                });
                jQuery("page .jqte-editor").unbind("mouseup");
                jQuery("page .jqte-editor").on("mouseup", function(e) {
                    impJQte.MyJQte.jqte.buttonEmphasize(e);
                });
                jQuery("page .column").unbind("mouseup");
                jQuery("page .column").on("mouseup", function(e) {
                    impJQte.MyJQte.jqte.buttonEmphasize(e);
                });
                jQuery(".jq-site-link").unbind("dblclick");
                jQuery(".jq-site-link").on("dblclick", function() {
                    jQuery(".editor").show();
                    jQuery(".current-editor-scope").focus();
                    jQuery(".current-editor-scope").closest(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "text");
                });
                jQuery("page").unbind("click");
                jQuery("page").on("click", function(e) {
                    impWatch.Watch.MouseJQ.ProcessClick(e);
                    jQuery("#contextMenu").hide(500);
                    jQuery("#smInsertNextPrev").hide(500);
                    if (1 == impCommonCode.ControlCommon.Code.AnchorClicked) {
                        impCommonCode.ControlCommon.Code.AnchorClicked = !1;
                        null != e.cancelBubble && (e.cancelBubble = !0);
                        e.stopPropagation && e.stopPropagation();
                        e.preventDefault && e.preventDefault();
                        null != e.returnValue && (e.returnValue = !1);
                        return !1;
                    }
                });
            };
            Code.BackPassed = !1;
            Code.BackPassedEdit = !1;
            return Code;
        }();
        OnInsert.Code = Code;
    }(OnInsert = exports.OnInsert || (exports.OnInsert = {}));
});

define("controls/ControlCommonJQ", [ "require", "exports", "./JQueryUI", "../common/on", "../JQte/OnInsert", "jquery" ], function(require, exports, impJQueryUI, impOn, impJqteOnInsert, jQuery) {
    "use strict";
    var ControlCommon;
    !function(ControlCommon) {
        var Code = function() {
            function Code() {}
            Code.AttachClick = function() {
                jQuery("#control-common-execute").on("click", function() {
                    Code.DestroyResizable();
                    Code.Execute();
                });
            };
            Code.Execute = function() {
                window.setTimeout(function() {
                    impOn.On.Code.Execute();
                    new impJqteOnInsert.OnInsert.Code().Init();
                    impJQueryUI.JQueryUI.CommonCode.ResizableColumn();
                    impJQueryUI.JQueryUI.CommonCode.Resizable(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other", "s");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other-left", "e");
                    impJQueryUI.JQueryUI.CommonCode.Draggable(".jq-normal-link .empty-container, .empty-container-menu, .empty-container-text, .empty-container-image, .empty-container-spacer", "");
                    jQuery(".empty-container-text, .empty-container-image").css("z-index", "0");
                    jQuery(".column").each(function() {
                        if (0 == jQuery(this).children(".image-text-other.empty-container-image, .image-text-other.empty-container-text, .row, .column").length) {
                            jQuery(this).addClass("empty");
                            0 == jQuery(this).find(".empty-drop-element").length && jQuery(this).append("<div class='image-text-other empty-drop-element' ></div>");
                        } else {
                            jQuery(this).removeClass("empty");
                            jQuery(this).find(".empty-drop-element").remove();
                        }
                    });
                    jQuery(".image-text-other, .empty-container-empty").each(function(index, _this) {
                        var $this = jQuery(_this), bottom = $this.offset().top + $this.height(), top = $this.offset().top, left = $this.offset().left;
                        $this.attr("top", top);
                        $this.attr("bottom", bottom);
                        $this.attr("left", left);
                    });
                    impJQueryUI.JQueryUI.CommonCode.Droppable(".column, .empty-container, .image-text-other");
                    jQuery(".ui-resizable-e").html("<div class='jq-square jq-square-e'></div>");
                    jQuery(".ui-resizable-se").html("<div class='jq-square jq-square-se'></div>");
                    jQuery(".ui-resizable-s").html("<div class='jq-square jq-square-s'></div>");
                }, 10);
            };
            Code.DestroyResizable = function() {
                impJQueryUI.JQueryUI.CommonCode.DroppableDestroy(".column, .empty-container, .image-text-other");
                impJQueryUI.JQueryUI.CommonCode.DraggableDestroy(".jq-normal-link, .empty-container, .empty-container-menu, .empty-container-text .empty-container-image, .empty-container-spacer");
                impJQueryUI.JQueryUI.CommonCode.ResizableDestroy(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image, .column, .empty-container, .root-elements, .adjust-image-text-other, .adjust-image-text-other-left");
            };
            Code.AnchorClicked = !1;
            return Code;
        }();
        ControlCommon.Code = Code;
    }(ControlCommon = exports.ControlCommon || (exports.ControlCommon = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("controls/imagejq", [ "require", "exports", "../Error/ErrorJQ", "../ControlNames/PageControlNamesJQ", "../Page/Context/ContextJQ", "../Watch/WatchMouseJQ", "./ControlCommonJQ", "../Common/OperationJQ", "../UndoManager/UndoManager", "jquery" ], function(require, exports, impError, impPageControlNames, impPageCtx, impWatch, impCommonCode, impOperaction, impUndoManager, jQuery) {
    "use strict";
    var Image, debug = !0, globalImageBlockId = 0, globalImageBlockContainerId = 0;
    !function(Image) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        Image.SmartObj = SmartObj;
        var SelfJQ = function(_super) {
            function SelfJQ() {
                _super.apply(this, arguments);
            }
            __extends(SelfJQ, _super);
            SelfJQ.prototype.Init = function() {
                this.AttachUserImages();
                this.AttachSelectImage();
                this.AttachInsertImage();
            };
            SelfJQ.prototype.GenerateTextBlockScopeId = function() {
                return "Image_Block_" + ++globalImageBlockId;
            };
            SelfJQ.prototype.GenerateContainerScopeId = function() {
                return "Image_Block_Container_" + ++globalImageBlockContainerId;
            };
            SelfJQ.prototype.AttachSelectImage = function() {
                jQuery("#control-image-bi-library").on("click", ".image-library-image", function() {
                    jQuery(".image-library-image").removeClass("image-library-select");
                    jQuery(".image-library-image").removeClass("image-library-bi-select");
                    jQuery(this).addClass("image-library-select");
                    jQuery(this).addClass("image-library-bi-select");
                });
                jQuery(SelfJQ.controlId).on("click", ".image-library-image", function() {
                    jQuery(".image-library-image").removeClass("image-library-select");
                    jQuery(this).addClass("image-library-select");
                });
            };
            SelfJQ.IsImageUrl = function(s) {
                var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
                if (1 == regexp.test(s) && s.length >= 5) for (var lowerUrl = s.toLowerCase(), types = [ "jpeg", "jpg", "png", "gif" ], i = 0; i < types.length; i++) {
                    var _type = lowerUrl.substr(lowerUrl.length - 5, 5), ts = _type.split(".");
                    if (ts.length >= 2 && ts[1] == types[i]) return !0;
                }
                return !1;
            };
            SelfJQ.prototype.AttachInsertImage = function() {
                jQuery(SelfJQ.controlId).find(".action-button-insert-image").on("click", function() {
                    "" != jQuery(".internet-image-url").val() ? SelfJQ.InsertImage(jQuery(".internet-image-url").val()) : SelfJQ.InsertImage(void 0);
                });
                jQuery(".action-button-change-image").on("click", function() {
                    var selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedRowOrColumn && selectedRowOrColumn.hasClass("empty-container-image")) {
                        var imgSrc = jQuery(".image-library-select").attr("src");
                        if ("" != imgSrc) {
                            selectedRowOrColumn.find(".jq-plus-container-image").find("img").attr("src", imgSrc);
                            var undo = new impUndoManager.Manager.UndoManager();
                            undo.BeforeOperation();
                        }
                    } else {
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionFail("please select a image change.");
                    }
                    jQuery("#control-image-library").hide();
                });
            };
            SelfJQ.ChangeImage = function() {
                jQuery(".action-button-insert-image").hide();
                jQuery(".action-button-change-image").show();
                jQuery("#control-image-library").show();
                jQuery("#control-image-library").trigger("custom_loaded");
            };
            SelfJQ.InsertImage = function(url) {
                var imageObj = new SelfJQ(), errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.SetErrorClassName("page-insert-image");
                var ctx = new impPageCtx.Page.ContextJQ(), selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                if (!selectedRowOrColumn.hasClass("column") && (null == window.smartObj || null == window.smartObj.currentObj)) {
                    window.smartObj = new SmartObj();
                    window.smartObj.currentObj = selectedRowOrColumn;
                    window.smartObj.command = "n";
                }
                void 0 == selectedRowOrColumn && (selectedRowOrColumn = jQuery("#nnnoelement"));
                if (void 0 != selectedRowOrColumn) {
                    var tbImageContainer = document.createElement("div"), tbImage = document.createElement("div"), tbImageWrapper = document.createElement("div"), tbImg = document.createElement("img");
                    jQuery(tbImg).addClass("jq-image-block-image ");
                    jQuery(tbImg).addClass("normal-element image-element");
                    jQuery(tbImageWrapper).addClass("jq-image-block-image-wrapper ");
                    var imgSrc;
                    imgSrc = void 0 == url ? jQuery(".image-library-select").attr("src") : url;
                    jQuery(tbImg).attr("src", imgSrc);
                    jQuery(tbImageWrapper).append(tbImg);
                    jQuery(tbImage).append(tbImageWrapper);
                    jQuery(tbImage).addClass(SelfJQ.CSSCLASS);
                    var tbScopeId = imageObj.GenerateTextBlockScopeId();
                    1 == debug && void 0 != tbImage && jQuery(tbImage).prepend("<span class='debug-image-block-css debug-css' scopeId='" + tbScopeId + "'> " + tbScopeId + " </span> ");
                    jQuery(tbImage).attr("scopeId", tbScopeId);
                    jQuery(tbImageContainer).append(tbImage);
                    var tbcScopeId = imageObj.GenerateContainerScopeId();
                    1 == debug && jQuery(tbImageContainer).append(" <span class='debug-image-block-container-css debug-css' scopeId='" + tbcScopeId + "'> " + tbcScopeId + " </span> ");
                    jQuery(tbImageContainer).addClass(SelfJQ.CONTAINER_CSS_CLASS);
                    jQuery(tbImageContainer).attr("scopeId", tbcScopeId);
                    if (1 == selectedRowOrColumn.hasClass("column") || null != window.smartObj) {
                        var plusContainer = jQuery(".jq-plus-container.jq-plus-container-not-used").clone();
                        plusContainer.removeClass("jq-plus-container-not-used");
                        plusContainer.addClass("jq-plus-container-image");
                        plusContainer.addClass("design-css");
                        plusContainer.addClass("design-empty-text-css");
                        plusContainer.removeClass("jq-plus-container");
                        plusContainer.find(".jq-plus-element-content").addClass("jq-plus-element-content-image");
                        var emptycontainer = document.createElement("div");
                        plusContainer.find(".adjust-image-text-other").remove();
                        plusContainer.css("height", "200px");
                        plusContainer.css("width", "200px");
                        var jEc = jQuery(emptycontainer);
                        jEc.prepend("<div class='adjust-image-text-other-left design-css design-adjust-image-text-other'></div>");
                        jEc.prepend("<div class='adjust-image-text-other design-css design-adjust-image-text-other'></div>");
                        jEc.addClass("empty-container-image image-text-other key design-css design-empty-text-css");
                        jEc.append(plusContainer);
                        plusContainer.find(".jq-plus-content").append(tbImageContainer);
                        impOperaction.Operation.AfterOperationJQ.Execute();
                        null == window.smartObj || "" == window.smartObj.command ? ctx.Page.Any.Add(selectedRowOrColumn, jEc, "", void 0, void 0, void 0, void 0) : ctx.Page.Any.Add(selectedRowOrColumn, jEc, "", void 0, void 0, !0, void 0);
                        if (selectedRowOrColumn.hasClass("jq-image-block-container")) {
                            var tbOrTbcWithScopeId = selectedRowOrColumn.attr("scopeId");
                            selectedRowOrColumn.find(".debug-image-block-container-css[scopeId=" + tbOrTbcWithScopeId + "]").remove();
                            void 0 != tbOrTbcWithScopeId && selectedRowOrColumn.append('<span class="debug-image-block-container-css debug-css" scopeId="' + tbOrTbcWithScopeId + '" > ' + tbOrTbcWithScopeId + "</span>");
                        }
                        jQuery(tbImageContainer).find(".debug-css").remove();
                        errorHandler.ActionSuccess("");
                        jQuery(SelfJQ.controlId).hide();
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                    } else errorHandler.ActionFail("You can only insert in a column block.");
                }
                jQuery(".image-library-image").removeClass("image-library-select");
                jQuery(".internet-image-url").val("");
            };
            SelfJQ.prototype.AttachUserImages = function() {
                jQuery(".load-more-images").on("click", function() {
                    SelfJQ.GetImages();
                });
                jQuery(SelfJQ.controlId).on("custom_loaded", function() {
                    SelfJQ.ClearImageGalaryPagingValue();
                    SelfJQ.GetImages();
                });
            };
            SelfJQ.SetImageGalaryPagingValue = function() {
                jQuery(".imges-get-start").val((Number(jQuery(".imges-get-start").val()) + 20).toString());
            };
            SelfJQ.GetImageGalaryPagingValue = function() {
                if (0 == jQuery(".imges-get-start").length) {
                    var pagingElement = jQuery(document.createElement("input"));
                    pagingElement.addClass("imges-get-start hide");
                    jQuery("body").append(pagingElement);
                    jQuery(".imges-get-start").val("0");
                }
                return jQuery(".imges-get-start").val();
            };
            SelfJQ.GetImages = function() {
                var data = {
                    start: SelfJQ.GetImageGalaryPagingValue(),
                    pageSize: 20
                }, dataStrfy = JSON.stringify(data);
                jQuery.ajax({
                    type: "POST",
                    url: "/services/ImageService.asmx/GetImages",
                    data: dataStrfy,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SelfJQ.OnGetImagesSuccess,
                    error: SelfJQ.OnGetImagesError
                });
            };
            SelfJQ.ClearImageGalaryPagingValue = function() {
                jQuery(".imges-get-start").val("0");
            };
            SelfJQ.OnGetImagesSuccess = function(data, status) {
                var resultImages;
                resultImages = data.d;
                if (resultImages.length > 0) {
                    "0" == SelfJQ.GetImageGalaryPagingValue() && jQuery(".image-library").html("");
                    SelfJQ.SetImageGalaryPagingValue();
                }
                for (var i = 0; i < resultImages.length; i++) {
                    var imageContainer = document.createElement("div");
                    jQuery(imageContainer).addClass("image-lib-container");
                    var image = document.createElement("img");
                    jQuery(image).attr("src", resultImages[i].Path);
                    jQuery(image).addClass("image-library-image");
                    jQuery(image).addClass("img-thumbnail");
                    jQuery(imageContainer).append(image);
                    jQuery(".image-library").append(imageContainer);
                }
            };
            SelfJQ.OnGetImagesError = function(request, status, error) {
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.ActionFail("Some Problem !. <br>Try again latter.");
            };
            SelfJQ.ProcessSelectNotify = function() {
                var selectedElement = (new impError.ErrorHandle.ErrorJQ(), impWatch.Watch.MouseJQ.selectedElement);
                void 0 != selectedElement && (selectedElement.hasClass("row") || selectedElement.hasClass("normal-element"));
            };
            SelfJQ.controlId = "#control-image-library";
            SelfJQ.CSSCLASS = "jq-image-block design-image-block normal-element";
            SelfJQ.CONTAINER_CSS_CLASS = "jq-image-block-container design-image-block normal-element jq-container";
            return SelfJQ;
        }(impPageControlNames.PageControlNamesJQ.Page.Image.Controls);
        Image.SelfJQ = SelfJQ;
    }(Image = exports.Image || (exports.Image = {}));
});

define("Controls/BIjq", [ "require", "exports", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../controls/imagejq", "jquery", "jqueryui" ], function(require, exports, impWatch, impUnodManager, impImage, jQuery, jQueryUI) {
    "use strict";
    var BI, isBIJQReady = !1;
    !function(BI) {
        var BIJQ = function() {
            function BIJQ() {}
            BIJQ.prototype.Init = function() {
                jQuery(document).ready(function() {
                    if (0 == isBIJQReady) {
                        isBIJQReady = !0;
                        jQuery(".smart-menu-bi-control").spinner({
                            min: 0,
                            max: 2e3,
                            step: 1,
                            change: function(event, ui) {},
                            spin: function(event, ui) {
                                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                                selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                                if (void 0 != selectedElement) {
                                    var height = jQuery(".smart-menu-bi-height").spinner("value"), width = jQuery(".smart-menu-bi-width").spinner("value");
                                    selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                }
                            },
                            stop: function(event, ui) {
                                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                                selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                                if (void 0 != selectedElement) {
                                    var height = jQuery(".smart-menu-bi-height").spinner("value"), width = jQuery(".smart-menu-bi-width").spinner("value");
                                    selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                    var undo = new impUnodManager.Manager.UndoManager();
                                    undo.BeforeOperation();
                                }
                            }
                        });
                        jQuery(".bi-browse").on("click", function() {
                            impImage.Image.SelfJQ.GetImages();
                            jQuery("#control-image-bi-library").show();
                        });
                        jQuery(".make-100").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                jQuery(".ddn-bi-pixel-type").val("%");
                                var height = 100;
                                jQuery(".smart-menu-bi-height").spinner("value", height);
                                var width = 100;
                                jQuery(".smart-menu-bi-width").spinner("value", width);
                                selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".ddn-bi-pixel-type").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                var height = jQuery(".smart-menu-bi-height").spinner("value"), width = jQuery(".smart-menu-bi-width").spinner("value");
                                selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".action-button-insert-bi-image").on("click", function() {
                            var src = jQuery(".image-library-bi-select").first().attr("src");
                            jQuery(".bi-selected-image").val(src).change();
                            jQuery(".image-library-image").removeClass("image-library-bi-select");
                            jQuery("#control-image-bi-library").hide();
                        });
                        jQuery(".control-bi-controls .bi-selected-image").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            var applyToBody = jQuery(".bi-body").is(":checked");
                            if (1 == applyToBody) {
                                jQuery("page").css("background-image", "url('" + jQuery(this).val() + "')");
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            } else if (void 0 != selectedElement) {
                                selectedElement.css("background-image", "url('" + jQuery(this).val() + "')");
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .internet-bi-image-url").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-image", "url(" + jQuery(this).val() + ")");
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .ddn-bi-repeat").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-repeat", jQuery(this).val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .ddn-bi-attachment").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-attachment", jQuery(this).val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .ddn-bi-position").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-position", jQuery(this).val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            BIJQ.ProcessSelectNotify = function() {
                BIJQ.isSelectProcessing = !0;
                try {
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                    if (void 0 != selectedElement) {
                        var bi = selectedElement.css("background-image").replace("url(", "").replace(")", "");
                        jQuery(".bi-selected-image").val(bi);
                        var repeat = selectedElement.css("background-repeat");
                        jQuery(".ddn-bi-repeat").val(repeat);
                        var attachment = selectedElement.css("background-attachment");
                        jQuery(".ddn-bi-attachment").val(attachment);
                        var position = selectedElement.css("background-position");
                        jQuery(".ddn-bi-position").val(position);
                        var backgroundSize = selectedElement.css("background-size");
                        if (void 0 != backgroundSize) {
                            var wh = backgroundSize.split(" ");
                            if (wh.length >= 2) {
                                var width = wh[0], heigth = wh[1];
                                jQuery(".ddn-bi-pixel-type").val("px");
                                width = width.replace("px", "");
                                heigth = heigth.replace("px", "");
                                jQuery(".smart-menu-bi-height").spinner("value", heigth);
                                jQuery(".smart-menu-bi-width").spinner("value", width);
                            } else {
                                jQuery(".smart-menu-bi-height").spinner("value", 0);
                                jQuery(".smart-menu-bi-width").spinner("value", 0);
                            }
                        }
                    }
                } catch (ex) {}
                BIJQ.isSelectProcessing = !1;
            };
            BIJQ.isSelectProcessing = !1;
            return BIJQ;
        }();
        BI.BIJQ = BIJQ;
    }(BI = exports.BI || (exports.BI = {}));
});

define("Controls/SpacerJQ", [ "require", "exports", "../Watch/WatchMouseJQ", "../Page/Context/ContextJQ", "jquery" ], function(require, exports, impWatch, impPageCtx, jQuery) {
    "use strict";
    var Spacer;
    !function(Spacer) {
        var SpacerJQ = function() {
            function SpacerJQ() {}
            SpacerJQ.InsertSpacer = function() {
                var selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selectedRowOrColumn && (1 == selectedRowOrColumn.hasClass("column") || selectedRowOrColumn.hasClass("empty-container-text") || selectedRowOrColumn.hasClass("empty-container-image") || selectedRowOrColumn.hasClass("empty-container") || null != window.smartObj)) {
                    var ctx = new impPageCtx.Page.ContextJQ(), emptyc = document.createElement("span");
                    jQuery(emptyc).addClass("empty-container empty-container-spacer key image-text-other design-css design-empty-css");
                    jQuery(emptyc).css("font-size", "14px");
                    var plusContainer = jQuery(".jq-plus-container.jq-plus-container-not-used").clone();
                    plusContainer.removeClass("jq-plus-container-not-used");
                    var spacer = jQuery(document.createElement("div"));
                    spacer.addClass("empty-spacer");
                    spacer.html("<center></center>");
                    plusContainer.find(".jq-plus-content").append(spacer);
                    jQuery(emptyc).append(plusContainer);
                    null == window.smartObj || "" == window.smartObj.command ? ctx.Page.Any.Add(selectedRowOrColumn, jQuery(emptyc), "", void 0, void 0, void 0, void 0) : ctx.Page.Any.Add(selectedRowOrColumn, jQuery(emptyc), "", void 0, void 0, !0, void 0);
                }
            };
            return SpacerJQ;
        }();
        Spacer.SpacerJQ = SpacerJQ;
    }(Spacer = exports.Spacer || (exports.Spacer = {}));
});

define("Controls/../../SiteManager_TS/Site/SiteJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var Site;
    !function(Site) {
        var SiteJQ = function() {
            function SiteJQ() {}
            SiteJQ.prototype.Init = function() {};
            SiteJQ.prototype.CreatePage = function(siteName, pageName) {
                var obj = {
                    siteName: siteName,
                    pageName: pageName
                }, createData = JSON.stringify(obj);
                jQuery.ajax({
                    type: "POST",
                    url: "/services/pageService.asmx/createPage",
                    data: createData,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SiteJQ.OnCreatePageSuccess,
                    error: SiteJQ.OnCreatePageError
                });
            };
            SiteJQ.OnCreatePageSuccess = function(data, status) {
                var site = new SiteJQ();
                site.GetPages(jQuery(".input-site-name-primary").val());
                jQuery(".control-page").hide();
                jQuery(".loading").hide();
            };
            SiteJQ.OnCreatePageError = function(request, status, error) {
                jQuery(".loading").hide();
            };
            SiteJQ.prototype.CreateSite = function(siteName) {
                var obj = {
                    siteName: siteName
                }, createData = JSON.stringify(obj);
                jQuery.ajax({
                    type: "POST",
                    url: "/services/pageService.asmx/createSite",
                    data: createData,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SiteJQ.OnCreateSiteSuccess,
                    error: SiteJQ.OnCreateSiteError
                });
            };
            SiteJQ.OnCreateSiteSuccess = function(data, status) {
                var site = new SiteJQ();
                site.GetSites();
                jQuery(".control-page").hide();
                jQuery(".loading").hide();
            };
            SiteJQ.OnCreateSiteError = function(request, status, error) {
                jQuery(".loading").hide();
            };
            SiteJQ.prototype.GetPages = function(siteName, success, error) {
                void 0 == success && (success = SiteJQ.OnGetPagesSuccess);
                void 0 == error && (error = SiteJQ.OnGetPagesError);
                var data = {
                    siteName: siteName
                }, pageData = JSON.stringify(data);
                jQuery.ajax({
                    type: "POST",
                    url: "/services/pageService.asmx/getPages",
                    data: pageData,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: success,
                    error: error
                });
            };
            SiteJQ.OnGetPagesSuccess = function(data, status) {
                jQuery(".loading").hide();
                jQuery("#nestable3").html("");
                var result = data.d, list = jQuery(".jq-pages-list.hide").clone(), item = jQuery(".jq-page-item.hide").clone(), rootlist = list.clone();
                rootlist.removeClass("hide");
                jQuery("#nestable3").append(rootlist);
                for (var i = 0; i < result.length; i++) {
                    var newitem = item.clone();
                    newitem.removeClass("hide");
                    newitem.attr("data-id", result[i].Id);
                    newitem.find(".jq-page-item-name").text(result[i].Name);
                    var a = jQuery(document.createElement("a")), link = result[i].Link;
                    link = link.replace("?", "&");
                    a.attr("href", "/shiv/designer.aspx?PageName=" + link + "&SiteName=" + jQuery(".input-site-name-primary").val());
                    a.addClass("white-link");
                    a.append("Open");
                    a.css("float", "right");
                    a.addClass("btn btn-primary btn-xs");
                    newitem.find(".jq-page-item-name").append(a);
                    rootlist.append(newitem);
                }
                for (var i = 0; i < result.length; i++) if ("" != result[i].Extra) {
                    if (0 == jQuery(".jq-page-item[data-id='" + result[i].Extra + "']").children("ol").length) {
                        var childrenList = list.clone();
                        childrenList.removeClass("hide");
                        jQuery(".jq-page-item[data-id='" + result[i].Extra + "']").append(childrenList);
                    }
                    jQuery(".jq-page-item[data-id='" + result[i].Extra + "']").children("ol").append(jQuery(".jq-page-item[data-id='" + result[i].Id + "']"));
                }
                jQuery("#nestable3").nestable();
            };
            SiteJQ.OnGetPagesError = function(request, status, error) {
                jQuery(".loading").hide();
            };
            SiteJQ.prototype.GetSites = function() {
                jQuery.ajax({
                    type: "POST",
                    url: "/services/pageService.asmx/getSites",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SiteJQ.OnGetSitesSuccess,
                    error: SiteJQ.OnGetSitesError
                });
            };
            SiteJQ.OnGetSitesSuccess = function(data, status) {
                jQuery(".loading").hide();
                var result = data.d;
                jQuery(".site-manager-data").html("");
                for (var i = 0; i < result.length; i++) {
                    var sitedata = jQuery(".site-data.hide").clone();
                    sitedata.removeClass("hide");
                    sitedata.find(".site-name").html(result[i].Name);
                    var a = jQuery(document.createElement("a"));
                    a.attr("href", "/shiv/PageManager.aspx?SiteName=" + result[i].Name);
                    a.addClass("white-link");
                    a.append("Open");
                    sitedata.find(".open-site").append(a);
                    jQuery(".site-manager-data").append(sitedata);
                }
            };
            SiteJQ.OnGetSitesError = function(request, status, error) {
                jQuery(".loading").hide();
            };
            SiteJQ.prototype.AttachOpenEvent = function() {};
            SiteJQ.prototype.AttachCreateEvent = function() {};
            SiteJQ.prototype.AttachEditEvent = function() {};
            return SiteJQ;
        }();
        Site.SiteJQ = SiteJQ;
    }(Site = exports.Site || (exports.Site = {}));
});

define("error/errorjq", [ "require", "exports", "jquery" ], function(require, exports, jQuery) {
    "use strict";
    var ErrorHandle;
    !function(ErrorHandle) {
        var ErrorJQ = function() {
            function ErrorJQ() {}
            ErrorJQ.prototype.HandleError = function(handle) {
                handle === !0 && (window.onerror = this.WindowHandleError);
            };
            ErrorJQ.prototype.WindowHandleError = function(err, url, line) {
                alert(err + "\n on page: " + url + "\n on line: " + line);
            };
            ErrorJQ.prototype.SetErrorClassName = function(errorClassName) {
                this.errorClassName = errorClassName;
            };
            ErrorJQ.prototype.NotifyHelp = function(helpmsg) {
                jQuery("#notify").clearQueue();
                jQuery("#notify").html("");
                jQuery("#notify").append(helpmsg);
                jQuery("#notify").css("display", "block");
                this.TriggerHideNotify();
            };
            ErrorJQ.prototype.Notify = function(error) {
                jQuery("#notify").clearQueue();
                jQuery("#notify").html(error);
                jQuery("#notify").css("display", "block");
                this.TriggerHideNotify();
            };
            ErrorJQ.prototype.TriggerHideNotify = function() {
                window.clearTimeout(ErrorJQ.interval);
                ErrorJQ.interval = window.setTimeout(this.TimeOutHandler, 1e4);
            };
            ErrorJQ.prototype.TimeOutHandler = function() {
                jQuery("#notify").css("display", "none");
                window.clearTimeout(ErrorJQ.interval);
            };
            ErrorJQ.prototype.AddErrorControl = function(element) {
                jQuery(element).addClass("error-" + this.errorClassName);
            };
            ErrorJQ.prototype.ActionFail = function(errorMessage) {
                jQuery(".error-" + this.errorClassName).css("border", "2px solid red");
                errorMessage = void 0 == errorMessage || "" == errorMessage ? "Action Failed" : "<div class='error-notify-block'>Action Failed </div><br/>" + errorMessage;
                jQuery(this.GetNotifyElement()).removeClass("success-notify-background");
                jQuery(this.GetNotifyElement()).addClass("error-notify-background");
                this.Notify(errorMessage);
            };
            ErrorJQ.prototype.ActionHelp = function(helpMessage, changeColor) {
                if (void 0 != helpMessage) {
                    var index = helpMessage.toLowerCase().indexOf("page loaded");
                    -1 != index && jQuery(".jq-loading").hide();
                }
                var helpContainer = jQuery(document.createElement("div"));
                void 0 != changeColor ? helpContainer.addClass("yellow-green-notify-background") : helpContainer.addClass("yellow-notify-background");
                helpContainer.html("");
                helpContainer.append(helpMessage);
                jQuery(this.GetNotifyElement()).removeClass("error-notify-background");
                jQuery(this.GetNotifyElement()).removeClass("success-notify-background");
                this.NotifyHelp(helpContainer);
            };
            ErrorJQ.prototype.ActionSuccess = function(successMessage) {
                jQuery(".error-" + this.errorClassName).css("border", "1px solid green");
                jQuery(".error-" + this.errorClassName).removeClass("error-" + this.errorClassName);
                (void 0 == successMessage || "" == successMessage) && (successMessage = "Action Success");
                jQuery(this.GetNotifyElement()).removeClass("error-notify-background");
                jQuery(this.GetNotifyElement()).addClass("success-notify-background");
                this.Notify(successMessage);
            };
            ErrorJQ.prototype.GetNotifyElement = function() {
                return jQuery("#notify");
            };
            ErrorJQ.prototype.LogMessage = function(message) {
                try {} catch (e) {}
            };
            ErrorJQ.prototype.Try = function(callback) {
                if ("function" == typeof callback) try {
                    callback();
                } catch (ex) {
                    alert(ex);
                    this.LogMessage(ex);
                } else this.LogMessage("method is not a function");
            };
            ErrorJQ.notifyId = "#notify";
            return ErrorJQ;
        }();
        ErrorHandle.ErrorJQ = ErrorJQ;
    }(ErrorHandle = exports.ErrorHandle || (exports.ErrorHandle = {}));
});

define("Controls/LinkJQ", [ "require", "exports", "../../SiteManager_TS/Site/SiteJQ", "../error/errorjq", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../Controls/ControlCommonJQ", "../Common/OperationJQ", "../Constants/ConstantsJQ", "jquery" ], function(require, exports, impPage, impError, impWatch, impUndoManager, impCommonCode, impOperaction, impStatic, jQuery) {
    "use strict";
    var Link, initOnceFlag = !1;
    !function(Link) {
        var LinkJQ = function() {
            function LinkJQ() {}
            LinkJQ.prototype.Init = function() {
                if (0 == initOnceFlag) {
                    initOnceFlag = !0;
                    this.AttachEvents();
                }
            };
            LinkJQ.LoadLinks = function() {
                var site = new impPage.Site.SiteJQ();
                site.GetPages(jQuery(".input-site-name").val(), LinkJQ.OnGetPagesSuccess, LinkJQ.OnGetPagesError);
            };
            LinkJQ.OnGetPagesSuccess = function(data, status) {
                jQuery(".jq-loading").hide();
                var result = data.d;
                jQuery(".insert-link-links").html("");
                for (var i = 0; i < result.length; i++) {
                    var select;
                    select = 0 == i ? "<option selected value='" + result[i].Name + "'>" + result[i].Name.replace(".html", "") + "</option>" : "<option value='" + result[i].Name + "'>" + result[i].Name.replace(".html", "") + "</option>";
                    jQuery(".insert-link-links").append(select);
                }
                jQuery(".insert-link-name").val(jQuery(".insert-link-links").find("option:selected").text());
                var previewlink = LinkJQ.CreateCurrentLink(!0);
                jQuery(".insert-link-preview").html(previewlink);
            };
            LinkJQ.OnGetPagesError = function(request, status, error) {
                jQuery(".jq-loading").hide();
                jQuery(".insert-link-links").html("");
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.ActionFail("Something went wrong<br>Try again later!");
            };
            LinkJQ.GenerateId = function() {
                return "NormalLink" + ++impStatic.Constants.StaticJQ.normalLinkId;
            };
            LinkJQ.prototype.AttachEvents = function() {
                jQuery("#insert-internet-link-url").on("change", function() {
                    LinkJQ.IsExternalUrl = !0;
                    jQuery("#insert-internet-link-name").val("Give Name");
                    var value;
                    value = jQuery("#insert-internet-link-url").val();
                    if (value.length > 0) for (;" " == value.charAt(0); ) value = value.substring(1);
                    if ("" != value) {
                        var i = value.indexOf("http://"), j = value.indexOf("https://"), k = value.indexOf("//");
                        0 != i && 0 != j && 0 != k && jQuery(this).val("//" + jQuery(this).val());
                    } else {
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionHelp("Please provide External Link Url.");
                    }
                    var previewlink = LinkJQ.CreateCurrentLink(!0, jQuery(this).val(), jQuery("#insert-internet-link-name").val());
                    jQuery(".insert-link-preview").html(previewlink);
                });
                jQuery("#insert-internet-link-name").on("change", function() {
                    LinkJQ.IsExternalUrl = !0;
                    if ("Give Name" != jQuery(this).val()) {
                        var previewlink = LinkJQ.CreateCurrentLink(!0, jQuery("#insert-internet-link-url").val(), jQuery(this).val());
                        jQuery(".insert-link-preview").html(previewlink);
                        var value = jQuery("#insert-internet-link-url").val();
                        if (value.length > 0) for (;" " == value.charAt(0); ) value = value.substring(1);
                        if ("" == value) {
                            var errorHandler = new impError.ErrorHandle.ErrorJQ();
                            errorHandler.ActionHelp("Please provide External Link Url.");
                        }
                    }
                });
                jQuery(".btn-style").on("click", function() {
                    jQuery(".btn-style").removeClass("btn-style-selected");
                    jQuery(this).addClass("btn-style-selected");
                    var previewlink;
                    previewlink = 1 == LinkJQ.IsExternalUrl ? LinkJQ.CreateCurrentLink(!0, jQuery("#insert-internet-link-url").val(), jQuery("#insert-internet-link-name").val()) : LinkJQ.CreateCurrentLink(!0);
                    jQuery(".insert-link-preview").html(previewlink);
                });
                jQuery(".action-button-insert-link").on("click", function() {
                    var linkToInsert;
                    linkToInsert = 1 == LinkJQ.IsExternalUrl ? LinkJQ.CreateCurrentLink(!1, jQuery("#insert-internet-link-url").val(), jQuery("#insert-internet-link-name").val()) : LinkJQ.CreateCurrentLink(!1);
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedElement) {
                        impOperaction.Operation.AfterOperationJQ.Execute();
                        selectedElement.append(linkToInsert);
                        var undo = new impUndoManager.Manager.UndoManager();
                        undo.BeforeOperation();
                        jQuery("page a").not(".jq-logout").unbind("click");
                        jQuery("page a").not(".jq-logout").on("click", function() {
                            impCommonCode.ControlCommon.Code.AnchorClicked = !0;
                        });
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                    }
                    jQuery("#control-insert-link").hide();
                });
                jQuery(".insert-link-name").on("change", function() {
                    LinkJQ.IsExternalUrl = !1;
                    LinkJQ.CreateCurrentLink(!0);
                    jQuery(".insert-link-preview").find("a").text(jQuery(this).val());
                });
                jQuery("#control-insert-link").on("change", ".insert-link-links", function() {
                    LinkJQ.IsExternalUrl = !1;
                    jQuery(".insert-link-name").val(jQuery(".insert-link-links").find("option:selected").text());
                    var previewlink = LinkJQ.CreateCurrentLink(!0);
                    jQuery(".insert-link-preview").html(previewlink);
                    jQuery("#insert-internet-link-name").val("");
                    jQuery("#insert-internet-link-url").val("");
                });
            };
            LinkJQ.CreateCurrentLink = function(blankTarget, url, name) {
                var link, id;
                0 == blankTarget && (id = LinkJQ.GenerateId());
                void 0 == url && (url = jQuery(".insert-link-links").find("option:selected").val());
                var btnStyle = jQuery(".btn-style-selected").attr("btn-style");
                void 0 == btnStyle && (btnStyle = " btn-default ");
                void 0 == name && (name = jQuery(".insert-link-name").val());
                link = 1 == blankTarget ? "<span style='display:inline-block;;float:none;' class='key jq-normal-link jq-site-link-container  btn " + btnStyle + "'><a contentEditable='true' target='_blank' class='jq-site-link jqte-editor' href='" + url + "?nocache=true'>" + name + "</a></span>" : "<span style='display:inline-block' class='key jq-normal-link jq-site-link-container  btn " + btnStyle + "'><a contentEditable='true' id='" + id + "' class='jq-site-link jqte-editor ' href='" + url + "?nocache=true'>" + name + "</a></span>";
                return link;
            };
            LinkJQ.Show = function() {
                jQuery("#control-insert-link").show();
                jQuery(".jq-loading").show();
                LinkJQ.LoadLinks();
            };
            LinkJQ.Close = function() {};
            LinkJQ.ProcessSelectNotify = function() {};
            return LinkJQ;
        }();
        Link.LinkJQ = LinkJQ;
    }(Link = exports.Link || (exports.Link = {}));
});

define("Controls/HtmlJQ", [ "require", "exports", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../Controls/ControlCommonJQ", "jquery" ], function(require, exports, impWatch, impUndoManager, impCommonCode, jQuery) {
    "use strict";
    var Html, initOnceFlag = !1;
    !function(Html) {
        var HtmlJQ = function() {
            function HtmlJQ() {}
            HtmlJQ.prototype.Init = function() {
                if (0 == initOnceFlag) {
                    initOnceFlag = !0;
                    this.AttachEvents();
                }
            };
            HtmlJQ.prototype.AttachEvents = function() {
                jQuery(".action-button-insert-html-clear").on("click", function() {
                    jQuery(".input-html").val("");
                });
                jQuery(".action-button-insert-html").on("click", function() {
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedElement) {
                        var html = jQuery(".input-html").val(), htmlObj = jQuery(document.createElement("div"));
                        htmlObj.css("float", "left");
                        htmlObj.addClass("key empty-container design-empty-css");
                        htmlObj.css("height", "100px");
                        htmlObj.append(jQuery.parseHTML(html, document, !0));
                        jQuery(htmlObj).html();
                        selectedElement.append(htmlObj);
                        var undo = new impUndoManager.Manager.UndoManager();
                        undo.BeforeOperation();
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                    }
                    jQuery("#control-insert-html").hide();
                });
            };
            HtmlJQ.Show = function() {
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-insert-html").addClass("control-active");
                jQuery("#control-insert-html").show();
                jQuery(".input-html").val("");
            };
            HtmlJQ.Close = function() {};
            HtmlJQ.ProcessSelectNotify = function() {};
            return HtmlJQ;
        }();
        Html.HtmlJQ = HtmlJQ;
    }(Html = exports.Html || (exports.Html = {}));
});

define("Controls/MarginJQ", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../UndoManager/UndoManager", "jquery", "jqueryui" ], function(require, exports, impError, impWatch, impCommon, impUndoManager, jQuery, jQueryUI) {
    "use strict";
    var Margin, isBorderReady = !1, borderFirstTime = 0;
    !function(Margin) {
        var MarginJQ = function() {
            function MarginJQ() {}
            MarginJQ.prototype.Init = function() {
                MarginJQ.AttachMargin();
            };
            MarginJQ.AttachMargin = function() {
                jQuery(document).ready(function() {
                    if (0 == isBorderReady) {
                        isBorderReady = !0;
                        jQuery(".margin-advanced-show").on("click", function() {
                            jQuery(".jq-margin-advanced").fadeToggle(1);
                        });
                        jQuery(".control-margin-margin").spinner({
                            min: -1500,
                            max: 1500,
                            step: 1,
                            value: 0,
                            change: function(event, ui) {
                                0 == MarginJQ.isSelectProcessing && MarginJQ.OnChange(this);
                            },
                            spin: function(event, ui) {
                                0 == MarginJQ.isSelectProcessing && MarginJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == MarginJQ.isSelectProcessing && MarginJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            MarginJQ.OnChange = function($this) {
                MarginJQ.isSelectProcessing = !0;
                try {
                    if (0 != borderFirstTime) {
                        borderFirstTime = 1;
                        impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                    }
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    selectedElement.hasClass("key") || (selectedElement = selectedElement.closest(".key"));
                    if (void 0 != selectedElement) {
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        if (selectedElement.hasClass("column")) errorHandler.ActionHelp("Cannot change margin for [Column] blocks"); else {
                            jQuery($this).hasClass("control-margin-all") && jQuery($this).closest(".control-margin-controls").find(".control-margin-margin").not(".control-margin-all").spinner("value", jQuery($this).val());
                            var common = new impCommon.Common.CommonMethodsJQ(), left = jQuery($this).closest(".control-margin-controls").find(".control-margin-left").spinner("value"), top = jQuery($this).closest(".control-margin-controls").find(".control-margin-top").spinner("value"), right = jQuery($this).closest(".control-margin-controls").find(".control-margin-right").spinner("value"), bottom = jQuery($this).closest(".control-margin-controls").find(".control-margin-bottom").spinner("value");
                            void 0 != left && selectedElement.css("margin-left", left + "px");
                            void 0 != top && selectedElement.css("margin-top", top + "px");
                            void 0 != right && selectedElement.css("margin-right", right + "px");
                            void 0 != bottom && selectedElement.css("margin-bottom", bottom + "px");
                            if (0 == left && 0 == top && 0 == right && 0 == bottom) {
                                common.RemoveStyle(selectedElement, "margin-left");
                                common.RemoveStyle(selectedElement, "margin-top");
                                common.RemoveStyle(selectedElement, "margin-bottom");
                                common.RemoveStyle(selectedElement, "margin-right");
                                common.RemoveStyle(selectedElement, "margin");
                            }
                        }
                    }
                } catch (ex) {}
                MarginJQ.isSelectProcessing = !1;
            };
            MarginJQ.ProcessSelectedValues = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                selectedElement.hasClass("key") || (selectedElement = selectedElement.closest(".key"));
                MarginJQ.isSelectProcessing = !0;
                if (void 0 != selectedElement) {
                    var left = selectedElement.css("margin-left"), top = selectedElement.css("margin-top"), right = selectedElement.css("margin-right"), bottom = selectedElement.css("margin-bottom");
                    if (void 0 != left) {
                        left = left.replace("px", "");
                        jQuery(".control-margin-left").spinner("value", left);
                    }
                    if (void 0 != top) {
                        top = top.replace("px", "");
                        jQuery(".control-margin-top").spinner("value", top);
                    }
                    if (void 0 != right) {
                        right = right.replace("px", "");
                        jQuery(".control-margin-right").spinner("value", right);
                    }
                    if (void 0 != bottom) {
                        bottom = bottom.replace("px", "");
                        jQuery(".control-margin-bottom").spinner("value", bottom);
                    }
                    left == top && left == right && left == bottom && jQuery(".control-margin-all").spinner("value", left);
                }
                MarginJQ.isSelectProcessing = !1;
            };
            MarginJQ.ProcessSelectNotify = function() {
                MarginJQ.ProcessSelectedValues();
            };
            MarginJQ.controlId = ".control-margin";
            MarginJQ.isSelectProcessing = !1;
            return MarginJQ;
        }();
        Margin.MarginJQ = MarginJQ;
    }(Margin = exports.Margin || (exports.Margin = {}));
});

define("Controls/PaddingJQ", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../UndoManager/UndoManager", "jquery", "jqueryui" ], function(require, exports, impError, impWatch, impCommon, impUndoManager, jQuery, jQueryUI) {
    "use strict";
    var Padding, isBorderReady = !1, borderFirstTime = 0;
    !function(Padding) {
        var PaddingJQ = function() {
            function PaddingJQ() {}
            PaddingJQ.prototype.Init = function() {
                PaddingJQ.AttachPadding();
            };
            PaddingJQ.AttachPadding = function() {
                jQuery(document).ready(function() {
                    if (0 == isBorderReady) {
                        isBorderReady = !0;
                        jQuery(".padding-advanced-show").on("click", function() {
                            jQuery(".jq-padding-advanced").fadeToggle(1);
                        });
                        jQuery(".control-padding-padding").spinner({
                            min: 1,
                            max: 1500,
                            step: 1,
                            value: 0,
                            change: function(event, ui) {
                                0 == PaddingJQ.isSelectProcessing && PaddingJQ.OnChange(this);
                            },
                            spin: function(event, ui) {
                                0 == PaddingJQ.isSelectProcessing && PaddingJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == PaddingJQ.isSelectProcessing && PaddingJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            PaddingJQ.OnChange = function($this) {
                PaddingJQ.isSelectProcessing = !0;
                try {
                    if (0 != borderFirstTime) {
                        borderFirstTime = 1;
                        impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                    }
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                    if (void 0 != selectedElement) {
                        new impError.ErrorHandle.ErrorJQ();
                        jQuery($this).hasClass("control-padding-all") && jQuery(".control-padding-padding").not(".control-padding-all").spinner("value", jQuery($this).val());
                        var common = new impCommon.Common.CommonMethodsJQ(), left = jQuery(".control-padding-left").spinner("value"), top = jQuery(".control-padding-top").spinner("value"), right = jQuery(".control-padding-right").spinner("value"), bottom = jQuery(".control-padding-bottom").spinner("value");
                        void 0 != left && selectedElement.css("padding-left", left + "px");
                        void 0 != top && selectedElement.css("padding-top", top + "px");
                        void 0 != right && selectedElement.css("padding-right", right + "px");
                        void 0 != bottom && selectedElement.css("padding-bottom", bottom + "px");
                        if (0 == left && 0 == top && 0 == right && 0 == bottom) {
                            common.RemoveStyle(selectedElement, "padding-left");
                            common.RemoveStyle(selectedElement, "padding-top");
                            common.RemoveStyle(selectedElement, "padding-bottom");
                            common.RemoveStyle(selectedElement, "padding-right");
                            common.RemoveStyle(selectedElement, "padding");
                        }
                    }
                } catch (ex) {}
                PaddingJQ.isSelectProcessing = !1;
            };
            PaddingJQ.ProcessSelectedValues = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                PaddingJQ.isSelectProcessing = !0;
                if (void 0 != selectedElement) {
                    var left = selectedElement.css("padding-left"), top = selectedElement.css("padding-top"), right = selectedElement.css("padding-right"), bottom = selectedElement.css("padding-bottom");
                    if (void 0 != left) {
                        left = left.replace("px", "");
                        jQuery(".control-padding-left").spinner("value", left);
                    }
                    if (void 0 != top) {
                        top = top.replace("px", "");
                        jQuery(".control-padding-top").spinner("value", top);
                    }
                    if (void 0 != right) {
                        right = right.replace("px", "");
                        jQuery(".control-padding-right").spinner("value", right);
                    }
                    if (void 0 != bottom) {
                        bottom = bottom.replace("px", "");
                        jQuery(".control-padding-bottom").spinner("value", bottom);
                    }
                    left == top && left == right && left == bottom && jQuery(".control-padding-all").spinner("value", left);
                }
                PaddingJQ.isSelectProcessing = !1;
            };
            PaddingJQ.ProcessSelectNotify = function() {
                PaddingJQ.ProcessSelectedValues();
            };
            PaddingJQ.controlId = ".control-padding";
            PaddingJQ.isSelectProcessing = !1;
            return PaddingJQ;
        }();
        Padding.PaddingJQ = PaddingJQ;
    }(Padding = exports.Padding || (exports.Padding = {}));
});

define("Controls/FrontBackJQ", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "jquery", "jqueryui" ], function(require, exports, impError, impWatch, impUndoManager, jQuery, jQueryUI) {
    "use strict";
    var FrontBack, isFrontBackReady = !1, borderFirstTime = 0;
    !function(FrontBack) {
        var FrontBackJQ = function() {
            function FrontBackJQ() {}
            FrontBackJQ.prototype.Init = function() {
                FrontBackJQ.AttachFrontBack();
            };
            FrontBackJQ.AttachFrontBack = function() {
                jQuery(document).ready(function() {
                    if (0 == isFrontBackReady) {
                        isFrontBackReady = !0;
                        jQuery(".control-z-zindex").slider({
                            min: 1,
                            max: 500,
                            step: 1,
                            value: 0,
                            change: function(event, ui) {
                                0 == FrontBackJQ.isSelectProcessing && FrontBackJQ.OnChange(this);
                            },
                            spin: function(event, ui) {
                                0 == FrontBackJQ.isSelectProcessing && FrontBackJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == FrontBackJQ.isSelectProcessing && FrontBackJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            FrontBackJQ.OnChange = function($this) {
                FrontBackJQ.isSelectProcessing = !0;
                try {
                    if (0 != borderFirstTime) {
                        borderFirstTime = 1;
                        impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                    }
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedElement) {
                        new impError.ErrorHandle.ErrorJQ();
                        if (selectedElement.hasClass("image-text-other")) {
                            var zIndex = jQuery(".control-z-zindex").slider("value");
                            selectedElement.css("z-index", zIndex);
                        }
                    }
                } catch (ex) {}
                FrontBackJQ.isSelectProcessing = !1;
            };
            FrontBackJQ.ProcessSelectedValues = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                FrontBackJQ.isSelectProcessing = !0;
                if (void 0 != selectedElement && selectedElement.hasClass("image-text-other")) {
                    var zindex = selectedElement.css("z-index");
                    jQuery(".control-z-zindex").slider("value", zindex);
                }
                FrontBackJQ.isSelectProcessing = !1;
            };
            FrontBackJQ.ProcessSelectNotify = function() {
                FrontBackJQ.ProcessSelectedValues();
            };
            FrontBackJQ.isSelectProcessing = !1;
            return FrontBackJQ;
        }();
        FrontBack.FrontBackJQ = FrontBackJQ;
    }(FrontBack = exports.FrontBack || (exports.FrontBack = {}));
});

define("Controls/OpacityJQ", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "jquery", "jqueryui" ], function(require, exports, impError, impWatch, impUndoManager, jQuery, jQueryUI) {
    "use strict";
    var Opacity, isOpacityReady = !1, borderFirstTime = 0;
    !function(Opacity) {
        var OpacityJQ = function() {
            function OpacityJQ() {}
            OpacityJQ.prototype.Init = function() {
                OpacityJQ.AttachOpacity();
            };
            OpacityJQ.AttachOpacity = function() {
                jQuery(document).ready(function() {
                    if (0 == isOpacityReady) {
                        isOpacityReady = !0;
                        jQuery(".control-o-opacity").slider({
                            min: 0,
                            max: 1,
                            step: .1,
                            value: 1,
                            change: function(event, ui) {
                                0 == OpacityJQ.isSelectProcessing && OpacityJQ.OnChange(this);
                            },
                            slide: function(event, ui) {
                                0 == OpacityJQ.isSelectProcessing && OpacityJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == OpacityJQ.isSelectProcessing && OpacityJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            OpacityJQ.OnChange = function($this) {
                OpacityJQ.isSelectProcessing = !0;
                try {
                    if (0 != borderFirstTime) {
                        borderFirstTime = 1;
                        impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                    }
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                    if (void 0 != selectedElement) {
                        var opacity = (new impError.ErrorHandle.ErrorJQ(), jQuery(".control-o-opacity").slider("value"));
                        selectedElement.css("opacity", opacity);
                    }
                } catch (ex) {}
                OpacityJQ.isSelectProcessing = !1;
            };
            OpacityJQ.ProcessSelectedValues = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                OpacityJQ.isSelectProcessing = !0;
                if (void 0 != selectedElement) {
                    var opacity = selectedElement.css("opacity");
                    jQuery(".control-o-opacity").slider("value", opacity);
                }
                OpacityJQ.isSelectProcessing = !1;
            };
            OpacityJQ.ProcessSelectNotify = function() {
                OpacityJQ.ProcessSelectedValues();
            };
            OpacityJQ.isSelectProcessing = !1;
            return OpacityJQ;
        }();
        Opacity.OpacityJQ = OpacityJQ;
    }(Opacity = exports.Opacity || (exports.Opacity = {}));
});

define("Controls/BorderShadow", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../UndoManager/UndoManager", "jquery", "ColorPicker" ], function(require, exports, impError, impWatch, impCommon, impUndoManager, jQuery, ColorPicker) {
    "use strict";
    var BorderShadow, isBorderReady = !1;
    !function(BorderShadow) {
        var BorderShadowJQ = function() {
            function BorderShadowJQ() {}
            BorderShadowJQ.prototype.Init = function() {
                BorderShadowJQ.AttachBorder();
            };
            BorderShadowJQ.AttachBorder = function() {
                jQuery(document).ready(function() {
                    if (0 == isBorderReady) {
                        isBorderReady = !0;
                        jQuery(".b-s-remove").on("click", function() {
                            var cm = new impCommon.Common.CommonMethodsJQ();
                            jQuery(".control-b-s").spinner("value", 0);
                            jQuery(".b-s-color").val("000000").keyup();
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            cm.RemoveStyle(selectedElement, "box-shadow");
                            var undo = new impUndoManager.Manager.UndoManager();
                            undo.BeforeOperation();
                        });
                        jQuery(".b-s-glow").on("click", function() {
                            jQuery(".control-b-s").spinner("value", 0);
                            jQuery(".control-b-s-blur").spinner("value", 35);
                            jQuery(".b-s-color").val("0000FF").keyup();
                            var undo = new impUndoManager.Manager.UndoManager();
                            undo.BeforeOperation();
                        });
                        jQuery(".b-s-color").colorpicker();
                        jQuery(".b-s-colorr").trigger("keyup");
                        jQuery(".b-s-color").on("change", function() {
                            BorderShadowJQ.OnChange(this);
                        });
                        jQuery(".control-b-s").spinner({
                            min: -800,
                            max: 800,
                            step: 1,
                            value: 1,
                            change: function(event, ui) {
                                0 == BorderShadowJQ.isSelectProcessing && BorderShadowJQ.OnChange(this);
                            },
                            spin: function(event, ui) {
                                0 == BorderShadowJQ.isSelectProcessing && BorderShadowJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == BorderShadowJQ.isSelectProcessing && BorderShadowJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            BorderShadowJQ.OnChange = function($this) {
                BorderShadowJQ.isSelectProcessing = !0;
                try {
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                    if (void 0 != selectedElement) {
                        var h = (new impError.ErrorHandle.ErrorJQ(), jQuery(".control-b-s-h").spinner("value")), v = jQuery(".control-b-s-v").spinner("value"), blur = jQuery(".control-b-s-blur").spinner("value"), color = jQuery(".b-s-color").val();
                        if ("" == color) color = "#000000"; else {
                            color = color.replace("#", "");
                            color = "#" + color;
                        }
                        var borderShadow = h + "px " + v + "px " + blur + "px " + color;
                        selectedElement.css("box-shadow", borderShadow);
                    }
                } catch (ex) {}
                BorderShadowJQ.isSelectProcessing = !1;
            };
            BorderShadowJQ.ProcessSelectedValues = function() {
                impWatch.Watch.MouseJQ.selectedElement;
            };
            BorderShadowJQ.ProcessSelectNotify = function() {
                BorderShadowJQ.ProcessSelectedValues();
            };
            BorderShadowJQ.i = 0;
            BorderShadowJQ.isSelectProcessing = !1;
            return BorderShadowJQ;
        }();
        BorderShadow.BorderShadowJQ = BorderShadowJQ;
    }(BorderShadow = exports.BorderShadow || (exports.BorderShadow = {}));
});

define("ContextMenu/Contextmenujq", [ "require", "exports", "../Watch/WatchMouseJQ", "../Controls/ControlsJQ", "../Watch/CopyPasteJQ", "../Controls/ImageJQ", "../Controls/BorderJQ", "../Controls/ColorJQ", "../Controls/TextJQ", "../SmartMenu/SmartMenuJQ", "../Controls/Menujq", "../Controls/BIjq", "../Controls/SpacerJQ", "../Controls/LinkJQ", "../Controls/HtmlJQ", "../Controls/MarginJQ", "../Controls/PaddingJQ", "../Controls/FrontBackJQ", "../Controls/OpacityJQ", "../Controls/BorderShadow", "jquery" ], function(require, exports, impWatch, impAddRowControl, impCopy, impInsertImage, impBorder, impColor, impText, impHeightWidth, impMenuControl, impBi, impSpacer, impLink, impHtml, impMargin, impPadding, impFrontBack, impOpacity, impBorderShadow, jQuery) {
    "use strict";
    var ContextMenu, G_isAttachedContextMenu = !1, CTX_MENU_DISABLED_CLASS = "ctx-menu-disabled", ctxMenuIsReady = !1;
    !function(ContextMenu) {
        var ContextMenuJQ = function() {
            function ContextMenuJQ(extra) {
                this.controlId = "#contextMenu";
            }
            ContextMenuJQ.prototype.Init = function() {
                this.MainEvents();
            };
            ContextMenuJQ.ContextMenuBinding = function() {
                jQuery(document).on("click", function(e) {
                    var contextMenu = new ContextMenuJQ();
                    contextMenu.DetectContextMenu();
                });
                jQuery(document).bind("contextmenu", function(e) {
                    impWatch.Watch.MouseJQ.ProcessClick(e);
                    window.setTimeout(function() {
                        try {
                            impWatch.Watch.MouseJQ.nearestElement = jQuery("#nononononelement");
                            var x = e.clientX, y = e.clientY + jQuery(document).scrollTop();
                            jQuery(".nearest-element").removeClass("nearest-element");
                            var column = impWatch.Watch.MouseJQ.selectedElement;
                            impWatch.Watch.MouseJQ.selectedElement.hasClass("image-text-other") && (column = impWatch.Watch.MouseJQ.selectedElement.closest(".column"));
                            if (column.hasClass("column")) {
                                var $elements = impWatch.Watch.MouseJQ.selectedElement.find(".image-text-other"), nearestLeftArray = [], nearestTopArray = [];
                                if ($elements.length > 0) {
                                    $elements.each(function(index, _this) {
                                        var $this = jQuery(_this), top = parseFloat($this.attr("top")), bottom = parseFloat($this.attr("bottom")), left = parseFloat($this.attr("left"));
                                        if (y >= top && bottom >= y && x >= left) {
                                            nearestLeftArray.push(left);
                                            nearestTopArray.push(top);
                                        }
                                    });
                                    var nearestLeft = 0, nearestTop = 0;
                                    nearestLeftArray.length > 0 && (nearestLeft = Math.max.apply(Math, nearestLeftArray));
                                    nearestTopArray.length > 0 && (nearestTop = Math.max.apply(Math, nearestTopArray));
                                    column.find(".image-text-other[left='" + nearestLeft + "'][top='" + nearestTop + "']").addClass("nearest-element");
                                    impWatch.Watch.MouseJQ.nearestElement = jQuery(".nearest-element").first();
                                }
                            }
                        } catch (ex) {}
                    }, 5);
                    e.preventDefault();
                    var contextMenu = new ContextMenuJQ();
                    contextMenu.DetectContextMenu();
                    var pageY = e.clientY;
                    pageY >= 350 && (pageY -= jQuery("#contextMenu").height());
                    var pageX = e.clientX;
                    pageX > jQuery(document).width() - 200 && (pageX -= 150);
                    jQuery(contextMenu.controlId).css("left", pageX + "px");
                    jQuery(contextMenu.controlId).css("top", pageY + "px");
                    jQuery(contextMenu.controlId).fadeIn(500);
                    e.cancelBubble = !1;
                });
            };
            ContextMenuJQ.prototype.DetectContextMenu = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selectedElement) {
                    jQuery(".ctx-menu-add-row").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-cut").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-copy").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-paste").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-text").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-image").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-youtube").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-html").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-css").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-menu").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-empty-space").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-link").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-object").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-delete-element").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    selectedElement.hasClass("root-elements") && jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    if (selectedElement.hasClass("jqRootRow")) {
                        jQuery(".ctx-menu-cut").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-copy").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-paste").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    }
                    if (selectedElement.hasClass("column")) {
                        jQuery(".ctx-menu-paste").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert-image").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    }
                    if (selectedElement.hasClass("image-text-other")) {
                        jQuery(".ctx-menu-cut").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-copy").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-paste").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert-image").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    }
                    if (selectedElement.hasClass("page")) {
                        jQuery(".ctx-menu-add-row").parent().addClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-height-width").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    }
                    selectedElement.hasClass("row") && jQuery(".ctx-menu-add-row").parent().addClass(CTX_MENU_DISABLED_CLASS);
                }
            };
            ContextMenuJQ.AttachDeleteElement = function() {
                jQuery(".li.ctx-menu-delete-element").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.DeleteElement();
                });
            };
            ContextMenuJQ.AttachInsertLinkContainer = function() {
                jQuery(".li.ctx-menu-insert-link-container").on("click", function() {
                    window.smartObj = null;
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || impCopy.CopyPaste.CopyPasteJQ.CreateLinkContainer();
                });
            };
            ContextMenuJQ.AttachInsertLink = function() {
                new impLink.Link.LinkJQ().Init();
                jQuery(".ctx-menu-insert-link").on("click", function() {
                    window.smartObj = null;
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowControlInsertLink();
                        impLink.Link.LinkJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachInsertHTML = function() {
                new impHtml.Html.HtmlJQ().Init();
                jQuery(".ctx-menu-insert-html").on("click", function() {
                    window.smartObj = null;
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.ShowControlInsertHTML();
                });
            };
            ContextMenuJQ.AttachInsertText = function() {
                jQuery(".li.smart-menu-insert-text").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("Sample text to edit");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".li.ctx-menu-insert-text").on("click", function() {
                    window.smartObj = null;
                    impText.Text.TextJQ.InsertTextBlock("Sample text to edit");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-normal-text").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock(" Sample text to edit");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-1").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h1> Heading1 to edit</h1>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-2").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h2> Heading2 to edit</h2>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-3").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h3> Heading3 to edit</h3>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-4").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h4> Heading4 to edit</h4>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-5").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h5> Heading5 to edit</h5>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
            };
            ContextMenuJQ.AttachControlPageClose = function() {
                jQuery(".control-templates").find(".close-button").on("click", function() {
                    jQuery(".control-page").removeClass("control-active");
                    ContextMenuJQ.ShowProperties();
                });
                jQuery(".control-page").find(".close-button").on("click", function() {
                    jQuery(".control-page").removeClass("control-active");
                    ContextMenuJQ.ShowProperties();
                    jQuery(".internet-bi-image-url").val("");
                    jQuery(".internet-image-url").val("");
                });
            };
            ContextMenuJQ.ShowProperties = function() {
                jQuery(".jq-properties-all").hasClass("forced-hide") || jQuery(".jq-properties-all").show();
            };
            ContextMenuJQ.ControlPageHide = function() {
                jQuery(".control-page").hide();
                jQuery(".control-page").attr("style", "");
                jQuery(".control-page").css("display", "none");
                jQuery(".control-page").removeClass("control-active");
                if ("block" == jQuery(".jq-properties-all").css("display")) {
                    jQuery(".jq-properties-all").addClass("normal-hide");
                    jQuery(".jq-properties-all").hide();
                } else jQuery(".jq-properties-all").hasClass("forced-hide") || jQuery(".jq-properties-all").show();
            };
            ContextMenuJQ.ShowControlInsertLink = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-insert-link").addClass("control-active");
                impLink.Link.LinkJQ.Show();
            };
            ContextMenuJQ.ShowControlInsertHTML = function() {
                ContextMenuJQ.ControlPageHide();
                impHtml.Html.HtmlJQ.Show();
            };
            ContextMenuJQ.ShowControlInsertText = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".editor").show();
                jQuery(".jqte-editor, .column").removeClass("current-editor-scope");
                jQuery(this).find(".jqte-editor").addClass("current-editor-scope");
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-insert-text").addClass("control-active");
                jQuery("#control-insert-text").show();
                jQuery("#control-insert-text").trigger("cust_loaded");
            };
            ContextMenuJQ.ShowControlAddRow = function() {
                ContextMenuJQ.ControlPageHide();
                var controlId = impAddRowControl.Page.AddRowJQ.pageId;
                jQuery(".control-page").removeClass("control-active");
                jQuery(controlId).addClass("control-active");
                jQuery(controlId).show();
                jQuery(controlId).trigger("cust_loaded");
            };
            ContextMenuJQ.ShowMenu = function() {
                new impMenuControl.Menu.MenuJQ().Init();
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery(".control-menu").addClass("control-active");
                jQuery(".control-menu").show();
                impMenuControl.Menu.MenuJQ.ProcessShow();
            };
            ContextMenuJQ.InsertImage = function() {
                ContextMenuJQ.ControlPageHide();
                var controlId = impInsertImage.Image.SelfJQ.controlId;
                jQuery(".control-page").removeClass("control-active");
                jQuery(controlId).addClass("control-active");
                jQuery(".action-button-insert-image").show();
                jQuery(".action-button-change-image").hide();
                jQuery(controlId).show();
                jQuery(controlId).trigger("custom_loaded");
            };
            ContextMenuJQ.CopyElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Copy();
            };
            ContextMenuJQ.DeleteElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Delete();
            };
            ContextMenuJQ.CutElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Cut();
            };
            ContextMenuJQ.PasteElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Paste();
            };
            ContextMenuJQ.PasteClipBorad = function() {
                jQuery(".jq-clipboard").html("");
                jQuery("#control-insert-clipboard").show();
            };
            ContextMenuJQ.ShowControlHeightWidth = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-height-width").addClass("control-active");
                jQuery("#control-height-width").show();
            };
            ContextMenuJQ.ShowBorderControl = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-border").addClass("control-active");
                jQuery("#control-border").show();
            };
            ContextMenuJQ.ShowMarginControl = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-margin").addClass("control-active");
                jQuery("#control-margin").show();
            };
            ContextMenuJQ.ShowPaddingControl = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-padding").addClass("control-active");
                jQuery("#control-padding").show();
            };
            ContextMenuJQ.ShowOpacity = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-opacity").addClass("control-active");
                jQuery("#control-opacity").show();
            };
            ContextMenuJQ.ShowZindex = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-zindex").addClass("control-active");
                jQuery("#control-zindex").show();
            };
            ContextMenuJQ.ShowBS = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-border-shadow").addClass("control-active");
                jQuery("#control-border-shadow").show();
            };
            ContextMenuJQ.ShowColor = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-color").addClass("control-active");
                jQuery("#control-color").show();
            };
            ContextMenuJQ.ShowBackgroundImage = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-bi").addClass("control-active");
                jQuery("#control-bi").show();
            };
            ContextMenuJQ.AttachAddRow = function() {
                jQuery(".li.ctx-menu-add-row").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowControlAddRow();
                        impAddRowControl.Page.AddRowJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachHeightWidth = function() {
                jQuery(".li.ctx-menu-height-width").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowControlHeightWidth();
                        impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachBorder = function() {
                new impBorder.Border.BorderJQ().Init();
                jQuery(".li.ctx-menu-border").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowBorderControl();
                        impBorder.Border.BorderJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachMargin = function() {
                new impMargin.Margin.MarginJQ().Init();
                jQuery(".li.ctx-menu-margin").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowMarginControl();
                        impMargin.Margin.MarginJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachPadding = function() {
                new impPadding.Padding.PaddingJQ().Init();
                jQuery(".li.ctx-menu-padding").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowPaddingControl();
                        impPadding.Padding.PaddingJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachOpacity = function() {
                new impOpacity.Opacity.OpacityJQ().Init();
                jQuery(".li.ctx-menu-opacity").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowOpacity();
                        impOpacity.Opacity.OpacityJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachZindex = function() {
                new impFrontBack.FrontBack.FrontBackJQ().Init();
                jQuery(".li.ctx-menu-z-index").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowZindex();
                        impFrontBack.FrontBack.FrontBackJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachBorderShadow = function() {
                new impBorderShadow.BorderShadow.BorderShadowJQ().Init();
                jQuery(".li.ctx-menu-border-shadow").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowBS();
                        impBorderShadow.BorderShadow.BorderShadowJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachCopy = function() {
                jQuery(".li.ctx-menu-copy").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.CopyElement();
                });
            };
            ContextMenuJQ.AttachCut = function() {
                jQuery(".li.ctx-menu-cut").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.CutElement();
                });
            };
            ContextMenuJQ.AttachPaste = function() {
                jQuery(".li.ctx-menu-paste").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.PasteElement();
                });
            };
            ContextMenuJQ.AttachPasteClipBorad = function() {
                jQuery(".li.ctx-menu-paste-clipborad").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.PasteClipBorad();
                });
            };
            ContextMenuJQ.AttachSpacer = function() {
                jQuery(".smart-menu-insert-empty-space").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || impSpacer.Spacer.SpacerJQ.InsertSpacer();
                });
                jQuery(".ctx-menu-insert-empty-space").on("click", function() {
                    window.smartObj = null;
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || impSpacer.Spacer.SpacerJQ.InsertSpacer();
                });
            };
            ContextMenuJQ.AttachInsertImage = function() {
                new impInsertImage.Image.SelfJQ().Init();
                jQuery(".li.smart-menu-insert-image").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.InsertImage();
                        impInsertImage.Image.SelfJQ.ProcessSelectNotify();
                    }
                });
                jQuery(".li.ctx-menu-insert-image").on("click", function() {
                    window.smartObj = null;
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.InsertImage();
                        impInsertImage.Image.SelfJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachBackgroundImage = function() {
                new impBi.BI.BIJQ().Init();
                jQuery(".li.ctx-menu-background-image").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowBackgroundImage();
                        impBi.BI.BIJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachInsertMenu = function() {
                jQuery(".li.ctx-menu-insert-menu").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowMenu();
                        impMenuControl.Menu.MenuJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachColor = function() {
                new impColor.Color.ColorJQ().Init();
                jQuery(".li.ctx-menu-color").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowColor();
                        impColor.Color.ColorJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.ContextInnerMenuShowHide = function() {
                jQuery("#contextMenuitems").find(".li").on("mouseenter", function(e) {
                    var left = 147;
                    e.pageX > jQuery(document).width() - 200 && (left = -150);
                    jQuery(this).parent().find(".innerListContainer").first().css("left", left + "px");
                    jQuery(this).parent().find(".innerListContainer").first().css("display", "block");
                });
                jQuery("#contextMenuitems").find("li").on("mouseleave", function(e) {
                    jQuery(this).find(".innerListContainer").first().css("display", "none");
                });
            };
            ContextMenuJQ.LiClick = function() {
                jQuery("#contextMenuitems > li").on("click", function() {});
            };
            ContextMenuJQ.prototype.MainEvents = function() {
                jQuery(document).ready(function() {
                    if (0 == ctxMenuIsReady) {
                        ctxMenuIsReady = !0;
                        jQuery(document).on("click", function() {
                            jQuery("#contextMenu").hide(500);
                            jQuery("#smInsertNextPrev").hide(500);
                        });
                        if (0 == G_isAttachedContextMenu) {
                            G_isAttachedContextMenu = !0;
                            ContextMenuJQ.ContextMenuBinding();
                            ContextMenuJQ.LiClick();
                            ContextMenuJQ.ContextInnerMenuShowHide();
                            ContextMenuJQ.AttachInsertLinkContainer();
                            ContextMenuJQ.AttachInsertLink();
                            ContextMenuJQ.AttachInsertHTML();
                            ContextMenuJQ.AttachInsertText();
                            ContextMenuJQ.AttachAddRow();
                            ContextMenuJQ.AttachDeleteElement();
                            ContextMenuJQ.AttachHeightWidth();
                            ContextMenuJQ.AttachCopy();
                            ContextMenuJQ.AttachPaste();
                            ContextMenuJQ.AttachPasteClipBorad();
                            ContextMenuJQ.AttachCut();
                            ContextMenuJQ.AttachInsertImage();
                            ContextMenuJQ.AttachSpacer();
                            ContextMenuJQ.AttachBorder();
                            ContextMenuJQ.AttachMargin();
                            ContextMenuJQ.AttachZindex();
                            ContextMenuJQ.AttachBorderShadow();
                            ContextMenuJQ.AttachOpacity();
                            ContextMenuJQ.AttachPadding();
                            ContextMenuJQ.AttachColor();
                            ContextMenuJQ.AttachInsertMenu();
                            ContextMenuJQ.AttachBackgroundImage();
                            ContextMenuJQ.AttachControlPageClose();
                        }
                    }
                });
            };
            return ContextMenuJQ;
        }();
        ContextMenu.ContextMenuJQ = ContextMenuJQ;
    }(ContextMenu = exports.ContextMenu || (exports.ContextMenu = {}));
});

define("controls/bijq", [ "require", "exports", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../controls/imagejq", "jquery", "jqueryui" ], function(require, exports, impWatch, impUnodManager, impImage, jQuery, jQueryUI) {
    "use strict";
    var BI, isBIJQReady = !1;
    !function(BI) {
        var BIJQ = function() {
            function BIJQ() {}
            BIJQ.prototype.Init = function() {
                jQuery(document).ready(function() {
                    if (0 == isBIJQReady) {
                        isBIJQReady = !0;
                        jQuery(".smart-menu-bi-control").spinner({
                            min: 0,
                            max: 2e3,
                            step: 1,
                            change: function(event, ui) {},
                            spin: function(event, ui) {
                                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                                selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                                if (void 0 != selectedElement) {
                                    var height = jQuery(".smart-menu-bi-height").spinner("value"), width = jQuery(".smart-menu-bi-width").spinner("value");
                                    selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                }
                            },
                            stop: function(event, ui) {
                                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                                selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                                if (void 0 != selectedElement) {
                                    var height = jQuery(".smart-menu-bi-height").spinner("value"), width = jQuery(".smart-menu-bi-width").spinner("value");
                                    selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                    var undo = new impUnodManager.Manager.UndoManager();
                                    undo.BeforeOperation();
                                }
                            }
                        });
                        jQuery(".bi-browse").on("click", function() {
                            impImage.Image.SelfJQ.GetImages();
                            jQuery("#control-image-bi-library").show();
                        });
                        jQuery(".make-100").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                jQuery(".ddn-bi-pixel-type").val("%");
                                var height = 100;
                                jQuery(".smart-menu-bi-height").spinner("value", height);
                                var width = 100;
                                jQuery(".smart-menu-bi-width").spinner("value", width);
                                selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".ddn-bi-pixel-type").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                var height = jQuery(".smart-menu-bi-height").spinner("value"), width = jQuery(".smart-menu-bi-width").spinner("value");
                                selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".action-button-insert-bi-image").on("click", function() {
                            var src = jQuery(".image-library-bi-select").first().attr("src");
                            jQuery(".bi-selected-image").val(src).change();
                            jQuery(".image-library-image").removeClass("image-library-bi-select");
                            jQuery("#control-image-bi-library").hide();
                        });
                        jQuery(".control-bi-controls .bi-selected-image").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            var applyToBody = jQuery(".bi-body").is(":checked");
                            if (1 == applyToBody) {
                                jQuery("page").css("background-image", "url('" + jQuery(this).val() + "')");
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            } else if (void 0 != selectedElement) {
                                selectedElement.css("background-image", "url('" + jQuery(this).val() + "')");
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .internet-bi-image-url").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-image", "url(" + jQuery(this).val() + ")");
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .ddn-bi-repeat").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-repeat", jQuery(this).val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .ddn-bi-attachment").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-attachment", jQuery(this).val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .ddn-bi-position").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-position", jQuery(this).val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            BIJQ.ProcessSelectNotify = function() {
                BIJQ.isSelectProcessing = !0;
                try {
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-plus-container-text"));
                    if (void 0 != selectedElement) {
                        var bi = selectedElement.css("background-image").replace("url(", "").replace(")", "");
                        jQuery(".bi-selected-image").val(bi);
                        var repeat = selectedElement.css("background-repeat");
                        jQuery(".ddn-bi-repeat").val(repeat);
                        var attachment = selectedElement.css("background-attachment");
                        jQuery(".ddn-bi-attachment").val(attachment);
                        var position = selectedElement.css("background-position");
                        jQuery(".ddn-bi-position").val(position);
                        var backgroundSize = selectedElement.css("background-size");
                        if (void 0 != backgroundSize) {
                            var wh = backgroundSize.split(" ");
                            if (wh.length >= 2) {
                                var width = wh[0], heigth = wh[1];
                                jQuery(".ddn-bi-pixel-type").val("px");
                                width = width.replace("px", "");
                                heigth = heigth.replace("px", "");
                                jQuery(".smart-menu-bi-height").spinner("value", heigth);
                                jQuery(".smart-menu-bi-width").spinner("value", width);
                            } else {
                                jQuery(".smart-menu-bi-height").spinner("value", 0);
                                jQuery(".smart-menu-bi-width").spinner("value", 0);
                            }
                        }
                    }
                } catch (ex) {}
                BIJQ.isSelectProcessing = !1;
            };
            BIJQ.isSelectProcessing = !1;
            return BIJQ;
        }();
        BI.BIJQ = BIJQ;
    }(BI = exports.BI || (exports.BI = {}));
});

define("Watch/WatchMouseJQ", [ "require", "exports", "../Common/CommonMethodsJQ", "../Controls/ControlsJQ", "../Controls/TextJQ", "../Controls/ImageJQ", "../Controls/FontJQ", "../Controls/BorderJQ", "../Controls/ColorJQ", "../SmartMenu/SmartMenuJQ", "../Error/ErrorJQ", "../ContextMenu/Contextmenujq", "../controls/bijq", "../JQte/OnInsert", "../MalFormed/MalFormedJQ", "../Controls/ControlCommonJQ", "../Controls/MarginJQ", "../Controls/PaddingJQ", "../Controls/FrontBackJQ", "../Watch/CopyPasteJQ", "../Controls/OpacityJQ", "jquery" ], function(require, exports, impCommon, impAddRow, impText, impImage, impFont, impBorder, impColor, impHeightWidth, impError, impCtxMenu, impBi, impOnInsert, impmal, impCommonCode, impMargin, impPadding, impFrontBack, impCopy, impOpacity, jQuery) {
    "use strict";
    var Watch, G_isAttachedWatch = !1;
    !function(Watch) {
        var MouseJQ = function() {
            function MouseJQ() {}
            MouseJQ.RemoveAndResetRemovableRow = function() {
                if (jQuery(".removable-row").length > 0) {
                    jQuery(".removable-row").removeClass("removable-row");
                    jQuery(".columns-pending").removeClass("columns-pending");
                    MouseJQ.selectedElement = jQuery("#nononoelement");
                }
                if (void 0 == MouseJQ.selectedElement) {
                    var errorHandler = new impError.ErrorHandle.ErrorJQ();
                    errorHandler.ActionHelp("Please select a element.");
                }
            };
            MouseJQ.ProcessMove = function(e) {
                if (!jQuery("page").hasClass("dragging") && !jQuery("page").hasClass("resizing")) {
                    var $target = jQuery(event.target);
                    $target.hasClass("key") || ($target = $target.closest(".key"));
                    jQuery(".key").removeClass("control-focused");
                    $target.addClass("control-focused");
                }
            };
            MouseJQ.ProcessClick = function(e) {
                new impCommon.Common.CommonMethodsJQ();
                jQuery(".column").removeClass("newly-added-column");
                if ("inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display") && 1 != impmal.MalFormed.MalFormedJQ.IsMalFormed) {
                    if (void 0 != MouseJQ.selectedElement && 0 == e.ctrlKey) {
                        MouseJQ.selectedElement.removeClass("image-selection");
                        MouseJQ.selectedElement.removeClass("design-select-element-just-mark");
                    }
                    0 == e.ctrlKey && jQuery(".image-selection").removeClass("image-selection");
                    MouseJQ.selectedElement = jQuery(e.target);
                    MouseJQ.selectedElement = MouseJQ.selectedElement.closest(".key");
                    0 == MouseJQ.selectedElement.hasClass("key") && (MouseJQ.selectedElement = jQuery("#noelement"));
                    MouseJQ.selectedElement.hasClass("column") ? jQuery(".selected-display-element").text("Column") : MouseJQ.selectedElement.hasClass("row") ? jQuery(".selected-display-element").text("Row") : MouseJQ.selectedElement.hasClass("empty-container-text") || MouseJQ.selectedElement.hasClass("jq-plus-container-text") ? jQuery(".selected-display-element").text("Text Block") : MouseJQ.selectedElement.hasClass("empty-container-image") ? jQuery(".selected-display-element").text("Image") : MouseJQ.selectedElement.hasClass("jq-normal-link") ? jQuery(".selected-display-element").text("Link") : MouseJQ.selectedElement.hasClass("page") && jQuery(".selected-display-element").text("Page");
                    if (!MouseJQ.selectedElement.hasClass("empty-container-text") && !MouseJQ.selectedElement.hasClass("jq-plus-container-text")) {
                        jQuery(".empty-container-text").draggable({
                            disabled: !1
                        });
                        jQuery(".editor").hide();
                        jQuery("page .empty-container-text").find(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "move");
                    }
                    if (1 == MouseJQ.selectedElement.hasClass("column")) {
                        jQuery(".design-page-row").hide();
                        MouseJQ.selectedElement.parent().children(".design-page-row").show();
                    } else if (1 == MouseJQ.selectedElement.hasClass("row")) {
                        jQuery(".design-page-row").hide();
                        MouseJQ.selectedElement.children(".design-page-row").show();
                    } else if (1 == MouseJQ.selectedElement.hasClass("image-text-other")) {
                        jQuery(".design-page-row").hide();
                        MouseJQ.selectedElement.parent().parent().children(".design-page-row").show();
                    } else jQuery(".design-page-row").hide();
                    MouseJQ.selectedElement.addClass("design-select-element-just-mark");
                    impAddRow.Page.AddRowJQ.ProcessSelectNotify();
                    var activeControl = MouseJQ.GetActiveControl(), activeSBControl = MouseJQ.GetActiveSidebarControl();
                    if (void 0 != activeControl && "" != activeControl) switch (activeControl.toLowerCase()) {
                      case "add-row":
                        break;

                      case "height-width":
                        impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                        break;

                      case "image-library":
                        impImage.Image.SelfJQ.ProcessSelectNotify();
                        break;

                      case "color":
                        impColor.Color.ColorJQ.ProcessSelectNotify();
                        break;

                      case "border":
                        impBorder.Border.BorderJQ.ProcessSelectNotify();
                        break;

                      case "insert-text":
                        impText.Text.TextJQ.ProcessSelectNotify();
                        break;

                      case "bi":
                        impBi.BI.BIJQ.ProcessSelectNotify();
                        break;

                      case "margin":
                        impMargin.Margin.MarginJQ.ProcessSelectNotify();
                        break;

                      case "padding":
                        impPadding.Padding.PaddingJQ.ProcessSelectNotify();
                        break;

                      case "zindex":
                        impFrontBack.FrontBack.FrontBackJQ.ProcessSelectNotify();
                        break;

                      case "opacity":
                        impOpacity.Opacity.OpacityJQ.ProcessSelectNotify();
                    }
                    if (void 0 != activeSBControl && "" != activeSBControl) switch (activeSBControl.toLowerCase()) {
                      case "add-row":
                        break;

                      case "height-width":
                        impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                        break;

                      case "image-library":
                        impImage.Image.SelfJQ.ProcessSelectNotify();
                        break;

                      case "color":
                        impColor.Color.ColorJQ.ProcessSelectNotify();
                        break;

                      case "border":
                        impBorder.Border.BorderJQ.ProcessSelectNotify();
                        break;

                      case "insert-text":
                        impText.Text.TextJQ.ProcessSelectNotify();
                        break;

                      case "bi":
                        impBi.BI.BIJQ.ProcessSelectNotify();
                        break;

                      case "margin":
                        impMargin.Margin.MarginJQ.ProcessSelectNotify();
                        break;

                      case "padding":
                        impPadding.Padding.PaddingJQ.ProcessSelectNotify();
                        break;

                      case "zindex":
                        impFrontBack.FrontBack.FrontBackJQ.ProcessSelectNotify();
                        break;

                      case "opacity":
                        impOpacity.Opacity.OpacityJQ.ProcessSelectNotify();
                    }
                    try {
                        if ("none" != jQuery(".jq-properties-all").css("display").toLowerCase()) {
                            impColor.Color.ColorJQ.ProcessSelectNotify();
                            impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                            impBorder.Border.BorderJQ.ProcessSelectNotify();
                            impFont.Font.FontJQ.ProcessSelectNotify();
                            impBi.BI.BIJQ.ProcessSelectNotify();
                        }
                    } catch (ex) {}
                    if (void 0 != MouseJQ.selectedElement && !MouseJQ.selectedElement.hasClass("jqte") && "inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display")) {
                        1 == e.ctrlKey && MouseJQ.selectedElement.hasClass("image-selection") ? MouseJQ.selectedElement.removeClass("image-selection") : MouseJQ.selectedElement.addClass("image-selection");
                        1 == e.ctrlKey && (MouseJQ.selectedElement = jQuery(".image-selection"));
                    }
                    try {
                        var box = jQuery(MouseJQ.selectedElement)[0].getBoundingClientRect(), circleLeftTopElement = jQuery("<div class='circle-deg' style='width:14px; border-radius:50%; height:14px; border:2px solid white; position:absolute; background-color:#00A1FF;'></div>"), circleRightTopElement = jQuery(circleLeftTopElement).clone(), circleLeftBottomElement = jQuery(circleLeftTopElement).clone(), circleRightBottomElement = jQuery(circleLeftTopElement).clone();
                        circleRightBottomElement.addClass("z-index-back");
                        var body = document.body, docElem = document.documentElement, scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop, scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft, clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, top = box.top + scrollTop - clientTop, left = box.left + scrollLeft - clientLeft, width = jQuery(MouseJQ.selectedElement).css("width"), height = jQuery(MouseJQ.selectedElement).css("height"), widthf = parseFloat(width.replace("px", "")), heightf = parseFloat(height.replace("px", ""));
                        circleLeftTopElement.css("left", left - 5);
                        circleLeftTopElement.css("top", top - 5);
                        circleLeftBottomElement.css("left", left - 5);
                        circleLeftBottomElement.css("top", top + heightf - 5);
                        circleRightTopElement.css("left", left + widthf - 7);
                        circleRightTopElement.css("top", top - 5);
                        circleRightBottomElement.css("left", left + widthf - 7);
                        circleRightBottomElement.css("top", top + heightf - 5);
                        jQuery(".circle-deg").remove();
                        jQuery("body").append(circleLeftTopElement);
                        jQuery("body").append(circleLeftBottomElement);
                        jQuery("body").append(circleRightTopElement);
                        jQuery("body").append(circleRightBottomElement);
                    } catch (ex) {}
                }
            };
            MouseJQ.GetActiveControl = function() {
                for (var activeControl = "", controls = jQuery(".control-page"), i = 0; i < controls.length; i++) if ("block" == jQuery(controls[i]).css("display")) {
                    activeControl = jQuery(controls[i]).attr("name");
                    break;
                }
                return activeControl;
            };
            MouseJQ.ResetAfterClear = function() {
                var activeSBControl = MouseJQ.GetActiveSidebarControl();
                if (void 0 != activeSBControl && "" != activeSBControl) switch (activeSBControl.toLowerCase()) {
                  case "add-row":
                    break;

                  case "height-width":
                    impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                    break;

                  case "image-library":
                    impImage.Image.SelfJQ.ProcessSelectNotify();
                    break;

                  case "color":
                    impColor.Color.ColorJQ.ProcessSelectNotify();
                    break;

                  case "border":
                    impBorder.Border.BorderJQ.ProcessSelectNotify();
                    break;

                  case "insert-text":
                    impText.Text.TextJQ.ProcessSelectNotify();
                    break;

                  case "bi":
                    impBi.BI.BIJQ.ProcessSelectNotify();
                    break;

                  case "margin":
                    impMargin.Margin.MarginJQ.ProcessSelectNotify();
                    break;

                  case "padding":
                    impPadding.Padding.PaddingJQ.ProcessSelectNotify();
                    break;

                  case "zindex":
                    impFrontBack.FrontBack.FrontBackJQ.ProcessSelectNotify();
                    break;

                  case "opacity":
                    impOpacity.Opacity.OpacityJQ.ProcessSelectNotify();
                }
            };
            MouseJQ.GetActiveSidebarControl = function() {
                var activeControl = "", activeControl = jQuery(".prop-sb.ui-accordion-header-active").first().attr("name");
                return activeControl;
            };
            MouseJQ.prototype.WatchPage = function() {
                jQuery(document).ready(function() {
                    if (0 == G_isAttachedWatch) {
                        G_isAttachedWatch = !0;
                        jQuery(".prop-sb").click(function() {
                            impAddRow.Page.AddRowJQ.ProcessSelectNotify();
                            var activeSBControl = MouseJQ.GetActiveSidebarControl();
                            if (void 0 != activeSBControl && "" != activeSBControl) switch (activeSBControl.toLowerCase()) {
                              case "add-row":
                                break;

                              case "height-width":
                                impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                                break;

                              case "image-library":
                                impImage.Image.SelfJQ.ProcessSelectNotify();
                                break;

                              case "color":
                                impColor.Color.ColorJQ.ProcessSelectNotify();
                                break;

                              case "border":
                                impBorder.Border.BorderJQ.ProcessSelectNotify();
                                break;

                              case "insert-text":
                                impText.Text.TextJQ.ProcessSelectNotify();
                                break;

                              case "bi":
                                impBi.BI.BIJQ.ProcessSelectNotify();
                                break;

                              case "margin":
                                impMargin.Margin.MarginJQ.ProcessSelectNotify();
                                break;

                              case "padding":
                                impPadding.Padding.PaddingJQ.ProcessSelectNotify();
                                break;

                              case "zindex":
                                impFrontBack.FrontBack.FrontBackJQ.ProcessSelectNotify();
                                break;

                              case "opacity":
                                impOpacity.Opacity.OpacityJQ.ProcessSelectNotify();
                            }
                        });
                        jQuery(document).mousemove(function(e) {
                            MouseJQ.ProcessMove(e);
                        });
                        jQuery("page").on("click", function(e) {
                            MouseJQ.ProcessClick(e);
                            if (1 == impCommonCode.ControlCommon.Code.AnchorClicked) {
                                impCommonCode.ControlCommon.Code.AnchorClicked = !1;
                                null != e.cancelBubble && (e.cancelBubble = !0);
                                e.stopPropagation && e.stopPropagation();
                                e.preventDefault && e.preventDefault();
                                null != e.returnValue && (e.returnValue = !1);
                                return !1;
                            }
                        });
                        jQuery("input").on("keydown", function(e) {
                            var BACK = 8;
                            e.which == BACK && (impOnInsert.OnInsert.Code.BackPassed = !0);
                        });
                        jQuery("textarea").on("keydown", function(e) {
                            var BACK = 8;
                            e.which == BACK && (impOnInsert.OnInsert.Code.BackPassed = !0);
                        });
                        jQuery(".jqte-editor").on("keydown", function(e) {
                            var BACK = 8;
                            e.which == BACK && (impOnInsert.OnInsert.Code.BackPassed = !0);
                        });
                        jQuery(document).on("keydown", function(e) {
                            var BACK = 8;
                            if (e.which == BACK) {
                                if (0 == impOnInsert.OnInsert.Code.BackPassed && 0 == impOnInsert.OnInsert.Code.BackPassedEdit) {
                                    null != e.cancelBubble && (e.cancelBubble = !0);
                                    e.stopPropagation && e.stopPropagation();
                                    e.preventDefault && e.preventDefault();
                                    null != e.returnValue && (e.returnValue = !1);
                                    return !1;
                                }
                                impOnInsert.OnInsert.Code.BackPassed = !1;
                            }
                            if (e.ctrlKey || e.metaKey) switch (String.fromCharCode(e.which).toLowerCase()) {
                              case "s":
                                try {
                                    console.log("ctrl + s pressed");
                                } catch (ex) {}
                                event.preventDefault();
                                jQuery(".jq-save").click();
                                return !1;

                              case "z":
                                if (!MouseJQ.selectedElement.hasClass("empty-container-text") && !MouseJQ.selectedElement.hasClass("jq-plus-container-text") || 1 != MouseJQ.selectedElement.length || "text" != MouseJQ.selectedElement.find(".jq-text-block-content").css("cursor")) {
                                    try {
                                        console.log("ctrl + z pressed");
                                    } catch (ex) {}
                                    event.preventDefault();
                                    jQuery(".jq-undo").click();
                                    return !1;
                                }
                                break;

                              case "y":
                                try {
                                    console.log("ctrl + y pressed");
                                } catch (ex) {}
                                event.preventDefault();
                                jQuery(".jq-redo").click();
                                return !1;
                            }
                        });
                        jQuery("page").bind("copy", function() {
                            impCopy.CopyPaste.CopyPasteJQ.Copy();
                        });
                        jQuery("page").bind("paste", function() {
                            if (MouseJQ.selectedElement.hasClass("column")) impCopy.CopyPaste.CopyPasteJQ.Paste(!0); else {
                                var eh = new impError.ErrorHandle.ErrorJQ();
                                eh.ActionHelp("Please select a [Column] to paste.");
                            }
                        });
                        jQuery("page").bind("cut", function() {
                            impCopy.CopyPaste.CopyPasteJQ.Cut();
                        });
                        jQuery(window).on("beforeunload", function() {
                            jQuery(".control-page").hide();
                            jQuery(".control-page").removeClass("control-active");
                            jQuery("#control-save").addClass("control-active");
                            jQuery("#control-save").show();
                            return "Note: Unsaved changes will be lost!";
                        });
                        jQuery(document).keyup(function(e) {
                            var ESC = 27;
                            if (e.which === ESC) {
                                jQuery(".empty-container-text").draggable({
                                    disabled: !1
                                });
                                jQuery(".empty-container-image").draggable({
                                    disabled: !1
                                });
                                jQuery("page .jq-text-block-content").removeAttr("contentEditable");
                                jQuery("page .empty-container-text").find(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "move");
                                jQuery(".editor").hide();
                                impCtxMenu.ContextMenu.ContextMenuJQ.ControlPageHide();
                                null != e.cancelBubble && (e.cancelBubble = !0);
                                e.stopPropagation && e.stopPropagation();
                                e.preventDefault && e.preventDefault();
                                null != e.returnValue && (e.returnValue = !1);
                                return !1;
                            }
                        });
                    }
                });
            };
            return MouseJQ;
        }();
        Watch.MouseJQ = MouseJQ;
    }(Watch = exports.Watch || (exports.Watch = {}));
});

define("Controls/JQueryUI", [ "require", "exports", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../UndoManager/UndoManager", "../Controls/TextJQ", "jquery", "jqueryui" ], function(require, exports, impWatch, impCommonMethods, impUndoManager, impText, jQuery, jQueryUI) {
    "use strict";
    var JQueryUI;
    !function(JQueryUI) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        JQueryUI.SmartObj = SmartObj;
        var UIHelper = function() {
            function UIHelper() {}
            return UIHelper;
        }();
        JQueryUI.UIHelper = UIHelper;
        var CommonCode = function() {
            function CommonCode() {}
            CommonCode.Draggable = function(element, cancelableCss) {
                jQuery(element).draggable({
                    cancel: cancelableCss,
                    revert: "invalid",
                    helper: "clone",
                    appendTo: "body",
                    distance: 5,
                    start: function(event, ui) {
                        CommonCode.DragStopped = !1;
                        jQuery("#interface_bottom").hide();
                        jQuery(ui.helper).addClass("jq-dragging");
                        jQuery("page").addClass("dragging");
                        CommonCode.DroppableEventCount = 0;
                        CommonCode.droppableCount++;
                        ui.helper.css("z-index", "9999999999");
                        ui.helper.css("opacity", "0.8");
                    },
                    stop: function(event, ui) {
                        CommonCode.DragStopped = !0;
                        jQuery("#interface_bottom").show();
                        jQuery(ui.helper).removeClass("jq-dragging");
                        jQuery("page").removeClass("dragging");
                        CommonCode.droppableCount = 2;
                        jQuery(".image-selection-drag-original").removeClass("image-selection-drag-original");
                        ui.helper.css("opacity", "1");
                        ui.helper.css("z-index", "0");
                    },
                    drag: function(event, ui) {
                        var element = jQuery(event.target).hasClass("key") ? jQuery(event.target) : jQuery(event.target).closest(".key");
                        element.addClass("image-selection-drag-original");
                    }
                });
            };
            CommonCode.ResizableImage = function() {
                var handleDefault = "e,se,s";
                jQuery(".image-element").resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    delay: 0,
                    start: function(event, ui) {
                        var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-width");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "width");
                    },
                    stop: function(event, ui) {
                        var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-width");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "width");
                    },
                    resize: function(event, ui) {
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                        var uiHelper = new UIHelper();
                        uiHelper.helper = jQuery(this).closest(".column");
                        CommonCode.commonHeight(100, uiHelper);
                    }
                });
            };
            CommonCode.commonHeight = function(height, ui) {
                return "error";
            };
            CommonCode.ResizableColumn = function() {
                var handleDefault = "e,s";
                jQuery(".column").resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    distance: 0,
                    start: function(event, ui) {
                        jQuery("page").addClass("resizing");
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                        jQuery(ui.element).children(".ui-resizable-handle").find(".jq-square-" + axis).parent().addClass("ui-resizable-handle-hover");
                        if ("se" == jQuery(ui.element).data("ui-resizable").axis || "s" == jQuery(ui.element).data("ui-resizable").axis) {
                            ui.element.height(ui.element.height());
                            CommonCode.originalHeightBeforeDragStartStr = jQuery(ui.helper).css("min-height");
                            var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                            commonMethods.RemoveStyle(ui.helper, "min-height");
                        }
                        var nextElements = jQuery(ui.helper).nextAll(".column");
                        nextElements.hide();
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                    },
                    stop: function(event, ui) {
                        jQuery("page").removeClass("resizing");
                        jQuery(ui.element).find(".ui-resizable-handle").removeClass("ui-resizable-handle-hover");
                        jQuery(".ui-resizable-se").removeClass("selected-resizable");
                        var height = ui.size.height, width = ui.size.width, originalHeight = ui.originalSize.height, originalWidth = ui.originalSize.width, rowWidth = jQuery(ui.helper).parent().width(), onePercentPixels = Math.floor(1 * rowWidth / 100), colXsOnePercentage = 2, colXsOnePixels = colXsOnePercentage * onePercentPixels, commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                        jQuery(ui.helper).attr("style");
                        if (height != originalHeight) {
                            CommonCode.commonHeight(height, ui);
                            commonMethods.RemoveSingleStyle(ui.helper, "height");
                            jQuery(ui.helper).css("min-height", height);
                        }
                        commonMethods.RemoveStyle(ui.helper, "min-width");
                        commonMethods.RemoveStyle(ui.helper, "width");
                        var twoFour = 48;
                        if (width > originalWidth) {
                            var emptyXsCount = 0, nextElements = jQuery(ui.helper).nextAll(".column");
                            try {
                                for (var columns = ui.helper.parent().children(".column"), count = 0, j = 0; j < columns.length; j++) {
                                    var size = jQuery(columns[j]).attr("xs-column-size");
                                    if (void 0 != size && "" != size) {
                                        var num = Number(size);
                                        count += num;
                                    }
                                }
                                twoFour > count && (emptyXsCount = twoFour - count);
                                var extenedWidth = width - originalWidth, colXs = Math.floor(extenedWidth / colXsOnePixels);
                                0 == colXs && (colXs = 1);
                                var nextElementsCount = jQuery(ui.helper).nextAll(".column").length, eachXs = Math.floor(colXs / nextElementsCount);
                                0 == eachXs && (eachXs = 1);
                                for (var colXsTemp = colXs, i = 0; i < nextElements.length && colXsTemp > 0; i++) {
                                    var nextXsSize = Number(jQuery(nextElements[i]).attr("xs-column-size"));
                                    if (1 != nextXsSize) {
                                        var newNextXsSize = nextXsSize - eachXs;
                                        if (1 > newNextXsSize) {
                                            colXsTemp = colXsTemp - eachXs + 1;
                                            newNextXsSize = 1;
                                        } else colXsTemp -= eachXs;
                                        jQuery(nextElements[i]).removeClass("col-xs-" + nextXsSize);
                                        jQuery(nextElements[i]).addClass("col-xs-" + newNextXsSize);
                                        jQuery(nextElements[i]).attr("xs-column-size", newNextXsSize);
                                    }
                                }
                                var xsSize = Number(ui.helper.attr("xs-column-size")), newXsSize = xsSize + colXs - colXsTemp;
                                colXs == colXsTemp && (newXsSize += colXsTemp);
                                var allXs = 0;
                                ui.helper.parent().children(".column").each(function() {
                                    allXs += Number(jQuery(this).attr("xs-column-size"));
                                });
                                for (var overallMinusCurrent = allXs - xsSize, g = overallMinusCurrent + newXsSize; g > twoFour; ) {
                                    newXsSize--;
                                    g--;
                                }
                                jQuery(ui.helper).removeClass("col-xs-" + xsSize);
                                jQuery(ui.helper).addClass("col-xs-" + newXsSize);
                                ui.helper.attr("xs-column-size", newXsSize);
                            } catch (ex) {}
                            nextElements.show();
                        } else if (originalWidth > width) {
                            var nextElements = jQuery(ui.helper).nextAll(".column");
                            try {
                                var extenedWidth = originalWidth - width, colXs = Math.floor(extenedWidth / colXsOnePixels);
                                0 == colXs && (colXs = 1);
                                var eachXs = Math.floor(colXs / 1);
                                0 == eachXs && (eachXs = 1);
                                var xsSize = Number(ui.helper.attr("xs-column-size"));
                                if (xsSize > 1) {
                                    var eachXsTemp = eachXs, newXsSize = xsSize - eachXs;
                                    if (0 > newXsSize) {
                                        eachXsTemp = eachXs + newXsSize;
                                        newXsSize = 1;
                                    }
                                    if (0 == newXsSize) {
                                        eachXsTemp = eachXs - 1;
                                        newXsSize = 1;
                                    }
                                    jQuery(ui.helper).removeClass("col-xs-" + xsSize);
                                    jQuery(ui.helper).addClass("col-xs-" + newXsSize);
                                    ui.helper.attr("xs-column-size", newXsSize);
                                    var colXsTemp = colXs;
                                    if (colXsTemp > 0) {
                                        var nextXsSize = Number(jQuery(nextElements[0]).attr("xs-column-size")), newNextXsSize = nextXsSize + eachXsTemp, allXs = 0;
                                        ui.helper.parent().children(".column").each(function() {
                                            allXs += Number(jQuery(this).attr("xs-column-size"));
                                        });
                                        for (var overallMinusNext = allXs - Number(jQuery(nextElements[0]).attr("xs-column-size")), g = overallMinusNext + newNextXsSize; g > twoFour; ) {
                                            newNextXsSize--;
                                            g--;
                                        }
                                        jQuery(nextElements[0]).removeClass("col-xs-" + nextXsSize);
                                        jQuery(nextElements[0]).addClass("col-xs-" + newNextXsSize);
                                        jQuery(nextElements[0]).attr("xs-column-size", newNextXsSize);
                                    }
                                }
                            } catch (ex) {}
                            nextElements.show();
                        }
                        var nextElementsToShow = jQuery(ui.helper).nextAll(".column");
                        nextElementsToShow.show();
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {}
                });
            };
            CommonCode.OnResize = function(event, ui) {
                "se" == jQuery(ui.element).data("ui-resizable").axis || ("s" == jQuery(ui.element).data("ui-resizable").axis ? ui.helper.height(ui.helper.height() + 20) : "s" == jQuery(ui.element).data("ui-resizable").axis);
            };
            CommonCode.JustResizable = function(elementCss, handle) {
                var handleDefault = "e,se,s";
                void 0 != handle && "" != handle && (handleDefault = handle);
                jQuery(elementCss).resizable({
                    handles: handleDefault,
                    minHeight: 0,
                    minWidth: 0,
                    delay: 0,
                    start: function(event, ui) {
                        jQuery("page").addClass("resizing");
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                        jQuery(ui.element).children(".ui-resizable-handle").find(".jq-square-" + axis).parent().addClass("ui-resizable-handle-hover");
                    },
                    stop: function(event, ui) {
                        jQuery("page").removeClass("resizing");
                        jQuery(ui.element).find(".ui-resizable-handle").removeClass("ui-resizable-handle-hover");
                        ui.size.height, ui.size.width;
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                        var uiHelper = new UIHelper();
                        uiHelper.helper = jQuery(this).closest(".column");
                        CommonCode.commonHeight(100, uiHelper);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {}
                });
            };
            CommonCode.ResizableRootElements = function(elementCss, handle) {
                var handleDefault = "e,se,s";
                void 0 != handle && "" != handle && (handleDefault = handle);
                jQuery(elementCss).resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    delay: 0,
                    start: function(event, ui) {
                        if ("se" == jQuery(ui.element).data("ui-resizable").axis || "s" == jQuery(ui.element).data("ui-resizable").axis) {
                            var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                            commonMethods.RemoveStyle(ui.helper, "min-height");
                            commonMethods.RemoveStyle(ui.helper, "height");
                        }
                    },
                    stop: function(event, ui) {
                        var height = ui.size.height;
                        ui.size.width;
                        if (jQuery(this).hasClass("empty-container-text") || jQuery(this).hasClass("root-elements")) {
                            var common = new impCommonMethods.Common.CommonMethodsJQ();
                            common.RemoveStyle(jQuery(this), "min-height");
                            common.RemoveStyle(jQuery(this), "height");
                            jQuery(this).css("min-height", height);
                        }
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                    }
                });
            };
            CommonCode.ResizeCommon = function(selectedElement) {
                try {
                    var box = jQuery(selectedElement)[0].getBoundingClientRect(), circleLeftTopElement = jQuery("<div class='circle-deg' style='width:12px; border-radius:50%; height:12px; position:absolute; background-color:#00A1FF;'></div>"), circleRightTopElement = jQuery(circleLeftTopElement).clone(), circleLeftBottomElement = jQuery(circleLeftTopElement).clone(), circleRightBottomElement = jQuery(circleLeftTopElement).clone();
                    circleRightBottomElement.addClass("z-index-back");
                    var body = document.body, docElem = document.documentElement, scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop, scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft, clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, top = box.top + scrollTop - clientTop, left = box.left + scrollLeft - clientLeft, width = jQuery(selectedElement).css("width"), height = jQuery(selectedElement).css("height"), widthf = parseFloat(width.replace("px", "")), heightf = parseFloat(height.replace("px", ""));
                    circleLeftTopElement.css("left", left - 5);
                    circleLeftTopElement.css("top", top - 5);
                    circleLeftBottomElement.css("left", left - 5);
                    circleLeftBottomElement.css("top", top + heightf - 5);
                    circleRightTopElement.css("left", left + widthf - 5);
                    circleRightTopElement.css("top", top - 5);
                    circleRightBottomElement.css("left", left + widthf - 5);
                    circleRightBottomElement.css("top", top + heightf - 5);
                    jQuery(".circle-deg").remove();
                    jQuery("body").append(circleLeftTopElement);
                    jQuery("body").append(circleLeftBottomElement);
                    jQuery("body").append(circleRightTopElement);
                    jQuery("body").append(circleRightBottomElement);
                } catch (ex) {}
            };
            CommonCode.Resizable = function(elementCss, handle) {
                var handleDefault = "e,se,s";
                void 0 != handle && "" != handle && (handleDefault = handle);
                jQuery(elementCss).resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    distance: 0,
                    start: function(event, ui) {
                        jQuery("page").addClass("resizing");
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                        jQuery(ui.element).children(".ui-resizable-handle").find(".jq-square-" + axis).parent().addClass("ui-resizable-handle-hover");
                        jQuery(ui.helper).closest(".key").after("<div class='height float-right dummy-div'></div>");
                        jQuery(".dummy-div").height(ui.helper.height() + 2);
                        if ("se" == jQuery(ui.element).data("ui-resizable").axis || "s" == jQuery(ui.element).data("ui-resizable").axis) {
                            ui.helper.css("height", ui.helper.css("min-height"));
                            var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                            commonMethods.RemoveStyle(ui.helper, "min-height");
                        }
                    },
                    stop: function(event, ui) {
                        jQuery("page").removeClass("resizing");
                        jQuery(".dummy-div").remove();
                        var height = ui.size.height;
                        ui.size.width;
                        if (jQuery(this).hasClass("empty-container-text") || jQuery(this).hasClass("empty-container-image") || jQuery(this).hasClass("empty-container") || jQuery(this).hasClass("jq-plus-container-text") || jQuery(this).hasClass("jq-plus-container-image") || jQuery(this).hasClass("jq-text-block-container") || jQuery(this).hasClass("root-elements")) if (jQuery(this).hasClass("jq-plus-container-image") || jQuery(this).hasClass("empty-container-spacer")) {
                            jQuery(this).css("height", height);
                            jQuery(this).css("min-height", height);
                        } else {
                            jQuery(this).css("height", height);
                            jQuery(this).css("min-height", height);
                        }
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                        var uiHelper = new UIHelper();
                        uiHelper.helper = jQuery(this).closest(".column");
                        CommonCode.commonHeight(100, uiHelper);
                        jQuery(ui.element).find(".ui-resizable-handle").removeClass("ui-resizable-handle-hover");
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {
                        window.setTimeout(function() {
                            jQuery(".dummy-div").height() < ui.helper.height() && jQuery(".dummy-div").height(jQuery(".dummy-div").height() + 2);
                        }, 10);
                    }
                });
            };
            CommonCode.Droppable = function(elementCss) {
                jQuery(elementCss).droppable({
                    greedy: !0,
                    tolerance: "pointer",
                    accept: ".bldr-draggable, .image-text-other",
                    drop: function(event, ui) {
                        if (1 != CommonCode.DroppableEventCount) {
                            CommonCode.DroppableEventCount = 1;
                            try {
                                window.smartObj = new JQueryUI.SmartObj();
                                window.smartObj.currentObj = void 0;
                                window.smartObj.command = "";
                                impWatch.Watch.MouseJQ.nearestElement = jQuery("#nononononelement");
                                var x = event.clientX, y = event.clientY + jQuery(document).scrollTop();
                                jQuery(".nearest-element").removeClass("nearest-element");
                                impWatch.Watch.MouseJQ.selectedElement.hasClass("image-text-other") && (impWatch.Watch.MouseJQ.selectedElement = impWatch.Watch.MouseJQ.selectedElement.closest(".column"));
                                if (impWatch.Watch.MouseJQ.selectedElement.hasClass("column")) {
                                    var $elements = impWatch.Watch.MouseJQ.selectedElement.find(".image-text-other"), nearestLeftArray = [], nearestTopArray = [];
                                    if ($elements.length > 0) {
                                        $elements.each(function(index, _this) {
                                            var $this = jQuery(_this), top = parseFloat($this.attr("top")), bottom = parseFloat($this.attr("bottom")), left = parseFloat($this.attr("left"));
                                            if (y >= top && bottom >= y && x >= left) {
                                                nearestLeftArray.push(left);
                                                nearestTopArray.push(top);
                                            }
                                        });
                                        var nearestLeft = 0, nearestTop = 0;
                                        nearestLeftArray.length > 0 && (nearestLeft = Math.max.apply(Math, nearestLeftArray));
                                        nearestTopArray.length > 0 && (nearestTop = Math.max.apply(Math, nearestTopArray));
                                        impWatch.Watch.MouseJQ.selectedElement.find(".image-text-other[left='" + nearestLeft + "'][top='" + nearestTop + "']").addClass("nearest-element");
                                        impWatch.Watch.MouseJQ.nearestElement = jQuery(".nearest-element").first();
                                        if (impWatch.Watch.MouseJQ.nearestElement.length > 0) {
                                            window.smartObj.currentObj = impWatch.Watch.MouseJQ.nearestElement;
                                            window.smartObj.command = "n";
                                        }
                                    }
                                }
                            } catch (ex) {}
                            impWatch.Watch.MouseJQ.selectedElement = jQuery(".image-selection-drag");
                            if (CommonCode.droppableCount >= 2 && void 0 != CommonCode.currentTarget && !ui.draggable.hasClass("control-drag-anywhere") && !ui.draggable.hasClass("bldr-draggable")) {
                                CommonCode.droppableCount++;
                                ui.draggable.css("opacity", "1");
                                if (ui.draggable.find(".jq-image-block-image").length > 0) {
                                    ui.draggable.css("position", "relative").css("left", "").css("top", "");
                                    void 0 != impWatch.Watch.MouseJQ.nearestElement && impWatch.Watch.MouseJQ.nearestElement.length > 0 ? impWatch.Watch.MouseJQ.nearestElement.after(ui.draggable.closest(".empty-container-image")) : CommonCode.currentTarget.closest(".key").hasClass("column") ? CommonCode.currentTarget.closest(".key").append(ui.draggable.closest(".empty-container-image")) : CommonCode.currentTarget.closest(".key").after(ui.draggable.closest(".empty-container-image"));
                                } else void 0 != impWatch.Watch.MouseJQ.nearestElement && impWatch.Watch.MouseJQ.nearestElement.length > 0 ? impWatch.Watch.MouseJQ.nearestElement.after(ui.draggable.css("position", "relative").css("left", "").css("top", "")) : CommonCode.currentTarget.closest(".key").hasClass("column") ? CommonCode.currentTarget.closest(".key").append(ui.draggable.css("position", "relative").css("left", "").css("top", "")) : CommonCode.currentTarget.closest(".key").after(ui.draggable.css("position", "relative").css("left", "").css("top", ""));
                                jQuery(".image-selection").removeClass("image-selection");
                                event.stopPropagation();
                                CommonCode.currentTarget = null;
                                jQuery(".image-text-other").each(function(index, _this) {
                                    var $this = jQuery(_this), bottom = $this.offset().top + $this.height(), top = $this.offset().top, left = $this.offset().left;
                                    $this.attr("top", top);
                                    $this.attr("bottom", bottom);
                                    $this.attr("left", left);
                                });
                                jQuery(".image-selection-drag").removeClass("image-selection-drag");
                                jQuery(".empty").removeClass("empty");
                                jQuery("#control-common-execute").trigger("click");
                                var undomanager = new impUndoManager.Manager.UndoManager();
                                undomanager.BeforeOperation();
                            } else if (!ui.draggable.hasClass("control-drag-anywhere")) {
                                ui.draggable.css("position", "relative").css("left", "").css("top", "");
                                if (ui.draggable.hasClass("bldr-draggable")) {
                                    var id = ui.draggable.attr("id");
                                    switch (id) {
                                      case "bldr-drgb-text":
                                        impText.Text.TextJQ.InsertTextBlock("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.");
                                        break;

                                      case "bldr-drgb-title":
                                        impText.Text.TextJQ.InsertTextBlock("<h2>Title Here.</h2>");
                                    }
                                }
                            }
                            jQuery(".image-selection-drag").removeClass("image-selection-drag");
                        }
                    },
                    out: function(event, ui) {
                        CommonCode.droppableCount++;
                    },
                    over: function(event, ui) {
                        jQuery(".image-selection-drag").removeClass("image-selection-drag");
                        CommonCode.currentTarget = jQuery(event.target);
                        if (jQuery(event.target).hasClass("key")) {
                            if ("inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display")) {
                                jQuery(event.target).addClass("image-selection-drag");
                                impWatch.Watch.MouseJQ.selectedElement = jQuery(event.target);
                            }
                        } else if ("inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display")) {
                            jQuery(event.target).closest(".key").addClass("image-selection-drag");
                            impWatch.Watch.MouseJQ.selectedElement = jQuery(event.target).closest(".key");
                        }
                    }
                });
            };
            CommonCode.DraggableDestroy = function(element) {
                jQuery(element).each(function(index, _this) {
                    try {
                        var $this = jQuery(_this);
                        $this.draggable("destroy");
                    } catch (ex) {}
                });
            };
            CommonCode.DroppableDestroy = function(elementCss) {
                jQuery(elementCss).each(function(index, _this) {
                    try {
                        var $this = jQuery(_this);
                        $this.droppable("destroy");
                        $this.removeClass("ui-droppable");
                    } catch (ex) {}
                });
            };
            CommonCode.ResizableDestroy = function(elementCss) {
                jQuery(elementCss).each(function(index, _this) {
                    try {
                        var $this = jQuery(_this);
                        $this.resizable("destroy");
                        jQuery($this).find("div").remove(".ui-resizable-handle");
                    } catch (ex) {
                        jQuery($this).find("div").remove(".ui-resizable-handle");
                    }
                });
            };
            CommonCode.droppableCount = 2;
            CommonCode.DroppableEventCount = 0;
            CommonCode.DragStopped = !0;
            CommonCode.originalHeightBeforeDragStartStr = "";
            return CommonCode;
        }();
        JQueryUI.CommonCode = CommonCode;
    }(JQueryUI = exports.JQueryUI || (exports.JQueryUI = {}));
});

define("Controls/ControlCommonJQ", [ "require", "exports", "./JQueryUI", "../common/on", "../JQte/OnInsert", "jquery" ], function(require, exports, impJQueryUI, impOn, impJqteOnInsert, jQuery) {
    "use strict";
    var ControlCommon;
    !function(ControlCommon) {
        var Code = function() {
            function Code() {}
            Code.AttachClick = function() {
                jQuery("#control-common-execute").on("click", function() {
                    Code.DestroyResizable();
                    Code.Execute();
                });
            };
            Code.Execute = function() {
                window.setTimeout(function() {
                    impOn.On.Code.Execute();
                    new impJqteOnInsert.OnInsert.Code().Init();
                    impJQueryUI.JQueryUI.CommonCode.ResizableColumn();
                    impJQueryUI.JQueryUI.CommonCode.Resizable(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other", "s");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other-left", "e");
                    impJQueryUI.JQueryUI.CommonCode.Draggable(".jq-normal-link .empty-container, .empty-container-menu, .empty-container-text, .empty-container-image, .empty-container-spacer", "");
                    jQuery(".empty-container-text, .empty-container-image").css("z-index", "0");
                    jQuery(".column").each(function() {
                        if (0 == jQuery(this).children(".image-text-other.empty-container-image, .image-text-other.empty-container-text, .row, .column").length) {
                            jQuery(this).addClass("empty");
                            0 == jQuery(this).find(".empty-drop-element").length && jQuery(this).append("<div class='image-text-other empty-drop-element' ></div>");
                        } else {
                            jQuery(this).removeClass("empty");
                            jQuery(this).find(".empty-drop-element").remove();
                        }
                    });
                    jQuery(".image-text-other, .empty-container-empty").each(function(index, _this) {
                        var $this = jQuery(_this), bottom = $this.offset().top + $this.height(), top = $this.offset().top, left = $this.offset().left;
                        $this.attr("top", top);
                        $this.attr("bottom", bottom);
                        $this.attr("left", left);
                    });
                    impJQueryUI.JQueryUI.CommonCode.Droppable(".column, .empty-container, .image-text-other");
                    jQuery(".ui-resizable-e").html("<div class='jq-square jq-square-e'></div>");
                    jQuery(".ui-resizable-se").html("<div class='jq-square jq-square-se'></div>");
                    jQuery(".ui-resizable-s").html("<div class='jq-square jq-square-s'></div>");
                }, 10);
            };
            Code.DestroyResizable = function() {
                impJQueryUI.JQueryUI.CommonCode.DroppableDestroy(".column, .empty-container, .image-text-other");
                impJQueryUI.JQueryUI.CommonCode.DraggableDestroy(".jq-normal-link, .empty-container, .empty-container-menu, .empty-container-text .empty-container-image, .empty-container-spacer");
                impJQueryUI.JQueryUI.CommonCode.ResizableDestroy(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image, .column, .empty-container, .root-elements, .adjust-image-text-other, .adjust-image-text-other-left");
            };
            Code.AnchorClicked = !1;
            return Code;
        }();
        ControlCommon.Code = Code;
    }(ControlCommon = exports.ControlCommon || (exports.ControlCommon = {}));
});

define("UndoManager/UndoManager", [ "require", "exports", "../Controls/ControlCommonJQ", "../Preview/Preview", "../Watch/WatchMouseJQ", "../MalFormed/MalFormedJQ", "../jqte/OnInsert", "jquery" ], function(require, exports, impControlsCommon, impPreview, impWatch, impmal, impOnInsert, jQuery) {
    "use strict";
    window.undoActivityIndex = 999999;
    var Manager;
    !function(Manager) {
        var UndoManager = function() {
            function UndoManager() {
                this.isEnabled = !0;
                this.isUndoHit = !1;
                this.isRedoHit = !1;
            }
            UndoManager.prototype.EnableUndoManager = function(isEnable) {
                this.isEnabled = isEnable;
            };
            UndoManager.prototype.SetSelectElement = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selectedElement) {
                    var scopeId = selectedElement.attr("scopeId");
                    impWatch.Watch.MouseJQ.selectedElement = jQuery("div[scopeId='" + scopeId + "'").first();
                }
            };
            UndoManager.prototype.Undo = function() {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed) {
                    "none" != jQuery(".close-preview").css("display") && impPreview.Preview.PreviewJQ.ClosePreview();
                    var undoObj;
                    if (!(window.undoActivityIndex <= 0)) {
                        if (999999 == window.undoActivityIndex) {
                            if (void 0 != window.undoObjArray) {
                                window.undoActivityIndex = window.undoObjArray.length - 2;
                                undoObj = window.undoObjArray[window.undoActivityIndex];
                            }
                        } else {
                            window.undoActivityIndex--;
                            window.undoActivityIndex <= 0 && (this.isUndoHit = !0);
                            undoObj = window.undoObjArray[window.undoActivityIndex];
                        }
                        if (null != undoObj) {
                            var parent;
                            parent = jQuery(undoObj.parent);
                            jQuery("page").html(undoObj.html);
                            impControlsCommon.ControlCommon.Code.DestroyResizable();
                            impControlsCommon.ControlCommon.Code.Execute();
                            var c = new impOnInsert.OnInsert.Code();
                            c.Init();
                            this.SetSelectElement();
                        }
                    }
                }
            };
            UndoManager.prototype.Redo = function() {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed) {
                    "none" != jQuery(".close-preview").css("display") && impPreview.Preview.PreviewJQ.ClosePreview();
                    var undoObj;
                    -1 == window.undoActivityIndex && (window.undoActivityIndex = 0);
                    if (void 0 != window.undoObjArray) {
                        if (window.undoActivityIndex + 1 >= window.undoObjArray.length) return;
                        window.undoActivityIndex++;
                        undoObj = window.undoObjArray[window.undoActivityIndex];
                        if (null != undoObj) {
                            jQuery("page").html(undoObj.html);
                            impControlsCommon.ControlCommon.Code.DestroyResizable();
                            impControlsCommon.ControlCommon.Code.Execute();
                            var c = new impOnInsert.OnInsert.Code();
                            c.Init();
                            this.SetSelectElement();
                        }
                    }
                }
            };
            UndoManager.prototype.PushUndo = function(undo) {
                void 0 == window.undoObjArray && (window.undoObjArray = []);
                void 0 != undo && window.undoObjArray.push(undo);
            };
            UndoManager.prototype.PopUndo = function() {
                window.undoObjArray.pop();
            };
            UndoManager.prototype.ClearRedoOnChange = function() {};
            UndoManager.prototype.Clear = function() {};
            UndoManager.prototype.BeforeOperation = function(selectedParent) {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed && 0 == window.layoutCreating) {
                    try {
                        window.undoObjArray.splice(window.undoActivityIndex + 1);
                        window.undoActivityIndex = 999999;
                    } catch (ex) {}
                    selectedParent = jQuery("page");
                    var rootTemp;
                    rootTemp = selectedParent;
                    var undo = new UndoJQ();
                    undo.parent = rootTemp;
                    undo.html = rootTemp.html();
                    undo.Push();
                }
            };
            return UndoManager;
        }();
        Manager.UndoManager = UndoManager;
        var UndoJQ = function() {
            function UndoJQ() {}
            UndoJQ.prototype.Push = function() {
                var um = new UndoManager();
                um.PushUndo(this);
            };
            return UndoJQ;
        }();
        Manager.UndoJQ = UndoJQ;
    }(Manager = exports.Manager || (exports.Manager = {}));
});

define("Page/PageElementBaseJQ", [ "require", "exports", "../PageElements/ElementJQ", "../Error/ErrorJQ", "../Common/CommonMethodsJQ", "../_Classes/UrlJQ", "../_Classes/Auth", "../Constants/ConstantsJQ", "../UndoManager/UndoManager", "../MalFormed/MalFormedJQ", "jquery" ], function(require, exports, impElements, impError, impCommon, impUrl, impAuth, impConstants, impUndoManager, impmal, jQuery) {
    "use strict";
    var Page, uniqureId = 5;
    !function(Page) {
        var debug, globalColumnId, globalRowId;
        globalColumnId = 0;
        globalRowId = 0;
        debug = !0;
        var PageElementBaseJQ = function() {
            function PageElementBaseJQ(page, typeName, paramRootWrapper, extra) {
                this.scopeId = "body";
                this.typeName = typeName;
                this.rootWrapper = paramRootWrapper;
                this.cssClassName = "jq-" + this.typeName;
                this.cssBackClassName = "jq-back-" + this.typeName;
                this.cssAdditionalStylingClassName = "jq-additional-" + this.typeName;
                this.templatePath = this.typeName;
                this.templateName = this.typeName + ".html";
                this.qualifiedTemplatePath = this.templatePath + "/" + this.templateName;
            }
            PageElementBaseJQ.prototype.GenerateColumnScopeId = function() {
                return "Column_" + ++globalColumnId;
            };
            PageElementBaseJQ.prototype.GenerateRowScopeId = function() {
                return "Row_" + ++globalRowId;
            };
            PageElementBaseJQ.prototype.Log = function(msg) {
                new impError.ErrorHandle.ErrorJQ().LogMessage(this.typeName + "JQ : " + msg);
            };
            PageElementBaseJQ.prototype.GetClassName = function() {
                return this.cssClassName;
            };
            PageElementBaseJQ.prototype.GetDotClassName = function() {
                return "." + this.GetClassName();
            };
            PageElementBaseJQ.prototype.GetScope = function() {
                if (void 0 == this.scopeId || "" == this.scopeId) {
                    this.scopeId = "body";
                    return jQuery(this.scopeId);
                }
                return jQuery(this.scopeId);
            };
            PageElementBaseJQ.prototype.SetScope = function(scopeid) {
                this.scopeId = scopeid;
                return this;
            };
            PageElementBaseJQ.prototype.Get = function() {
                return jQuery(this.GetScope()).find(this.GetDotClassName());
            };
            PageElementBaseJQ.prototype.Remove = function() {
                jQuery(this.Get()).remove();
            };
            PageElementBaseJQ.prototype.GetWrapper = function() {
                return 1 == this.ProcessKey() ? "body" == this.rootWrapper.toString().toLowerCase() ? jQuery(this.rootWrapper) : jQuery(this.GetScope()).find(this.rootWrapper) : void 0;
            };
            PageElementBaseJQ.prototype.Create = function(className) {
                if (1 == this.ProcessKey()) {
                    if (0 == this.Get().length) {
                        var elements = new impElements.Page.Elements.ElementJQ();
                        this.Add(this.GetWrapper(), elements.CreateDiv("", this.GetClassName() + " " + this.cssBackClassName + " " + this.cssAdditionalStylingClassName + "  key design-row row root-elements page-element jqMargin-0 "), void 0, void 0, void 0, void 0, void 0);
                    }
                    return this;
                }
            };
            PageElementBaseJQ.prototype.CreateNotExist = function() {
                0 == this.Get().length && this.Create(void 0);
            };
            PageElementBaseJQ.prototype.AddRow = function(root, colClassNames, className, adjustRow, adjustColumn, beforeAfter) {
                if (1 == this.ProcessKey()) {
                    var row;
                    0 == this.Get().length && this.Create(void 0);
                    if (void 0 != colClassNames && colClassNames.length > 0) {
                        var cols;
                        cols = colClassNames.toString().split(" ");
                        var elements = new impElements.Page.Elements.ElementJQ();
                        row = elements.CreateDiv("", "row key jqRootRow design-row");
                        for (var commonMethods = new impCommon.Common.CommonMethodsJQ(), i = 0; i < cols.length; i++) {
                            var colClassName = "", columnSize = "";
                            if (void 0 != cols[i] && "" != commonMethods.Trim(cols[i])) {
                                colClassName = cols[i].toString().replace(/,/g, " ");
                                columnSize = colClassName.toString().replace("col-xs-", "");
                                var column, elements2 = new impElements.Page.Elements.ElementJQ(), columnCss = colClassName + " " + className + " column key design-column column-number-" + i, contentClassName = "", contentCssClass = "";
                                if ("Content" == this.typeName || jQuery(root).hasClass("jq-Content")) {
                                    contentCssClass = "";
                                    0 == i ? contentCssClass = "SideBarLeft" : 1 == i ? contentCssClass = "MiddleContent" : 2 == i && (contentCssClass = "SideBarRight");
                                    contentClassName = "jq-" + contentCssClass + " jq-back-" + contentCssClass + " jq-additional-" + contentCssClass;
                                }
                                column = elements2.CreateDiv("", columnCss + " " + contentClassName);
                                var columnScopeId = this.GenerateColumnScopeId();
                                1 == debug && void 0 != column && column.append("<span class='debug-column-css debug-css' scopeId='" + columnScopeId + "'> " + columnScopeId + " </span> ");
                                column.attr("scopeId", columnScopeId);
                                column.attr("column-number", i);
                                column.attr("xs-column-size", columnSize);
                                column.css("min-height", "100px");
                                column.addClass("column-padding");
                                "" != contentClassName ? column.attr("key-css", ".jq-" + contentClassName) : void 0 != root ? column.attr("key-css", jQuery(root).attr("key-css") + " column") : column.attr("key-css", this.GetDotClassName() + " column");
                                void 0 != root ? row.attr("key-css", jQuery(root).attr("key-css") + " row") : row.attr("key-css", this.GetDotClassName() + " row");
                                jQuery(row).append(column);
                                void 0 != adjustColumn && this.AdjustElement(column, adjustColumn);
                            }
                        }
                    }
                    var rowScopeId = this.GenerateRowScopeId();
                    row.attr("scopeId", rowScopeId);
                    var nextPlus = "<div class='jq-row-plus-container jq-next-row-container'> <span class='jq-row-plus jq-next-row'> + </span> </div>", prevPlus = "<div class='jq-row-plus-container jq-prev-row-container'> <span class='jq-row-plus jq-prev-row'> + </span> </div>";
                    void 0 != adjustRow && this.AdjustElement(row, adjustRow);
                    void 0 == root && (root = this.Get());
                    jQuery(row).prepend("<span title='Row' class=\"design-page-row \"> <span class='design-square-row'>Row</span> <span class='columns-add-text'>Columns <button class='jq-add-column btn btn-xs btn-danger'>+</button></span> </span>");
                    if (void 0 != row) {
                        row.prepend(prevPlus);
                        row.append(nextPlus);
                    }
                    this.Add(root, row, void 0, void 0, void 0, void 0, beforeAfter);
                    root.hasClass("key") || (root = root.closest(".key"));
                    if ((root.hasClass("empty-container-image") || root.hasClass("empty-container-text")) && !row.hasClass("row")) {
                        row.wrap("<div class='table-row'></div>");
                        row.before("<div class='table-cell'></div>");
                        row.addClass("table-cell");
                        return row.parent();
                    }
                    return row;
                }
            };
            PageElementBaseJQ.prototype.AdjustElement = function(element, adjust) {
                if (1 == this.ProcessKey() && void 0 != element && void 0 != adjust) {
                    void 0 != adjust.height && jQuery(element).css("min-height", adjust.height + "px");
                    void 0 != adjust.width && jQuery(element).css("width", adjust.width + "px");
                    if (void 0 != adjust.padding) {
                        var padding = adjust.padding;
                        if (void 0 != padding.all) jQuery(element).css("padding", padding.all + "px"); else {
                            void 0 != padding.left && jQuery(element).css("padding-left", padding.left + "px");
                            void 0 != padding.top && jQuery(element).css("padding-top", padding.top + "px");
                            void 0 != padding.right && jQuery(element).css("padding-right", padding.right + "px");
                            void 0 != padding.bottom && jQuery(element).css("padding-bottom", padding.bottom + "px");
                        }
                    }
                    if (void 0 != adjust.margin) {
                        var margin = adjust.margin;
                        if (void 0 != margin.all) jQuery(element).css("margin", margin.all + "px"); else {
                            void 0 != margin.left && jQuery(element).css("margin-left", margin.left + "px");
                            void 0 != margin.top && jQuery(element).css("margin-top", margin.top + "px");
                            void 0 != margin.right && jQuery(element).css("margin-right", margin.right + "px");
                            void 0 != margin.bottom && jQuery(element).css("margin-bottom", margin.bottom + "px");
                        }
                    }
                }
            };
            PageElementBaseJQ.prototype.Add = function(root, element, className, rowcolumn, front, useSmartObj, beforeAfter) {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed && 1 == this.ProcessKey()) {
                    void 0 != element && element.find(".debug-css").html("");
                    var row = 0, column = 0;
                    void 0 == root && (root = this.Get());
                    if (void 0 != rowcolumn) {
                        if ("" != rowcolumn) {
                            var rowcolumNumber = rowcolumn.toString().split(" ");
                            try {
                                var tempForTry = Number(rowcolumNumber[0]);
                                tempForTry = Number(rowcolumNumber[1]);
                            } catch (ex) {
                                this.Log("Add(): Row or Column is not a number : provided values (" + rowcolumn + ")");
                                return;
                            }
                            if (void 0 != rowcolumNumber && rowcolumNumber.length > 1) {
                                row = Number(rowcolumNumber[0]) + 1;
                                column = Number(rowcolumNumber[1]);
                            }
                        }
                        if (!(jQuery(root).find(".jqRootRow:nth-child(" + row + ")").children().eq(column).length > 0)) {
                            this.Log(" Add() : [" + jQuery(root).attr("class") + "] do not have row column [" + row + "," + column + "] to add element");
                            return;
                        }
                        root = jQuery(root).find(".jqRootRow:nth-child(" + row + ")").children().eq(column);
                    } else this.Log("Warning : Please Add Row to  [" + jQuery(root).attr("class") + "] ");
                    if (void 0 != element) {
                        if ("object" != typeof element) {
                            var tempElement = document.createElement("span");
                            jQuery(tempElement).append(element);
                            element = jQuery(tempElement);
                        }
                        jQuery(element).addClass(className);
                    }
                    element.attr("class");
                    if (1 == useSmartObj && null != window.smartObj && null != window.smartObj.currentObj && "" != window.smartObj.command) if ("n" == window.smartObj.command || "" == window.smartObj.command) {
                        jQuery(window.smartObj.currentObj).after(element);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    } else {
                        jQuery(window.smartObj.currentObj).before(element);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    } else if (1 == front) jQuery("div[src='xa.xml']").length > 2 && 1 == impAuth.Auth.AuthJQ.IsAuth && jQuery(root).prepend(element); else if (jQuery("div[src='xa.xml']").length > 2 && 1 == impAuth.Auth.AuthJQ.IsAuth) {
                        if (void 0 == jQuery(root).attr("unique-id")) {
                            uniqureId++;
                            jQuery(root).attr("unique-id", uniqureId);
                        }
                        void 0 == beforeAfter ? jQuery(root).append(element) : 1 == beforeAfter ? jQuery(root).before(element) : jQuery(root).after(element);
                        if (jQuery(element).hasClass("jq-Any")) {
                            var undomanager = new impUndoManager.Manager.UndoManager();
                            undomanager.BeforeOperation();
                        } else {
                            var undomanager = new impUndoManager.Manager.UndoManager();
                            undomanager.BeforeOperation();
                        }
                    }
                }
            };
            PageElementBaseJQ.prototype.AddContent = function(content, className, rowcolumn, front) {
                this.CreateNotExist();
                void 0 != content && "" != content && this.Add(this.Get(), content, className, rowcolumn, front, void 0, void 0);
            };
            PageElementBaseJQ.prototype.AddTemplate = function(root, template, className, rowcolumn) {
                if (void 0 != root) {
                    (void 0 == template || "" == template) && (template = this.qualifiedTemplatePath);
                    template.indexOf(".html") > 0 ? this.Add(jQuery(root), jQuery('<div class="' + className + '" ng-include="\'/static/' + template + "'\"></div>"), className, rowcolumn, !1, void 0, void 0) : this.Add(jQuery(root), jQuery('<div class="' + className + '" ng-include="\'' + template + "'\"></div>"), className, rowcolumn, !1, void 0, void 0);
                } else new impError.ErrorHandle.ErrorJQ().LogMessage(" AddTemlate() > root is undefined");
            };
            PageElementBaseJQ.prototype.RemoveColumn = function(rowNumber, columnNumber) {
                var row = jQuery(this.Get()).find(".jqRootRow:nth-child(" + rowNumber + ")");
                jQuery(row).length > 0 ? jQuery(jQuery(row).children().eq(columnNumber)).remove() : this.Log("[" + rowNumber + "," + columnNumber + "] column not found");
            };
            PageElementBaseJQ.prototype.GetRow = function(rowNumber) {
                var row = jQuery(this.Get()).find(".jqRootRow:nth-child(" + rowNumber + ")");
                if (jQuery(row).length > 0) return jQuery(row);
                this.Log("[" + rowNumber + "] row not found");
            };
            PageElementBaseJQ.prototype.GetColumn = function(rowNumber, columnNumber) {
                rowNumber += 1;
                var row = jQuery(this.Get()).find(".jqRootRow:nth-child(" + rowNumber + ")");
                if (jQuery(row).length > 0) return jQuery(row).children().eq(columnNumber);
                this.Log("[" + rowNumber + "," + columnNumber + "] column not found");
            };
            PageElementBaseJQ.prototype.ProcessKey = function() {
                try {
                    var str = this.GetKey();
                    if (1 == this.IsInIframe()) return !1;
                    if (7 != impConstants.Constants.ConstantsJQ.SecureStrLength) return !1;
                    for (var j = 0, i = 6; i >= 0; i--) {
                        if (this.NextChar(str[j]) != impConstants.Constants.ConstantsJQ.Str[i]) return !1;
                        j++;
                    }
                    return !0;
                } catch (ex) {
                    return !1;
                }
            };
            PageElementBaseJQ.prototype.GetKey = function() {
                return new impUrl.Common.UrlJQ().GetDocumentLocation();
            };
            PageElementBaseJQ.prototype.IsInIframe = function() {
                try {
                    return window.self !== window.top;
                } catch (e) {
                    return !0;
                }
            };
            PageElementBaseJQ.prototype.NextChar = function(c) {
                return String.fromCharCode(c.charCodeAt(0) + 1);
            };
            return PageElementBaseJQ;
        }();
        Page.PageElementBaseJQ = PageElementBaseJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Page/HeaderJQ", [ "require", "exports", "./PageElementBaseJQ", "../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var HeaderJQ = function(_super) {
            function HeaderJQ(extra, typeName) {
                void 0 != typeName || (typeName = "Header");
                _super.call(this, null, typeName, impConsts.Constants.ConstantsJQ.PAGEROOT, null);
            }
            __extends(HeaderJQ, _super);
            return HeaderJQ;
        }(impPage.Page.PageElementBaseJQ);
        Page.HeaderJQ = HeaderJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Page/MenuBarJQ", [ "require", "exports", "./PageElementBaseJQ", "../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var MenuBarJQ = function(_super) {
            function MenuBarJQ(extra, typeName) {
                void 0 != typeName || (typeName = "MenuBar");
                _super.call(this, null, typeName, impConsts.Constants.ConstantsJQ.PAGEROOT, null);
            }
            __extends(MenuBarJQ, _super);
            return MenuBarJQ;
        }(impPage.Page.PageElementBaseJQ);
        Page.MenuBarJQ = MenuBarJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Page/ContentJQ", [ "require", "exports", "./PageElementBaseJQ", "../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var ContentJQ = function(_super) {
            function ContentJQ(extra, typeName) {
                void 0 != typeName || (typeName = "Content");
                _super.call(this, null, typeName, impConsts.Constants.ConstantsJQ.PAGEROOT, null);
            }
            __extends(ContentJQ, _super);
            return ContentJQ;
        }(impPage.Page.PageElementBaseJQ);
        Page.ContentJQ = ContentJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Page/FooterJQ", [ "require", "exports", "./PageElementBaseJQ", "../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var FooterJQ = function(_super) {
            function FooterJQ(extra, typeName) {
                void 0 != typeName || (typeName = "Footer");
                _super.call(this, null, typeName, impConsts.Constants.ConstantsJQ.PAGEROOT, null);
            }
            __extends(FooterJQ, _super);
            return FooterJQ;
        }(impPage.Page.PageElementBaseJQ);
        Page.FooterJQ = FooterJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Page/AnyJQ", [ "require", "exports", "./PageElementBaseJQ", "../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var AnyJQ = function(_super) {
            function AnyJQ(extra) {
                _super.call(this, null, "Any", impConsts.Constants.ConstantsJQ.PAGEROOT, null);
            }
            __extends(AnyJQ, _super);
            return AnyJQ;
        }(impPage.Page.PageElementBaseJQ);
        Page.AnyJQ = AnyJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

define("Page/PageJQ", [ "require", "exports", "./HeaderJQ", "./MenuBarJQ", "./ContentJQ", "./FooterJQ", "./AnyJQ", "../Menu/MenuTemplateJQ" ], function(require, exports, impHeader, impMenuBar, impContent, impFooter, impAny, impMenuTemplate) {
    "use strict";
    var Page;
    !function(Page) {
        var PageJQ = function() {
            function PageJQ(configuration) {
                this.pageConfiguration = configuration;
                this.Header = new impHeader.Page.HeaderJQ(null);
                this.MenuBar = new impMenuBar.Page.MenuBarJQ(null);
                this.MenuTemplate = new impMenuTemplate.Page.Menu.MenuTemplateJQ();
                this.Content = new impContent.Page.ContentJQ(null);
                this.Footer = new impFooter.Page.FooterJQ(null);
                this.Any = new impAny.Page.AnyJQ(null);
            }
            return PageJQ;
        }();
        Page.PageJQ = PageJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

define("Page/Context/ContextJQ", [ "require", "exports", "../PageJQ", "../../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var ContextJQ = function() {
            function ContextJQ() {
                this.Page = new impPage.Page.PageJQ(null);
                this.Constants = new impConsts.Constants.ConstantsJQ();
            }
            return ContextJQ;
        }();
        Page.ContextJQ = ContextJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

define("ContextMenu/ContextMenuJQ", [ "require", "exports", "../Watch/WatchMouseJQ", "../Controls/ControlsJQ", "../Watch/CopyPasteJQ", "../Controls/ImageJQ", "../Controls/BorderJQ", "../Controls/ColorJQ", "../Controls/TextJQ", "../SmartMenu/SmartMenuJQ", "../Controls/Menujq", "../Controls/BIjq", "../Controls/SpacerJQ", "../Controls/LinkJQ", "../Controls/HtmlJQ", "../Controls/MarginJQ", "../Controls/PaddingJQ", "../Controls/FrontBackJQ", "../Controls/OpacityJQ", "../Controls/BorderShadow", "jquery" ], function(require, exports, impWatch, impAddRowControl, impCopy, impInsertImage, impBorder, impColor, impText, impHeightWidth, impMenuControl, impBi, impSpacer, impLink, impHtml, impMargin, impPadding, impFrontBack, impOpacity, impBorderShadow, jQuery) {
    "use strict";
    var ContextMenu, G_isAttachedContextMenu = !1, CTX_MENU_DISABLED_CLASS = "ctx-menu-disabled", ctxMenuIsReady = !1;
    !function(ContextMenu) {
        var ContextMenuJQ = function() {
            function ContextMenuJQ(extra) {
                this.controlId = "#contextMenu";
            }
            ContextMenuJQ.prototype.Init = function() {
                this.MainEvents();
            };
            ContextMenuJQ.ContextMenuBinding = function() {
                jQuery(document).on("click", function(e) {
                    var contextMenu = new ContextMenuJQ();
                    contextMenu.DetectContextMenu();
                });
                jQuery(document).bind("contextmenu", function(e) {
                    impWatch.Watch.MouseJQ.ProcessClick(e);
                    window.setTimeout(function() {
                        try {
                            impWatch.Watch.MouseJQ.nearestElement = jQuery("#nononononelement");
                            var x = e.clientX, y = e.clientY + jQuery(document).scrollTop();
                            jQuery(".nearest-element").removeClass("nearest-element");
                            var column = impWatch.Watch.MouseJQ.selectedElement;
                            impWatch.Watch.MouseJQ.selectedElement.hasClass("image-text-other") && (column = impWatch.Watch.MouseJQ.selectedElement.closest(".column"));
                            if (column.hasClass("column")) {
                                var $elements = impWatch.Watch.MouseJQ.selectedElement.find(".image-text-other"), nearestLeftArray = [], nearestTopArray = [];
                                if ($elements.length > 0) {
                                    $elements.each(function(index, _this) {
                                        var $this = jQuery(_this), top = parseFloat($this.attr("top")), bottom = parseFloat($this.attr("bottom")), left = parseFloat($this.attr("left"));
                                        if (y >= top && bottom >= y && x >= left) {
                                            nearestLeftArray.push(left);
                                            nearestTopArray.push(top);
                                        }
                                    });
                                    var nearestLeft = 0, nearestTop = 0;
                                    nearestLeftArray.length > 0 && (nearestLeft = Math.max.apply(Math, nearestLeftArray));
                                    nearestTopArray.length > 0 && (nearestTop = Math.max.apply(Math, nearestTopArray));
                                    column.find(".image-text-other[left='" + nearestLeft + "'][top='" + nearestTop + "']").addClass("nearest-element");
                                    impWatch.Watch.MouseJQ.nearestElement = jQuery(".nearest-element").first();
                                }
                            }
                        } catch (ex) {}
                    }, 5);
                    e.preventDefault();
                    var contextMenu = new ContextMenuJQ();
                    contextMenu.DetectContextMenu();
                    var pageY = e.clientY;
                    pageY >= 350 && (pageY -= jQuery("#contextMenu").height());
                    var pageX = e.clientX;
                    pageX > jQuery(document).width() - 200 && (pageX -= 150);
                    jQuery(contextMenu.controlId).css("left", pageX + "px");
                    jQuery(contextMenu.controlId).css("top", pageY + "px");
                    jQuery(contextMenu.controlId).fadeIn(500);
                    e.cancelBubble = !1;
                });
            };
            ContextMenuJQ.prototype.DetectContextMenu = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selectedElement) {
                    jQuery(".ctx-menu-add-row").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-cut").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-copy").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-paste").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-text").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-image").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-youtube").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-html").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-css").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-menu").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-empty-space").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-link").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-object").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-delete-element").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    selectedElement.hasClass("root-elements") && jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    if (selectedElement.hasClass("jqRootRow")) {
                        jQuery(".ctx-menu-cut").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-copy").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-paste").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    }
                    if (selectedElement.hasClass("column")) {
                        jQuery(".ctx-menu-paste").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert-image").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    }
                    if (selectedElement.hasClass("image-text-other")) {
                        jQuery(".ctx-menu-cut").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-copy").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-paste").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert-image").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    }
                    if (selectedElement.hasClass("page")) {
                        jQuery(".ctx-menu-add-row").parent().addClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-height-width").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    }
                    selectedElement.hasClass("row") && jQuery(".ctx-menu-add-row").parent().addClass(CTX_MENU_DISABLED_CLASS);
                }
            };
            ContextMenuJQ.AttachDeleteElement = function() {
                jQuery(".li.ctx-menu-delete-element").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.DeleteElement();
                });
            };
            ContextMenuJQ.AttachInsertLinkContainer = function() {
                jQuery(".li.ctx-menu-insert-link-container").on("click", function() {
                    window.smartObj = null;
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || impCopy.CopyPaste.CopyPasteJQ.CreateLinkContainer();
                });
            };
            ContextMenuJQ.AttachInsertLink = function() {
                new impLink.Link.LinkJQ().Init();
                jQuery(".ctx-menu-insert-link").on("click", function() {
                    window.smartObj = null;
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowControlInsertLink();
                        impLink.Link.LinkJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachInsertHTML = function() {
                new impHtml.Html.HtmlJQ().Init();
                jQuery(".ctx-menu-insert-html").on("click", function() {
                    window.smartObj = null;
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.ShowControlInsertHTML();
                });
            };
            ContextMenuJQ.AttachInsertText = function() {
                jQuery(".li.smart-menu-insert-text").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("Sample text to edit");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".li.ctx-menu-insert-text").on("click", function() {
                    window.smartObj = null;
                    impText.Text.TextJQ.InsertTextBlock("Sample text to edit");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-normal-text").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock(" Sample text to edit");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-1").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h1> Heading1 to edit</h1>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-2").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h2> Heading2 to edit</h2>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-3").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h3> Heading3 to edit</h3>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-4").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h4> Heading4 to edit</h4>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-5").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h5> Heading5 to edit</h5>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
            };
            ContextMenuJQ.AttachControlPageClose = function() {
                jQuery(".control-templates").find(".close-button").on("click", function() {
                    jQuery(".control-page").removeClass("control-active");
                    ContextMenuJQ.ShowProperties();
                });
                jQuery(".control-page").find(".close-button").on("click", function() {
                    jQuery(".control-page").removeClass("control-active");
                    ContextMenuJQ.ShowProperties();
                    jQuery(".internet-bi-image-url").val("");
                    jQuery(".internet-image-url").val("");
                });
            };
            ContextMenuJQ.ShowProperties = function() {
                jQuery(".jq-properties-all").hasClass("forced-hide") || jQuery(".jq-properties-all").show();
            };
            ContextMenuJQ.ControlPageHide = function() {
                jQuery(".control-page").hide();
                jQuery(".control-page").attr("style", "");
                jQuery(".control-page").css("display", "none");
                jQuery(".control-page").removeClass("control-active");
                if ("block" == jQuery(".jq-properties-all").css("display")) {
                    jQuery(".jq-properties-all").addClass("normal-hide");
                    jQuery(".jq-properties-all").hide();
                } else jQuery(".jq-properties-all").hasClass("forced-hide") || jQuery(".jq-properties-all").show();
            };
            ContextMenuJQ.ShowControlInsertLink = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-insert-link").addClass("control-active");
                impLink.Link.LinkJQ.Show();
            };
            ContextMenuJQ.ShowControlInsertHTML = function() {
                ContextMenuJQ.ControlPageHide();
                impHtml.Html.HtmlJQ.Show();
            };
            ContextMenuJQ.ShowControlInsertText = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".editor").show();
                jQuery(".jqte-editor, .column").removeClass("current-editor-scope");
                jQuery(this).find(".jqte-editor").addClass("current-editor-scope");
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-insert-text").addClass("control-active");
                jQuery("#control-insert-text").show();
                jQuery("#control-insert-text").trigger("cust_loaded");
            };
            ContextMenuJQ.ShowControlAddRow = function() {
                ContextMenuJQ.ControlPageHide();
                var controlId = impAddRowControl.Page.AddRowJQ.pageId;
                jQuery(".control-page").removeClass("control-active");
                jQuery(controlId).addClass("control-active");
                jQuery(controlId).show();
                jQuery(controlId).trigger("cust_loaded");
            };
            ContextMenuJQ.ShowMenu = function() {
                new impMenuControl.Menu.MenuJQ().Init();
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery(".control-menu").addClass("control-active");
                jQuery(".control-menu").show();
                impMenuControl.Menu.MenuJQ.ProcessShow();
            };
            ContextMenuJQ.InsertImage = function() {
                ContextMenuJQ.ControlPageHide();
                var controlId = impInsertImage.Image.SelfJQ.controlId;
                jQuery(".control-page").removeClass("control-active");
                jQuery(controlId).addClass("control-active");
                jQuery(".action-button-insert-image").show();
                jQuery(".action-button-change-image").hide();
                jQuery(controlId).show();
                jQuery(controlId).trigger("custom_loaded");
            };
            ContextMenuJQ.CopyElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Copy();
            };
            ContextMenuJQ.DeleteElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Delete();
            };
            ContextMenuJQ.CutElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Cut();
            };
            ContextMenuJQ.PasteElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Paste();
            };
            ContextMenuJQ.PasteClipBorad = function() {
                jQuery(".jq-clipboard").html("");
                jQuery("#control-insert-clipboard").show();
            };
            ContextMenuJQ.ShowControlHeightWidth = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-height-width").addClass("control-active");
                jQuery("#control-height-width").show();
            };
            ContextMenuJQ.ShowBorderControl = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-border").addClass("control-active");
                jQuery("#control-border").show();
            };
            ContextMenuJQ.ShowMarginControl = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-margin").addClass("control-active");
                jQuery("#control-margin").show();
            };
            ContextMenuJQ.ShowPaddingControl = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-padding").addClass("control-active");
                jQuery("#control-padding").show();
            };
            ContextMenuJQ.ShowOpacity = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-opacity").addClass("control-active");
                jQuery("#control-opacity").show();
            };
            ContextMenuJQ.ShowZindex = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-zindex").addClass("control-active");
                jQuery("#control-zindex").show();
            };
            ContextMenuJQ.ShowBS = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-border-shadow").addClass("control-active");
                jQuery("#control-border-shadow").show();
            };
            ContextMenuJQ.ShowColor = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-color").addClass("control-active");
                jQuery("#control-color").show();
            };
            ContextMenuJQ.ShowBackgroundImage = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-bi").addClass("control-active");
                jQuery("#control-bi").show();
            };
            ContextMenuJQ.AttachAddRow = function() {
                jQuery(".li.ctx-menu-add-row").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowControlAddRow();
                        impAddRowControl.Page.AddRowJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachHeightWidth = function() {
                jQuery(".li.ctx-menu-height-width").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowControlHeightWidth();
                        impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachBorder = function() {
                new impBorder.Border.BorderJQ().Init();
                jQuery(".li.ctx-menu-border").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowBorderControl();
                        impBorder.Border.BorderJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachMargin = function() {
                new impMargin.Margin.MarginJQ().Init();
                jQuery(".li.ctx-menu-margin").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowMarginControl();
                        impMargin.Margin.MarginJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachPadding = function() {
                new impPadding.Padding.PaddingJQ().Init();
                jQuery(".li.ctx-menu-padding").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowPaddingControl();
                        impPadding.Padding.PaddingJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachOpacity = function() {
                new impOpacity.Opacity.OpacityJQ().Init();
                jQuery(".li.ctx-menu-opacity").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowOpacity();
                        impOpacity.Opacity.OpacityJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachZindex = function() {
                new impFrontBack.FrontBack.FrontBackJQ().Init();
                jQuery(".li.ctx-menu-z-index").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowZindex();
                        impFrontBack.FrontBack.FrontBackJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachBorderShadow = function() {
                new impBorderShadow.BorderShadow.BorderShadowJQ().Init();
                jQuery(".li.ctx-menu-border-shadow").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowBS();
                        impBorderShadow.BorderShadow.BorderShadowJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachCopy = function() {
                jQuery(".li.ctx-menu-copy").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.CopyElement();
                });
            };
            ContextMenuJQ.AttachCut = function() {
                jQuery(".li.ctx-menu-cut").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.CutElement();
                });
            };
            ContextMenuJQ.AttachPaste = function() {
                jQuery(".li.ctx-menu-paste").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.PasteElement();
                });
            };
            ContextMenuJQ.AttachPasteClipBorad = function() {
                jQuery(".li.ctx-menu-paste-clipborad").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.PasteClipBorad();
                });
            };
            ContextMenuJQ.AttachSpacer = function() {
                jQuery(".smart-menu-insert-empty-space").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || impSpacer.Spacer.SpacerJQ.InsertSpacer();
                });
                jQuery(".ctx-menu-insert-empty-space").on("click", function() {
                    window.smartObj = null;
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || impSpacer.Spacer.SpacerJQ.InsertSpacer();
                });
            };
            ContextMenuJQ.AttachInsertImage = function() {
                new impInsertImage.Image.SelfJQ().Init();
                jQuery(".li.smart-menu-insert-image").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.InsertImage();
                        impInsertImage.Image.SelfJQ.ProcessSelectNotify();
                    }
                });
                jQuery(".li.ctx-menu-insert-image").on("click", function() {
                    window.smartObj = null;
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.InsertImage();
                        impInsertImage.Image.SelfJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachBackgroundImage = function() {
                new impBi.BI.BIJQ().Init();
                jQuery(".li.ctx-menu-background-image").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowBackgroundImage();
                        impBi.BI.BIJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachInsertMenu = function() {
                jQuery(".li.ctx-menu-insert-menu").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowMenu();
                        impMenuControl.Menu.MenuJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachColor = function() {
                new impColor.Color.ColorJQ().Init();
                jQuery(".li.ctx-menu-color").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowColor();
                        impColor.Color.ColorJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.ContextInnerMenuShowHide = function() {
                jQuery("#contextMenuitems").find(".li").on("mouseenter", function(e) {
                    var left = 147;
                    e.pageX > jQuery(document).width() - 200 && (left = -150);
                    jQuery(this).parent().find(".innerListContainer").first().css("left", left + "px");
                    jQuery(this).parent().find(".innerListContainer").first().css("display", "block");
                });
                jQuery("#contextMenuitems").find("li").on("mouseleave", function(e) {
                    jQuery(this).find(".innerListContainer").first().css("display", "none");
                });
            };
            ContextMenuJQ.LiClick = function() {
                jQuery("#contextMenuitems > li").on("click", function() {});
            };
            ContextMenuJQ.prototype.MainEvents = function() {
                jQuery(document).ready(function() {
                    if (0 == ctxMenuIsReady) {
                        ctxMenuIsReady = !0;
                        jQuery(document).on("click", function() {
                            jQuery("#contextMenu").hide(500);
                            jQuery("#smInsertNextPrev").hide(500);
                        });
                        if (0 == G_isAttachedContextMenu) {
                            G_isAttachedContextMenu = !0;
                            ContextMenuJQ.ContextMenuBinding();
                            ContextMenuJQ.LiClick();
                            ContextMenuJQ.ContextInnerMenuShowHide();
                            ContextMenuJQ.AttachInsertLinkContainer();
                            ContextMenuJQ.AttachInsertLink();
                            ContextMenuJQ.AttachInsertHTML();
                            ContextMenuJQ.AttachInsertText();
                            ContextMenuJQ.AttachAddRow();
                            ContextMenuJQ.AttachDeleteElement();
                            ContextMenuJQ.AttachHeightWidth();
                            ContextMenuJQ.AttachCopy();
                            ContextMenuJQ.AttachPaste();
                            ContextMenuJQ.AttachPasteClipBorad();
                            ContextMenuJQ.AttachCut();
                            ContextMenuJQ.AttachInsertImage();
                            ContextMenuJQ.AttachSpacer();
                            ContextMenuJQ.AttachBorder();
                            ContextMenuJQ.AttachMargin();
                            ContextMenuJQ.AttachZindex();
                            ContextMenuJQ.AttachBorderShadow();
                            ContextMenuJQ.AttachOpacity();
                            ContextMenuJQ.AttachPadding();
                            ContextMenuJQ.AttachColor();
                            ContextMenuJQ.AttachInsertMenu();
                            ContextMenuJQ.AttachBackgroundImage();
                            ContextMenuJQ.AttachControlPageClose();
                        }
                    }
                });
            };
            return ContextMenuJQ;
        }();
        ContextMenu.ContextMenuJQ = ContextMenuJQ;
    }(ContextMenu = exports.ContextMenu || (exports.ContextMenu = {}));
});

define("_Classes/LoadingJQ", [ "require", "exports", "jquery" ], function(require, exports, jQuery) {
    "use strict";
    var Loading;
    !function(Loading) {
        var LoadingJQ = function() {
            function LoadingJQ(controlId) {
                this.src = "/content/loading/colors.gif";
                this.controlId = controlId;
                this.Create();
            }
            LoadingJQ.prototype.Create = function() {
                var loading = jQuery(".loading.clonable").clone();
                loading.removeClass("clonable");
                loading.addClass("new");
                loading.removeClass("hide");
                loading.find("img").first().attr("src", this.src);
                jQuery(this.controlId).find(".loading.new").remove();
                jQuery(this.controlId).append(loading);
            };
            LoadingJQ.prototype.Init = function() {
                this.Show();
            };
            LoadingJQ.prototype.IsExist = function() {
                return jQuery(this.controlId).find(".loading.new").length > 0 ? !0 : !1;
            };
            LoadingJQ.prototype.Show = function() {
                if (this.IsExist()) jQuery(this.controlId).find(".loading.new").first().show(); else {
                    this.Create();
                    jQuery(this.controlId).find(".loading.new").first().show();
                }
            };
            LoadingJQ.prototype.Hide = function() {
                jQuery(this.controlId).find(".loading.new").first().hide();
            };
            return LoadingJQ;
        }();
        Loading.LoadingJQ = LoadingJQ;
    }(Loading = exports.Loading || (exports.Loading = {}));
});

define("controls/controlcommonjq", [ "require", "exports", "./JQueryUI", "../common/on", "../JQte/OnInsert", "jquery" ], function(require, exports, impJQueryUI, impOn, impJqteOnInsert, jQuery) {
    "use strict";
    var ControlCommon;
    !function(ControlCommon) {
        var Code = function() {
            function Code() {}
            Code.AttachClick = function() {
                jQuery("#control-common-execute").on("click", function() {
                    Code.DestroyResizable();
                    Code.Execute();
                });
            };
            Code.Execute = function() {
                window.setTimeout(function() {
                    impOn.On.Code.Execute();
                    new impJqteOnInsert.OnInsert.Code().Init();
                    impJQueryUI.JQueryUI.CommonCode.ResizableColumn();
                    impJQueryUI.JQueryUI.CommonCode.Resizable(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other", "s");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other-left", "e");
                    impJQueryUI.JQueryUI.CommonCode.Draggable(".jq-normal-link .empty-container, .empty-container-menu, .empty-container-text, .empty-container-image, .empty-container-spacer", "");
                    jQuery(".empty-container-text, .empty-container-image").css("z-index", "0");
                    jQuery(".column").each(function() {
                        if (0 == jQuery(this).children(".image-text-other.empty-container-image, .image-text-other.empty-container-text, .row, .column").length) {
                            jQuery(this).addClass("empty");
                            0 == jQuery(this).find(".empty-drop-element").length && jQuery(this).append("<div class='image-text-other empty-drop-element' ></div>");
                        } else {
                            jQuery(this).removeClass("empty");
                            jQuery(this).find(".empty-drop-element").remove();
                        }
                    });
                    jQuery(".image-text-other, .empty-container-empty").each(function(index, _this) {
                        var $this = jQuery(_this), bottom = $this.offset().top + $this.height(), top = $this.offset().top, left = $this.offset().left;
                        $this.attr("top", top);
                        $this.attr("bottom", bottom);
                        $this.attr("left", left);
                    });
                    impJQueryUI.JQueryUI.CommonCode.Droppable(".column, .empty-container, .image-text-other");
                    jQuery(".ui-resizable-e").html("<div class='jq-square jq-square-e'></div>");
                    jQuery(".ui-resizable-se").html("<div class='jq-square jq-square-se'></div>");
                    jQuery(".ui-resizable-s").html("<div class='jq-square jq-square-s'></div>");
                }, 10);
            };
            Code.DestroyResizable = function() {
                impJQueryUI.JQueryUI.CommonCode.DroppableDestroy(".column, .empty-container, .image-text-other");
                impJQueryUI.JQueryUI.CommonCode.DraggableDestroy(".jq-normal-link, .empty-container, .empty-container-menu, .empty-container-text .empty-container-image, .empty-container-spacer");
                impJQueryUI.JQueryUI.CommonCode.ResizableDestroy(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image, .column, .empty-container, .root-elements, .adjust-image-text-other, .adjust-image-text-other-left");
            };
            Code.AnchorClicked = !1;
            return Code;
        }();
        ControlCommon.Code = Code;
    }(ControlCommon = exports.ControlCommon || (exports.ControlCommon = {}));
});

define("Themes/EmptyLayout/EmptyLayoutJQ", [ "require", "exports", "../../Page/HeaderJQ", "../../Page/MenuBarJQ", "../../Page/ContentJQ", "../../Page/FooterJQ", "../../_Classes/CssClass", "../../_Classes/LoadingJQ", "../../page/anyjq", "../../Error/ErrorJQ", "../../UndoManager/UndoManager", "../../Preview/Preview", "../../ContextMenu/ContextMenuJQ", "../../controls/controlcommonjq", "jquery" ], function(require, exports, impHeader, impMenuBar, impBody, impFooter, impCss, impLoading, impAny, impError, impUndoManager, impPreview, impCtxMenu, impControlCommon, jQuery) {
    "use strict";
    window.layoutCreating = !0;
    var Themes;
    !function(Themes) {
        var Empty;
        !function(Empty) {
            var LayoutJQ = function() {
                function LayoutJQ() {
                    this.controlId = "#control-templates";
                    window.layoutCreating = !0;
                    LayoutJQ.loading = new impLoading.Loading.LoadingJQ(this.controlId);
                    LayoutJQ.loading.Init();
                }
                LayoutJQ.prototype.Init = function() {
                    try {
                        this.Layout(LayoutJQ.layout);
                        this.Layout(LayoutJQ.layout3);
                        this.Layout(LayoutJQ.layout6);
                        this.Layout(LayoutJQ.layout1);
                        this.Layout(LayoutJQ.layout4);
                        this.Layout(LayoutJQ.layout7);
                        this.Layout(LayoutJQ.layout2);
                        this.Layout(LayoutJQ.layout5);
                        this.Layout(LayoutJQ.layout8);
                        jQuery(".empty-layout-templates").find(".ui-resizable-handle").hide();
                        jQuery(".empty-layout-templates .row").removeClass("design-row");
                        jQuery(".empty-layout-templates .column").css("outline", "1px solid #282424");
                        jQuery(".empty-layout-templates .root-elements").css("padding", "0");
                        this.Attach();
                    } catch (ex) {}
                    window.layoutCreating = !1;
                    var undo = new impUndoManager.Manager.UndoManager();
                    undo.BeforeOperation();
                };
                LayoutJQ.prototype.Attach = function() {
                    jQuery(".empty-layout").on("click", function() {
                        jQuery(".empty-layout").removeClass("empty-layout-select");
                        jQuery(this).addClass("empty-layout-select");
                    });
                    jQuery(".create-layout-show-button").on("click", function() {
                        impPreview.Preview.PreviewJQ.ClosePreview();
                        jQuery(".jq-row-plus-container").hide();
                        impCtxMenu.ContextMenu.ContextMenuJQ.ControlPageHide();
                        jQuery(".control-templates").show();
                        jQuery(".control-templates").addClass("control-active");
                        jQuery(".empty-layout-templates .row").removeClass("padding-root-elements");
                        jQuery(".empty-layout-templates").find(".ui-resizable-handle").hide();
                        jQuery(".empty-layout-templates .row").removeClass("design-row");
                        jQuery(".empty-layout-templates .column").addClass("design-column");
                        jQuery(".empty-layout-templates .root-elements").css("padding", "0");
                    });
                    jQuery(".control-templates .close-button").click(function() {
                        (void 0 == jQuery(".empty-layout-select").attr("layout-id") || "" == jQuery(".empty-layout-select").attr("layout-id")) && LayoutJQ.CreateLayout("0", this);
                        jQuery(".column").removeClass("column-layout-border-yellow");
                        jQuery(".column").removeClass("column-layout-border-brown");
                    });
                    jQuery(".action-button-layout-create").on("click", function() {
                        LayoutJQ.CreateLayout(void 0, this);
                    });
                };
                LayoutJQ.CreateLayout = function(layoutId, $this) {
                    void 0 == layoutId && (layoutId = jQuery(".empty-layout-select").attr("layout-id"));
                    var errorHandler = new impError.ErrorHandle.ErrorJQ();
                    if (void 0 != layoutId) {
                        var layout = void 0;
                        switch (layoutId) {
                          case "0":
                            layout = LayoutJQ.layout;
                            break;

                          case "1":
                            layout = LayoutJQ.layout1;
                            break;

                          case "2":
                            layout = LayoutJQ.layout2;
                            break;

                          case "3":
                            layout = LayoutJQ.layout3;
                            break;

                          case "4":
                            layout = LayoutJQ.layout4;
                            break;

                          case "5":
                            layout = LayoutJQ.layout5;
                            break;

                          case "6":
                            layout = LayoutJQ.layout6;
                            break;

                          case "7":
                            layout = LayoutJQ.layout7;
                            break;

                          case "8":
                            layout = LayoutJQ.layout8;
                        }
                        if (void 0 != layout) {
                            var anyJQ = new impAny.Page.AnyJQ(""), staticElement = '<span title class="page-static-element-circle design-root-elements-static"> </span>';
                            jQuery("page .root-elements").html("");
                            anyJQ.AddRow(jQuery(".jq-Header"), layout.header.cols, "layout-column", void 0, void 0);
                            var newStaticElementWithTitle = staticElement.replace("title", "title='Header'");
                            jQuery(".jq-Header").prepend(newStaticElementWithTitle);
                            var adjustColumnHeightMB = new impCss.CssClass.AdjustJQ();
                            adjustColumnHeightMB.height = 50;
                            anyJQ.AddRow(jQuery(".jq-MenuBar"), layout.menuBar.cols, "layout-column", void 0, adjustColumnHeightMB);
                            newStaticElementWithTitle = staticElement.replace("title", "title='Menu Bar'");
                            jQuery(".jq-MenuBar").prepend(newStaticElementWithTitle);
                            var adjustColumnHeight = new impCss.CssClass.AdjustJQ();
                            adjustColumnHeight.height = 500;
                            anyJQ.AddRow(jQuery(".jq-Content"), layout.body.cols, "layout-column", void 0, adjustColumnHeight);
                            newStaticElementWithTitle = staticElement.replace("title", "title='Body'");
                            jQuery(".jq-Content").prepend(newStaticElementWithTitle);
                            anyJQ.AddRow(jQuery(".jq-Footer"), layout.footer.cols, "layout-column", void 0, void 0);
                            newStaticElementWithTitle = staticElement.replace("title", "title='Footer'");
                            jQuery(".jq-Footer").prepend(newStaticElementWithTitle);
                            errorHandler.ActionSuccess("Layout Created");
                            jQuery($this).closest(".control-page").hide();
                            var undoManager = new impUndoManager.Manager.UndoManager();
                            undoManager.PopUndo();
                            undoManager.PopUndo();
                            undoManager.PopUndo();
                            undoManager.PopUndo();
                            jQuery(".page").show();
                            impControlCommon.ControlCommon.Code.DestroyResizable();
                            impControlCommon.ControlCommon.Code.Execute();
                            undoManager.BeforeOperation();
                        } else errorHandler.ActionFail("Please try after some time.");
                    } else errorHandler.ActionFail("Please select a layout.!");
                    jQuery(".jq-row-plus-container").hide();
                };
                LayoutJQ.prototype.Layout = function(layout) {
                    var templateId = "template-" + layout.templateNumber, templateWrapper = jQuery(document.createElement("div"));
                    templateWrapper.addClass("empty-template-wrapper");
                    var template = jQuery(document.createElement("div")), dotTemplateId = ".template-" + layout.templateNumber;
                    template.addClass("float-left");
                    template.addClass("empty-layout");
                    template.addClass(templateId);
                    template.attr("layout-id", layout.templateNumber + "");
                    templateWrapper.append(template);
                    jQuery(".empty-layout-templates").append(templateWrapper);
                    var commonId = "T" + layout.templateNumber, headerId = commonId + "Header", header = new impHeader.Page.HeaderJQ("", headerId);
                    header.rootWrapper = dotTemplateId;
                    header.scopeId = ".empty-layout-templates";
                    var menuBarId = commonId + "MenuBar", menuBar = new impMenuBar.Page.MenuBarJQ("", menuBarId);
                    menuBar.rootWrapper = dotTemplateId;
                    menuBar.scopeId = ".empty-layout-templates";
                    var bodyId = commonId + "Body", body = new impBody.Page.ContentJQ("", bodyId);
                    body.rootWrapper = dotTemplateId;
                    body.scopeId = ".empty-layout-templates";
                    var footerId = commonId + "Footer", footer = new impFooter.Page.FooterJQ("", footerId);
                    footer.rootWrapper = dotTemplateId;
                    footer.scopeId = ".empty-layout-templates";
                    var adjustRow = new impCss.CssClass.AdjustJQ(), adjustColumn = new impCss.CssClass.AdjustJQ();
                    adjustRow.height = layout.header.height;
                    adjustColumn.height = layout.header.height;
                    header.AddRow(void 0, layout.header.cols, "layout-column", adjustRow, adjustColumn);
                    try {
                        header.GetColumn(1, 0).text("H");
                    } catch (ex) {}
                    adjustRow.height = layout.menuBar.height;
                    adjustColumn.height = layout.menuBar.height;
                    menuBar.AddRow(void 0, layout.menuBar.cols, "layout-column", adjustRow, adjustColumn);
                    try {
                        menuBar.GetColumn(1, 0).text("M");
                    } catch (ex) {}
                    adjustRow.height = layout.body.height;
                    adjustColumn.height = layout.body.height;
                    body.AddRow(void 0, layout.body.cols, "layout-column", adjustRow, adjustColumn);
                    try {
                        var column = body.GetColumn(1, 0);
                        column.text("B");
                    } catch (ex) {}
                    adjustRow.height = layout.footer.height;
                    adjustColumn.height = layout.footer.height;
                    footer.AddRow(void 0, layout.footer.cols, "layout-column", adjustRow, adjustColumn);
                    try {
                        var column = footer.GetColumn(1, 0);
                        column.text("F");
                    } catch (ex) {}
                };
                LayoutJQ.layout = {
                    templateNumber: 0,
                    header: {
                        height: 41,
                        cols: "col-xs-48"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-48"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout1 = {
                    templateNumber: 1,
                    header: {
                        height: 41,
                        cols: "col-xs-48"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-12 col-xs-36"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout2 = {
                    templateNumber: 2,
                    header: {
                        height: 41,
                        cols: "col-xs-48"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-12 col-xs-24 col-xs-12"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout3 = {
                    templateNumber: 3,
                    header: {
                        height: 41,
                        cols: "col-xs-12 col-xs-36"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-48"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout4 = {
                    templateNumber: 4,
                    header: {
                        height: 41,
                        cols: "col-xs-12 col-xs-36"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-12 col-xs-36"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout5 = {
                    templateNumber: 5,
                    header: {
                        height: 41,
                        cols: "col-xs-12 col-xs-36"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-12 col-xs-24 col-xs-12"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout6 = {
                    templateNumber: 6,
                    header: {
                        height: 41,
                        cols: "col-xs-12 col-xs-20 col-xs-16"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-48"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout7 = {
                    templateNumber: 7,
                    header: {
                        height: 41,
                        cols: "col-xs-12 col-xs-20 col-xs-16"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-12 col-xs-36"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout8 = {
                    templateNumber: 8,
                    header: {
                        height: 41,
                        cols: "col-xs-12 col-xs-20 col-xs-16"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-12 col-xs-24 col-xs-12"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                return LayoutJQ;
            }();
            Empty.LayoutJQ = LayoutJQ;
        }(Empty = Themes.Empty || (Themes.Empty = {}));
    }(Themes = exports.Themes || (exports.Themes = {}));
});

define("Common/on", [ "require", "exports", "../page/anyjq", "../Watch/WatchMouseJQ", "jquery" ], function(require, exports, impAny, impWatch, jQuery) {
    "use strict";
    var On;
    !function(On) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        On.SmartObj = SmartObj;
        var Code = function() {
            function Code() {}
            Code.Execute = function() {
                Code.BindPlus();
                Code.BindEC();
            };
            Code.BindEC = function() {
                jQuery(".empty-container").unbind("click");
                jQuery(".empty-container").on("click", function() {
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    void 0 != selectedElement && selectedElement.hasClass("empty-container");
                });
            };
            Code.BindPlus = function() {
                jQuery(".jq-prev-row").unbind("click");
                jQuery(".jq-prev-row").on("click", function() {
                    var currentRow = jQuery(this).closest(".row"), anyjq = new impAny.Page.AnyJQ("");
                    anyjq.AddRow(currentRow, "col-xs-48", "", void 0, void 0, !0);
                    jQuery("#control-common-execute").trigger("click");
                });
                jQuery(".jq-next-row").unbind("click");
                jQuery(".jq-next-row").on("click", function() {
                    var currentRow = jQuery(this).closest(".row"), anyjq = new impAny.Page.AnyJQ("");
                    anyjq.AddRow(currentRow, "col-xs-48", "", void 0, void 0, !1);
                    jQuery("#control-common-execute").trigger("click");
                });
                jQuery(".jq-plus-prev").unbind("click");
                jQuery(".jq-plus-prev").on("click", function(e) {
                    window.smartObj = new SmartObj();
                    jQuery(this).hasClass("image-text-other") ? window.smartObj.currentObj = jQuery(this) : window.smartObj.currentObj = jQuery(this).closest(".image-text-other");
                    window.smartObj.command = "p";
                    window.smartObj.isDirty = !1;
                    e.stopPropagation();
                    var pageY = e.pageY;
                    jQuery(window).scrollTop() + pageY >= jQuery(window).height() - 250 && (pageY = e.pageY - 250);
                    var pageX = e.pageX;
                    e.pageX > jQuery(document).width() - 200 && (pageX = e.pageX - 150);
                    jQuery("#smInsertNextPrev").css("left", pageX + "px");
                    jQuery("#smInsertNextPrev").css("top", pageY + "px");
                    jQuery("#smInsertNextPrev").fadeIn(500);
                });
                jQuery(".jq-plus-next").unbind("click");
                jQuery(".jq-plus-next").on("click", function(e) {
                    window.smartObj = new SmartObj();
                    jQuery(this).hasClass("image-text-other") ? window.smartObj.currentObj = jQuery(this) : window.smartObj.currentObj = jQuery(this).closest(".image-text-other");
                    window.smartObj.command = "n";
                    window.smartObj.isDirty = !1;
                    e.stopPropagation();
                    var pageY = e.pageY;
                    jQuery(window).scrollTop() + pageY >= jQuery(window).height() - 250 && (pageY = e.pageY - 180);
                    var pageX = e.pageX;
                    e.pageX > jQuery(document).width() - 200 && (pageX = e.pageX - 150);
                    jQuery("#smInsertNextPrev").css("left", pageX + "px");
                    jQuery("#smInsertNextPrev").css("top", pageY + "px");
                    jQuery("#smInsertNextPrev").fadeIn(500);
                });
            };
            return Code;
        }();
        On.Code = Code;
    }(On = exports.On || (exports.On = {}));
});

define("_Classes/SaveJq", [ "require", "exports", "../Error/ErrorJQ", "jquery" ], function(require, exports, impError, jQuery) {
    "use strict";
    var Save;
    !function(Save) {
        var SaveJQ = function() {
            function SaveJQ() {}
            SaveJQ.prototype.Download = function(downloadData) {
                jQuery.ajax({
                    type: "POST",
                    url: "/services/pageService.asmx/download",
                    data: downloadData,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SaveJQ.OnDownloadSuccess,
                    error: SaveJQ.OnDownloadError
                });
            };
            SaveJQ.OnDownloadSuccess = function(data, status) {
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                "" != data.d.Error && null != data.d.Error || 1 != data.d.Success ? errorHandler.ActionFail("Unable to generate download link...") : errorHandler.ActionSuccess("Click on the download link below  <br> <a target='_blank' class='download-site-link' href='" + data.d.Link + "' > click here </a>");
            };
            SaveJQ.OnDownloadError = function(request, status, error) {
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.ActionFail("Unable to generate download link...");
            };
            SaveJQ.prototype.SavePage = function(saveData) {
                jQuery.ajax({
                    type: "POST",
                    url: "/services/pageService.asmx/savepage",
                    data: saveData,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SaveJQ.OnSaveSuccess,
                    error: SaveJQ.OnSaveError
                });
            };
            SaveJQ.OnSaveSuccess = function(data, status) {
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                "" != data.d.Error ? errorHandler.ActionSuccess("Page saved") : errorHandler.ActionFail("Save Failed! <br> Try again later.");
            };
            SaveJQ.OnSaveError = function(request, status, error) {
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.ActionFail("Save Failed! <br> Try again later.");
            };
            SaveJQ.IsDownloadStarted = !1;
            return SaveJQ;
        }();
        Save.SaveJQ = SaveJQ;
    }(Save = exports.Save || (exports.Save = {}));
});

define("Controls/NoUi", [ "require", "exports", "../UndoManager/UndoManager", "../Watch/WatchMouseJQ", "../Error/ErrorJQ", "jquery" ], function(require, exports, impUndoManager, impWatch, impError, jQuery) {
    "use strict";
    var NoUI;
    !function(NoUI) {
        var AlignJQ = function() {
            function AlignJQ() {}
            AlignJQ.Common = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                return void 0 != selectedElement ? selectedElement.hasClass("column") || selectedElement.hasClass("row") || selectedElement.hasClass("root-elements") ? jQuery("#nononoelement") : selectedElement : jQuery("#nononoelement");
            };
            AlignJQ.Center = function() {
                var selectedElement = AlignJQ.Common();
                selectedElement.css("float", "none");
                selectedElement.closest(".column").css("text-align", "center");
                if (selectedElement.length > 0) {
                    var undo = new impUndoManager.Manager.UndoManager();
                    undo.BeforeOperation();
                }
            };
            AlignJQ.Left = function() {
                var selectedElement = AlignJQ.Common();
                selectedElement.css("float", "left");
                if (selectedElement.length > 0) {
                    var undo = new impUndoManager.Manager.UndoManager();
                    undo.BeforeOperation();
                }
            };
            AlignJQ.Right = function() {
                var selectedElement = AlignJQ.Common();
                selectedElement.css("float", "right");
                if (selectedElement.length > 0) {
                    var undo = new impUndoManager.Manager.UndoManager();
                    undo.BeforeOperation();
                }
            };
            return AlignJQ;
        }();
        NoUI.AlignJQ = AlignJQ;
        var MoveJQ = function() {
            function MoveJQ() {}
            MoveJQ.Common = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                return void 0 != selectedElement ? selectedElement.hasClass("root-elements") ? jQuery("#nononoelement") : selectedElement : jQuery("#nononoelement");
            };
            MoveJQ.CommonUpDown = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                return void 0 != selectedElement ? selectedElement : jQuery("#nononoelement");
            };
            MoveJQ.Left = function() {
                var selectedElement = MoveJQ.Common();
                if ("none" == selectedElement.css("float")) {
                    if (selectedElement.prevAll(".key").first().length > 0 && ("right" == selectedElement.prevAll(".key").first().css("float") || "left" == selectedElement.prevAll(".key").first().css("float")) || 0 == selectedElement.prevAll(".key").first().length) {
                        new impError.ErrorHandle.ErrorJQ();
                    }
                    selectedElement.insertBefore(selectedElement.prevAll(".key").first());
                } else if ("left" == selectedElement.css("float")) {
                    if (selectedElement.prevAll(".key").first().length > 0 && ("right" == selectedElement.prevAll(".key").first().css("float") || "none" == selectedElement.prevAll(".key").first().css("float")) || 0 == selectedElement.prevAll(".key").first().length) {
                        new impError.ErrorHandle.ErrorJQ();
                    }
                    selectedElement.insertBefore(selectedElement.prevAll(".key").first());
                } else {
                    if (selectedElement.nextAll(".key").first().length > 0 && ("left" == selectedElement.nextAll(".key").first().css("float") || "none" == selectedElement.nextAll(".key").first().css("float")) || 0 == selectedElement.nextAll(".key").first().length) {
                        new impError.ErrorHandle.ErrorJQ();
                    }
                    selectedElement.insertAfter(selectedElement.nextAll(".key").first());
                }
                if (selectedElement.length > 0) {
                    var undo = new impUndoManager.Manager.UndoManager();
                    undo.BeforeOperation();
                }
            };
            MoveJQ.Right = function() {
                var selectedElement = MoveJQ.Common();
                if ("none" == selectedElement.css("float")) {
                    if (selectedElement.nextAll(".key").first().length > 0 && ("right" == selectedElement.nextAll(".key").first().css("float") || "left" == selectedElement.nextAll(".key").first().css("float")) || 0 == selectedElement.nextAll(".key").first().length) {
                        new impError.ErrorHandle.ErrorJQ();
                    }
                    selectedElement.insertAfter(selectedElement.nextAll(".key").first());
                } else if ("left" == selectedElement.css("float")) {
                    if (selectedElement.nextAll(".key").first().length > 0 && ("right" == selectedElement.nextAll(".key").first().css("float") || "none" == selectedElement.nextAll(".key").first().css("float")) || 0 == selectedElement.nextAll(".key").first().length) {
                        new impError.ErrorHandle.ErrorJQ();
                    }
                    selectedElement.insertAfter(selectedElement.nextAll(".key").first());
                } else {
                    if (selectedElement.prevAll(".key").first().length > 0 && ("left" == selectedElement.prevAll(".key").first().css("float") || "none" == selectedElement.prevAll(".key").first().css("float")) || 0 == selectedElement.prevAll(".key").first().length) {
                        new impError.ErrorHandle.ErrorJQ();
                    }
                    selectedElement.insertBefore(selectedElement.prevAll(".key").first());
                }
                if (selectedElement.length > 0) {
                    var undo = new impUndoManager.Manager.UndoManager();
                    undo.BeforeOperation();
                }
            };
            MoveJQ.Up = function() {
                var selectedElement = MoveJQ.CommonUpDown();
                selectedElement.hasClass("row") || (selectedElement = selectedElement.closest(".row"));
                var lastElement = selectedElement.prevAll(".row").first();
                0 == lastElement.length && (lastElement = selectedElement.prevAll(".key").last());
                selectedElement.insertBefore(lastElement);
            };
            MoveJQ.Down = function() {
                var selectedElement = MoveJQ.CommonUpDown();
                selectedElement.hasClass("row") || (selectedElement = selectedElement.closest(".row"));
                var lastElement = selectedElement.nextAll(".row").first();
                0 == lastElement.length && (lastElement = selectedElement.nextAll(".key").last());
                selectedElement.insertAfter(lastElement);
            };
            return MoveJQ;
        }();
        NoUI.MoveJQ = MoveJQ;
    }(NoUI = exports.NoUI || (exports.NoUI = {}));
});

define("Common/CommonEvents", [ "require", "exports", "../Controls/JQueryUI", "../UndoManager/UndoManager", "../Themes/EmptyLayout/EmptyLayoutJQ", "../_Classes/Auth", "../Error/ErrorJQ", "../Common/on", "../_Classes/SaveJq", "../MalFormed/MalFormedJQ", "../Controls/NoUi", "../Controls/ImageJQ", "jquery", "jqueryui" ], function(require, exports, impJQueryUI, impUndoManager, impLayout, impAuth, impError, impOn, impSaveClass, impmal, impNoUi, impImage, jQuery, jQueryUI) {
    "use strict";
    var themeHandle, imageFiles, Common;
    !function(Common) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        Common.SmartObj = SmartObj;
        var CommonEvents = function() {
            function CommonEvents() {
                this.isCommonEventsAdded = !1;
            }
            CommonEvents.GetCookie = function(cname) {
                for (var name = cname + "=", ca = document.cookie.split(";"), i = 0; i < ca.length; i++) {
                    for (var c = ca[i]; " " == c.charAt(0); ) c = c.substring(1);
                    if (0 == c.indexOf(name)) return c.substring(name.length, c.length);
                }
                return "";
            };
            CommonEvents.CheckMal = function() {
                return CommonEvents.GetCookie("jQuery") == jQuery("#viewstate").val() ? !0 : !1;
            };
            CommonEvents.UploadImages = function() {
                for (var files = imageFiles, data = new FormData(), i = 0; i < files.length; i++) data.append(files[i].name, files[i]);
                jQuery.ajax({
                    type: "POST",
                    url: "/Services/PageService.asmx/UploadImages",
                    contentType: !1,
                    processData: !1,
                    data: data,
                    success: function() {
                        impImage.Image.SelfJQ.ClearImageGalaryPagingValue();
                        impImage.Image.SelfJQ.GetImages();
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionSuccess("Images Uploaded Sucessfully.");
                    },
                    error: function(request, status, error) {
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionFail("Images Uploaded Failed.(Please check file type or file size.)");
                    }
                });
            };
            CommonEvents.PrepareUpload = function(event) {
                imageFiles = event.target.files;
                CommonEvents.UploadImages();
            };
            CommonEvents.prototype.Init = function() {
                0 == CommonEvents.CheckMal() && (impmal.MalFormed.MalFormedJQ.IsMalFormed = !1);
                jQuery(document).ready(function() {
                    jQuery("#tabs").tabs();
                    jQuery("#properties-accordion").accordion({
                        collapsible: !0,
                        heightStyle: "accordion-properties-height"
                    });
                });
                jQuery(".leaf_type_btn").on("click", function() {
                    jQuery(".leaf_type_btn").parent().removeClass("active");
                    jQuery(this).parent().addClass("active");
                    jQuery("#leaf_container .leaf_type").removeClass("active");
                    switch (jQuery(this).parent().data("name").toString()) {
                      case "webs.bldr.modules.container.popular":
                        jQuery("#leaf_container .leaf_type:eq(0)").addClass("active");
                        break;

                      case "webs.bldr.modules.container.structure":
                        jQuery("#leaf_container .leaf_type:eq(1)").addClass("active");
                        break;

                      case "webs.bldr.modules.container.media":
                        jQuery("#leaf_container .leaf_type:eq(2)").addClass("active");
                        break;

                      case "webs.bldr.modules.container.social":
                        jQuery("#leaf_container .leaf_type:eq(3)").addClass("active");
                        break;

                      case "webs.bldr.modules.container.commerce":
                        jQuery("#leaf_container .leaf_type:eq(4)").addClass("active");
                        break;

                      case "webs.bldr.dock.ads.appfeeds":
                        jQuery("#leaf_container .leaf_type:eq(5)").addClass("active");
                    }
                });
                jQuery(".button-change-image").on("click", function() {
                    impImage.Image.SelfJQ.ChangeImage();
                });
                if (!jQuery(".bldr-draggable").hasClass("event-added")) {
                    jQuery(".bldr-draggable").addClass("event-added");
                    impJQueryUI.JQueryUI.CommonCode.Draggable(".bldr-draggable", "");
                }
                jQuery(".jq-full-page").on("click", function() {
                    jQuery(".page-margin").css("width", "auto");
                });
                jQuery(".jq-small-page").on("click", function() {
                    jQuery(".page-margin").css("width", "980px");
                });
                jQuery(".show-hide-menu-btn").hide();
                jQuery(".hide-menu").show();
                jQuery(".show-menu, .hide-menu").on("click", function() {
                    jQuery("#hideMenuHelpTop").hide();
                    if ("none" != jQuery(".hide-menu").css("display")) {
                        jQuery(".hide-menu").hide();
                        jQuery(".show-menu").show();
                        jQuery(".top-row-container").hide();
                        jQuery("rootx").css("top", "0");
                        jQuery(".editor").css("top", "0");
                        jQuery(".properties-sidebar-container").css("top", "0");
                    } else {
                        jQuery(".hide-menu").show();
                        jQuery(".show-menu").hide();
                        jQuery("rootx").css("top", "43px");
                        jQuery(".editor").css("top", "43px");
                        jQuery(".properties-sidebar-container").css("top", "43px;");
                        jQuery(".top-row-container").show();
                    }
                });
                jQuery(".hide-left-menu").show();
                jQuery(".hide-left-menu, .show-left-menu").on("click", function() {
                    jQuery("#hideLeftMenuHelp").hide();
                    if ("none" != jQuery(".hide-left-menu").css("display")) {
                        jQuery(".hide-left-menu").hide();
                        jQuery(".show-left-menu").show();
                        jQuery("#property-sidebar-page-column").hide();
                        jQuery("#main-page-column").addClass("col-xs-48").removeClass("col-xs-36");
                    } else {
                        jQuery(".hide-left-menu").show();
                        jQuery(".show-left-menu").hide();
                        jQuery("#main-page-column").addClass("col-xs-36").removeClass("col-xs-48");
                        jQuery("#property-sidebar-page-column").show();
                    }
                });
                jQuery(".image-file-upload").on("change", CommonEvents.PrepareUpload);
                jQuery(".button-align-left").on("click", function() {
                    impNoUi.NoUI.AlignJQ.Left();
                });
                jQuery(".button-align-right").on("click", function() {
                    impNoUi.NoUI.AlignJQ.Right();
                });
                jQuery(".button-align-center").on("click", function() {
                    impNoUi.NoUI.AlignJQ.Center();
                });
                jQuery(".button-move-left").on("click", function() {
                    impNoUi.NoUI.MoveJQ.Left();
                    return !1;
                });
                jQuery(".button-move-right").on("click", function() {
                    impNoUi.NoUI.MoveJQ.Right();
                    return !1;
                });
                jQuery(".button-move-up").on("click", function() {
                    impNoUi.NoUI.MoveJQ.Up();
                });
                jQuery(".button-move-down").on("click", function() {
                    impNoUi.NoUI.MoveJQ.Down();
                });
                jQuery("#control-align").draggable({
                    revert: !1
                });
                jQuery("#control-object-move").draggable({
                    revert: !1
                });
                var liveUrl = jQuery(".input-current-location").val() + "/" + jQuery(".input-site-id").val() + "/" + jQuery(".input-site-name").val() + "/" + jQuery(".input-page-name").val();
                jQuery(".anchor-show-live-preview").attr("href", liveUrl);
                jQuery("#notify").on("click", function() {
                    jQuery(this).hide();
                });
                jQuery(".btn-help").on("click", function() {
                    jQuery("#site-help").slideToggle();
                });
                jQuery("#site-help").on("click", function() {
                    jQuery(this).slideUp();
                });
                themeHandle = window.setInterval(function() {
                    if (1 == impAuth.Auth.AuthJQ.IsAuth) {
                        impAuth.Auth.AuthJQ.HideLoading();
                        window.clearInterval(themeHandle);
                        var layout = new impLayout.Themes.Empty.LayoutJQ();
                        layout.Init();
                        void 0 != impLayout.Themes.Empty.LayoutJQ.loading && impLayout.Themes.Empty.LayoutJQ.loading.Hide();
                    } else void 0 != impLayout.Themes.Empty.LayoutJQ.loading && impLayout.Themes.Empty.LayoutJQ.loading.Show();
                }, 1e3);
                jQuery(".jq-show-plus").on("click", function() {
                    jQuery(".jq-row-plus-container").show();
                    jQuery(".jq-show-plus").hide();
                    jQuery(".jq-hide-plus").show();
                });
                jQuery(".jq-hide-plus").on("click", function() {
                    jQuery(".jq-row-plus-container").hide();
                    jQuery(".jq-hide-plus").hide();
                    jQuery(".jq-show-plus").show();
                });
                jQuery(".button-download-site").on("click", function() {
                    var save = new impSaveClass.Save.SaveJQ(), data = {
                        siteName: jQuery(".input-site-name").val()
                    }, downloadData = JSON.stringify(data), eh = new impError.ErrorHandle.ErrorJQ();
                    eh.ActionHelp("Download will start in few seconds...");
                    save.Download(downloadData);
                });
                jQuery(".jq-save").on("click", function() {
                    var eh = new impError.ErrorHandle.ErrorJQ();
                    eh.ActionHelp("Please Wait...");
                    var scripts = jQuery(document.createElement("scripts")), styles = jQuery(document.createElement("styles")), page = jQuery(document.createElement("page")), fullbody = '<html><head><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta http-equiv="Content-Type" content="text/html;charset=utf-8" /> </head><body>', fullbodyEnd = "</body></html>", styleSheetExtra = '<script type=" text/javascript" class="add-to-page jquery" src= "jquery/jquery-1.11.2.min.js" > </script><link rel="stylesheet" type= "text/css" class="add-to-page" href= "bootstrap/bootstrap-customzed-48.min.css" /><link class="add-to-page" type= "text/css" href= "theme/theme.css" rel= "stylesheet" type= "text/css" /><link class="add-to-page"  href= "theme/jqplus.css" rel= "stylesheet" /> <style>  @media (max-width: 980px) { .page-margin { width: auto !important; } .empty-container-text {display:inline-block; } .jq-text-block-container{max-width:100%;} .jq-text-block-container {height:auto !important;} .jq-plus-container-text{display:inline-block; height:auto !important; } }   .jq-plus-element { display:none !important; }  .jq-row-plus-container { display:none !important; }  .row { margin:0; padding:2px; clear:both; } .root-elements{ padding:0;}  .column { margin:0; padding:0; } .page-static-element { display:none !important;} .page-static-element-circle{display:none !important;} .design-adjust-image-text-other{margin:1px;} .image-text-other .adjust-image-text-other-left{ float: left; } .page-marker{display:none !important;} .design-page-row{display:none !important;}</style>';
                    jQuery(".image-selection").removeClass("image-selection");
                    jQuery(".add-to-page").each(function() {
                        "SCRIPT" == jQuery(this).prop("tagName") && scripts.append(jQuery(this).clone());
                        "LINK" == jQuery(this).prop("tagName") && styles.append(jQuery(this).clone());
                        if ("PAGE" == jQuery(this).prop("tagName")) {
                            page.append(jQuery(this).clone());
                            page.find(".jqte-editor").removeAttr("contentEditable").removeAttr("tabindex").css("cursor", "initial");
                            page.prepend(styleSheetExtra);
                        }
                    });
                    var save = new impSaveClass.Save.SaveJQ();
                    save.scripts = scripts.html();
                    save.styles = styles.html();
                    save.page = fullbody + page.html() + fullbodyEnd;
                    var data = {
                        Obj: save,
                        siteName: jQuery(".input-site-name").val(),
                        pageName: jQuery(".input-page-name").val()
                    }, saveData = JSON.stringify(data);
                    save.SavePage(saveData);
                });
                jQuery(".jq-undo").on("click", function() {
                    var undoManager = new impUndoManager.Manager.UndoManager();
                    undoManager.Undo();
                });
                jQuery("#undo-redo-execute").on("click", function() {
                    var undoManager = new impUndoManager.Manager.UndoManager();
                    undoManager.BeforeOperation();
                });
                jQuery(".jq-redo").on("click", function() {
                    var undoManager = new impUndoManager.Manager.UndoManager();
                    undoManager.Redo();
                });
                jQuery(".properties-button").on("click", function() {
                    "block" == jQuery(".control-properties").css("display") ? jQuery(".control-properties").addClass("forced-hide") : jQuery(".control-properties").removeClass("forced-hide");
                    jQuery(".control-properties").fadeToggle();
                });
                window.smartObj = new SmartObj();
                impOn.On.Code.Execute();
            };
            CommonEvents.ResizableClickCode = function($this) {
                jQuery(".ui-resizable-se").removeClass("selected-resizable");
                jQuery(".ui-resizable-s").removeClass("selected-resizable");
                jQuery($this).addClass("selected-resizable");
            };
            return CommonEvents;
        }();
        Common.CommonEvents = CommonEvents;
    }(Common = exports.Common || (exports.Common = {}));
});

define("Controls/ControlMoveJQ", [ "require", "exports", "jquery" ], function(require, exports, jQuery) {
    "use strict";
    var control, Control, clicking = !1;
    !function(Control) {
        var ControlMoveJQ = function() {
            function ControlMoveJQ() {}
            ControlMoveJQ.prototype.Init = function() {
                this.MouseDown();
                this.MouseUp();
                this.MouseMove();
            };
            ControlMoveJQ.prototype.MouseDown = function() {
                jQuery(".control-move-area").on("mousedown", function(e) {
                    control = jQuery(this).closest(".control-page");
                    0 == control.length && (control = jQuery(this).closest(".control-properties"));
                    clicking = !0;
                });
            };
            ControlMoveJQ.prototype.MouseUp = function() {
                jQuery(document).on("mouseup", function(e) {
                    clicking = !1;
                });
            };
            ControlMoveJQ.prototype.MouseMove = function() {
                jQuery(document).on("mousemove", function(e) {
                    if (0 != clicking && !(e.clientX + 20 > jQuery(window).width() || e.clientY + 20 > jQuery(window).height() || e.clientY < 0)) {
                        var width = jQuery(control).css("width");
                        if (void 0 != width) {
                            width = width.replace("px", "");
                            var center = Number(width) / 2, x = e.clientX - (center - 10), y = e.clientY - 10;
                            jQuery(control).css("left", x);
                            jQuery(control).css("top", y + "px");
                            jQuery(control).css("outline", "0");
                        }
                    }
                });
            };
            return ControlMoveJQ;
        }();
        Control.ControlMoveJQ = ControlMoveJQ;
    }(Control = exports.Control || (exports.Control = {}));
});

define("Template/TemplateJQ", [ "require", "exports", "jquery" ], function(require, exports, jQuery) {
    "use strict";
    var Template, isTemplateReady = !1;
    !function(Template) {
        var TemplateJQ = function() {
            function TemplateJQ() {}
            TemplateJQ.prototype.Init = function() {
                this.Process();
            };
            TemplateJQ.ProcessImmediate = function() {
                jQuery(".jq-template").each(function() {
                    var templateId = jQuery(this).attr("template-id");
                    jQuery(this).append(jQuery(jQuery("#" + templateId).html()).clone());
                });
            };
            TemplateJQ.prototype.Process = function() {
                jQuery(document).ready(function() {
                    if (0 == isTemplateReady) {
                        isTemplateReady = !0;
                        TemplateJQ.ProcessImmediate();
                    }
                });
            };
            return TemplateJQ;
        }();
        Template.TemplateJQ = TemplateJQ;
    }(Template = exports.Template || (exports.Template = {}));
});

define("Controls/controlcommonjq", [ "require", "exports", "./JQueryUI", "../common/on", "../JQte/OnInsert", "jquery" ], function(require, exports, impJQueryUI, impOn, impJqteOnInsert, jQuery) {
    "use strict";
    var ControlCommon;
    !function(ControlCommon) {
        var Code = function() {
            function Code() {}
            Code.AttachClick = function() {
                jQuery("#control-common-execute").on("click", function() {
                    Code.DestroyResizable();
                    Code.Execute();
                });
            };
            Code.Execute = function() {
                window.setTimeout(function() {
                    impOn.On.Code.Execute();
                    new impJqteOnInsert.OnInsert.Code().Init();
                    impJQueryUI.JQueryUI.CommonCode.ResizableColumn();
                    impJQueryUI.JQueryUI.CommonCode.Resizable(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other", "s");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other-left", "e");
                    impJQueryUI.JQueryUI.CommonCode.Draggable(".jq-normal-link .empty-container, .empty-container-menu, .empty-container-text, .empty-container-image, .empty-container-spacer", "");
                    jQuery(".empty-container-text, .empty-container-image").css("z-index", "0");
                    jQuery(".column").each(function() {
                        if (0 == jQuery(this).children(".image-text-other.empty-container-image, .image-text-other.empty-container-text, .row, .column").length) {
                            jQuery(this).addClass("empty");
                            0 == jQuery(this).find(".empty-drop-element").length && jQuery(this).append("<div class='image-text-other empty-drop-element' ></div>");
                        } else {
                            jQuery(this).removeClass("empty");
                            jQuery(this).find(".empty-drop-element").remove();
                        }
                    });
                    jQuery(".image-text-other, .empty-container-empty").each(function(index, _this) {
                        var $this = jQuery(_this), bottom = $this.offset().top + $this.height(), top = $this.offset().top, left = $this.offset().left;
                        $this.attr("top", top);
                        $this.attr("bottom", bottom);
                        $this.attr("left", left);
                    });
                    impJQueryUI.JQueryUI.CommonCode.Droppable(".column, .empty-container, .image-text-other");
                    jQuery(".ui-resizable-e").html("<div class='jq-square jq-square-e'></div>");
                    jQuery(".ui-resizable-se").html("<div class='jq-square jq-square-se'></div>");
                    jQuery(".ui-resizable-s").html("<div class='jq-square jq-square-s'></div>");
                }, 10);
            };
            Code.DestroyResizable = function() {
                impJQueryUI.JQueryUI.CommonCode.DroppableDestroy(".column, .empty-container, .image-text-other");
                impJQueryUI.JQueryUI.CommonCode.DraggableDestroy(".jq-normal-link, .empty-container, .empty-container-menu, .empty-container-text .empty-container-image, .empty-container-spacer");
                impJQueryUI.JQueryUI.CommonCode.ResizableDestroy(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image, .column, .empty-container, .root-elements, .adjust-image-text-other, .adjust-image-text-other-left");
            };
            Code.AnchorClicked = !1;
            return Code;
        }();
        ControlCommon.Code = Code;
    }(ControlCommon = exports.ControlCommon || (exports.ControlCommon = {}));
});

define("Document/DocumentJQ", [ "require", "exports", "jquery" ], function(require, exports, jQuery) {
    "use strict";
    var Document, isDocumentReady = !1;
    !function(Document) {
        var DocumentJQ = function() {
            function DocumentJQ() {}
            DocumentJQ.prototype.Init = function() {
                this.Attach();
            };
            DocumentJQ.prototype.Attach = function() {
                jQuery(document).ready(function() {
                    0 == isDocumentReady && (isDocumentReady = !0);
                });
            };
            return DocumentJQ;
        }();
        Document.DocumentJQ = DocumentJQ;
    }(Document = exports.Document || (exports.Document = {}));
});

define("InsertTool/InsertToolJQ", [ "require", "exports", "jquery" ], function(require, exports, jQuery) {
    "use strict";
    var InsertTool, isInsertToolReady = !1;
    !function(InsertTool) {
        var InsertToolJQ = function() {
            function InsertToolJQ() {}
            InsertToolJQ.prototype.Init = function() {
                this.Process();
            };
            InsertToolJQ.ShowInsertTool = function() {};
            InsertToolJQ.prototype.Process = function() {
                jQuery(document).ready(function() {
                    if (0 == isInsertToolReady) {
                        isInsertToolReady = !0;
                        InsertToolJQ.ShowInsertTool();
                    }
                });
            };
            return InsertToolJQ;
        }();
        InsertTool.InsertToolJQ = InsertToolJQ;
    }(InsertTool = exports.InsertTool || (exports.InsertTool = {}));
});

define("Page/LoadJQ", [ "require", "exports", "../Controls/ControlCommonJQ", "../UndoManager/UndoManager", "../Error/ErrorJQ", "../_Classes/Auth", "../Preview/Preview", "../Constants/ConstantsJQ", "../InsertTool/InsertToolJQ", "../jqte/OnInsert", "jquery" ], function(require, exports, impCommonCode, impUndoManager, impError, impAuth, impPreview, impStatic, impInsertTool, impOnInsert, jQuery) {
    "use strict";
    var Page;
    !function(Page) {
        var LoadJQ = function() {
            function LoadJQ() {}
            LoadJQ.LoadPage = function(siteId, siteName, pageName) {
                var url = "/services/sites/" + jQuery(".input-site-id").val() + "/" + jQuery(".input-site-name").val() + "/" + jQuery(".input-page-name").val();
                jQuery.ajax({
                    url: url,
                    type: "GET",
                    cache: !1,
                    success: function(data) {
                        impAuth.Auth.AuthJQ.HideLoading();
                        var e = jQuery(document.createElement("div")), pg = jQuery(document.createElement("div"));
                        e.html(data);
                        pg.append(e.html());
                        var pgResizableRemoved = pg;
                        if (pgResizableRemoved.find("page").length > 0) {
                            jQuery("page").html(pgResizableRemoved.find("page").html());
                            try {
                                jQuery("page").attr("style", pgResizableRemoved.find("page").attr("style"));
                            } catch (ex) {}
                            jQuery(".main-page-column").css("border", "1px solid #29adef");
                            jQuery("page .empty-container-text").find(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "move");
                            jQuery("page .jqte-editor").attr("tabindex", "1");
                            impStatic.Constants.StaticJQ.normalLinkId = jQuery("page .jq-normal-link").length + 10;
                            impStatic.Constants.StaticJQ.editorLinkId = jQuery("page .jq-editor-link").length + 10;
                            jQuery(".page").show();
                            impPreview.Preview.PreviewJQ.ClosePreview();
                            jQuery("#control-templates").hide();
                            var c = new impOnInsert.OnInsert.Code();
                            c.Init();
                            impCommonCode.ControlCommon.Code.DestroyResizable();
                            impCommonCode.ControlCommon.Code.Execute();
                            var insert = new impInsertTool.InsertTool.InsertToolJQ();
                            insert.Process();
                            var undo = new impUndoManager.Manager.UndoManager();
                            undo.BeforeOperation();
                            jQuery(window).scrollTop();
                        } else jQuery("#control-templates").show();
                        jQuery(".jq-row-plus-container").hide();
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionSuccess("Your page is loading. <br>Please wait...");
                    },
                    error: function(e) {
                        impAuth.Auth.AuthJQ.HideLoading();
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionFail("Page Loading Failed ! <br> Try again latter");
                    }
                });
            };
            return LoadJQ;
        }();
        Page.LoadJQ = LoadJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

define("mainJQ", [ "require", "exports", "./Page/Context/ContextJQ", "./Controls/ControlsJQ", "./ContextMenu/ContextMenuJQ", "./Watch/WatchMouseJQ", "./_Classes/Auth", "./Common/CommonEvents", "./Preview/Preview", "./jqte/MyJQte", "./Controls/ControlMoveJQ", "./Template/TemplateJQ", "./Controls/controlcommonjq", "./Document/DocumentJQ", "./Page/LoadJQ", "jquery" ], function(require, exports, impPageCtx, impControls, impCtxMenu, impWatch, impAuth, impCommon, impPreview, impJqte, impControlMove, impTemplate, impCommonControls, impDocument, impPageLoad, jQuery) {
    "use strict";
    function DesignerPadding() {
        jQuery(".jq-text-block-container").addClass("jq-text-block-container-padding");
        jQuery(".column").addClass("column-padding");
    }
    var isMainReady = (new impPageCtx.Page.ContextJQ(), !1);
    jQuery(document).ready(function() {
        if (0 == isMainReady) {
            isMainReady = !0;
            var element = jQuery(document.createElement("div"));
            element.attr("src", "xa.xml");
            jQuery("body").find("div").first().append(element);
            jQuery("body").find("div").first().append(element.clone());
            jQuery("body").find("div").first().append(element.clone());
            impCommonControls.ControlCommon.Code.AttachClick();
            jQuery(".row").removeClass("design-row");
            jQuery(".column").removeClass("design-column");
            jQuery(".jq-loading").show();
            "" != jQuery("inpu-page-name").val() && "" != jQuery("inpu-site-name").val() && impPageLoad.Page.LoadJQ.LoadPage("site", "site1", "page1");
            var doc = new impDocument.Document.DocumentJQ();
            doc.Init();
            var smart = new impCommon.Common.CommonEvents();
            smart.Init();
            var preview = new impPreview.Preview.PreviewJQ();
            preview.Init();
            DesignerPadding();
            var jqteObj = new impJqte.MyJQte.jqte("");
            jqteObj.Init();
            var addRow = new impControls.Page.AddRowJQ();
            addRow.Init();
            var contextmenu = new impCtxMenu.ContextMenu.ContextMenuJQ();
            contextmenu.Init();
            var watch = new impWatch.Watch.MouseJQ();
            watch.WatchPage();
            var controlMove = new impControlMove.Control.ControlMoveJQ();
            controlMove.Init();
            var templating = new impTemplate.Template.TemplateJQ();
            templating.Init();
            var Auth = new impAuth.Auth.AuthJQ();
            Auth.Call();
            jQuery("rootX").show();
        }
    });
});

requirejs.config({
    baseUrl: "../../shiv/TypeScript",
    wrapShim: !0,
    paths: {
        jquery: "../../Library/jquery-1.11.2.min",
        jqueryui: "../../Library/jquery-ui",
        ColorPicker: "../../Scripts/evoluteur.colorpicker/colorpicker-master/js/evol.colorpicker",
        mainJQ: "./MainJQ"
    },
    shim: {
        jquery: {
            exports: "jQuery"
        },
        jqueryui: {
            deps: [ "jquery" ],
            exports: "jQuery"
        },
        ColorPicker: {
            deps: [ "jquery", "jqueryui" ],
            exports: "jQuery"
        },
        mainJQ: {
            exports: "MainJQ"
        }
    }
});

requirejs([ "mainJQ" ]);

define("app", function() {});

require([ "app" ]);