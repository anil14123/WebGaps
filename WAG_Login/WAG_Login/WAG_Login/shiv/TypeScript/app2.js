/*! jQuery v1.11.2 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */

/*! jQuery UI - v1.11.1 - 2014-08-13
* http://jqueryui.com
* Includes: core.js, widget.js, mouse.js, position.js, accordion.js, autocomplete.js, button.js, datepicker.js, dialog.js, draggable.js, droppable.js, effect.js, effect-blind.js, effect-bounce.js, effect-clip.js, effect-drop.js, effect-explode.js, effect-fade.js, effect-fold.js, effect-highlight.js, effect-puff.js, effect-pulsate.js, effect-scale.js, effect-shake.js, effect-size.js, effect-slide.js, effect-transfer.js, menu.js, progressbar.js, resizable.js, selectable.js, selectmenu.js, slider.js, sortable.js, spinner.js, tabs.js, tooltip.js
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */

/*!
 * jQuery UI Core 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */

/*!
 * jQuery UI Widget 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/jQuery.widget/
 */

/*!
 * jQuery UI Mouse 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/mouse/
 */

/*!
 * jQuery UI Position 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */

/*!
 * jQuery UI Accordion 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/accordion/
 */

/*!
 * jQuery UI Menu 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/menu/
 */

/*!
 * jQuery UI Autocomplete 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/autocomplete/
 */

/*!
 * jQuery UI Button 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/button/
 */

/*!
 * jQuery UI Datepicker 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/datepicker/
 */

/*!
 * jQuery UI Draggable 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/draggable/
 */

/*!
 * jQuery UI Resizable 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/resizable/
 */

/*!
 * jQuery UI Dialog 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/dialog/
 */

/*!
 * jQuery UI Droppable 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/droppable/
 */

/*!
 * jQuery UI Effects 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/effects-core/
 */

/*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */

/*!
 * jQuery UI Effects Blind 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/blind-effect/
 */

/*!
 * jQuery UI Effects Bounce 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/bounce-effect/
 */

/*!
 * jQuery UI Effects Clip 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/clip-effect/
 */

/*!
 * jQuery UI Effects Drop 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/drop-effect/
 */

/*!
 * jQuery UI Effects Explode 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/explode-effect/
 */

/*!
 * jQuery UI Effects Fade 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/fade-effect/
 */

/*!
 * jQuery UI Effects Fold 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/fold-effect/
 */

/*!
 * jQuery UI Effects Highlight 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/highlight-effect/
 */

/*!
 * jQuery UI Effects Size 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/size-effect/
 */

/*!
 * jQuery UI Effects Scale 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/scale-effect/
 */

/*!
 * jQuery UI Effects Puff 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/puff-effect/
 */

/*!
 * jQuery UI Effects Pulsate 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/pulsate-effect/
 */

/*!
 * jQuery UI Effects Shake 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/shake-effect/
 */

/*!
 * jQuery UI Effects Slide 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/slide-effect/
 */

/*!
 * jQuery UI Effects Transfer 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/transfer-effect/
 */

/*!
 * jQuery UI Progressbar 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/progressbar/
 */

/*!
 * jQuery UI Selectable 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/selectable/
 */

/*!
 * jQuery UI Selectmenu 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/selectmenu
 */

/*!
 * jQuery UI Slider 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/slider/
 */

/*!
 * jQuery UI Sortable 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/sortable/
 */

/*!
 * jQuery UI Spinner 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/spinner/
 */

/*!
 * jQuery UI Tabs 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/tabs/
 */

/*!
 * jQuery UI Tooltip 1.11.1
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/tooltip/
 */

/*
 evol.colorpicker 3.2.1
 ColorPicker widget for jQuery UI

 https://github.com/evoluteur/colorpicker
 (c) 2015 Olivier Giulieri

 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 */

function focusable(element, isTabIndexNotNaN) {
    var map, mapName, img, nodeName = element.nodeName.toLowerCase();
    if ("area" === nodeName) {
        map = element.parentNode;
        mapName = map.name;
        if (!element.href || !mapName || "map" !== map.nodeName.toLowerCase()) return !1;
        img = $("img[usemap='#" + mapName + "']")[0];
        return !!img && visible(img);
    }
    return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
}

function visible(element) {
    return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function() {
        return "hidden" === $.css(this, "visibility");
    }).length;
}

function datepicker_getZindex(elem) {
    for (var position, value; elem.length && elem[0] !== document; ) {
        position = elem.css("position");
        if ("absolute" === position || "relative" === position || "fixed" === position) {
            value = parseInt(elem.css("zIndex"), 10);
            if (!isNaN(value) && 0 !== value) return value;
        }
        elem = elem.parent();
    }
    return 0;
}

function Datepicker() {
    this._curInst = null;
    this._keyEvent = !1;
    this._disabledInputs = [];
    this._datepickerShowing = !1;
    this._inDialog = !1;
    this._mainDivId = "ui-datepicker-div";
    this._inlineClass = "ui-datepicker-inline";
    this._appendClass = "ui-datepicker-append";
    this._triggerClass = "ui-datepicker-trigger";
    this._dialogClass = "ui-datepicker-dialog";
    this._disableClass = "ui-datepicker-disabled";
    this._unselectableClass = "ui-datepicker-unselectable";
    this._currentClass = "ui-datepicker-current-day";
    this._dayOverClass = "ui-datepicker-days-cell-over";
    this.regional = [];
    this.regional[""] = {
        closeText: "Done",
        prevText: "Prev",
        nextText: "Next",
        currentText: "Today",
        monthNames: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
        monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
        dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
        dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
        dayNamesMin: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ],
        weekHeader: "Wk",
        dateFormat: "mm/dd/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    };
    this._defaults = {
        showOn: "focus",
        showAnim: "fadeIn",
        showOptions: {},
        defaultDate: null,
        appendText: "",
        buttonText: "...",
        buttonImage: "",
        buttonImageOnly: !1,
        hideIfNoPrevNext: !1,
        navigationAsDateFormat: !1,
        gotoCurrent: !1,
        changeMonth: !1,
        changeYear: !1,
        yearRange: "c-10:c+10",
        showOtherMonths: !1,
        selectOtherMonths: !1,
        showWeek: !1,
        calculateWeek: this.iso8601Week,
        shortYearCutoff: "+10",
        minDate: null,
        maxDate: null,
        duration: "fast",
        beforeShowDay: null,
        beforeShow: null,
        onSelect: null,
        onChangeMonthYear: null,
        onClose: null,
        numberOfMonths: 1,
        showCurrentAtPos: 0,
        stepMonths: 1,
        stepBigMonths: 12,
        altField: "",
        altFormat: "",
        constrainInput: !0,
        showButtonPanel: !1,
        autoSize: !1,
        disabled: !1
    };
    $.extend(this._defaults, this.regional[""]);
    this.regional.en = $.extend(!0, {}, this.regional[""]);
    this.regional["en-US"] = $.extend(!0, {}, this.regional.en);
    this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
}

function datepicker_bindHover(dpDiv) {
    var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
    return dpDiv.delegate(selector, "mouseout", function() {
        $(this).removeClass("ui-state-hover");
        -1 !== this.className.indexOf("ui-datepicker-prev") && $(this).removeClass("ui-datepicker-prev-hover");
        -1 !== this.className.indexOf("ui-datepicker-next") && $(this).removeClass("ui-datepicker-next-hover");
    }).delegate(selector, "mouseover", datepicker_handleMouseover);
}

function datepicker_handleMouseover() {
    if (!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
        $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
        $(this).addClass("ui-state-hover");
        -1 !== this.className.indexOf("ui-datepicker-prev") && $(this).addClass("ui-datepicker-prev-hover");
        -1 !== this.className.indexOf("ui-datepicker-next") && $(this).addClass("ui-datepicker-next-hover");
    }
}

function datepicker_extendRemove(target, props) {
    $.extend(target, props);
    for (var name in props) null == props[name] && (target[name] = props[name]);
    return target;
}

function spinner_modifier(fn) {
    return function() {
        var previous = this.element.val();
        fn.apply(this, arguments);
        this._refresh();
        previous !== this.element.val() && this._trigger("change");
    };
}

function isOnScreen(el) {
    var viewport = {
        top: 0,
        left: 0
    };
    viewport.right = window.screen.width;
    viewport.bottom = window.screen.height - 100;
    var width = 222, height = 285;
    $doc = $(document);
    var bounds = $(el).offset(), right = bounds.left - $doc.scrollLeft() + width, bottom = bounds.top - $doc.scrollTop() + height;
    return !(bounds.left < viewport.left || right > viewport.right || bounds.top < viewport.top || bottom > viewport.bottom);
}

!function(a, b) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function(a) {
        if (!a.document) throw new Error("jQuery requires a window with a document");
        return b(a);
    } : b(a);
}("undefined" != typeof window ? window : this, function(a, b) {
    function r(a) {
        var b = a.length, c = m.type(a);
        return "function" === c || m.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a;
    }
    function w(a, b, c) {
        if (m.isFunction(b)) return m.grep(a, function(a, d) {
            return !!b.call(a, d, a) !== c;
        });
        if (b.nodeType) return m.grep(a, function(a) {
            return a === b !== c;
        });
        if ("string" == typeof b) {
            if (v.test(b)) return m.filter(b, a, c);
            b = m.filter(b, a);
        }
        return m.grep(a, function(a) {
            return m.inArray(a, b) >= 0 !== c;
        });
    }
    function D(a, b) {
        do a = a[b]; while (a && 1 !== a.nodeType);
        return a;
    }
    function G(a) {
        var b = F[a] = {};
        return m.each(a.match(E) || [], function(a, c) {
            b[c] = !0;
        }), b;
    }
    function I() {
        y.addEventListener ? (y.removeEventListener("DOMContentLoaded", J, !1), a.removeEventListener("load", J, !1)) : (y.detachEvent("onreadystatechange", J), 
        a.detachEvent("onload", J));
    }
    function J() {
        (y.addEventListener || "load" === event.type || "complete" === y.readyState) && (I(), 
        m.ready());
    }
    function O(a, b, c) {
        if (void 0 === c && 1 === a.nodeType) {
            var d = "data-" + b.replace(N, "-$1").toLowerCase();
            if (c = a.getAttribute(d), "string" == typeof c) {
                try {
                    c = "true" === c ? !0 : "false" === c ? !1 : "null" === c ? null : +c + "" === c ? +c : M.test(c) ? m.parseJSON(c) : c;
                } catch (e) {}
                m.data(a, b, c);
            } else c = void 0;
        }
        return c;
    }
    function P(a) {
        var b;
        for (b in a) if (("data" !== b || !m.isEmptyObject(a[b])) && "toJSON" !== b) return !1;
        return !0;
    }
    function Q(a, b, d, e) {
        if (m.acceptData(a)) {
            var f, g, h = m.expando, i = a.nodeType, j = i ? m.cache : a, k = i ? a[h] : a[h] && h;
            if (k && j[k] && (e || j[k].data) || void 0 !== d || "string" != typeof b) return k || (k = i ? a[h] = c.pop() || m.guid++ : h), 
            j[k] || (j[k] = i ? {} : {
                toJSON: m.noop
            }), ("object" == typeof b || "function" == typeof b) && (e ? j[k] = m.extend(j[k], b) : j[k].data = m.extend(j[k].data, b)), 
            g = j[k], e || (g.data || (g.data = {}), g = g.data), void 0 !== d && (g[m.camelCase(b)] = d), 
            "string" == typeof b ? (f = g[b], null == f && (f = g[m.camelCase(b)])) : f = g, 
            f;
        }
    }
    function R(a, b, c) {
        if (m.acceptData(a)) {
            var d, e, f = a.nodeType, g = f ? m.cache : a, h = f ? a[m.expando] : m.expando;
            if (g[h]) {
                if (b && (d = c ? g[h] : g[h].data)) {
                    m.isArray(b) ? b = b.concat(m.map(b, m.camelCase)) : b in d ? b = [ b ] : (b = m.camelCase(b), 
                    b = b in d ? [ b ] : b.split(" ")), e = b.length;
                    for (;e--; ) delete d[b[e]];
                    if (c ? !P(d) : !m.isEmptyObject(d)) return;
                }
                (c || (delete g[h].data, P(g[h]))) && (f ? m.cleanData([ a ], !0) : k.deleteExpando || g != g.window ? delete g[h] : g[h] = null);
            }
        }
    }
    function ab() {
        return !0;
    }
    function bb() {
        return !1;
    }
    function cb() {
        try {
            return y.activeElement;
        } catch (a) {}
    }
    function db(a) {
        var b = eb.split("|"), c = a.createDocumentFragment();
        if (c.createElement) for (;b.length; ) c.createElement(b.pop());
        return c;
    }
    function ub(a, b) {
        var c, d, e = 0, f = typeof a.getElementsByTagName !== K ? a.getElementsByTagName(b || "*") : typeof a.querySelectorAll !== K ? a.querySelectorAll(b || "*") : void 0;
        if (!f) for (f = [], c = a.childNodes || a; null != (d = c[e]); e++) !b || m.nodeName(d, b) ? f.push(d) : m.merge(f, ub(d, b));
        return void 0 === b || b && m.nodeName(a, b) ? m.merge([ a ], f) : f;
    }
    function vb(a) {
        W.test(a.type) && (a.defaultChecked = a.checked);
    }
    function wb(a, b) {
        return m.nodeName(a, "table") && m.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a;
    }
    function xb(a) {
        return a.type = (null !== m.find.attr(a, "type")) + "/" + a.type, a;
    }
    function yb(a) {
        var b = pb.exec(a.type);
        return b ? a.type = b[1] : a.removeAttribute("type"), a;
    }
    function zb(a, b) {
        for (var c, d = 0; null != (c = a[d]); d++) m._data(c, "globalEval", !b || m._data(b[d], "globalEval"));
    }
    function Ab(a, b) {
        if (1 === b.nodeType && m.hasData(a)) {
            var c, d, e, f = m._data(a), g = m._data(b, f), h = f.events;
            if (h) {
                delete g.handle, g.events = {};
                for (c in h) for (d = 0, e = h[c].length; e > d; d++) m.event.add(b, c, h[c][d]);
            }
            g.data && (g.data = m.extend({}, g.data));
        }
    }
    function Bb(a, b) {
        var c, d, e;
        if (1 === b.nodeType) {
            if (c = b.nodeName.toLowerCase(), !k.noCloneEvent && b[m.expando]) {
                e = m._data(b);
                for (d in e.events) m.removeEvent(b, d, e.handle);
                b.removeAttribute(m.expando);
            }
            "script" === c && b.text !== a.text ? (xb(b).text = a.text, yb(b)) : "object" === c ? (b.parentNode && (b.outerHTML = a.outerHTML), 
            k.html5Clone && a.innerHTML && !m.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : "input" === c && W.test(a.type) ? (b.defaultChecked = b.checked = a.checked, 
            b.value !== a.value && (b.value = a.value)) : "option" === c ? b.defaultSelected = b.selected = a.defaultSelected : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue);
        }
    }
    function Eb(b, c) {
        var d, e = m(c.createElement(b)).appendTo(c.body), f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : m.css(e[0], "display");
        return e.detach(), f;
    }
    function Fb(a) {
        var b = y, c = Db[a];
        return c || (c = Eb(a, b), "none" !== c && c || (Cb = (Cb || m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), 
        b = (Cb[0].contentWindow || Cb[0].contentDocument).document, b.write(), b.close(), 
        c = Eb(a, b), Cb.detach()), Db[a] = c), c;
    }
    function Lb(a, b) {
        return {
            get: function() {
                var c = a();
                return null != c ? c ? void delete this.get : (this.get = b).apply(this, arguments) : void 0;
            }
        };
    }
    function Ub(a, b) {
        if (b in a) return b;
        for (var c = b.charAt(0).toUpperCase() + b.slice(1), d = b, e = Tb.length; e--; ) if (b = Tb[e] + c, 
        b in a) return b;
        return d;
    }
    function Vb(a, b) {
        for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) d = a[g], d.style && (f[g] = m._data(d, "olddisplay"), 
        c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && U(d) && (f[g] = m._data(d, "olddisplay", Fb(d.nodeName)))) : (e = U(d), 
        (c && "none" !== c || !e) && m._data(d, "olddisplay", e ? c : m.css(d, "display"))));
        for (g = 0; h > g; g++) d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none"));
        return a;
    }
    function Wb(a, b, c) {
        var d = Pb.exec(b);
        return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b;
    }
    function Xb(a, b, c, d, e) {
        for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2) "margin" === c && (g += m.css(a, c + T[f], !0, e)), 
        d ? ("content" === c && (g -= m.css(a, "padding" + T[f], !0, e)), "margin" !== c && (g -= m.css(a, "border" + T[f] + "Width", !0, e))) : (g += m.css(a, "padding" + T[f], !0, e), 
        "padding" !== c && (g += m.css(a, "border" + T[f] + "Width", !0, e)));
        return g;
    }
    function Yb(a, b, c) {
        var d = !0, e = "width" === b ? a.offsetWidth : a.offsetHeight, f = Ib(a), g = k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, f);
        if (0 >= e || null == e) {
            if (e = Jb(a, b, f), (0 > e || null == e) && (e = a.style[b]), Hb.test(e)) return e;
            d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0;
        }
        return e + Xb(a, b, c || (g ? "border" : "content"), d, f) + "px";
    }
    function Zb(a, b, c, d, e) {
        return new Zb.prototype.init(a, b, c, d, e);
    }
    function fc() {
        return setTimeout(function() {
            $b = void 0;
        }), $b = m.now();
    }
    function gc(a, b) {
        var c, d = {
            height: a
        }, e = 0;
        for (b = b ? 1 : 0; 4 > e; e += 2 - b) c = T[e], d["margin" + c] = d["padding" + c] = a;
        return b && (d.opacity = d.width = a), d;
    }
    function hc(a, b, c) {
        for (var d, e = (ec[b] || []).concat(ec["*"]), f = 0, g = e.length; g > f; f++) if (d = e[f].call(c, b, a)) return d;
    }
    function ic(a, b, c) {
        var d, e, f, g, h, i, j, l, n = this, o = {}, p = a.style, q = a.nodeType && U(a), r = m._data(a, "fxshow");
        c.queue || (h = m._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, 
        h.empty.fire = function() {
            h.unqueued || i();
        }), h.unqueued++, n.always(function() {
            n.always(function() {
                h.unqueued--, m.queue(a, "fx").length || h.empty.fire();
            });
        })), 1 === a.nodeType && ("height" in b || "width" in b) && (c.overflow = [ p.overflow, p.overflowX, p.overflowY ], 
        j = m.css(a, "display"), l = "none" === j ? m._data(a, "olddisplay") || Fb(a.nodeName) : j, 
        "inline" === l && "none" === m.css(a, "float") && (k.inlineBlockNeedsLayout && "inline" !== Fb(a.nodeName) ? p.zoom = 1 : p.display = "inline-block")), 
        c.overflow && (p.overflow = "hidden", k.shrinkWrapBlocks() || n.always(function() {
            p.overflow = c.overflow[0], p.overflowX = c.overflow[1], p.overflowY = c.overflow[2];
        }));
        for (d in b) if (e = b[d], ac.exec(e)) {
            if (delete b[d], f = f || "toggle" === e, e === (q ? "hide" : "show")) {
                if ("show" !== e || !r || void 0 === r[d]) continue;
                q = !0;
            }
            o[d] = r && r[d] || m.style(a, d);
        } else j = void 0;
        if (m.isEmptyObject(o)) "inline" === ("none" === j ? Fb(a.nodeName) : j) && (p.display = j); else {
            r ? "hidden" in r && (q = r.hidden) : r = m._data(a, "fxshow", {}), f && (r.hidden = !q), 
            q ? m(a).show() : n.done(function() {
                m(a).hide();
            }), n.done(function() {
                var b;
                m._removeData(a, "fxshow");
                for (b in o) m.style(a, b, o[b]);
            });
            for (d in o) g = hc(q ? r[d] : 0, d, n), d in r || (r[d] = g.start, q && (g.end = g.start, 
            g.start = "width" === d || "height" === d ? 1 : 0));
        }
    }
    function jc(a, b) {
        var c, d, e, f, g;
        for (c in a) if (d = m.camelCase(c), e = b[d], f = a[c], m.isArray(f) && (e = f[1], 
        f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = m.cssHooks[d], g && "expand" in g) {
            f = g.expand(f), delete a[d];
            for (c in f) c in a || (a[c] = f[c], b[c] = e);
        } else b[d] = e;
    }
    function kc(a, b, c) {
        var d, e, f = 0, g = dc.length, h = m.Deferred().always(function() {
            delete i.elem;
        }), i = function() {
            if (e) return !1;
            for (var b = $b || fc(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) j.tweens[g].run(f);
            return h.notifyWith(a, [ j, f, c ]), 1 > f && i ? c : (h.resolveWith(a, [ j ]), 
            !1);
        }, j = h.promise({
            elem: a,
            props: m.extend({}, b),
            opts: m.extend(!0, {
                specialEasing: {}
            }, c),
            originalProperties: b,
            originalOptions: c,
            startTime: $b || fc(),
            duration: c.duration,
            tweens: [],
            createTween: function(b, c) {
                var d = m.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
                return j.tweens.push(d), d;
            },
            stop: function(b) {
                var c = 0, d = b ? j.tweens.length : 0;
                if (e) return this;
                for (e = !0; d > c; c++) j.tweens[c].run(1);
                return b ? h.resolveWith(a, [ j, b ]) : h.rejectWith(a, [ j, b ]), this;
            }
        }), k = j.props;
        for (jc(k, j.opts.specialEasing); g > f; f++) if (d = dc[f].call(j, a, k, j.opts)) return d;
        return m.map(k, hc, j), m.isFunction(j.opts.start) && j.opts.start.call(a, j), m.fx.timer(m.extend(i, {
            elem: a,
            anim: j,
            queue: j.opts.queue
        })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
    }
    function Lc(a) {
        return function(b, c) {
            "string" != typeof b && (c = b, b = "*");
            var d, e = 0, f = b.toLowerCase().match(E) || [];
            if (m.isFunction(c)) for (;d = f[e++]; ) "+" === d.charAt(0) ? (d = d.slice(1) || "*", 
            (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
        };
    }
    function Mc(a, b, c, d) {
        function g(h) {
            var i;
            return e[h] = !0, m.each(a[h] || [], function(a, h) {
                var j = h(b, c, d);
                return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), 
                g(j), !1);
            }), i;
        }
        var e = {}, f = a === Ic;
        return g(b.dataTypes[0]) || !e["*"] && g("*");
    }
    function Nc(a, b) {
        var c, d, e = m.ajaxSettings.flatOptions || {};
        for (d in b) void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);
        return c && m.extend(!0, a, c), a;
    }
    function Oc(a, b, c) {
        for (var d, e, f, g, h = a.contents, i = a.dataTypes; "*" === i[0]; ) i.shift(), 
        void 0 === e && (e = a.mimeType || b.getResponseHeader("Content-Type"));
        if (e) for (g in h) if (h[g] && h[g].test(e)) {
            i.unshift(g);
            break;
        }
        if (i[0] in c) f = i[0]; else {
            for (g in c) {
                if (!i[0] || a.converters[g + " " + i[0]]) {
                    f = g;
                    break;
                }
                d || (d = g);
            }
            f = f || d;
        }
        return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;
    }
    function Pc(a, b, c, d) {
        var e, f, g, h, i, j = {}, k = a.dataTypes.slice();
        if (k[1]) for (g in a.converters) j[g.toLowerCase()] = a.converters[g];
        f = k.shift();
        for (;f; ) if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), 
        i = f, f = k.shift()) if ("*" === f) f = i; else if ("*" !== i && i !== f) {
            if (g = j[i + " " + f] || j["* " + f], !g) for (e in j) if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
                g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));
                break;
            }
            if (g !== !0) if (g && a["throws"]) b = g(b); else try {
                b = g(b);
            } catch (l) {
                return {
                    state: "parsererror",
                    error: g ? l : "No conversion from " + i + " to " + f
                };
            }
        }
        return {
            state: "success",
            data: b
        };
    }
    function Vc(a, b, c, d) {
        var e;
        if (m.isArray(b)) m.each(b, function(b, e) {
            c || Rc.test(a) ? d(a, e) : Vc(a + "[" + ("object" == typeof e ? b : "") + "]", e, c, d);
        }); else if (c || "object" !== m.type(b)) d(a, b); else for (e in b) Vc(a + "[" + e + "]", b[e], c, d);
    }
    function Zc() {
        try {
            return new a.XMLHttpRequest();
        } catch (b) {}
    }
    function $c() {
        try {
            return new a.ActiveXObject("Microsoft.XMLHTTP");
        } catch (b) {}
    }
    function dd(a) {
        return m.isWindow(a) ? a : 9 === a.nodeType ? a.defaultView || a.parentWindow : !1;
    }
    var c = [], d = c.slice, e = c.concat, f = c.push, g = c.indexOf, h = {}, i = h.toString, j = h.hasOwnProperty, k = {}, l = "1.11.2", m = function(a, b) {
        return new m.fn.init(a, b);
    }, n = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, o = /^-ms-/, p = /-([\da-z])/gi, q = function(a, b) {
        return b.toUpperCase();
    };
    m.fn = m.prototype = {
        jquery: l,
        constructor: m,
        selector: "",
        length: 0,
        toArray: function() {
            return d.call(this);
        },
        get: function(a) {
            return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);
        },
        pushStack: function(a) {
            var b = m.merge(this.constructor(), a);
            return b.prevObject = this, b.context = this.context, b;
        },
        each: function(a, b) {
            return m.each(this, a, b);
        },
        map: function(a) {
            return this.pushStack(m.map(this, function(b, c) {
                return a.call(b, c, b);
            }));
        },
        slice: function() {
            return this.pushStack(d.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(a) {
            var b = this.length, c = +a + (0 > a ? b : 0);
            return this.pushStack(c >= 0 && b > c ? [ this[c] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor(null);
        },
        push: f,
        sort: c.sort,
        splice: c.splice
    }, m.extend = m.fn.extend = function() {
        var a, b, c, d, e, f, g = arguments[0] || {}, h = 1, i = arguments.length, j = !1;
        for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == typeof g || m.isFunction(g) || (g = {}), 
        h === i && (g = this, h--); i > h; h++) if (null != (e = arguments[h])) for (d in e) a = g[d], 
        c = e[d], g !== c && (j && c && (m.isPlainObject(c) || (b = m.isArray(c))) ? (b ? (b = !1, 
        f = a && m.isArray(a) ? a : []) : f = a && m.isPlainObject(a) ? a : {}, g[d] = m.extend(j, f, c)) : void 0 !== c && (g[d] = c));
        return g;
    }, m.extend({
        expando: "jQuery" + (l + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(a) {
            throw new Error(a);
        },
        noop: function() {},
        isFunction: function(a) {
            return "function" === m.type(a);
        },
        isArray: Array.isArray || function(a) {
            return "array" === m.type(a);
        },
        isWindow: function(a) {
            return null != a && a == a.window;
        },
        isNumeric: function(a) {
            return !m.isArray(a) && a - parseFloat(a) + 1 >= 0;
        },
        isEmptyObject: function(a) {
            var b;
            for (b in a) return !1;
            return !0;
        },
        isPlainObject: function(a) {
            var b;
            if (!a || "object" !== m.type(a) || a.nodeType || m.isWindow(a)) return !1;
            try {
                if (a.constructor && !j.call(a, "constructor") && !j.call(a.constructor.prototype, "isPrototypeOf")) return !1;
            } catch (c) {
                return !1;
            }
            if (k.ownLast) for (b in a) return j.call(a, b);
            for (b in a) ;
            return void 0 === b || j.call(a, b);
        },
        type: function(a) {
            return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? h[i.call(a)] || "object" : typeof a;
        },
        globalEval: function(b) {
            b && m.trim(b) && (a.execScript || function(b) {
                a.eval.call(a, b);
            })(b);
        },
        camelCase: function(a) {
            return a.replace(o, "ms-").replace(p, q);
        },
        nodeName: function(a, b) {
            return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
        },
        each: function(a, b, c) {
            var d, e = 0, f = a.length, g = r(a);
            if (c) {
                if (g) for (;f > e && (d = b.apply(a[e], c), d !== !1); e++) ; else for (e in a) if (d = b.apply(a[e], c), 
                d === !1) break;
            } else if (g) for (;f > e && (d = b.call(a[e], e, a[e]), d !== !1); e++) ; else for (e in a) if (d = b.call(a[e], e, a[e]), 
            d === !1) break;
            return a;
        },
        trim: function(a) {
            return null == a ? "" : (a + "").replace(n, "");
        },
        makeArray: function(a, b) {
            var c = b || [];
            return null != a && (r(Object(a)) ? m.merge(c, "string" == typeof a ? [ a ] : a) : f.call(c, a)), 
            c;
        },
        inArray: function(a, b, c) {
            var d;
            if (b) {
                if (g) return g.call(b, a, c);
                for (d = b.length, c = c ? 0 > c ? Math.max(0, d + c) : c : 0; d > c; c++) if (c in b && b[c] === a) return c;
            }
            return -1;
        },
        merge: function(a, b) {
            for (var c = +b.length, d = 0, e = a.length; c > d; ) a[e++] = b[d++];
            if (c !== c) for (;void 0 !== b[d]; ) a[e++] = b[d++];
            return a.length = e, a;
        },
        grep: function(a, b, c) {
            for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) d = !b(a[f], f), d !== h && e.push(a[f]);
            return e;
        },
        map: function(a, b, c) {
            var d, f = 0, g = a.length, h = r(a), i = [];
            if (h) for (;g > f; f++) d = b(a[f], f, c), null != d && i.push(d); else for (f in a) d = b(a[f], f, c), 
            null != d && i.push(d);
            return e.apply([], i);
        },
        guid: 1,
        proxy: function(a, b) {
            var c, e, f;
            return "string" == typeof b && (f = a[b], b = a, a = f), m.isFunction(a) ? (c = d.call(arguments, 2), 
            e = function() {
                return a.apply(b || this, c.concat(d.call(arguments)));
            }, e.guid = a.guid = a.guid || m.guid++, e) : void 0;
        },
        now: function() {
            return +new Date();
        },
        support: k
    }), m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(a, b) {
        h["[object " + b + "]"] = b.toLowerCase();
    });
    var s = function(a) {
        function gb(a, b, d, e) {
            var f, h, j, k, l, o, r, s, w, x;
            if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], k = b.nodeType, 
            "string" != typeof a || !a || 1 !== k && 9 !== k && 11 !== k) return d;
            if (!e && p) {
                if (11 !== k && (f = _.exec(a))) if (j = f[1]) {
                    if (9 === k) {
                        if (h = b.getElementById(j), !h || !h.parentNode) return d;
                        if (h.id === j) return d.push(h), d;
                    } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), 
                    d;
                } else {
                    if (f[2]) return H.apply(d, b.getElementsByTagName(a)), d;
                    if ((j = f[3]) && c.getElementsByClassName) return H.apply(d, b.getElementsByClassName(j)), 
                    d;
                }
                if (c.qsa && (!q || !q.test(a))) {
                    if (s = r = u, w = b, x = 1 !== k && a, 1 === k && "object" !== b.nodeName.toLowerCase()) {
                        o = g(a), (r = b.getAttribute("id")) ? s = r.replace(bb, "\\$&") : b.setAttribute("id", s), 
                        s = "[id='" + s + "'] ", l = o.length;
                        for (;l--; ) o[l] = s + rb(o[l]);
                        w = ab.test(a) && pb(b.parentNode) || b, x = o.join(",");
                    }
                    if (x) try {
                        return H.apply(d, w.querySelectorAll(x)), d;
                    } catch (y) {} finally {
                        r || b.removeAttribute("id");
                    }
                }
            }
            return i(a.replace(R, "$1"), b, d, e);
        }
        function hb() {
            function b(c, e) {
                return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;
            }
            var a = [];
            return b;
        }
        function ib(a) {
            return a[u] = !0, a;
        }
        function jb(a) {
            var b = n.createElement("div");
            try {
                return !!a(b);
            } catch (c) {
                return !1;
            } finally {
                b.parentNode && b.parentNode.removeChild(b), b = null;
            }
        }
        function kb(a, b) {
            for (var c = a.split("|"), e = a.length; e--; ) d.attrHandle[c[e]] = b;
        }
        function lb(a, b) {
            var c = b && a, d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || C) - (~a.sourceIndex || C);
            if (d) return d;
            if (c) for (;c = c.nextSibling; ) if (c === b) return -1;
            return a ? 1 : -1;
        }
        function mb(a) {
            return function(b) {
                var c = b.nodeName.toLowerCase();
                return "input" === c && b.type === a;
            };
        }
        function nb(a) {
            return function(b) {
                var c = b.nodeName.toLowerCase();
                return ("input" === c || "button" === c) && b.type === a;
            };
        }
        function ob(a) {
            return ib(function(b) {
                return b = +b, ib(function(c, d) {
                    for (var e, f = a([], c.length, b), g = f.length; g--; ) c[e = f[g]] && (c[e] = !(d[e] = c[e]));
                });
            });
        }
        function pb(a) {
            return a && "undefined" != typeof a.getElementsByTagName && a;
        }
        function qb() {}
        function rb(a) {
            for (var b = 0, c = a.length, d = ""; c > b; b++) d += a[b].value;
            return d;
        }
        function sb(a, b, c) {
            var d = b.dir, e = c && "parentNode" === d, f = x++;
            return b.first ? function(b, c, f) {
                for (;b = b[d]; ) if (1 === b.nodeType || e) return a(b, c, f);
            } : function(b, c, g) {
                var h, i, j = [ w, f ];
                if (g) {
                    for (;b = b[d]; ) if ((1 === b.nodeType || e) && a(b, c, g)) return !0;
                } else for (;b = b[d]; ) if (1 === b.nodeType || e) {
                    if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f) return j[2] = h[2];
                    if (i[d] = j, j[2] = a(b, c, g)) return !0;
                }
            };
        }
        function tb(a) {
            return a.length > 1 ? function(b, c, d) {
                for (var e = a.length; e--; ) if (!a[e](b, c, d)) return !1;
                return !0;
            } : a[0];
        }
        function ub(a, b, c) {
            for (var d = 0, e = b.length; e > d; d++) gb(a, b[d], c);
            return c;
        }
        function vb(a, b, c, d, e) {
            for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), 
            j && b.push(h));
            return g;
        }
        function wb(a, b, c, d, e, f) {
            return d && !d[u] && (d = wb(d)), e && !e[u] && (e = wb(e, f)), ib(function(f, g, h, i) {
                var j, k, l, m = [], n = [], o = g.length, p = f || ub(b || "*", h.nodeType ? [ h ] : h, []), q = !a || !f && b ? p : vb(p, m, a, h, i), r = c ? e || (f ? a : o || d) ? [] : g : q;
                if (c && c(q, r, h, i), d) {
                    j = vb(r, n), d(j, [], h, i), k = j.length;
                    for (;k--; ) (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
                }
                if (f) {
                    if (e || a) {
                        if (e) {
                            j = [], k = r.length;
                            for (;k--; ) (l = r[k]) && j.push(q[k] = l);
                            e(null, r = [], j, i);
                        }
                        k = r.length;
                        for (;k--; ) (l = r[k]) && (j = e ? J(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
                    }
                } else r = vb(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : H.apply(g, r);
            });
        }
        function xb(a) {
            for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = sb(function(a) {
                return a === b;
            }, h, !0), l = sb(function(a) {
                return J(b, a) > -1;
            }, h, !0), m = [ function(a, c, d) {
                var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
                return b = null, e;
            } ]; f > i; i++) if (c = d.relative[a[i].type]) m = [ sb(tb(m), c) ]; else {
                if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
                    for (e = ++i; f > e && !d.relative[a[e].type]; e++) ;
                    return wb(i > 1 && tb(m), i > 1 && rb(a.slice(0, i - 1).concat({
                        value: " " === a[i - 2].type ? "*" : ""
                    })).replace(R, "$1"), c, e > i && xb(a.slice(i, e)), f > e && xb(a = a.slice(e)), f > e && rb(a));
                }
                m.push(c);
            }
            return tb(m);
        }
        function yb(a, b) {
            var c = b.length > 0, e = a.length > 0, f = function(f, g, h, i, k) {
                var l, m, o, p = 0, q = "0", r = f && [], s = [], t = j, u = f || e && d.find.TAG("*", k), v = w += null == t ? 1 : Math.random() || .1, x = u.length;
                for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {
                    if (e && l) {
                        m = 0;
                        for (;o = a[m++]; ) if (o(l, g, h)) {
                            i.push(l);
                            break;
                        }
                        k && (w = v);
                    }
                    c && ((l = !o && l) && p--, f && r.push(l));
                }
                if (p += q, c && q !== p) {
                    m = 0;
                    for (;o = b[m++]; ) o(r, s, g, h);
                    if (f) {
                        if (p > 0) for (;q--; ) r[q] || s[q] || (s[q] = F.call(i));
                        s = vb(s);
                    }
                    H.apply(i, s), k && !f && s.length > 0 && p + b.length > 1 && gb.uniqueSort(i);
                }
                return k && (w = v, j = t), r;
            };
            return c ? ib(f) : f;
        }
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u = "sizzle" + 1 * new Date(), v = a.document, w = 0, x = 0, y = hb(), z = hb(), A = hb(), B = function(a, b) {
            return a === b && (l = !0), 0;
        }, C = 1 << 31, D = {}.hasOwnProperty, E = [], F = E.pop, G = E.push, H = E.push, I = E.slice, J = function(a, b) {
            for (var c = 0, d = a.length; d > c; c++) if (a[c] === b) return c;
            return -1;
        }, K = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", L = "[\\x20\\t\\r\\n\\f]", M = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", N = M.replace("w", "w#"), O = "\\[" + L + "*(" + M + ")(?:" + L + "*([*^$|!~]?=)" + L + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + N + "))|)" + L + "*\\]", P = ":(" + M + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + O + ")*)|.*)\\)|)", Q = new RegExp(L + "+", "g"), R = new RegExp("^" + L + "+|((?:^|[^\\\\])(?:\\\\.)*)" + L + "+$", "g"), S = new RegExp("^" + L + "*," + L + "*"), T = new RegExp("^" + L + "*([>+~]|" + L + ")" + L + "*"), U = new RegExp("=" + L + "*([^\\]'\"]*?)" + L + "*\\]", "g"), V = new RegExp(P), W = new RegExp("^" + N + "$"), X = {
            ID: new RegExp("^#(" + M + ")"),
            CLASS: new RegExp("^\\.(" + M + ")"),
            TAG: new RegExp("^(" + M.replace("w", "w*") + ")"),
            ATTR: new RegExp("^" + O),
            PSEUDO: new RegExp("^" + P),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + L + "*(even|odd|(([+-]|)(\\d*)n|)" + L + "*(?:([+-]|)" + L + "*(\\d+)|))" + L + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + K + ")$", "i"),
            needsContext: new RegExp("^" + L + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + L + "*((?:-\\d)?\\d*)" + L + "*\\)|)(?=[^-]|$)", "i")
        }, Y = /^(?:input|select|textarea|button)$/i, Z = /^h\d$/i, $ = /^[^{]+\{\s*\[native \w/, _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ab = /[+~]/, bb = /'|\\/g, cb = new RegExp("\\\\([\\da-f]{1,6}" + L + "?|(" + L + ")|.)", "ig"), db = function(a, b, c) {
            var d = "0x" + b - 65536;
            return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
        }, eb = function() {
            m();
        };
        try {
            H.apply(E = I.call(v.childNodes), v.childNodes), E[v.childNodes.length].nodeType;
        } catch (fb) {
            H = {
                apply: E.length ? function(a, b) {
                    G.apply(a, I.call(b));
                } : function(a, b) {
                    for (var c = a.length, d = 0; a[c++] = b[d++]; ) ;
                    a.length = c - 1;
                }
            };
        }
        c = gb.support = {}, f = gb.isXML = function(a) {
            var b = a && (a.ownerDocument || a).documentElement;
            return b ? "HTML" !== b.nodeName : !1;
        }, m = gb.setDocument = function(a) {
            var b, e, g = a ? a.ownerDocument || a : v;
            return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = g.documentElement, 
            e = g.defaultView, e && e !== e.top && (e.addEventListener ? e.addEventListener("unload", eb, !1) : e.attachEvent && e.attachEvent("onunload", eb)), 
            p = !f(g), c.attributes = jb(function(a) {
                return a.className = "i", !a.getAttribute("className");
            }), c.getElementsByTagName = jb(function(a) {
                return a.appendChild(g.createComment("")), !a.getElementsByTagName("*").length;
            }), c.getElementsByClassName = $.test(g.getElementsByClassName), c.getById = jb(function(a) {
                return o.appendChild(a).id = u, !g.getElementsByName || !g.getElementsByName(u).length;
            }), c.getById ? (d.find.ID = function(a, b) {
                if ("undefined" != typeof b.getElementById && p) {
                    var c = b.getElementById(a);
                    return c && c.parentNode ? [ c ] : [];
                }
            }, d.filter.ID = function(a) {
                var b = a.replace(cb, db);
                return function(a) {
                    return a.getAttribute("id") === b;
                };
            }) : (delete d.find.ID, d.filter.ID = function(a) {
                var b = a.replace(cb, db);
                return function(a) {
                    var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id");
                    return c && c.value === b;
                };
            }), d.find.TAG = c.getElementsByTagName ? function(a, b) {
                return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;
            } : function(a, b) {
                var c, d = [], e = 0, f = b.getElementsByTagName(a);
                if ("*" === a) {
                    for (;c = f[e++]; ) 1 === c.nodeType && d.push(c);
                    return d;
                }
                return f;
            }, d.find.CLASS = c.getElementsByClassName && function(a, b) {
                return p ? b.getElementsByClassName(a) : void 0;
            }, r = [], q = [], (c.qsa = $.test(g.querySelectorAll)) && (jb(function(a) {
                o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\f]' msallowcapture=''><option selected=''></option></select>", 
                a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + L + "*(?:''|\"\")"), 
                a.querySelectorAll("[selected]").length || q.push("\\[" + L + "*(?:value|" + K + ")"), 
                a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), 
                a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]");
            }), jb(function(a) {
                var b = g.createElement("input");
                b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + L + "*[*^$|!~]?="), 
                a.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), 
                q.push(",.*:");
            })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && jb(function(a) {
                c.disconnectedMatch = s.call(a, "div"), s.call(a, "[s!='']:x"), r.push("!=", P);
            }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), 
            b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function(a, b) {
                var c = 9 === a.nodeType ? a.documentElement : a, d = b && b.parentNode;
                return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
            } : function(a, b) {
                if (b) for (;b = b.parentNode; ) if (b === a) return !0;
                return !1;
            }, B = b ? function(a, b) {
                if (a === b) return l = !0, 0;
                var d = !a.compareDocumentPosition - !b.compareDocumentPosition;
                return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 
                1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === g || a.ownerDocument === v && t(v, a) ? -1 : b === g || b.ownerDocument === v && t(v, b) ? 1 : k ? J(k, a) - J(k, b) : 0 : 4 & d ? -1 : 1);
            } : function(a, b) {
                if (a === b) return l = !0, 0;
                var c, d = 0, e = a.parentNode, f = b.parentNode, h = [ a ], i = [ b ];
                if (!e || !f) return a === g ? -1 : b === g ? 1 : e ? -1 : f ? 1 : k ? J(k, a) - J(k, b) : 0;
                if (e === f) return lb(a, b);
                c = a;
                for (;c = c.parentNode; ) h.unshift(c);
                c = b;
                for (;c = c.parentNode; ) i.unshift(c);
                for (;h[d] === i[d]; ) d++;
                return d ? lb(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;
            }, g) : n;
        }, gb.matches = function(a, b) {
            return gb(a, null, null, b);
        }, gb.matchesSelector = function(a, b) {
            if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, "='$1']"), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b))) try {
                var d = s.call(a, b);
                if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;
            } catch (e) {}
            return gb(b, n, null, [ a ]).length > 0;
        }, gb.contains = function(a, b) {
            return (a.ownerDocument || a) !== n && m(a), t(a, b);
        }, gb.attr = function(a, b) {
            (a.ownerDocument || a) !== n && m(a);
            var e = d.attrHandle[b.toLowerCase()], f = e && D.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
            return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
        }, gb.error = function(a) {
            throw new Error("Syntax error, unrecognized expression: " + a);
        }, gb.uniqueSort = function(a) {
            var b, d = [], e = 0, f = 0;
            if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
                for (;b = a[f++]; ) b === a[f] && (e = d.push(f));
                for (;e--; ) a.splice(d[e], 1);
            }
            return k = null, a;
        }, e = gb.getText = function(a) {
            var b, c = "", d = 0, f = a.nodeType;
            if (f) {
                if (1 === f || 9 === f || 11 === f) {
                    if ("string" == typeof a.textContent) return a.textContent;
                    for (a = a.firstChild; a; a = a.nextSibling) c += e(a);
                } else if (3 === f || 4 === f) return a.nodeValue;
            } else for (;b = a[d++]; ) c += e(b);
            return c;
        }, d = gb.selectors = {
            cacheLength: 50,
            createPseudo: ib,
            match: X,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(a) {
                    return a[1] = a[1].replace(cb, db), a[3] = (a[3] || a[4] || a[5] || "").replace(cb, db), 
                    "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
                },
                CHILD: function(a) {
                    return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || gb.error(a[0]), 
                    a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && gb.error(a[0]), 
                    a;
                },
                PSEUDO: function(a) {
                    var b, c = !a[6] && a[2];
                    return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), 
                    a[2] = c.slice(0, b)), a.slice(0, 3));
                }
            },
            filter: {
                TAG: function(a) {
                    var b = a.replace(cb, db).toLowerCase();
                    return "*" === a ? function() {
                        return !0;
                    } : function(a) {
                        return a.nodeName && a.nodeName.toLowerCase() === b;
                    };
                },
                CLASS: function(a) {
                    var b = y[a + " "];
                    return b || (b = new RegExp("(^|" + L + ")" + a + "(" + L + "|$)")) && y(a, function(a) {
                        return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "");
                    });
                },
                ATTR: function(a, b, c) {
                    return function(d) {
                        var e = gb.attr(d, a);
                        return null == e ? "!=" === b : b ? (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(Q, " ") + " ").indexOf(c) > -1 : "|=" === b ? e === c || e.slice(0, c.length + 1) === c + "-" : !1) : !0;
                    };
                },
                CHILD: function(a, b, c, d, e) {
                    var f = "nth" !== a.slice(0, 3), g = "last" !== a.slice(-4), h = "of-type" === b;
                    return 1 === d && 0 === e ? function(a) {
                        return !!a.parentNode;
                    } : function(b, c, i) {
                        var j, k, l, m, n, o, p = f !== g ? "nextSibling" : "previousSibling", q = b.parentNode, r = h && b.nodeName.toLowerCase(), s = !i && !h;
                        if (q) {
                            if (f) {
                                for (;p; ) {
                                    l = b;
                                    for (;l = l[p]; ) if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;
                                    o = p = "only" === a && !o && "nextSibling";
                                }
                                return !0;
                            }
                            if (o = [ g ? q.firstChild : q.lastChild ], g && s) {
                                k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], 
                                l = n && q.childNodes[n];
                                for (;l = ++n && l && l[p] || (m = n = 0) || o.pop(); ) if (1 === l.nodeType && ++m && l === b) {
                                    k[a] = [ w, n, m ];
                                    break;
                                }
                            } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1]; else for (;(l = ++n && l && l[p] || (m = n = 0) || o.pop()) && ((h ? l.nodeName.toLowerCase() !== r : 1 !== l.nodeType) || !++m || (s && ((l[u] || (l[u] = {}))[a] = [ w, m ]), 
                            l !== b)); ) ;
                            return m -= e, m === d || m % d === 0 && m / d >= 0;
                        }
                    };
                },
                PSEUDO: function(a, b) {
                    var c, e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || gb.error("unsupported pseudo: " + a);
                    return e[u] ? e(b) : e.length > 1 ? (c = [ a, a, "", b ], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ib(function(a, c) {
                        for (var d, f = e(a, b), g = f.length; g--; ) d = J(a, f[g]), a[d] = !(c[d] = f[g]);
                    }) : function(a) {
                        return e(a, 0, c);
                    }) : e;
                }
            },
            pseudos: {
                not: ib(function(a) {
                    var b = [], c = [], d = h(a.replace(R, "$1"));
                    return d[u] ? ib(function(a, b, c, e) {
                        for (var f, g = d(a, null, e, []), h = a.length; h--; ) (f = g[h]) && (a[h] = !(b[h] = f));
                    }) : function(a, e, f) {
                        return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();
                    };
                }),
                has: ib(function(a) {
                    return function(b) {
                        return gb(a, b).length > 0;
                    };
                }),
                contains: ib(function(a) {
                    return a = a.replace(cb, db), function(b) {
                        return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
                    };
                }),
                lang: ib(function(a) {
                    return W.test(a || "") || gb.error("unsupported lang: " + a), a = a.replace(cb, db).toLowerCase(), 
                    function(b) {
                        var c;
                        do if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), 
                        c === a || 0 === c.indexOf(a + "-"); while ((b = b.parentNode) && 1 === b.nodeType);
                        return !1;
                    };
                }),
                target: function(b) {
                    var c = a.location && a.location.hash;
                    return c && c.slice(1) === b.id;
                },
                root: function(a) {
                    return a === o;
                },
                focus: function(a) {
                    return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
                },
                enabled: function(a) {
                    return a.disabled === !1;
                },
                disabled: function(a) {
                    return a.disabled === !0;
                },
                checked: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return "input" === b && !!a.checked || "option" === b && !!a.selected;
                },
                selected: function(a) {
                    return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
                },
                empty: function(a) {
                    for (a = a.firstChild; a; a = a.nextSibling) if (a.nodeType < 6) return !1;
                    return !0;
                },
                parent: function(a) {
                    return !d.pseudos.empty(a);
                },
                header: function(a) {
                    return Z.test(a.nodeName);
                },
                input: function(a) {
                    return Y.test(a.nodeName);
                },
                button: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return "input" === b && "button" === a.type || "button" === b;
                },
                text: function(a) {
                    var b;
                    return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
                },
                first: ob(function() {
                    return [ 0 ];
                }),
                last: ob(function(a, b) {
                    return [ b - 1 ];
                }),
                eq: ob(function(a, b, c) {
                    return [ 0 > c ? c + b : c ];
                }),
                even: ob(function(a, b) {
                    for (var c = 0; b > c; c += 2) a.push(c);
                    return a;
                }),
                odd: ob(function(a, b) {
                    for (var c = 1; b > c; c += 2) a.push(c);
                    return a;
                }),
                lt: ob(function(a, b, c) {
                    for (var d = 0 > c ? c + b : c; --d >= 0; ) a.push(d);
                    return a;
                }),
                gt: ob(function(a, b, c) {
                    for (var d = 0 > c ? c + b : c; ++d < b; ) a.push(d);
                    return a;
                })
            }
        }, d.pseudos.nth = d.pseudos.eq;
        for (b in {
            radio: !0,
            checkbox: !0,
            file: !0,
            password: !0,
            image: !0
        }) d.pseudos[b] = mb(b);
        for (b in {
            submit: !0,
            reset: !0
        }) d.pseudos[b] = nb(b);
        qb.prototype = d.filters = d.pseudos, d.setFilters = new qb(), g = gb.tokenize = function(a, b) {
            var c, e, f, g, h, i, j, k = z[a + " "];
            if (k) return b ? 0 : k.slice(0);
            h = a, i = [], j = d.preFilter;
            for (;h; ) {
                (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), 
                c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({
                    value: c,
                    type: e[0].replace(R, " ")
                }), h = h.slice(c.length));
                for (g in d.filter) !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), 
                f.push({
                    value: c,
                    type: g,
                    matches: e
                }), h = h.slice(c.length));
                if (!c) break;
            }
            return b ? h.length : h ? gb.error(a) : z(a, i).slice(0);
        };
        return h = gb.compile = function(a, b) {
            var c, d = [], e = [], f = A[a + " "];
            if (!f) {
                b || (b = g(a)), c = b.length;
                for (;c--; ) f = xb(b[c]), f[u] ? d.push(f) : e.push(f);
                f = A(a, yb(e, d)), f.selector = a;
            }
            return f;
        }, i = gb.select = function(a, b, e, f) {
            var i, j, k, l, m, n = "function" == typeof a && a, o = !f && g(a = n.selector || a);
            if (e = e || [], 1 === o.length) {
                if (j = o[0] = o[0].slice(0), j.length > 2 && "ID" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {
                    if (b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0], !b) return e;
                    n && (b = b.parentNode), a = a.slice(j.shift().value.length);
                }
                i = X.needsContext.test(a) ? 0 : j.length;
                for (;i-- && (k = j[i], !d.relative[l = k.type]); ) if ((m = d.find[l]) && (f = m(k.matches[0].replace(cb, db), ab.test(j[0].type) && pb(b.parentNode) || b))) {
                    if (j.splice(i, 1), a = f.length && rb(j), !a) return H.apply(e, f), e;
                    break;
                }
            }
            return (n || h(a, o))(f, b, !p, e, ab.test(a) && pb(b.parentNode) || b), e;
        }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, 
        m(), c.sortDetached = jb(function(a) {
            return 1 & a.compareDocumentPosition(n.createElement("div"));
        }), jb(function(a) {
            return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");
        }) || kb("type|href|height|width", function(a, b, c) {
            return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
        }), c.attributes && jb(function(a) {
            return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
        }) || kb("value", function(a, b, c) {
            return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;
        }), jb(function(a) {
            return null == a.getAttribute("disabled");
        }) || kb(K, function(a, b, c) {
            var d;
            return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
        }), gb;
    }(a);
    m.find = s, m.expr = s.selectors, m.expr[":"] = m.expr.pseudos, m.unique = s.uniqueSort, 
    m.text = s.getText, m.isXMLDoc = s.isXML, m.contains = s.contains;
    var t = m.expr.match.needsContext, u = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, v = /^.[^:#\[\.,]*$/;
    m.filter = function(a, b, c) {
        var d = b[0];
        return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? m.find.matchesSelector(d, a) ? [ d ] : [] : m.find.matches(a, m.grep(b, function(a) {
            return 1 === a.nodeType;
        }));
    }, m.fn.extend({
        find: function(a) {
            var b, c = [], d = this, e = d.length;
            if ("string" != typeof a) return this.pushStack(m(a).filter(function() {
                for (b = 0; e > b; b++) if (m.contains(d[b], this)) return !0;
            }));
            for (b = 0; e > b; b++) m.find(a, d[b], c);
            return c = this.pushStack(e > 1 ? m.unique(c) : c), c.selector = this.selector ? this.selector + " " + a : a, 
            c;
        },
        filter: function(a) {
            return this.pushStack(w(this, a || [], !1));
        },
        not: function(a) {
            return this.pushStack(w(this, a || [], !0));
        },
        is: function(a) {
            return !!w(this, "string" == typeof a && t.test(a) ? m(a) : a || [], !1).length;
        }
    });
    var x, y = a.document, z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, A = m.fn.init = function(a, b) {
        var c, d;
        if (!a) return this;
        if ("string" == typeof a) {
            if (c = "<" === a.charAt(0) && ">" === a.charAt(a.length - 1) && a.length >= 3 ? [ null, a, null ] : z.exec(a), 
            !c || !c[1] && b) return !b || b.jquery ? (b || x).find(a) : this.constructor(b).find(a);
            if (c[1]) {
                if (b = b instanceof m ? b[0] : b, m.merge(this, m.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : y, !0)), 
                u.test(c[1]) && m.isPlainObject(b)) for (c in b) m.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
                return this;
            }
            if (d = y.getElementById(c[2]), d && d.parentNode) {
                if (d.id !== c[2]) return x.find(a);
                this.length = 1, this[0] = d;
            }
            return this.context = y, this.selector = a, this;
        }
        return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : m.isFunction(a) ? "undefined" != typeof x.ready ? x.ready(a) : a(m) : (void 0 !== a.selector && (this.selector = a.selector, 
        this.context = a.context), m.makeArray(a, this));
    };
    A.prototype = m.fn, x = m(y);
    var B = /^(?:parents|prev(?:Until|All))/, C = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
    };
    m.extend({
        dir: function(a, b, c) {
            for (var d = [], e = a[b]; e && 9 !== e.nodeType && (void 0 === c || 1 !== e.nodeType || !m(e).is(c)); ) 1 === e.nodeType && d.push(e), 
            e = e[b];
            return d;
        },
        sibling: function(a, b) {
            for (var c = []; a; a = a.nextSibling) 1 === a.nodeType && a !== b && c.push(a);
            return c;
        }
    }), m.fn.extend({
        has: function(a) {
            var b, c = m(a, this), d = c.length;
            return this.filter(function() {
                for (b = 0; d > b; b++) if (m.contains(this, c[b])) return !0;
            });
        },
        closest: function(a, b) {
            for (var c, d = 0, e = this.length, f = [], g = t.test(a) || "string" != typeof a ? m(a, b || this.context) : 0; e > d; d++) for (c = this[d]; c && c !== b; c = c.parentNode) if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && m.find.matchesSelector(c, a))) {
                f.push(c);
                break;
            }
            return this.pushStack(f.length > 1 ? m.unique(f) : f);
        },
        index: function(a) {
            return a ? "string" == typeof a ? m.inArray(this[0], m(a)) : m.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add: function(a, b) {
            return this.pushStack(m.unique(m.merge(this.get(), m(a, b))));
        },
        addBack: function(a) {
            return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
        }
    });
    m.each({
        parent: function(a) {
            var b = a.parentNode;
            return b && 11 !== b.nodeType ? b : null;
        },
        parents: function(a) {
            return m.dir(a, "parentNode");
        },
        parentsUntil: function(a, b, c) {
            return m.dir(a, "parentNode", c);
        },
        next: function(a) {
            return D(a, "nextSibling");
        },
        prev: function(a) {
            return D(a, "previousSibling");
        },
        nextAll: function(a) {
            return m.dir(a, "nextSibling");
        },
        prevAll: function(a) {
            return m.dir(a, "previousSibling");
        },
        nextUntil: function(a, b, c) {
            return m.dir(a, "nextSibling", c);
        },
        prevUntil: function(a, b, c) {
            return m.dir(a, "previousSibling", c);
        },
        siblings: function(a) {
            return m.sibling((a.parentNode || {}).firstChild, a);
        },
        children: function(a) {
            return m.sibling(a.firstChild);
        },
        contents: function(a) {
            return m.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : m.merge([], a.childNodes);
        }
    }, function(a, b) {
        m.fn[a] = function(c, d) {
            var e = m.map(this, b, c);
            return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = m.filter(d, e)), 
            this.length > 1 && (C[a] || (e = m.unique(e)), B.test(a) && (e = e.reverse())), 
            this.pushStack(e);
        };
    });
    var E = /\S+/g, F = {};
    m.Callbacks = function(a) {
        a = "string" == typeof a ? F[a] || G(a) : m.extend({}, a);
        var b, c, d, e, f, g, h = [], i = !a.once && [], j = function(l) {
            for (c = a.memory && l, d = !0, f = g || 0, g = 0, e = h.length, b = !0; h && e > f; f++) if (h[f].apply(l[0], l[1]) === !1 && a.stopOnFalse) {
                c = !1;
                break;
            }
            b = !1, h && (i ? i.length && j(i.shift()) : c ? h = [] : k.disable());
        }, k = {
            add: function() {
                if (h) {
                    var d = h.length;
                    !function f(b) {
                        m.each(b, function(b, c) {
                            var d = m.type(c);
                            "function" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && "string" !== d && f(c);
                        });
                    }(arguments), b ? e = h.length : c && (g = d, j(c));
                }
                return this;
            },
            remove: function() {
                return h && m.each(arguments, function(a, c) {
                    for (var d; (d = m.inArray(c, h, d)) > -1; ) h.splice(d, 1), b && (e >= d && e--, 
                    f >= d && f--);
                }), this;
            },
            has: function(a) {
                return a ? m.inArray(a, h) > -1 : !(!h || !h.length);
            },
            empty: function() {
                return h = [], e = 0, this;
            },
            disable: function() {
                return h = i = c = void 0, this;
            },
            disabled: function() {
                return !h;
            },
            lock: function() {
                return i = void 0, c || k.disable(), this;
            },
            locked: function() {
                return !i;
            },
            fireWith: function(a, c) {
                return !h || d && !i || (c = c || [], c = [ a, c.slice ? c.slice() : c ], b ? i.push(c) : j(c)), 
                this;
            },
            fire: function() {
                return k.fireWith(this, arguments), this;
            },
            fired: function() {
                return !!d;
            }
        };
        return k;
    }, m.extend({
        Deferred: function(a) {
            var b = [ [ "resolve", "done", m.Callbacks("once memory"), "resolved" ], [ "reject", "fail", m.Callbacks("once memory"), "rejected" ], [ "notify", "progress", m.Callbacks("memory") ] ], c = "pending", d = {
                state: function() {
                    return c;
                },
                always: function() {
                    return e.done(arguments).fail(arguments), this;
                },
                then: function() {
                    var a = arguments;
                    return m.Deferred(function(c) {
                        m.each(b, function(b, f) {
                            var g = m.isFunction(a[b]) && a[b];
                            e[f[1]](function() {
                                var a = g && g.apply(this, arguments);
                                a && m.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [ a ] : arguments);
                            });
                        }), a = null;
                    }).promise();
                },
                promise: function(a) {
                    return null != a ? m.extend(a, d) : d;
                }
            }, e = {};
            return d.pipe = d.then, m.each(b, function(a, f) {
                var g = f[2], h = f[3];
                d[f[1]] = g.add, h && g.add(function() {
                    c = h;
                }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function() {
                    return e[f[0] + "With"](this === e ? d : this, arguments), this;
                }, e[f[0] + "With"] = g.fireWith;
            }), d.promise(e), a && a.call(e, e), e;
        },
        when: function(a) {
            var i, j, k, b = 0, c = d.call(arguments), e = c.length, f = 1 !== e || a && m.isFunction(a.promise) ? e : 0, g = 1 === f ? a : m.Deferred(), h = function(a, b, c) {
                return function(e) {
                    b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);
                };
            };
            if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) c[b] && m.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;
            return f || g.resolveWith(k, c), g.promise();
        }
    });
    var H;
    m.fn.ready = function(a) {
        return m.ready.promise().done(a), this;
    }, m.extend({
        isReady: !1,
        readyWait: 1,
        holdReady: function(a) {
            a ? m.readyWait++ : m.ready(!0);
        },
        ready: function(a) {
            if (a === !0 ? !--m.readyWait : !m.isReady) {
                if (!y.body) return setTimeout(m.ready);
                m.isReady = !0, a !== !0 && --m.readyWait > 0 || (H.resolveWith(y, [ m ]), m.fn.triggerHandler && (m(y).triggerHandler("ready"), 
                m(y).off("ready")));
            }
        }
    });
    m.ready.promise = function(b) {
        if (!H) if (H = m.Deferred(), "complete" === y.readyState) setTimeout(m.ready); else if (y.addEventListener) y.addEventListener("DOMContentLoaded", J, !1), 
        a.addEventListener("load", J, !1); else {
            y.attachEvent("onreadystatechange", J), a.attachEvent("onload", J);
            var c = !1;
            try {
                c = null == a.frameElement && y.documentElement;
            } catch (d) {}
            c && c.doScroll && !function e() {
                if (!m.isReady) {
                    try {
                        c.doScroll("left");
                    } catch (a) {
                        return setTimeout(e, 50);
                    }
                    I(), m.ready();
                }
            }();
        }
        return H.promise(b);
    };
    var L, K = "undefined";
    for (L in m(k)) break;
    k.ownLast = "0" !== L, k.inlineBlockNeedsLayout = !1, m(function() {
        var a, b, c, d;
        c = y.getElementsByTagName("body")[0], c && c.style && (b = y.createElement("div"), 
        d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", 
        c.appendChild(d).appendChild(b), typeof b.style.zoom !== K && (b.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1", 
        k.inlineBlockNeedsLayout = a = 3 === b.offsetWidth, a && (c.style.zoom = 1)), c.removeChild(d));
    }), function() {
        var a = y.createElement("div");
        if (null == k.deleteExpando) {
            k.deleteExpando = !0;
            try {
                delete a.test;
            } catch (b) {
                k.deleteExpando = !1;
            }
        }
        a = null;
    }(), m.acceptData = function(a) {
        var b = m.noData[(a.nodeName + " ").toLowerCase()], c = +a.nodeType || 1;
        return 1 !== c && 9 !== c ? !1 : !b || b !== !0 && a.getAttribute("classid") === b;
    };
    var M = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, N = /([A-Z])/g;
    m.extend({
        cache: {},
        noData: {
            "applet ": !0,
            "embed ": !0,
            "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        hasData: function(a) {
            return a = a.nodeType ? m.cache[a[m.expando]] : a[m.expando], !!a && !P(a);
        },
        data: function(a, b, c) {
            return Q(a, b, c);
        },
        removeData: function(a, b) {
            return R(a, b);
        },
        _data: function(a, b, c) {
            return Q(a, b, c, !0);
        },
        _removeData: function(a, b) {
            return R(a, b, !0);
        }
    }), m.fn.extend({
        data: function(a, b) {
            var c, d, e, f = this[0], g = f && f.attributes;
            if (void 0 === a) {
                if (this.length && (e = m.data(f), 1 === f.nodeType && !m._data(f, "parsedAttrs"))) {
                    c = g.length;
                    for (;c--; ) g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = m.camelCase(d.slice(5)), 
                    O(f, d, e[d])));
                    m._data(f, "parsedAttrs", !0);
                }
                return e;
            }
            return "object" == typeof a ? this.each(function() {
                m.data(this, a);
            }) : arguments.length > 1 ? this.each(function() {
                m.data(this, a, b);
            }) : f ? O(f, a, m.data(f, a)) : void 0;
        },
        removeData: function(a) {
            return this.each(function() {
                m.removeData(this, a);
            });
        }
    }), m.extend({
        queue: function(a, b, c) {
            var d;
            return a ? (b = (b || "fx") + "queue", d = m._data(a, b), c && (!d || m.isArray(c) ? d = m._data(a, b, m.makeArray(c)) : d.push(c)), 
            d || []) : void 0;
        },
        dequeue: function(a, b) {
            b = b || "fx";
            var c = m.queue(a, b), d = c.length, e = c.shift(), f = m._queueHooks(a, b), g = function() {
                m.dequeue(a, b);
            };
            "inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), 
            delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
        },
        _queueHooks: function(a, b) {
            var c = b + "queueHooks";
            return m._data(a, c) || m._data(a, c, {
                empty: m.Callbacks("once memory").add(function() {
                    m._removeData(a, b + "queue"), m._removeData(a, c);
                })
            });
        }
    }), m.fn.extend({
        queue: function(a, b) {
            var c = 2;
            return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? m.queue(this[0], a) : void 0 === b ? this : this.each(function() {
                var c = m.queue(this, a, b);
                m._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && m.dequeue(this, a);
            });
        },
        dequeue: function(a) {
            return this.each(function() {
                m.dequeue(this, a);
            });
        },
        clearQueue: function(a) {
            return this.queue(a || "fx", []);
        },
        promise: function(a, b) {
            var c, d = 1, e = m.Deferred(), f = this, g = this.length, h = function() {
                --d || e.resolveWith(f, [ f ]);
            };
            "string" != typeof a && (b = a, a = void 0), a = a || "fx";
            for (;g--; ) c = m._data(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
            return h(), e.promise(b);
        }
    });
    var S = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, T = [ "Top", "Right", "Bottom", "Left" ], U = function(a, b) {
        return a = b || a, "none" === m.css(a, "display") || !m.contains(a.ownerDocument, a);
    }, V = m.access = function(a, b, c, d, e, f, g) {
        var h = 0, i = a.length, j = null == c;
        if ("object" === m.type(c)) {
            e = !0;
            for (h in c) m.access(a, b, h, c[h], !0, f, g);
        } else if (void 0 !== d && (e = !0, m.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), 
        b = null) : (j = b, b = function(a, b, c) {
            return j.call(m(a), c);
        })), b)) for (;i > h; h++) b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
        return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
    }, W = /^(?:checkbox|radio)$/i;
    !function() {
        var a = y.createElement("input"), b = y.createElement("div"), c = y.createDocumentFragment();
        if (b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", 
        k.leadingWhitespace = 3 === b.firstChild.nodeType, k.tbody = !b.getElementsByTagName("tbody").length, 
        k.htmlSerialize = !!b.getElementsByTagName("link").length, k.html5Clone = "<:nav></:nav>" !== y.createElement("nav").cloneNode(!0).outerHTML, 
        a.type = "checkbox", a.checked = !0, c.appendChild(a), k.appendChecked = a.checked, 
        b.innerHTML = "<textarea>x</textarea>", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue, 
        c.appendChild(b), b.innerHTML = "<input type='radio' checked='checked' name='t'/>", 
        k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, k.noCloneEvent = !0, 
        b.attachEvent && (b.attachEvent("onclick", function() {
            k.noCloneEvent = !1;
        }), b.cloneNode(!0).click()), null == k.deleteExpando) {
            k.deleteExpando = !0;
            try {
                delete b.test;
            } catch (d) {
                k.deleteExpando = !1;
            }
        }
    }(), function() {
        var b, c, d = y.createElement("div");
        for (b in {
            submit: !0,
            change: !0,
            focusin: !0
        }) c = "on" + b, (k[b + "Bubbles"] = c in a) || (d.setAttribute(c, "t"), k[b + "Bubbles"] = d.attributes[c].expando === !1);
        d = null;
    }();
    var X = /^(?:input|select|textarea)$/i, Y = /^key/, Z = /^(?:mouse|pointer|contextmenu)|click/, $ = /^(?:focusinfocus|focusoutblur)$/, _ = /^([^.]*)(?:\.(.+)|)$/;
    m.event = {
        global: {},
        add: function(a, b, c, d, e) {
            var f, g, h, i, j, k, l, n, o, p, q, r = m._data(a);
            if (r) {
                c.handler && (i = c, c = i.handler, e = i.selector), c.guid || (c.guid = m.guid++), 
                (g = r.events) || (g = r.events = {}), (k = r.handle) || (k = r.handle = function(a) {
                    return typeof m === K || a && m.event.triggered === a.type ? void 0 : m.event.dispatch.apply(k.elem, arguments);
                }, k.elem = a), b = (b || "").match(E) || [ "" ], h = b.length;
                for (;h--; ) f = _.exec(b[h]) || [], o = q = f[1], p = (f[2] || "").split(".").sort(), 
                o && (j = m.event.special[o] || {}, o = (e ? j.delegateType : j.bindType) || o, 
                j = m.event.special[o] || {}, l = m.extend({
                    type: o,
                    origType: q,
                    data: d,
                    handler: c,
                    guid: c.guid,
                    selector: e,
                    needsContext: e && m.expr.match.needsContext.test(e),
                    namespace: p.join(".")
                }, i), (n = g[o]) || (n = g[o] = [], n.delegateCount = 0, j.setup && j.setup.call(a, d, p, k) !== !1 || (a.addEventListener ? a.addEventListener(o, k, !1) : a.attachEvent && a.attachEvent("on" + o, k))), 
                j.add && (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)), e ? n.splice(n.delegateCount++, 0, l) : n.push(l), 
                m.event.global[o] = !0);
                a = null;
            }
        },
        remove: function(a, b, c, d, e) {
            var f, g, h, i, j, k, l, n, o, p, q, r = m.hasData(a) && m._data(a);
            if (r && (k = r.events)) {
                b = (b || "").match(E) || [ "" ], j = b.length;
                for (;j--; ) if (h = _.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), 
                o) {
                    l = m.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, n = k[o] || [], 
                    h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), i = f = n.length;
                    for (;f--; ) g = n[f], !e && q !== g.origType || c && c.guid !== g.guid || h && !h.test(g.namespace) || d && d !== g.selector && ("**" !== d || !g.selector) || (n.splice(f, 1), 
                    g.selector && n.delegateCount--, l.remove && l.remove.call(a, g));
                    i && !n.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || m.removeEvent(a, o, r.handle), 
                    delete k[o]);
                } else for (o in k) m.event.remove(a, o + b[j], c, d, !0);
                m.isEmptyObject(k) && (delete r.handle, m._removeData(a, "events"));
            }
        },
        trigger: function(b, c, d, e) {
            var f, g, h, i, k, l, n, o = [ d || y ], p = j.call(b, "type") ? b.type : b, q = j.call(b, "namespace") ? b.namespace.split(".") : [];
            if (h = l = d = d || y, 3 !== d.nodeType && 8 !== d.nodeType && !$.test(p + m.event.triggered) && (p.indexOf(".") >= 0 && (q = p.split("."), 
            p = q.shift(), q.sort()), g = p.indexOf(":") < 0 && "on" + p, b = b[m.expando] ? b : new m.Event(p, "object" == typeof b && b), 
            b.isTrigger = e ? 2 : 3, b.namespace = q.join("."), b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, 
            b.result = void 0, b.target || (b.target = d), c = null == c ? [ b ] : m.makeArray(c, [ b ]), 
            k = m.event.special[p] || {}, e || !k.trigger || k.trigger.apply(d, c) !== !1)) {
                if (!e && !k.noBubble && !m.isWindow(d)) {
                    for (i = k.delegateType || p, $.test(i + p) || (h = h.parentNode); h; h = h.parentNode) o.push(h), 
                    l = h;
                    l === (d.ownerDocument || y) && o.push(l.defaultView || l.parentWindow || a);
                }
                n = 0;
                for (;(h = o[n++]) && !b.isPropagationStopped(); ) b.type = n > 1 ? i : k.bindType || p, 
                f = (m._data(h, "events") || {})[b.type] && m._data(h, "handle"), f && f.apply(h, c), 
                f = g && h[g], f && f.apply && m.acceptData(h) && (b.result = f.apply(h, c), b.result === !1 && b.preventDefault());
                if (b.type = p, !e && !b.isDefaultPrevented() && (!k._default || k._default.apply(o.pop(), c) === !1) && m.acceptData(d) && g && d[p] && !m.isWindow(d)) {
                    l = d[g], l && (d[g] = null), m.event.triggered = p;
                    try {
                        d[p]();
                    } catch (r) {}
                    m.event.triggered = void 0, l && (d[g] = l);
                }
                return b.result;
            }
        },
        dispatch: function(a) {
            a = m.event.fix(a);
            var b, c, e, f, g, h = [], i = d.call(arguments), j = (m._data(this, "events") || {})[a.type] || [], k = m.event.special[a.type] || {};
            if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {
                h = m.event.handlers.call(this, a, j), b = 0;
                for (;(f = h[b++]) && !a.isPropagationStopped(); ) {
                    a.currentTarget = f.elem, g = 0;
                    for (;(e = f.handlers[g++]) && !a.isImmediatePropagationStopped(); ) (!a.namespace_re || a.namespace_re.test(e.namespace)) && (a.handleObj = e, 
                    a.data = e.data, c = ((m.event.special[e.origType] || {}).handle || e.handler).apply(f.elem, i), 
                    void 0 !== c && (a.result = c) === !1 && (a.preventDefault(), a.stopPropagation()));
                }
                return k.postDispatch && k.postDispatch.call(this, a), a.result;
            }
        },
        handlers: function(a, b) {
            var c, d, e, f, g = [], h = b.delegateCount, i = a.target;
            if (h && i.nodeType && (!a.button || "click" !== a.type)) for (;i != this; i = i.parentNode || this) if (1 === i.nodeType && (i.disabled !== !0 || "click" !== a.type)) {
                for (e = [], f = 0; h > f; f++) d = b[f], c = d.selector + " ", void 0 === e[c] && (e[c] = d.needsContext ? m(c, this).index(i) >= 0 : m.find(c, this, null, [ i ]).length), 
                e[c] && e.push(d);
                e.length && g.push({
                    elem: i,
                    handlers: e
                });
            }
            return h < b.length && g.push({
                elem: this,
                handlers: b.slice(h)
            }), g;
        },
        fix: function(a) {
            if (a[m.expando]) return a;
            var b, c, d, e = a.type, f = a, g = this.fixHooks[e];
            g || (this.fixHooks[e] = g = Z.test(e) ? this.mouseHooks : Y.test(e) ? this.keyHooks : {}), 
            d = g.props ? this.props.concat(g.props) : this.props, a = new m.Event(f), b = d.length;
            for (;b--; ) c = d[b], a[c] = f[c];
            return a.target || (a.target = f.srcElement || y), 3 === a.target.nodeType && (a.target = a.target.parentNode), 
            a.metaKey = !!a.metaKey, g.filter ? g.filter(a, f) : a;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(a, b) {
                return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), 
                a;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(a, b) {
                var c, d, e, f = b.button, g = b.fromElement;
                return null == a.pageX && null != b.clientX && (d = a.target.ownerDocument || y, 
                e = d.documentElement, c = d.body, a.pageX = b.clientX + (e && e.scrollLeft || c && c.scrollLeft || 0) - (e && e.clientLeft || c && c.clientLeft || 0), 
                a.pageY = b.clientY + (e && e.scrollTop || c && c.scrollTop || 0) - (e && e.clientTop || c && c.clientTop || 0)), 
                !a.relatedTarget && g && (a.relatedTarget = g === a.target ? b.toElement : g), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), 
                a;
            }
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function() {
                    if (this !== cb() && this.focus) try {
                        return this.focus(), !1;
                    } catch (a) {}
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    return this === cb() && this.blur ? (this.blur(), !1) : void 0;
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    return m.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), 
                    !1) : void 0;
                },
                _default: function(a) {
                    return m.nodeName(a.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(a) {
                    void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
                }
            }
        },
        simulate: function(a, b, c, d) {
            var e = m.extend(new m.Event(), c, {
                type: a,
                isSimulated: !0,
                originalEvent: {}
            });
            d ? m.event.trigger(e, null, b) : m.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();
        }
    }, m.removeEvent = y.removeEventListener ? function(a, b, c) {
        a.removeEventListener && a.removeEventListener(b, c, !1);
    } : function(a, b, c) {
        var d = "on" + b;
        a.detachEvent && (typeof a[d] === K && (a[d] = null), a.detachEvent(d, c));
    }, m.Event = function(a, b) {
        return this instanceof m.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, 
        this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? ab : bb) : this.type = a, 
        b && m.extend(this, b), this.timeStamp = a && a.timeStamp || m.now(), void (this[m.expando] = !0)) : new m.Event(a, b);
    }, m.Event.prototype = {
        isDefaultPrevented: bb,
        isPropagationStopped: bb,
        isImmediatePropagationStopped: bb,
        preventDefault: function() {
            var a = this.originalEvent;
            this.isDefaultPrevented = ab, a && (a.preventDefault ? a.preventDefault() : a.returnValue = !1);
        },
        stopPropagation: function() {
            var a = this.originalEvent;
            this.isPropagationStopped = ab, a && (a.stopPropagation && a.stopPropagation(), 
            a.cancelBubble = !0);
        },
        stopImmediatePropagation: function() {
            var a = this.originalEvent;
            this.isImmediatePropagationStopped = ab, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), 
            this.stopPropagation();
        }
    }, m.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(a, b) {
        m.event.special[a] = {
            delegateType: b,
            bindType: b,
            handle: function(a) {
                var c, d = this, e = a.relatedTarget, f = a.handleObj;
                return (!e || e !== d && !m.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), 
                a.type = b), c;
            }
        };
    }), k.submitBubbles || (m.event.special.submit = {
        setup: function() {
            return m.nodeName(this, "form") ? !1 : void m.event.add(this, "click._submit keypress._submit", function(a) {
                var b = a.target, c = m.nodeName(b, "input") || m.nodeName(b, "button") ? b.form : void 0;
                c && !m._data(c, "submitBubbles") && (m.event.add(c, "submit._submit", function(a) {
                    a._submit_bubble = !0;
                }), m._data(c, "submitBubbles", !0));
            });
        },
        postDispatch: function(a) {
            a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && m.event.simulate("submit", this.parentNode, a, !0));
        },
        teardown: function() {
            return m.nodeName(this, "form") ? !1 : void m.event.remove(this, "._submit");
        }
    }), k.changeBubbles || (m.event.special.change = {
        setup: function() {
            return X.test(this.nodeName) ? (("checkbox" === this.type || "radio" === this.type) && (m.event.add(this, "propertychange._change", function(a) {
                "checked" === a.originalEvent.propertyName && (this._just_changed = !0);
            }), m.event.add(this, "click._change", function(a) {
                this._just_changed && !a.isTrigger && (this._just_changed = !1), m.event.simulate("change", this, a, !0);
            })), !1) : void m.event.add(this, "beforeactivate._change", function(a) {
                var b = a.target;
                X.test(b.nodeName) && !m._data(b, "changeBubbles") && (m.event.add(b, "change._change", function(a) {
                    !this.parentNode || a.isSimulated || a.isTrigger || m.event.simulate("change", this.parentNode, a, !0);
                }), m._data(b, "changeBubbles", !0));
            });
        },
        handle: function(a) {
            var b = a.target;
            return this !== b || a.isSimulated || a.isTrigger || "radio" !== b.type && "checkbox" !== b.type ? a.handleObj.handler.apply(this, arguments) : void 0;
        },
        teardown: function() {
            return m.event.remove(this, "._change"), !X.test(this.nodeName);
        }
    }), k.focusinBubbles || m.each({
        focus: "focusin",
        blur: "focusout"
    }, function(a, b) {
        var c = function(a) {
            m.event.simulate(b, a.target, m.event.fix(a), !0);
        };
        m.event.special[b] = {
            setup: function() {
                var d = this.ownerDocument || this, e = m._data(d, b);
                e || d.addEventListener(a, c, !0), m._data(d, b, (e || 0) + 1);
            },
            teardown: function() {
                var d = this.ownerDocument || this, e = m._data(d, b) - 1;
                e ? m._data(d, b, e) : (d.removeEventListener(a, c, !0), m._removeData(d, b));
            }
        };
    }), m.fn.extend({
        on: function(a, b, c, d, e) {
            var f, g;
            if ("object" == typeof a) {
                "string" != typeof b && (c = c || b, b = void 0);
                for (f in a) this.on(f, b, c, a[f], e);
                return this;
            }
            if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ("string" == typeof b ? (d = c, 
            c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = bb; else if (!d) return this;
            return 1 === e && (g = d, d = function(a) {
                return m().off(a), g.apply(this, arguments);
            }, d.guid = g.guid || (g.guid = m.guid++)), this.each(function() {
                m.event.add(this, a, d, c, b);
            });
        },
        one: function(a, b, c, d) {
            return this.on(a, b, c, d, 1);
        },
        off: function(a, b, c) {
            var d, e;
            if (a && a.preventDefault && a.handleObj) return d = a.handleObj, m(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), 
            this;
            if ("object" == typeof a) {
                for (e in a) this.off(e, b, a[e]);
                return this;
            }
            return (b === !1 || "function" == typeof b) && (c = b, b = void 0), c === !1 && (c = bb), 
            this.each(function() {
                m.event.remove(this, a, c, b);
            });
        },
        trigger: function(a, b) {
            return this.each(function() {
                m.event.trigger(a, b, this);
            });
        },
        triggerHandler: function(a, b) {
            var c = this[0];
            return c ? m.event.trigger(a, b, c, !0) : void 0;
        }
    });
    var eb = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", fb = / jQuery\d+="(?:null|\d+)"/g, gb = new RegExp("<(?:" + eb + ")[\\s/>]", "i"), hb = /^\s+/, ib = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, jb = /<([\w:]+)/, kb = /<tbody/i, lb = /<|&#?\w+;/, mb = /<(?:script|style|link)/i, nb = /checked\s*(?:[^=]|=\s*.checked.)/i, ob = /^$|\/(?:java|ecma)script/i, pb = /^true\/(.*)/, qb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, rb = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        legend: [ 1, "<fieldset>", "</fieldset>" ],
        area: [ 1, "<map>", "</map>" ],
        param: [ 1, "<object>", "</object>" ],
        thead: [ 1, "<table>", "</table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: k.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
    }, sb = db(y), tb = sb.appendChild(y.createElement("div"));
    rb.optgroup = rb.option, rb.tbody = rb.tfoot = rb.colgroup = rb.caption = rb.thead, 
    rb.th = rb.td;
    m.extend({
        clone: function(a, b, c) {
            var d, e, f, g, h, i = m.contains(a.ownerDocument, a);
            if (k.html5Clone || m.isXMLDoc(a) || !gb.test("<" + a.nodeName + ">") ? f = a.cloneNode(!0) : (tb.innerHTML = a.outerHTML, 
            tb.removeChild(f = tb.firstChild)), !(k.noCloneEvent && k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || m.isXMLDoc(a))) for (d = ub(f), 
            h = ub(a), g = 0; null != (e = h[g]); ++g) d[g] && Bb(e, d[g]);
            if (b) if (c) for (h = h || ub(a), d = d || ub(f), g = 0; null != (e = h[g]); g++) Ab(e, d[g]); else Ab(a, f);
            return d = ub(f, "script"), d.length > 0 && zb(d, !i && ub(a, "script")), d = h = e = null, 
            f;
        },
        buildFragment: function(a, b, c, d) {
            for (var e, f, g, h, i, j, l, n = a.length, o = db(b), p = [], q = 0; n > q; q++) if (f = a[q], 
            f || 0 === f) if ("object" === m.type(f)) m.merge(p, f.nodeType ? [ f ] : f); else if (lb.test(f)) {
                h = h || o.appendChild(b.createElement("div")), i = (jb.exec(f) || [ "", "" ])[1].toLowerCase(), 
                l = rb[i] || rb._default, h.innerHTML = l[1] + f.replace(ib, "<$1></$2>") + l[2], 
                e = l[0];
                for (;e--; ) h = h.lastChild;
                if (!k.leadingWhitespace && hb.test(f) && p.push(b.createTextNode(hb.exec(f)[0])), 
                !k.tbody) {
                    f = "table" !== i || kb.test(f) ? "<table>" !== l[1] || kb.test(f) ? 0 : h : h.firstChild, 
                    e = f && f.childNodes.length;
                    for (;e--; ) m.nodeName(j = f.childNodes[e], "tbody") && !j.childNodes.length && f.removeChild(j);
                }
                m.merge(p, h.childNodes), h.textContent = "";
                for (;h.firstChild; ) h.removeChild(h.firstChild);
                h = o.lastChild;
            } else p.push(b.createTextNode(f));
            h && o.removeChild(h), k.appendChecked || m.grep(ub(p, "input"), vb), q = 0;
            for (;f = p[q++]; ) if ((!d || -1 === m.inArray(f, d)) && (g = m.contains(f.ownerDocument, f), 
            h = ub(o.appendChild(f), "script"), g && zb(h), c)) {
                e = 0;
                for (;f = h[e++]; ) ob.test(f.type || "") && c.push(f);
            }
            return h = null, o;
        },
        cleanData: function(a, b) {
            for (var d, e, f, g, h = 0, i = m.expando, j = m.cache, l = k.deleteExpando, n = m.event.special; null != (d = a[h]); h++) if ((b || m.acceptData(d)) && (f = d[i], 
            g = f && j[f])) {
                if (g.events) for (e in g.events) n[e] ? m.event.remove(d, e) : m.removeEvent(d, e, g.handle);
                j[f] && (delete j[f], l ? delete d[i] : typeof d.removeAttribute !== K ? d.removeAttribute(i) : d[i] = null, 
                c.push(f));
            }
        }
    }), m.fn.extend({
        text: function(a) {
            return V(this, function(a) {
                return void 0 === a ? m.text(this) : this.empty().append((this[0] && this[0].ownerDocument || y).createTextNode(a));
            }, null, a, arguments.length);
        },
        append: function() {
            return this.domManip(arguments, function(a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = wb(this, a);
                    b.appendChild(a);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, function(a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = wb(this, a);
                    b.insertBefore(a, b.firstChild);
                }
            });
        },
        before: function() {
            return this.domManip(arguments, function(a) {
                this.parentNode && this.parentNode.insertBefore(a, this);
            });
        },
        after: function() {
            return this.domManip(arguments, function(a) {
                this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
            });
        },
        remove: function(a, b) {
            for (var c, d = a ? m.filter(a, this) : this, e = 0; null != (c = d[e]); e++) b || 1 !== c.nodeType || m.cleanData(ub(c)), 
            c.parentNode && (b && m.contains(c.ownerDocument, c) && zb(ub(c, "script")), c.parentNode.removeChild(c));
            return this;
        },
        empty: function() {
            for (var a, b = 0; null != (a = this[b]); b++) {
                1 === a.nodeType && m.cleanData(ub(a, !1));
                for (;a.firstChild; ) a.removeChild(a.firstChild);
                a.options && m.nodeName(a, "select") && (a.options.length = 0);
            }
            return this;
        },
        clone: function(a, b) {
            return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function() {
                return m.clone(this, a, b);
            });
        },
        html: function(a) {
            return V(this, function(a) {
                var b = this[0] || {}, c = 0, d = this.length;
                if (void 0 === a) return 1 === b.nodeType ? b.innerHTML.replace(fb, "") : void 0;
                if (!("string" != typeof a || mb.test(a) || !k.htmlSerialize && gb.test(a) || !k.leadingWhitespace && hb.test(a) || rb[(jb.exec(a) || [ "", "" ])[1].toLowerCase()])) {
                    a = a.replace(ib, "<$1></$2>");
                    try {
                        for (;d > c; c++) b = this[c] || {}, 1 === b.nodeType && (m.cleanData(ub(b, !1)), 
                        b.innerHTML = a);
                        b = 0;
                    } catch (e) {}
                }
                b && this.empty().append(a);
            }, null, a, arguments.length);
        },
        replaceWith: function() {
            var a = arguments[0];
            return this.domManip(arguments, function(b) {
                a = this.parentNode, m.cleanData(ub(this)), a && a.replaceChild(b, this);
            }), a && (a.length || a.nodeType) ? this : this.remove();
        },
        detach: function(a) {
            return this.remove(a, !0);
        },
        domManip: function(a, b) {
            a = e.apply([], a);
            var c, d, f, g, h, i, j = 0, l = this.length, n = this, o = l - 1, p = a[0], q = m.isFunction(p);
            if (q || l > 1 && "string" == typeof p && !k.checkClone && nb.test(p)) return this.each(function(c) {
                var d = n.eq(c);
                q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);
            });
            if (l && (i = m.buildFragment(a, this[0].ownerDocument, !1, this), c = i.firstChild, 
            1 === i.childNodes.length && (i = c), c)) {
                for (g = m.map(ub(i, "script"), xb), f = g.length; l > j; j++) d = i, j !== o && (d = m.clone(d, !0, !0), 
                f && m.merge(g, ub(d, "script"))), b.call(this[j], d, j);
                if (f) for (h = g[g.length - 1].ownerDocument, m.map(g, yb), j = 0; f > j; j++) d = g[j], 
                ob.test(d.type || "") && !m._data(d, "globalEval") && m.contains(h, d) && (d.src ? m._evalUrl && m._evalUrl(d.src) : m.globalEval((d.text || d.textContent || d.innerHTML || "").replace(qb, "")));
                i = c = null;
            }
            return this;
        }
    }), m.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(a, b) {
        m.fn[a] = function(a) {
            for (var c, d = 0, e = [], g = m(a), h = g.length - 1; h >= d; d++) c = d === h ? this : this.clone(!0), 
            m(g[d])[b](c), f.apply(e, c.get());
            return this.pushStack(e);
        };
    });
    var Cb, Db = {};
    !function() {
        var a;
        k.shrinkWrapBlocks = function() {
            if (null != a) return a;
            a = !1;
            var b, c, d;
            return c = y.getElementsByTagName("body")[0], c && c.style ? (b = y.createElement("div"), 
            d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", 
            c.appendChild(d).appendChild(b), typeof b.style.zoom !== K && (b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1", 
            b.appendChild(y.createElement("div")).style.width = "5px", a = 3 !== b.offsetWidth), 
            c.removeChild(d), a) : void 0;
        };
    }();
    var Ib, Jb, Gb = /^margin/, Hb = new RegExp("^(" + S + ")(?!px)[a-z%]+$", "i"), Kb = /^(top|right|bottom|left)$/;
    a.getComputedStyle ? (Ib = function(b) {
        return b.ownerDocument.defaultView.opener ? b.ownerDocument.defaultView.getComputedStyle(b, null) : a.getComputedStyle(b, null);
    }, Jb = function(a, b, c) {
        var d, e, f, g, h = a.style;
        return c = c || Ib(a), g = c ? c.getPropertyValue(b) || c[b] : void 0, c && ("" !== g || m.contains(a.ownerDocument, a) || (g = m.style(a, b)), 
        Hb.test(g) && Gb.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, 
        g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 === g ? g : g + "";
    }) : y.documentElement.currentStyle && (Ib = function(a) {
        return a.currentStyle;
    }, Jb = function(a, b, c) {
        var d, e, f, g, h = a.style;
        return c = c || Ib(a), g = c ? c[b] : void 0, null == g && h && h[b] && (g = h[b]), 
        Hb.test(g) && !Kb.test(b) && (d = h.left, e = a.runtimeStyle, f = e && e.left, f && (e.left = a.currentStyle.left), 
        h.left = "fontSize" === b ? "1em" : g, g = h.pixelLeft + "px", h.left = d, f && (e.left = f)), 
        void 0 === g ? g : g + "" || "auto";
    });
    !function() {
        function i() {
            var b, c, d, i;
            c = y.getElementsByTagName("body")[0], c && c.style && (b = y.createElement("div"), 
            d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", 
            c.appendChild(d).appendChild(b), b.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute", 
            e = f = !1, h = !0, a.getComputedStyle && (e = "1%" !== (a.getComputedStyle(b, null) || {}).top, 
            f = "4px" === (a.getComputedStyle(b, null) || {
                width: "4px"
            }).width, i = b.appendChild(y.createElement("div")), i.style.cssText = b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", 
            i.style.marginRight = i.style.width = "0", b.style.width = "1px", h = !parseFloat((a.getComputedStyle(i, null) || {}).marginRight), 
            b.removeChild(i)), b.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", 
            i = b.getElementsByTagName("td"), i[0].style.cssText = "margin:0;border:0;padding:0;display:none", 
            g = 0 === i[0].offsetHeight, g && (i[0].style.display = "", i[1].style.display = "none", 
            g = 0 === i[0].offsetHeight), c.removeChild(d));
        }
        var b, c, d, e, f, g, h;
        (b = y.createElement("div"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", 
        d = b.getElementsByTagName("a")[0], c = d && d.style) && (c.cssText = "float:left;opacity:.5", 
        k.opacity = "0.5" === c.opacity, k.cssFloat = !!c.cssFloat, b.style.backgroundClip = "content-box", 
        b.cloneNode(!0).style.backgroundClip = "", k.clearCloneStyle = "content-box" === b.style.backgroundClip, 
        k.boxSizing = "" === c.boxSizing || "" === c.MozBoxSizing || "" === c.WebkitBoxSizing, 
        m.extend(k, {
            reliableHiddenOffsets: function() {
                return null == g && i(), g;
            },
            boxSizingReliable: function() {
                return null == f && i(), f;
            },
            pixelPosition: function() {
                return null == e && i(), e;
            },
            reliableMarginRight: function() {
                return null == h && i(), h;
            }
        }));
    }(), m.swap = function(a, b, c, d) {
        var e, f, g = {};
        for (f in b) g[f] = a.style[f], a.style[f] = b[f];
        e = c.apply(a, d || []);
        for (f in b) a.style[f] = g[f];
        return e;
    };
    var Mb = /alpha\([^)]*\)/i, Nb = /opacity\s*=\s*([^)]*)/, Ob = /^(none|table(?!-c[ea]).+)/, Pb = new RegExp("^(" + S + ")(.*)$", "i"), Qb = new RegExp("^([+-])=(" + S + ")", "i"), Rb = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, Sb = {
        letterSpacing: "0",
        fontWeight: "400"
    }, Tb = [ "Webkit", "O", "Moz", "ms" ];
    m.extend({
        cssHooks: {
            opacity: {
                get: function(a, b) {
                    if (b) {
                        var c = Jb(a, "opacity");
                        return "" === c ? "1" : c;
                    }
                }
            }
        },
        cssNumber: {
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            "float": k.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(a, b, c, d) {
            if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
                var e, f, g, h = m.camelCase(b), i = a.style;
                if (b = m.cssProps[h] || (m.cssProps[h] = Ub(i, h)), g = m.cssHooks[b] || m.cssHooks[h], 
                void 0 === c) return g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];
                if (f = typeof c, "string" === f && (e = Qb.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(m.css(a, b)), 
                f = "number"), null != c && c === c && ("number" !== f || m.cssNumber[h] || (c += "px"), 
                k.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), 
                !(g && "set" in g && void 0 === (c = g.set(a, c, d))))) try {
                    i[b] = c;
                } catch (j) {}
            }
        },
        css: function(a, b, c, d) {
            var e, f, g, h = m.camelCase(b);
            return b = m.cssProps[h] || (m.cssProps[h] = Ub(a.style, h)), g = m.cssHooks[b] || m.cssHooks[h], 
            g && "get" in g && (f = g.get(a, !0, c)), void 0 === f && (f = Jb(a, b, d)), "normal" === f && b in Sb && (f = Sb[b]), 
            "" === c || c ? (e = parseFloat(f), c === !0 || m.isNumeric(e) ? e || 0 : f) : f;
        }
    }), m.each([ "height", "width" ], function(a, b) {
        m.cssHooks[b] = {
            get: function(a, c, d) {
                return c ? Ob.test(m.css(a, "display")) && 0 === a.offsetWidth ? m.swap(a, Rb, function() {
                    return Yb(a, b, d);
                }) : Yb(a, b, d) : void 0;
            },
            set: function(a, c, d) {
                var e = d && Ib(a);
                return Wb(a, c, d ? Xb(a, b, d, k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, e), e) : 0);
            }
        };
    }), k.opacity || (m.cssHooks.opacity = {
        get: function(a, b) {
            return Nb.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : b ? "1" : "";
        },
        set: function(a, b) {
            var c = a.style, d = a.currentStyle, e = m.isNumeric(b) ? "alpha(opacity=" + 100 * b + ")" : "", f = d && d.filter || c.filter || "";
            c.zoom = 1, (b >= 1 || "" === b) && "" === m.trim(f.replace(Mb, "")) && c.removeAttribute && (c.removeAttribute("filter"), 
            "" === b || d && !d.filter) || (c.filter = Mb.test(f) ? f.replace(Mb, e) : f + " " + e);
        }
    }), m.cssHooks.marginRight = Lb(k.reliableMarginRight, function(a, b) {
        return b ? m.swap(a, {
            display: "inline-block"
        }, Jb, [ a, "marginRight" ]) : void 0;
    }), m.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(a, b) {
        m.cssHooks[a + b] = {
            expand: function(c) {
                for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [ c ]; 4 > d; d++) e[a + T[d] + b] = f[d] || f[d - 2] || f[0];
                return e;
            }
        }, Gb.test(a) || (m.cssHooks[a + b].set = Wb);
    }), m.fn.extend({
        css: function(a, b) {
            return V(this, function(a, b, c) {
                var d, e, f = {}, g = 0;
                if (m.isArray(b)) {
                    for (d = Ib(a), e = b.length; e > g; g++) f[b[g]] = m.css(a, b[g], !1, d);
                    return f;
                }
                return void 0 !== c ? m.style(a, b, c) : m.css(a, b);
            }, a, b, arguments.length > 1);
        },
        show: function() {
            return Vb(this, !0);
        },
        hide: function() {
            return Vb(this);
        },
        toggle: function(a) {
            return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function() {
                U(this) ? m(this).show() : m(this).hide();
            });
        }
    });
    m.Tween = Zb, Zb.prototype = {
        constructor: Zb,
        init: function(a, b, c, d, e, f) {
            this.elem = a, this.prop = c, this.easing = e || "swing", this.options = b, this.start = this.now = this.cur(), 
            this.end = d, this.unit = f || (m.cssNumber[c] ? "" : "px");
        },
        cur: function() {
            var a = Zb.propHooks[this.prop];
            return a && a.get ? a.get(this) : Zb.propHooks._default.get(this);
        },
        run: function(a) {
            var b, c = Zb.propHooks[this.prop];
            return this.pos = b = this.options.duration ? m.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a, 
            this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), 
            c && c.set ? c.set(this) : Zb.propHooks._default.set(this), this;
        }
    }, Zb.prototype.init.prototype = Zb.prototype, Zb.propHooks = {
        _default: {
            get: function(a) {
                var b;
                return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = m.css(a.elem, a.prop, ""), 
                b && "auto" !== b ? b : 0) : a.elem[a.prop];
            },
            set: function(a) {
                m.fx.step[a.prop] ? m.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[m.cssProps[a.prop]] || m.cssHooks[a.prop]) ? m.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;
            }
        }
    }, Zb.propHooks.scrollTop = Zb.propHooks.scrollLeft = {
        set: function(a) {
            a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
        }
    }, m.easing = {
        linear: function(a) {
            return a;
        },
        swing: function(a) {
            return .5 - Math.cos(a * Math.PI) / 2;
        }
    }, m.fx = Zb.prototype.init, m.fx.step = {};
    var $b, _b, ac = /^(?:toggle|show|hide)$/, bc = new RegExp("^(?:([+-])=|)(" + S + ")([a-z%]*)$", "i"), cc = /queueHooks$/, dc = [ ic ], ec = {
        "*": [ function(a, b) {
            var c = this.createTween(a, b), d = c.cur(), e = bc.exec(b), f = e && e[3] || (m.cssNumber[a] ? "" : "px"), g = (m.cssNumber[a] || "px" !== f && +d) && bc.exec(m.css(c.elem, a)), h = 1, i = 20;
            if (g && g[3] !== f) {
                f = f || g[3], e = e || [], g = +d || 1;
                do h = h || ".5", g /= h, m.style(c.elem, a, g + f); while (h !== (h = c.cur() / d) && 1 !== h && --i);
            }
            return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), 
            c;
        } ]
    };
    m.Animation = m.extend(kc, {
        tweener: function(a, b) {
            m.isFunction(a) ? (b = a, a = [ "*" ]) : a = a.split(" ");
            for (var c, d = 0, e = a.length; e > d; d++) c = a[d], ec[c] = ec[c] || [], ec[c].unshift(b);
        },
        prefilter: function(a, b) {
            b ? dc.unshift(a) : dc.push(a);
        }
    }), m.speed = function(a, b, c) {
        var d = a && "object" == typeof a ? m.extend({}, a) : {
            complete: c || !c && b || m.isFunction(a) && a,
            duration: a,
            easing: c && b || b && !m.isFunction(b) && b
        };
        return d.duration = m.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in m.fx.speeds ? m.fx.speeds[d.duration] : m.fx.speeds._default, 
        (null == d.queue || d.queue === !0) && (d.queue = "fx"), d.old = d.complete, d.complete = function() {
            m.isFunction(d.old) && d.old.call(this), d.queue && m.dequeue(this, d.queue);
        }, d;
    }, m.fn.extend({
        fadeTo: function(a, b, c, d) {
            return this.filter(U).css("opacity", 0).show().end().animate({
                opacity: b
            }, a, c, d);
        },
        animate: function(a, b, c, d) {
            var e = m.isEmptyObject(a), f = m.speed(b, c, d), g = function() {
                var b = kc(this, m.extend({}, a), f);
                (e || m._data(this, "finish")) && b.stop(!0);
            };
            return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
        },
        stop: function(a, b, c) {
            var d = function(a) {
                var b = a.stop;
                delete a.stop, b(c);
            };
            return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), 
            this.each(function() {
                var b = !0, e = null != a && a + "queueHooks", f = m.timers, g = m._data(this);
                if (e) g[e] && g[e].stop && d(g[e]); else for (e in g) g[e] && g[e].stop && cc.test(e) && d(g[e]);
                for (e = f.length; e--; ) f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), 
                b = !1, f.splice(e, 1));
                (b || !c) && m.dequeue(this, a);
            });
        },
        finish: function(a) {
            return a !== !1 && (a = a || "fx"), this.each(function() {
                var b, c = m._data(this), d = c[a + "queue"], e = c[a + "queueHooks"], f = m.timers, g = d ? d.length : 0;
                for (c.finish = !0, m.queue(this, a, []), e && e.stop && e.stop.call(this, !0), 
                b = f.length; b--; ) f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), 
                f.splice(b, 1));
                for (b = 0; g > b; b++) d[b] && d[b].finish && d[b].finish.call(this);
                delete c.finish;
            });
        }
    }), m.each([ "toggle", "show", "hide" ], function(a, b) {
        var c = m.fn[b];
        m.fn[b] = function(a, d, e) {
            return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(gc(b, !0), a, d, e);
        };
    }), m.each({
        slideDown: gc("show"),
        slideUp: gc("hide"),
        slideToggle: gc("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(a, b) {
        m.fn[a] = function(a, c, d) {
            return this.animate(b, a, c, d);
        };
    }), m.timers = [], m.fx.tick = function() {
        var a, b = m.timers, c = 0;
        for ($b = m.now(); c < b.length; c++) a = b[c], a() || b[c] !== a || b.splice(c--, 1);
        b.length || m.fx.stop(), $b = void 0;
    }, m.fx.timer = function(a) {
        m.timers.push(a), a() ? m.fx.start() : m.timers.pop();
    }, m.fx.interval = 13, m.fx.start = function() {
        _b || (_b = setInterval(m.fx.tick, m.fx.interval));
    }, m.fx.stop = function() {
        clearInterval(_b), _b = null;
    }, m.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    }, m.fn.delay = function(a, b) {
        return a = m.fx ? m.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function(b, c) {
            var d = setTimeout(b, a);
            c.stop = function() {
                clearTimeout(d);
            };
        });
    }, function() {
        var a, b, c, d, e;
        b = y.createElement("div"), b.setAttribute("className", "t"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", 
        d = b.getElementsByTagName("a")[0], c = y.createElement("select"), e = c.appendChild(y.createElement("option")), 
        a = b.getElementsByTagName("input")[0], d.style.cssText = "top:1px", k.getSetAttribute = "t" !== b.className, 
        k.style = /top/.test(d.getAttribute("style")), k.hrefNormalized = "/a" === d.getAttribute("href"), 
        k.checkOn = !!a.value, k.optSelected = e.selected, k.enctype = !!y.createElement("form").enctype, 
        c.disabled = !0, k.optDisabled = !e.disabled, a = y.createElement("input"), a.setAttribute("value", ""), 
        k.input = "" === a.getAttribute("value"), a.value = "t", a.setAttribute("type", "radio"), 
        k.radioValue = "t" === a.value;
    }();
    var lc = /\r/g;
    m.fn.extend({
        val: function(a) {
            var b, c, d, e = this[0];
            return arguments.length ? (d = m.isFunction(a), this.each(function(c) {
                var e;
                1 === this.nodeType && (e = d ? a.call(this, c, m(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : m.isArray(e) && (e = m.map(e, function(a) {
                    return null == a ? "" : a + "";
                })), b = m.valHooks[this.type] || m.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));
            })) : e ? (b = m.valHooks[e.type] || m.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, 
            "string" == typeof c ? c.replace(lc, "") : null == c ? "" : c)) : void 0;
        }
    }), m.extend({
        valHooks: {
            option: {
                get: function(a) {
                    var b = m.find.attr(a, "value");
                    return null != b ? b : m.trim(m.text(a));
                }
            },
            select: {
                get: function(a) {
                    for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++) if (c = d[i], 
                    !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || c.parentNode.disabled && m.nodeName(c.parentNode, "optgroup"))) {
                        if (b = m(c).val(), f) return b;
                        g.push(b);
                    }
                    return g;
                },
                set: function(a, b) {
                    for (var c, d, e = a.options, f = m.makeArray(b), g = e.length; g--; ) if (d = e[g], 
                    m.inArray(m.valHooks.option.get(d), f) >= 0) try {
                        d.selected = c = !0;
                    } catch (h) {
                        d.scrollHeight;
                    } else d.selected = !1;
                    return c || (a.selectedIndex = -1), e;
                }
            }
        }
    }), m.each([ "radio", "checkbox" ], function() {
        m.valHooks[this] = {
            set: function(a, b) {
                return m.isArray(b) ? a.checked = m.inArray(m(a).val(), b) >= 0 : void 0;
            }
        }, k.checkOn || (m.valHooks[this].get = function(a) {
            return null === a.getAttribute("value") ? "on" : a.value;
        });
    });
    var mc, nc, oc = m.expr.attrHandle, pc = /^(?:checked|selected)$/i, qc = k.getSetAttribute, rc = k.input;
    m.fn.extend({
        attr: function(a, b) {
            return V(this, m.attr, a, b, arguments.length > 1);
        },
        removeAttr: function(a) {
            return this.each(function() {
                m.removeAttr(this, a);
            });
        }
    }), m.extend({
        attr: function(a, b, c) {
            var d, e, f = a.nodeType;
            return a && 3 !== f && 8 !== f && 2 !== f ? typeof a.getAttribute === K ? m.prop(a, b, c) : (1 === f && m.isXMLDoc(a) || (b = b.toLowerCase(), 
            d = m.attrHooks[b] || (m.expr.match.bool.test(b) ? nc : mc)), void 0 === c ? d && "get" in d && null !== (e = d.get(a, b)) ? e : (e = m.find.attr(a, b), 
            null == e ? void 0 : e) : null !== c ? d && "set" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ""), 
            c) : void m.removeAttr(a, b)) : void 0;
        },
        removeAttr: function(a, b) {
            var c, d, e = 0, f = b && b.match(E);
            if (f && 1 === a.nodeType) for (;c = f[e++]; ) d = m.propFix[c] || c, m.expr.match.bool.test(c) ? rc && qc || !pc.test(c) ? a[d] = !1 : a[m.camelCase("default-" + c)] = a[d] = !1 : m.attr(a, c, ""), 
            a.removeAttribute(qc ? c : d);
        },
        attrHooks: {
            type: {
                set: function(a, b) {
                    if (!k.radioValue && "radio" === b && m.nodeName(a, "input")) {
                        var c = a.value;
                        return a.setAttribute("type", b), c && (a.value = c), b;
                    }
                }
            }
        }
    }), nc = {
        set: function(a, b, c) {
            return b === !1 ? m.removeAttr(a, c) : rc && qc || !pc.test(c) ? a.setAttribute(!qc && m.propFix[c] || c, c) : a[m.camelCase("default-" + c)] = a[c] = !0, 
            c;
        }
    }, m.each(m.expr.match.bool.source.match(/\w+/g), function(a, b) {
        var c = oc[b] || m.find.attr;
        oc[b] = rc && qc || !pc.test(b) ? function(a, b, d) {
            var e, f;
            return d || (f = oc[b], oc[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, 
            oc[b] = f), e;
        } : function(a, b, c) {
            return c ? void 0 : a[m.camelCase("default-" + b)] ? b.toLowerCase() : null;
        };
    }), rc && qc || (m.attrHooks.value = {
        set: function(a, b, c) {
            return m.nodeName(a, "input") ? void (a.defaultValue = b) : mc && mc.set(a, b, c);
        }
    }), qc || (mc = {
        set: function(a, b, c) {
            var d = a.getAttributeNode(c);
            return d || a.setAttributeNode(d = a.ownerDocument.createAttribute(c)), d.value = b += "", 
            "value" === c || b === a.getAttribute(c) ? b : void 0;
        }
    }, oc.id = oc.name = oc.coords = function(a, b, c) {
        var d;
        return c ? void 0 : (d = a.getAttributeNode(b)) && "" !== d.value ? d.value : null;
    }, m.valHooks.button = {
        get: function(a, b) {
            var c = a.getAttributeNode(b);
            return c && c.specified ? c.value : void 0;
        },
        set: mc.set
    }, m.attrHooks.contenteditable = {
        set: function(a, b, c) {
            mc.set(a, "" === b ? !1 : b, c);
        }
    }, m.each([ "width", "height" ], function(a, b) {
        m.attrHooks[b] = {
            set: function(a, c) {
                return "" === c ? (a.setAttribute(b, "auto"), c) : void 0;
            }
        };
    })), k.style || (m.attrHooks.style = {
        get: function(a) {
            return a.style.cssText || void 0;
        },
        set: function(a, b) {
            return a.style.cssText = b + "";
        }
    });
    var sc = /^(?:input|select|textarea|button|object)$/i, tc = /^(?:a|area)$/i;
    m.fn.extend({
        prop: function(a, b) {
            return V(this, m.prop, a, b, arguments.length > 1);
        },
        removeProp: function(a) {
            return a = m.propFix[a] || a, this.each(function() {
                try {
                    this[a] = void 0, delete this[a];
                } catch (b) {}
            });
        }
    }), m.extend({
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function(a, b, c) {
            var d, e, f, g = a.nodeType;
            return a && 3 !== g && 8 !== g && 2 !== g ? (f = 1 !== g || !m.isXMLDoc(a), f && (b = m.propFix[b] || b, 
            e = m.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b]) : void 0;
        },
        propHooks: {
            tabIndex: {
                get: function(a) {
                    var b = m.find.attr(a, "tabindex");
                    return b ? parseInt(b, 10) : sc.test(a.nodeName) || tc.test(a.nodeName) && a.href ? 0 : -1;
                }
            }
        }
    }), k.hrefNormalized || m.each([ "href", "src" ], function(a, b) {
        m.propHooks[b] = {
            get: function(a) {
                return a.getAttribute(b, 4);
            }
        };
    }), k.optSelected || (m.propHooks.selected = {
        get: function(a) {
            var b = a.parentNode;
            return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null;
        }
    }), m.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        m.propFix[this.toLowerCase()] = this;
    }), k.enctype || (m.propFix.enctype = "encoding");
    var uc = /[\t\r\n\f]/g;
    m.fn.extend({
        addClass: function(a) {
            var b, c, d, e, f, g, h = 0, i = this.length, j = "string" == typeof a && a;
            if (m.isFunction(a)) return this.each(function(b) {
                m(this).addClass(a.call(this, b, this.className));
            });
            if (j) for (b = (a || "").match(E) || []; i > h; h++) if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(uc, " ") : " ")) {
                f = 0;
                for (;e = b[f++]; ) d.indexOf(" " + e + " ") < 0 && (d += e + " ");
                g = m.trim(d), c.className !== g && (c.className = g);
            }
            return this;
        },
        removeClass: function(a) {
            var b, c, d, e, f, g, h = 0, i = this.length, j = 0 === arguments.length || "string" == typeof a && a;
            if (m.isFunction(a)) return this.each(function(b) {
                m(this).removeClass(a.call(this, b, this.className));
            });
            if (j) for (b = (a || "").match(E) || []; i > h; h++) if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(uc, " ") : "")) {
                f = 0;
                for (;e = b[f++]; ) for (;d.indexOf(" " + e + " ") >= 0; ) d = d.replace(" " + e + " ", " ");
                g = a ? m.trim(d) : "", c.className !== g && (c.className = g);
            }
            return this;
        },
        toggleClass: function(a, b) {
            var c = typeof a;
            return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(m.isFunction(a) ? function(c) {
                m(this).toggleClass(a.call(this, c, this.className, b), b);
            } : function() {
                if ("string" === c) for (var b, d = 0, e = m(this), f = a.match(E) || []; b = f[d++]; ) e.hasClass(b) ? e.removeClass(b) : e.addClass(b); else (c === K || "boolean" === c) && (this.className && m._data(this, "__className__", this.className), 
                this.className = this.className || a === !1 ? "" : m._data(this, "__className__") || "");
            });
        },
        hasClass: function(a) {
            for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++) if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(uc, " ").indexOf(b) >= 0) return !0;
            return !1;
        }
    }), m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(a, b) {
        m.fn[b] = function(a, c) {
            return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
        };
    }), m.fn.extend({
        hover: function(a, b) {
            return this.mouseenter(a).mouseleave(b || a);
        },
        bind: function(a, b, c) {
            return this.on(a, null, b, c);
        },
        unbind: function(a, b) {
            return this.off(a, null, b);
        },
        delegate: function(a, b, c, d) {
            return this.on(b, a, c, d);
        },
        undelegate: function(a, b, c) {
            return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
        }
    });
    var vc = m.now(), wc = /\?/, xc = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
    m.parseJSON = function(b) {
        if (a.JSON && a.JSON.parse) return a.JSON.parse(b + "");
        var c, d = null, e = m.trim(b + "");
        return e && !m.trim(e.replace(xc, function(a, b, e, f) {
            return c && b && (d = 0), 0 === d ? a : (c = e || b, d += !f - !e, "");
        })) ? Function("return " + e)() : m.error("Invalid JSON: " + b);
    }, m.parseXML = function(b) {
        var c, d;
        if (!b || "string" != typeof b) return null;
        try {
            a.DOMParser ? (d = new DOMParser(), c = d.parseFromString(b, "text/xml")) : (c = new ActiveXObject("Microsoft.XMLDOM"), 
            c.async = "false", c.loadXML(b));
        } catch (e) {
            c = void 0;
        }
        return c && c.documentElement && !c.getElementsByTagName("parsererror").length || m.error("Invalid XML: " + b), 
        c;
    };
    var yc, zc, Ac = /#.*$/, Bc = /([?&])_=[^&]*/, Cc = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, Dc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, Ec = /^(?:GET|HEAD)$/, Fc = /^\/\//, Gc = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, Hc = {}, Ic = {}, Jc = "*/".concat("*");
    try {
        zc = location.href;
    } catch (Kc) {
        zc = y.createElement("a"), zc.href = "", zc = zc.href;
    }
    yc = Gc.exec(zc.toLowerCase()) || [];
    m.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: zc,
            type: "GET",
            isLocal: Dc.test(yc[1]),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": Jc,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": m.parseJSON,
                "text xml": m.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(a, b) {
            return b ? Nc(Nc(a, m.ajaxSettings), b) : Nc(m.ajaxSettings, a);
        },
        ajaxPrefilter: Lc(Hc),
        ajaxTransport: Lc(Ic),
        ajax: function(a, b) {
            function x(a, b, c, d) {
                var j, r, s, u, w, x = b;
                2 !== t && (t = 2, g && clearTimeout(g), i = void 0, f = d || "", v.readyState = a > 0 ? 4 : 0, 
                j = a >= 200 && 300 > a || 304 === a, c && (u = Oc(k, v, c)), u = Pc(k, u, v, j), 
                j ? (k.ifModified && (w = v.getResponseHeader("Last-Modified"), w && (m.lastModified[e] = w), 
                w = v.getResponseHeader("etag"), w && (m.etag[e] = w)), 204 === a || "HEAD" === k.type ? x = "nocontent" : 304 === a ? x = "notmodified" : (x = u.state, 
                r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = "error", 0 > a && (a = 0))), 
                v.status = a, v.statusText = (b || x) + "", j ? o.resolveWith(l, [ r, x, v ]) : o.rejectWith(l, [ v, x, s ]), 
                v.statusCode(q), q = void 0, h && n.trigger(j ? "ajaxSuccess" : "ajaxError", [ v, k, j ? r : s ]), 
                p.fireWith(l, [ v, x ]), h && (n.trigger("ajaxComplete", [ v, k ]), --m.active || m.event.trigger("ajaxStop")));
            }
            "object" == typeof a && (b = a, a = void 0), b = b || {};
            var c, d, e, f, g, h, i, j, k = m.ajaxSetup({}, b), l = k.context || k, n = k.context && (l.nodeType || l.jquery) ? m(l) : m.event, o = m.Deferred(), p = m.Callbacks("once memory"), q = k.statusCode || {}, r = {}, s = {}, t = 0, u = "canceled", v = {
                readyState: 0,
                getResponseHeader: function(a) {
                    var b;
                    if (2 === t) {
                        if (!j) {
                            j = {};
                            for (;b = Cc.exec(f); ) j[b[1].toLowerCase()] = b[2];
                        }
                        b = j[a.toLowerCase()];
                    }
                    return null == b ? null : b;
                },
                getAllResponseHeaders: function() {
                    return 2 === t ? f : null;
                },
                setRequestHeader: function(a, b) {
                    var c = a.toLowerCase();
                    return t || (a = s[c] = s[c] || a, r[a] = b), this;
                },
                overrideMimeType: function(a) {
                    return t || (k.mimeType = a), this;
                },
                statusCode: function(a) {
                    var b;
                    if (a) if (2 > t) for (b in a) q[b] = [ q[b], a[b] ]; else v.always(a[v.status]);
                    return this;
                },
                abort: function(a) {
                    var b = a || u;
                    return i && i.abort(b), x(0, b), this;
                }
            };
            if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || zc) + "").replace(Ac, "").replace(Fc, yc[1] + "//"), 
            k.type = b.method || b.type || k.method || k.type, k.dataTypes = m.trim(k.dataType || "*").toLowerCase().match(E) || [ "" ], 
            null == k.crossDomain && (c = Gc.exec(k.url.toLowerCase()), k.crossDomain = !(!c || c[1] === yc[1] && c[2] === yc[2] && (c[3] || ("http:" === c[1] ? "80" : "443")) === (yc[3] || ("http:" === yc[1] ? "80" : "443")))), 
            k.data && k.processData && "string" != typeof k.data && (k.data = m.param(k.data, k.traditional)), 
            Mc(Hc, k, b, v), 2 === t) return v;
            h = m.event && k.global, h && 0 === m.active++ && m.event.trigger("ajaxStart"), 
            k.type = k.type.toUpperCase(), k.hasContent = !Ec.test(k.type), e = k.url, k.hasContent || (k.data && (e = k.url += (wc.test(e) ? "&" : "?") + k.data, 
            delete k.data), k.cache === !1 && (k.url = Bc.test(e) ? e.replace(Bc, "$1_=" + vc++) : e + (wc.test(e) ? "&" : "?") + "_=" + vc++)), 
            k.ifModified && (m.lastModified[e] && v.setRequestHeader("If-Modified-Since", m.lastModified[e]), 
            m.etag[e] && v.setRequestHeader("If-None-Match", m.etag[e])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader("Content-Type", k.contentType), 
            v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + Jc + "; q=0.01" : "") : k.accepts["*"]);
            for (d in k.headers) v.setRequestHeader(d, k.headers[d]);
            if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();
            u = "abort";
            for (d in {
                success: 1,
                error: 1,
                complete: 1
            }) v[d](k[d]);
            if (i = Mc(Ic, k, b, v)) {
                v.readyState = 1, h && n.trigger("ajaxSend", [ v, k ]), k.async && k.timeout > 0 && (g = setTimeout(function() {
                    v.abort("timeout");
                }, k.timeout));
                try {
                    t = 1, i.send(r, x);
                } catch (w) {
                    if (!(2 > t)) throw w;
                    x(-1, w);
                }
            } else x(-1, "No Transport");
            return v;
        },
        getJSON: function(a, b, c) {
            return m.get(a, b, c, "json");
        },
        getScript: function(a, b) {
            return m.get(a, void 0, b, "script");
        }
    }), m.each([ "get", "post" ], function(a, b) {
        m[b] = function(a, c, d, e) {
            return m.isFunction(c) && (e = e || d, d = c, c = void 0), m.ajax({
                url: a,
                type: b,
                dataType: e,
                data: c,
                success: d
            });
        };
    }), m._evalUrl = function(a) {
        return m.ajax({
            url: a,
            type: "GET",
            dataType: "script",
            async: !1,
            global: !1,
            "throws": !0
        });
    }, m.fn.extend({
        wrapAll: function(a) {
            if (m.isFunction(a)) return this.each(function(b) {
                m(this).wrapAll(a.call(this, b));
            });
            if (this[0]) {
                var b = m(a, this[0].ownerDocument).eq(0).clone(!0);
                this[0].parentNode && b.insertBefore(this[0]), b.map(function() {
                    for (var a = this; a.firstChild && 1 === a.firstChild.nodeType; ) a = a.firstChild;
                    return a;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(a) {
            return this.each(m.isFunction(a) ? function(b) {
                m(this).wrapInner(a.call(this, b));
            } : function() {
                var b = m(this), c = b.contents();
                c.length ? c.wrapAll(a) : b.append(a);
            });
        },
        wrap: function(a) {
            var b = m.isFunction(a);
            return this.each(function(c) {
                m(this).wrapAll(b ? a.call(this, c) : a);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                m.nodeName(this, "body") || m(this).replaceWith(this.childNodes);
            }).end();
        }
    }), m.expr.filters.hidden = function(a) {
        return a.offsetWidth <= 0 && a.offsetHeight <= 0 || !k.reliableHiddenOffsets() && "none" === (a.style && a.style.display || m.css(a, "display"));
    }, m.expr.filters.visible = function(a) {
        return !m.expr.filters.hidden(a);
    };
    var Qc = /%20/g, Rc = /\[\]$/, Sc = /\r?\n/g, Tc = /^(?:submit|button|image|reset|file)$/i, Uc = /^(?:input|select|textarea|keygen)/i;
    m.param = function(a, b) {
        var c, d = [], e = function(a, b) {
            b = m.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b);
        };
        if (void 0 === b && (b = m.ajaxSettings && m.ajaxSettings.traditional), m.isArray(a) || a.jquery && !m.isPlainObject(a)) m.each(a, function() {
            e(this.name, this.value);
        }); else for (c in a) Vc(c, a[c], b, e);
        return d.join("&").replace(Qc, "+");
    }, m.fn.extend({
        serialize: function() {
            return m.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var a = m.prop(this, "elements");
                return a ? m.makeArray(a) : this;
            }).filter(function() {
                var a = this.type;
                return this.name && !m(this).is(":disabled") && Uc.test(this.nodeName) && !Tc.test(a) && (this.checked || !W.test(a));
            }).map(function(a, b) {
                var c = m(this).val();
                return null == c ? null : m.isArray(c) ? m.map(c, function(a) {
                    return {
                        name: b.name,
                        value: a.replace(Sc, "\r\n")
                    };
                }) : {
                    name: b.name,
                    value: c.replace(Sc, "\r\n")
                };
            }).get();
        }
    }), m.ajaxSettings.xhr = void 0 !== a.ActiveXObject ? function() {
        return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && Zc() || $c();
    } : Zc;
    var Wc = 0, Xc = {}, Yc = m.ajaxSettings.xhr();
    a.attachEvent && a.attachEvent("onunload", function() {
        for (var a in Xc) Xc[a](void 0, !0);
    }), k.cors = !!Yc && "withCredentials" in Yc, Yc = k.ajax = !!Yc, Yc && m.ajaxTransport(function(a) {
        if (!a.crossDomain || k.cors) {
            var b;
            return {
                send: function(c, d) {
                    var e, f = a.xhr(), g = ++Wc;
                    if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields) for (e in a.xhrFields) f[e] = a.xhrFields[e];
                    a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest");
                    for (e in c) void 0 !== c[e] && f.setRequestHeader(e, c[e] + "");
                    f.send(a.hasContent && a.data || null), b = function(c, e) {
                        var h, i, j;
                        if (b && (e || 4 === f.readyState)) if (delete Xc[g], b = void 0, f.onreadystatechange = m.noop, 
                        e) 4 !== f.readyState && f.abort(); else {
                            j = {}, h = f.status, "string" == typeof f.responseText && (j.text = f.responseText);
                            try {
                                i = f.statusText;
                            } catch (k) {
                                i = "";
                            }
                            h || !a.isLocal || a.crossDomain ? 1223 === h && (h = 204) : h = j.text ? 200 : 404;
                        }
                        j && d(h, i, j, f.getAllResponseHeaders());
                    }, a.async ? 4 === f.readyState ? setTimeout(b) : f.onreadystatechange = Xc[g] = b : b();
                },
                abort: function() {
                    b && b(void 0, !0);
                }
            };
        }
    });
    m.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(a) {
                return m.globalEval(a), a;
            }
        }
    }), m.ajaxPrefilter("script", function(a) {
        void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET", a.global = !1);
    }), m.ajaxTransport("script", function(a) {
        if (a.crossDomain) {
            var b, c = y.head || m("head")[0] || y.documentElement;
            return {
                send: function(d, e) {
                    b = y.createElement("script"), b.async = !0, a.scriptCharset && (b.charset = a.scriptCharset), 
                    b.src = a.url, b.onload = b.onreadystatechange = function(a, c) {
                        (c || !b.readyState || /loaded|complete/.test(b.readyState)) && (b.onload = b.onreadystatechange = null, 
                        b.parentNode && b.parentNode.removeChild(b), b = null, c || e(200, "success"));
                    }, c.insertBefore(b, c.firstChild);
                },
                abort: function() {
                    b && b.onload(void 0, !0);
                }
            };
        }
    });
    var _c = [], ad = /(=)\?(?=&|$)|\?\?/;
    m.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var a = _c.pop() || m.expando + "_" + vc++;
            return this[a] = !0, a;
        }
    }), m.ajaxPrefilter("json jsonp", function(b, c, d) {
        var e, f, g, h = b.jsonp !== !1 && (ad.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && ad.test(b.data) && "data");
        return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = m.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, 
        h ? b[h] = b[h].replace(ad, "$1" + e) : b.jsonp !== !1 && (b.url += (wc.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), 
        b.converters["script json"] = function() {
            return g || m.error(e + " was not called"), g[0];
        }, b.dataTypes[0] = "json", f = a[e], a[e] = function() {
            g = arguments;
        }, d.always(function() {
            a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, _c.push(e)), g && m.isFunction(f) && f(g[0]), 
            g = f = void 0;
        }), "script") : void 0;
    }), m.parseHTML = function(a, b, c) {
        if (!a || "string" != typeof a) return null;
        "boolean" == typeof b && (c = b, b = !1), b = b || y;
        var d = u.exec(a), e = !c && [];
        return d ? [ b.createElement(d[1]) ] : (d = m.buildFragment([ a ], b, e), e && e.length && m(e).remove(), 
        m.merge([], d.childNodes));
    };
    var bd = m.fn.load;
    m.fn.load = function(a, b, c) {
        if ("string" != typeof a && bd) return bd.apply(this, arguments);
        var d, e, f, g = this, h = a.indexOf(" ");
        return h >= 0 && (d = m.trim(a.slice(h, a.length)), a = a.slice(0, h)), m.isFunction(b) ? (c = b, 
        b = void 0) : b && "object" == typeof b && (f = "POST"), g.length > 0 && m.ajax({
            url: a,
            type: f,
            dataType: "html",
            data: b
        }).done(function(a) {
            e = arguments, g.html(d ? m("<div>").append(m.parseHTML(a)).find(d) : a);
        }).complete(c && function(a, b) {
            g.each(c, e || [ a.responseText, b, a ]);
        }), this;
    }, m.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(a, b) {
        m.fn[b] = function(a) {
            return this.on(b, a);
        };
    }), m.expr.filters.animated = function(a) {
        return m.grep(m.timers, function(b) {
            return a === b.elem;
        }).length;
    };
    var cd = a.document.documentElement;
    m.offset = {
        setOffset: function(a, b, c) {
            var d, e, f, g, h, i, j, k = m.css(a, "position"), l = m(a), n = {};
            "static" === k && (a.style.position = "relative"), h = l.offset(), f = m.css(a, "top"), 
            i = m.css(a, "left"), j = ("absolute" === k || "fixed" === k) && m.inArray("auto", [ f, i ]) > -1, 
            j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), 
            m.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (n.top = b.top - h.top + g), 
            null != b.left && (n.left = b.left - h.left + e), "using" in b ? b.using.call(a, n) : l.css(n);
        }
    }, m.fn.extend({
        offset: function(a) {
            if (arguments.length) return void 0 === a ? this : this.each(function(b) {
                m.offset.setOffset(this, a, b);
            });
            var b, c, d = {
                top: 0,
                left: 0
            }, e = this[0], f = e && e.ownerDocument;
            return f ? (b = f.documentElement, m.contains(b, e) ? (typeof e.getBoundingClientRect !== K && (d = e.getBoundingClientRect()), 
            c = dd(f), {
                top: d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0),
                left: d.left + (c.pageXOffset || b.scrollLeft) - (b.clientLeft || 0)
            }) : d) : void 0;
        },
        position: function() {
            if (this[0]) {
                var a, b, c = {
                    top: 0,
                    left: 0
                }, d = this[0];
                return "fixed" === m.css(d, "position") ? b = d.getBoundingClientRect() : (a = this.offsetParent(), 
                b = this.offset(), m.nodeName(a[0], "html") || (c = a.offset()), c.top += m.css(a[0], "borderTopWidth", !0), 
                c.left += m.css(a[0], "borderLeftWidth", !0)), {
                    top: b.top - c.top - m.css(d, "marginTop", !0),
                    left: b.left - c.left - m.css(d, "marginLeft", !0)
                };
            }
        },
        offsetParent: function() {
            return this.map(function() {
                for (var a = this.offsetParent || cd; a && !m.nodeName(a, "html") && "static" === m.css(a, "position"); ) a = a.offsetParent;
                return a || cd;
            });
        }
    }), m.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(a, b) {
        var c = /Y/.test(b);
        m.fn[a] = function(d) {
            return V(this, function(a, d, e) {
                var f = dd(a);
                return void 0 === e ? f ? b in f ? f[b] : f.document.documentElement[d] : a[d] : void (f ? f.scrollTo(c ? m(f).scrollLeft() : e, c ? e : m(f).scrollTop()) : a[d] = e);
            }, a, d, arguments.length, null);
        };
    }), m.each([ "top", "left" ], function(a, b) {
        m.cssHooks[b] = Lb(k.pixelPosition, function(a, c) {
            return c ? (c = Jb(a, b), Hb.test(c) ? m(a).position()[b] + "px" : c) : void 0;
        });
    }), m.each({
        Height: "height",
        Width: "width"
    }, function(a, b) {
        m.each({
            padding: "inner" + a,
            content: b,
            "": "outer" + a
        }, function(c, d) {
            m.fn[d] = function(d, e) {
                var f = arguments.length && (c || "boolean" != typeof d), g = c || (d === !0 || e === !0 ? "margin" : "border");
                return V(this, function(b, c, d) {
                    var e;
                    return m.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, 
                    Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? m.css(b, c, g) : m.style(b, c, d, g);
                }, b, f ? d : void 0, f, null);
            };
        });
    }), m.fn.size = function() {
        return this.length;
    }, m.fn.andSelf = m.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function() {
        return m;
    });
    var ed = a.jQuery, fd = a.$;
    return m.noConflict = function(b) {
        return a.$ === m && (a.$ = fd), b && a.jQuery === m && (a.jQuery = ed), m;
    }, typeof b === K && (a.jQuery = a.$ = m), m;
});

$.ui = $.ui || {};

$.extend($.ui, {
    version: "1.11.1",
    keyCode: {
        BACKSPACE: 8,
        COMMA: 188,
        DELETE: 46,
        DOWN: 40,
        END: 35,
        ENTER: 13,
        ESCAPE: 27,
        HOME: 36,
        LEFT: 37,
        PAGE_DOWN: 34,
        PAGE_UP: 33,
        PERIOD: 190,
        RIGHT: 39,
        SPACE: 32,
        TAB: 9,
        UP: 38
    }
});

$.fn.extend({
    scrollParent: function(includeHidden) {
        var position = this.css("position"), excludeStaticParent = "absolute" === position, overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/, scrollParent = this.parents().filter(function() {
            var parent = $(this);
            return excludeStaticParent && "static" === parent.css("position") ? !1 : overflowRegex.test(parent.css("overflow") + parent.css("overflow-y") + parent.css("overflow-x"));
        }).eq(0);
        return "fixed" !== position && scrollParent.length ? scrollParent : $(this[0].ownerDocument || document);
    },
    uniqueId: function() {
        var uuid = 0;
        return function() {
            return this.each(function() {
                this.id || (this.id = "ui-id-" + ++uuid);
            });
        };
    }(),
    removeUniqueId: function() {
        return this.each(function() {
            /^ui-id-\d+$/.test(this.id) && $(this).removeAttr("id");
        });
    }
});

$.extend($.expr[":"], {
    data: $.expr.createPseudo ? $.expr.createPseudo(function(dataName) {
        return function(elem) {
            return !!$.data(elem, dataName);
        };
    }) : function(elem, i, match) {
        return !!$.data(elem, match[3]);
    },
    focusable: function(element) {
        return focusable(element, !isNaN($.attr(element, "tabindex")));
    },
    tabbable: function(element) {
        var tabIndex = $.attr(element, "tabindex"), isTabIndexNaN = isNaN(tabIndex);
        return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
    }
});

$("<a>").outerWidth(1).jquery || $.each([ "Width", "Height" ], function(i, name) {
    function reduce(elem, size, border, margin) {
        $.each(side, function() {
            size -= parseFloat($.css(elem, "padding" + this)) || 0;
            border && (size -= parseFloat($.css(elem, "border" + this + "Width")) || 0);
            margin && (size -= parseFloat($.css(elem, "margin" + this)) || 0);
        });
        return size;
    }
    var side = "Width" === name ? [ "Left", "Right" ] : [ "Top", "Bottom" ], type = name.toLowerCase(), orig = {
        innerWidth: $.fn.innerWidth,
        innerHeight: $.fn.innerHeight,
        outerWidth: $.fn.outerWidth,
        outerHeight: $.fn.outerHeight
    };
    $.fn["inner" + name] = function(size) {
        return void 0 === size ? orig["inner" + name].call(this) : this.each(function() {
            $(this).css(type, reduce(this, size) + "px");
        });
    };
    $.fn["outer" + name] = function(size, margin) {
        return "number" != typeof size ? orig["outer" + name].call(this, size) : this.each(function() {
            $(this).css(type, reduce(this, size, !0, margin) + "px");
        });
    };
});

$.fn.addBack || ($.fn.addBack = function(selector) {
    return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
});

$("<a>").data("a-b", "a").removeData("a-b").data("a-b") && ($.fn.removeData = function(removeData) {
    return function(key) {
        return arguments.length ? removeData.call(this, $.camelCase(key)) : removeData.call(this);
    };
}($.fn.removeData));

$.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());

$.fn.extend({
    focus: function(orig) {
        return function(delay, fn) {
            return "number" == typeof delay ? this.each(function() {
                var elem = this;
                setTimeout(function() {
                    $(elem).focus();
                    fn && fn.call(elem);
                }, delay);
            }) : orig.apply(this, arguments);
        };
    }($.fn.focus),
    disableSelection: function() {
        var eventType = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";
        return function() {
            return this.bind(eventType + ".ui-disableSelection", function(event) {
                event.preventDefault();
            });
        };
    }(),
    enableSelection: function() {
        return this.unbind(".ui-disableSelection");
    },
    zIndex: function(zIndex) {
        if (void 0 !== zIndex) return this.css("zIndex", zIndex);
        if (this.length) for (var position, value, elem = $(this[0]); elem.length && elem[0] !== document; ) {
            position = elem.css("position");
            if ("absolute" === position || "relative" === position || "fixed" === position) {
                value = parseInt(elem.css("zIndex"), 10);
                if (!isNaN(value) && 0 !== value) return value;
            }
            elem = elem.parent();
        }
        return 0;
    }
});

$.ui.plugin = {
    add: function(module, option, set) {
        var i, proto = $.ui[module].prototype;
        for (i in set) {
            proto.plugins[i] = proto.plugins[i] || [];
            proto.plugins[i].push([ option, set[i] ]);
        }
    },
    call: function(instance, name, args, allowDisconnected) {
        var i, set = instance.plugins[name];
        if (set && (allowDisconnected || instance.element[0].parentNode && 11 !== instance.element[0].parentNode.nodeType)) for (i = 0; i < set.length; i++) instance.options[set[i][0]] && set[i][1].apply(instance.element, args);
    }
};

var widget_uuid = 0, widget_slice = Array.prototype.slice;

$.cleanData = function(orig) {
    return function(elems) {
        var events, elem, i;
        for (i = 0; null != (elem = elems[i]); i++) try {
            events = $._data(elem, "events");
            events && events.remove && $(elem).triggerHandler("remove");
        } catch (e) {}
        orig(elems);
    };
}($.cleanData);

$.widget = function(name, base, prototype) {
    var fullName, existingConstructor, constructor, basePrototype, proxiedPrototype = {}, namespace = name.split(".")[0];
    name = name.split(".")[1];
    fullName = namespace + "-" + name;
    if (!prototype) {
        prototype = base;
        base = $.Widget;
    }
    $.expr[":"][fullName.toLowerCase()] = function(elem) {
        return !!$.data(elem, fullName);
    };
    $[namespace] = $[namespace] || {};
    existingConstructor = $[namespace][name];
    constructor = $[namespace][name] = function(options, element) {
        if (!this._createWidget) return new constructor(options, element);
        arguments.length && this._createWidget(options, element);
    };
    $.extend(constructor, existingConstructor, {
        version: prototype.version,
        _proto: $.extend({}, prototype),
        _childConstructors: []
    });
    basePrototype = new base();
    basePrototype.options = $.widget.extend({}, basePrototype.options);
    $.each(prototype, function(prop, value) {
        $.isFunction(value) ? proxiedPrototype[prop] = function() {
            var _super = function() {
                return base.prototype[prop].apply(this, arguments);
            }, _superApply = function(args) {
                return base.prototype[prop].apply(this, args);
            };
            return function() {
                var returnValue, __super = this._super, __superApply = this._superApply;
                this._super = _super;
                this._superApply = _superApply;
                returnValue = value.apply(this, arguments);
                this._super = __super;
                this._superApply = __superApply;
                return returnValue;
            };
        }() : proxiedPrototype[prop] = value;
    });
    constructor.prototype = $.widget.extend(basePrototype, {
        widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name
    }, proxiedPrototype, {
        constructor: constructor,
        namespace: namespace,
        widgetName: name,
        widgetFullName: fullName
    });
    if (existingConstructor) {
        $.each(existingConstructor._childConstructors, function(i, child) {
            var childPrototype = child.prototype;
            $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
        });
        delete existingConstructor._childConstructors;
    } else base._childConstructors.push(constructor);
    $.widget.bridge(name, constructor);
    return constructor;
};

$.widget.extend = function(target) {
    for (var key, value, input = widget_slice.call(arguments, 1), inputIndex = 0, inputLength = input.length; inputLength > inputIndex; inputIndex++) for (key in input[inputIndex]) {
        value = input[inputIndex][key];
        input[inputIndex].hasOwnProperty(key) && void 0 !== value && ($.isPlainObject(value) ? target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value) : target[key] = value);
    }
    return target;
};

$.widget.bridge = function(name, object) {
    var fullName = object.prototype.widgetFullName || name;
    $.fn[name] = function(options) {
        var isMethodCall = "string" == typeof options, args = widget_slice.call(arguments, 1), returnValue = this;
        options = !isMethodCall && args.length ? $.widget.extend.apply(null, [ options ].concat(args)) : options;
        isMethodCall ? this.each(function() {
            var methodValue, instance = $.data(this, fullName);
            if ("instance" === options) {
                returnValue = instance;
                return !1;
            }
            if (!instance) return $.error("cannot call methods on " + name + " prior to initialization; attempted to call method '" + options + "'");
            if (!$.isFunction(instance[options]) || "_" === options.charAt(0)) return $.error("no such method '" + options + "' for " + name + " widget instance");
            methodValue = instance[options].apply(instance, args);
            if (methodValue !== instance && void 0 !== methodValue) {
                returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                return !1;
            }
        }) : this.each(function() {
            var instance = $.data(this, fullName);
            if (instance) {
                instance.option(options || {});
                instance._init && instance._init();
            } else $.data(this, fullName, new object(options, this));
        });
        return returnValue;
    };
};

$.Widget = function() {};

$.Widget._childConstructors = [];

$.Widget.prototype = {
    widgetName: "widget",
    widgetEventPrefix: "",
    defaultElement: "<div>",
    options: {
        disabled: !1,
        create: null
    },
    _createWidget: function(options, element) {
        element = $(element || this.defaultElement || this)[0];
        this.element = $(element);
        this.uuid = widget_uuid++;
        this.eventNamespace = "." + this.widgetName + this.uuid;
        this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);
        this.bindings = $();
        this.hoverable = $();
        this.focusable = $();
        if (element !== this) {
            $.data(element, this.widgetFullName, this);
            this._on(!0, this.element, {
                remove: function(event) {
                    event.target === element && this.destroy();
                }
            });
            this.document = $(element.style ? element.ownerDocument : element.document || element);
            this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
        }
        this._create();
        this._trigger("create", null, this._getCreateEventData());
        this._init();
    },
    _getCreateOptions: $.noop,
    _getCreateEventData: $.noop,
    _create: $.noop,
    _init: $.noop,
    destroy: function() {
        this._destroy();
        this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName));
        this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled ui-state-disabled");
        this.bindings.unbind(this.eventNamespace);
        this.hoverable.removeClass("ui-state-hover");
        this.focusable.removeClass("ui-state-focus");
    },
    _destroy: $.noop,
    widget: function() {
        return this.element;
    },
    option: function(key, value) {
        var parts, curOption, i, options = key;
        if (0 === arguments.length) return $.widget.extend({}, this.options);
        if ("string" == typeof key) {
            options = {};
            parts = key.split(".");
            key = parts.shift();
            if (parts.length) {
                curOption = options[key] = $.widget.extend({}, this.options[key]);
                for (i = 0; i < parts.length - 1; i++) {
                    curOption[parts[i]] = curOption[parts[i]] || {};
                    curOption = curOption[parts[i]];
                }
                key = parts.pop();
                if (1 === arguments.length) return void 0 === curOption[key] ? null : curOption[key];
                curOption[key] = value;
            } else {
                if (1 === arguments.length) return void 0 === this.options[key] ? null : this.options[key];
                options[key] = value;
            }
        }
        this._setOptions(options);
        return this;
    },
    _setOptions: function(options) {
        var key;
        for (key in options) this._setOption(key, options[key]);
        return this;
    },
    _setOption: function(key, value) {
        this.options[key] = value;
        if ("disabled" === key) {
            this.widget().toggleClass(this.widgetFullName + "-disabled", !!value);
            if (value) {
                this.hoverable.removeClass("ui-state-hover");
                this.focusable.removeClass("ui-state-focus");
            }
        }
        return this;
    },
    enable: function() {
        return this._setOptions({
            disabled: !1
        });
    },
    disable: function() {
        return this._setOptions({
            disabled: !0
        });
    },
    _on: function(suppressDisabledCheck, element, handlers) {
        var delegateElement, instance = this;
        if ("boolean" != typeof suppressDisabledCheck) {
            handlers = element;
            element = suppressDisabledCheck;
            suppressDisabledCheck = !1;
        }
        if (handlers) {
            element = delegateElement = $(element);
            this.bindings = this.bindings.add(element);
        } else {
            handlers = element;
            element = this.element;
            delegateElement = this.widget();
        }
        $.each(handlers, function(event, handler) {
            function handlerProxy() {
                return suppressDisabledCheck || instance.options.disabled !== !0 && !$(this).hasClass("ui-state-disabled") ? ("string" == typeof handler ? instance[handler] : handler).apply(instance, arguments) : void 0;
            }
            "string" != typeof handler && (handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++);
            var match = event.match(/^([\w:-]*)\s*(.*)$/), eventName = match[1] + instance.eventNamespace, selector = match[2];
            selector ? delegateElement.delegate(selector, eventName, handlerProxy) : element.bind(eventName, handlerProxy);
        });
    },
    _off: function(element, eventName) {
        eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
        element.unbind(eventName).undelegate(eventName);
    },
    _delay: function(handler, delay) {
        function handlerProxy() {
            return ("string" == typeof handler ? instance[handler] : handler).apply(instance, arguments);
        }
        var instance = this;
        return setTimeout(handlerProxy, delay || 0);
    },
    _hoverable: function(element) {
        this.hoverable = this.hoverable.add(element);
        this._on(element, {
            mouseenter: function(event) {
                $(event.currentTarget).addClass("ui-state-hover");
            },
            mouseleave: function(event) {
                $(event.currentTarget).removeClass("ui-state-hover");
            }
        });
    },
    _focusable: function(element) {
        this.focusable = this.focusable.add(element);
        this._on(element, {
            focusin: function(event) {
                $(event.currentTarget).addClass("ui-state-focus");
            },
            focusout: function(event) {
                $(event.currentTarget).removeClass("ui-state-focus");
            }
        });
    },
    _trigger: function(type, event, data) {
        var prop, orig, callback = this.options[type];
        data = data || {};
        event = $.Event(event);
        event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
        event.target = this.element[0];
        orig = event.originalEvent;
        if (orig) for (prop in orig) prop in event || (event[prop] = orig[prop]);
        this.element.trigger(event, data);
        return !($.isFunction(callback) && callback.apply(this.element[0], [ event ].concat(data)) === !1 || event.isDefaultPrevented());
    }
};

$.each({
    show: "fadeIn",
    hide: "fadeOut"
}, function(method, defaultEffect) {
    $.Widget.prototype["_" + method] = function(element, options, callback) {
        "string" == typeof options && (options = {
            effect: options
        });
        var hasOptions, effectName = options ? options === !0 || "number" == typeof options ? defaultEffect : options.effect || defaultEffect : method;
        options = options || {};
        "number" == typeof options && (options = {
            duration: options
        });
        hasOptions = !$.isEmptyObject(options);
        options.complete = callback;
        options.delay && element.delay(options.delay);
        hasOptions && $.effects && $.effects.effect[effectName] ? element[method](options) : effectName !== method && element[effectName] ? element[effectName](options.duration, options.easing, callback) : element.queue(function(next) {
            $(this)[method]();
            callback && callback.call(element[0]);
            next();
        });
    };
});

var widget = $.widget, mouseHandled = !1;

$(document).mouseup(function() {
    mouseHandled = !1;
});

var mouse = $.widget("ui.mouse", {
    version: "1.11.1",
    options: {
        cancel: "input,textarea,button,select,option",
        distance: 1,
        delay: 0
    },
    _mouseInit: function() {
        var that = this;
        this.element.bind("mousedown." + this.widgetName, function(event) {
            return that._mouseDown(event);
        }).bind("click." + this.widgetName, function(event) {
            if (!0 === $.data(event.target, that.widgetName + ".preventClickEvent")) {
                $.removeData(event.target, that.widgetName + ".preventClickEvent");
                event.stopImmediatePropagation();
                return !1;
            }
        });
        this.started = !1;
    },
    _mouseDestroy: function() {
        this.element.unbind("." + this.widgetName);
        this._mouseMoveDelegate && this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
    },
    _mouseDown: function(event) {
        if (!mouseHandled) {
            this._mouseStarted && this._mouseUp(event);
            this._mouseDownEvent = event;
            var that = this, btnIsLeft = 1 === event.which, elIsCancel = "string" == typeof this.options.cancel && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : !1;
            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) return !0;
            this.mouseDelayMet = !this.options.delay;
            this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function() {
                that.mouseDelayMet = !0;
            }, this.options.delay));
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = this._mouseStart(event) !== !1;
                if (!this._mouseStarted) {
                    event.preventDefault();
                    return !0;
                }
            }
            !0 === $.data(event.target, this.widgetName + ".preventClickEvent") && $.removeData(event.target, this.widgetName + ".preventClickEvent");
            this._mouseMoveDelegate = function(event) {
                return that._mouseMove(event);
            };
            this._mouseUpDelegate = function(event) {
                return that._mouseUp(event);
            };
            this.document.bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
            event.preventDefault();
            mouseHandled = !0;
            return !0;
        }
    },
    _mouseMove: function(event) {
        if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) return this._mouseUp(event);
        if (!event.which) return this._mouseUp(event);
        if (this._mouseStarted) {
            this._mouseDrag(event);
            return event.preventDefault();
        }
        if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
            this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== !1;
            this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);
        }
        return !this._mouseStarted;
    },
    _mouseUp: function(event) {
        this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
        if (this._mouseStarted) {
            this._mouseStarted = !1;
            event.target === this._mouseDownEvent.target && $.data(event.target, this.widgetName + ".preventClickEvent", !0);
            this._mouseStop(event);
        }
        mouseHandled = !1;
        return !1;
    },
    _mouseDistanceMet: function(event) {
        return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
    },
    _mouseDelayMet: function() {
        return this.mouseDelayMet;
    },
    _mouseStart: function() {},
    _mouseDrag: function() {},
    _mouseStop: function() {},
    _mouseCapture: function() {
        return !0;
    }
});

!function() {
    function getOffsets(offsets, width, height) {
        return [ parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1) ];
    }
    function parseCss(element, property) {
        return parseInt($.css(element, property), 10) || 0;
    }
    function getDimensions(elem) {
        var raw = elem[0];
        return 9 === raw.nodeType ? {
            width: elem.width(),
            height: elem.height(),
            offset: {
                top: 0,
                left: 0
            }
        } : $.isWindow(raw) ? {
            width: elem.width(),
            height: elem.height(),
            offset: {
                top: elem.scrollTop(),
                left: elem.scrollLeft()
            }
        } : raw.preventDefault ? {
            width: 0,
            height: 0,
            offset: {
                top: raw.pageY,
                left: raw.pageX
            }
        } : {
            width: elem.outerWidth(),
            height: elem.outerHeight(),
            offset: elem.offset()
        };
    }
    $.ui = $.ui || {};
    var cachedScrollbarWidth, supportsOffsetFractions, max = Math.max, abs = Math.abs, round = Math.round, rhorizontal = /left|center|right/, rvertical = /top|center|bottom/, roffset = /[\+\-]\d+(\.[\d]+)?%?/, rposition = /^\w+/, rpercent = /%$/, _position = $.fn.position;
    $.position = {
        scrollbarWidth: function() {
            if (void 0 !== cachedScrollbarWidth) return cachedScrollbarWidth;
            var w1, w2, div = $("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"), innerDiv = div.children()[0];
            $("body").append(div);
            w1 = innerDiv.offsetWidth;
            div.css("overflow", "scroll");
            w2 = innerDiv.offsetWidth;
            w1 === w2 && (w2 = div[0].clientWidth);
            div.remove();
            return cachedScrollbarWidth = w1 - w2;
        },
        getScrollInfo: function(within) {
            var overflowX = within.isWindow || within.isDocument ? "" : within.element.css("overflow-x"), overflowY = within.isWindow || within.isDocument ? "" : within.element.css("overflow-y"), hasOverflowX = "scroll" === overflowX || "auto" === overflowX && within.width < within.element[0].scrollWidth, hasOverflowY = "scroll" === overflowY || "auto" === overflowY && within.height < within.element[0].scrollHeight;
            return {
                width: hasOverflowY ? $.position.scrollbarWidth() : 0,
                height: hasOverflowX ? $.position.scrollbarWidth() : 0
            };
        },
        getWithinInfo: function(element) {
            var withinElement = $(element || window), isWindow = $.isWindow(withinElement[0]), isDocument = !!withinElement[0] && 9 === withinElement[0].nodeType;
            return {
                element: withinElement,
                isWindow: isWindow,
                isDocument: isDocument,
                offset: withinElement.offset() || {
                    left: 0,
                    top: 0
                },
                scrollLeft: withinElement.scrollLeft(),
                scrollTop: withinElement.scrollTop(),
                width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
                height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
            };
        }
    };
    $.fn.position = function(options) {
        if (!options || !options.of) return _position.apply(this, arguments);
        options = $.extend({}, options);
        var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target = $(options.of), within = $.position.getWithinInfo(options.within), scrollInfo = $.position.getScrollInfo(within), collision = (options.collision || "flip").split(" "), offsets = {};
        dimensions = getDimensions(target);
        target[0].preventDefault && (options.at = "left top");
        targetWidth = dimensions.width;
        targetHeight = dimensions.height;
        targetOffset = dimensions.offset;
        basePosition = $.extend({}, targetOffset);
        $.each([ "my", "at" ], function() {
            var horizontalOffset, verticalOffset, pos = (options[this] || "").split(" ");
            1 === pos.length && (pos = rhorizontal.test(pos[0]) ? pos.concat([ "center" ]) : rvertical.test(pos[0]) ? [ "center" ].concat(pos) : [ "center", "center" ]);
            pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
            pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";
            horizontalOffset = roffset.exec(pos[0]);
            verticalOffset = roffset.exec(pos[1]);
            offsets[this] = [ horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0 ];
            options[this] = [ rposition.exec(pos[0])[0], rposition.exec(pos[1])[0] ];
        });
        1 === collision.length && (collision[1] = collision[0]);
        "right" === options.at[0] ? basePosition.left += targetWidth : "center" === options.at[0] && (basePosition.left += targetWidth / 2);
        "bottom" === options.at[1] ? basePosition.top += targetHeight : "center" === options.at[1] && (basePosition.top += targetHeight / 2);
        atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
        basePosition.left += atOffset[0];
        basePosition.top += atOffset[1];
        return this.each(function() {
            var collisionPosition, using, elem = $(this), elemWidth = elem.outerWidth(), elemHeight = elem.outerHeight(), marginLeft = parseCss(this, "marginLeft"), marginTop = parseCss(this, "marginTop"), collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width, collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height, position = $.extend({}, basePosition), myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
            "right" === options.my[0] ? position.left -= elemWidth : "center" === options.my[0] && (position.left -= elemWidth / 2);
            "bottom" === options.my[1] ? position.top -= elemHeight : "center" === options.my[1] && (position.top -= elemHeight / 2);
            position.left += myOffset[0];
            position.top += myOffset[1];
            if (!supportsOffsetFractions) {
                position.left = round(position.left);
                position.top = round(position.top);
            }
            collisionPosition = {
                marginLeft: marginLeft,
                marginTop: marginTop
            };
            $.each([ "left", "top" ], function(i, dir) {
                $.ui.position[collision[i]] && $.ui.position[collision[i]][dir](position, {
                    targetWidth: targetWidth,
                    targetHeight: targetHeight,
                    elemWidth: elemWidth,
                    elemHeight: elemHeight,
                    collisionPosition: collisionPosition,
                    collisionWidth: collisionWidth,
                    collisionHeight: collisionHeight,
                    offset: [ atOffset[0] + myOffset[0], atOffset[1] + myOffset[1] ],
                    my: options.my,
                    at: options.at,
                    within: within,
                    elem: elem
                });
            });
            options.using && (using = function(props) {
                var left = targetOffset.left - position.left, right = left + targetWidth - elemWidth, top = targetOffset.top - position.top, bottom = top + targetHeight - elemHeight, feedback = {
                    target: {
                        element: target,
                        left: targetOffset.left,
                        top: targetOffset.top,
                        width: targetWidth,
                        height: targetHeight
                    },
                    element: {
                        element: elem,
                        left: position.left,
                        top: position.top,
                        width: elemWidth,
                        height: elemHeight
                    },
                    horizontal: 0 > right ? "left" : left > 0 ? "right" : "center",
                    vertical: 0 > bottom ? "top" : top > 0 ? "bottom" : "middle"
                };
                elemWidth > targetWidth && abs(left + right) < targetWidth && (feedback.horizontal = "center");
                elemHeight > targetHeight && abs(top + bottom) < targetHeight && (feedback.vertical = "middle");
                max(abs(left), abs(right)) > max(abs(top), abs(bottom)) ? feedback.important = "horizontal" : feedback.important = "vertical";
                options.using.call(this, props, feedback);
            });
            elem.offset($.extend(position, {
                using: using
            }));
        });
    };
    $.ui.position = {
        fit: {
            left: function(position, data) {
                var newOverRight, within = data.within, withinOffset = within.isWindow ? within.scrollLeft : within.offset.left, outerWidth = within.width, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = withinOffset - collisionPosLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset;
                if (data.collisionWidth > outerWidth) if (overLeft > 0 && 0 >= overRight) {
                    newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                    position.left += overLeft - newOverRight;
                } else overRight > 0 && 0 >= overLeft ? position.left = withinOffset : overLeft > overRight ? position.left = withinOffset + outerWidth - data.collisionWidth : position.left = withinOffset; else overLeft > 0 ? position.left += overLeft : overRight > 0 ? position.left -= overRight : position.left = max(position.left - collisionPosLeft, position.left);
            },
            top: function(position, data) {
                var newOverBottom, within = data.within, withinOffset = within.isWindow ? within.scrollTop : within.offset.top, outerHeight = data.within.height, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = withinOffset - collisionPosTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset;
                if (data.collisionHeight > outerHeight) if (overTop > 0 && 0 >= overBottom) {
                    newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                    position.top += overTop - newOverBottom;
                } else overBottom > 0 && 0 >= overTop ? position.top = withinOffset : overTop > overBottom ? position.top = withinOffset + outerHeight - data.collisionHeight : position.top = withinOffset; else overTop > 0 ? position.top += overTop : overBottom > 0 ? position.top -= overBottom : position.top = max(position.top - collisionPosTop, position.top);
            }
        },
        flip: {
            left: function(position, data) {
                var newOverRight, newOverLeft, within = data.within, withinOffset = within.offset.left + within.scrollLeft, outerWidth = within.width, offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = collisionPosLeft - offsetLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft, myOffset = "left" === data.my[0] ? -data.elemWidth : "right" === data.my[0] ? data.elemWidth : 0, atOffset = "left" === data.at[0] ? data.targetWidth : "right" === data.at[0] ? -data.targetWidth : 0, offset = -2 * data.offset[0];
                if (0 > overLeft) {
                    newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                    (0 > newOverRight || newOverRight < abs(overLeft)) && (position.left += myOffset + atOffset + offset);
                } else if (overRight > 0) {
                    newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                    (newOverLeft > 0 || abs(newOverLeft) < overRight) && (position.left += myOffset + atOffset + offset);
                }
            },
            top: function(position, data) {
                var newOverTop, newOverBottom, within = data.within, withinOffset = within.offset.top + within.scrollTop, outerHeight = within.height, offsetTop = within.isWindow ? within.scrollTop : within.offset.top, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = collisionPosTop - offsetTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop, top = "top" === data.my[1], myOffset = top ? -data.elemHeight : "bottom" === data.my[1] ? data.elemHeight : 0, atOffset = "top" === data.at[1] ? data.targetHeight : "bottom" === data.at[1] ? -data.targetHeight : 0, offset = -2 * data.offset[1];
                if (0 > overTop) {
                    newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                    position.top + myOffset + atOffset + offset > overTop && (0 > newOverBottom || newOverBottom < abs(overTop)) && (position.top += myOffset + atOffset + offset);
                } else if (overBottom > 0) {
                    newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                    position.top + myOffset + atOffset + offset > overBottom && (newOverTop > 0 || abs(newOverTop) < overBottom) && (position.top += myOffset + atOffset + offset);
                }
            }
        },
        flipfit: {
            left: function() {
                $.ui.position.flip.left.apply(this, arguments);
                $.ui.position.fit.left.apply(this, arguments);
            },
            top: function() {
                $.ui.position.flip.top.apply(this, arguments);
                $.ui.position.fit.top.apply(this, arguments);
            }
        }
    };
    !function() {
        var testElement, testElementParent, testElementStyle, offsetLeft, i, body = document.getElementsByTagName("body")[0], div = document.createElement("div");
        testElement = document.createElement(body ? "div" : "body");
        testElementStyle = {
            visibility: "hidden",
            width: 0,
            height: 0,
            border: 0,
            margin: 0,
            background: "none"
        };
        body && $.extend(testElementStyle, {
            position: "absolute",
            left: "-1000px",
            top: "-1000px"
        });
        for (i in testElementStyle) testElement.style[i] = testElementStyle[i];
        testElement.appendChild(div);
        testElementParent = body || document.documentElement;
        testElementParent.insertBefore(testElement, testElementParent.firstChild);
        div.style.cssText = "position: absolute; left: 10.7432222px;";
        offsetLeft = $(div).offset().left;
        supportsOffsetFractions = offsetLeft > 10 && 11 > offsetLeft;
        testElement.innerHTML = "";
        testElementParent.removeChild(testElement);
    }();
}();

var position = $.ui.position, accordion = $.widget("ui.accordion", {
    version: "1.11.1",
    options: {
        active: 0,
        animate: {},
        collapsible: !1,
        event: "click",
        header: "> li > :first-child,> :not(li):even",
        heightStyle: "auto",
        icons: {
            activeHeader: "ui-icon-triangle-1-s",
            header: "ui-icon-triangle-1-e"
        },
        activate: null,
        beforeActivate: null
    },
    hideProps: {
        borderTopWidth: "hide",
        borderBottomWidth: "hide",
        paddingTop: "hide",
        paddingBottom: "hide",
        height: "hide"
    },
    showProps: {
        borderTopWidth: "show",
        borderBottomWidth: "show",
        paddingTop: "show",
        paddingBottom: "show",
        height: "show"
    },
    _create: function() {
        var options = this.options;
        this.prevShow = this.prevHide = $();
        this.element.addClass("ui-accordion ui-widget ui-helper-reset").attr("role", "tablist");
        options.collapsible || options.active !== !1 && null != options.active || (options.active = 0);
        this._processPanels();
        options.active < 0 && (options.active += this.headers.length);
        this._refresh();
    },
    _getCreateEventData: function() {
        return {
            header: this.active,
            panel: this.active.length ? this.active.next() : $()
        };
    },
    _createIcons: function() {
        var icons = this.options.icons;
        if (icons) {
            $("<span>").addClass("ui-accordion-header-icon ui-icon " + icons.header).prependTo(this.headers);
            this.active.children(".ui-accordion-header-icon").removeClass(icons.header).addClass(icons.activeHeader);
            this.headers.addClass("ui-accordion-icons");
        }
    },
    _destroyIcons: function() {
        this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove();
    },
    _destroy: function() {
        var contents;
        this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role");
        this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").removeUniqueId();
        this._destroyIcons();
        contents = this.headers.next().removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").css("display", "").removeAttr("role").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeUniqueId();
        "content" !== this.options.heightStyle && contents.css("height", "");
    },
    _setOption: function(key, value) {
        if ("active" !== key) {
            if ("event" === key) {
                this.options.event && this._off(this.headers, this.options.event);
                this._setupEvents(value);
            }
            this._super(key, value);
            "collapsible" !== key || value || this.options.active !== !1 || this._activate(0);
            if ("icons" === key) {
                this._destroyIcons();
                value && this._createIcons();
            }
            if ("disabled" === key) {
                this.element.toggleClass("ui-state-disabled", !!value).attr("aria-disabled", value);
                this.headers.add(this.headers.next()).toggleClass("ui-state-disabled", !!value);
            }
        } else this._activate(value);
    },
    _keydown: function(event) {
        if (!event.altKey && !event.ctrlKey) {
            var keyCode = $.ui.keyCode, length = this.headers.length, currentIndex = this.headers.index(event.target), toFocus = !1;
            switch (event.keyCode) {
              case keyCode.RIGHT:
              case keyCode.DOWN:
                toFocus = this.headers[(currentIndex + 1) % length];
                break;

              case keyCode.LEFT:
              case keyCode.UP:
                toFocus = this.headers[(currentIndex - 1 + length) % length];
                break;

              case keyCode.SPACE:
              case keyCode.ENTER:
                this._eventHandler(event);
                break;

              case keyCode.HOME:
                toFocus = this.headers[0];
                break;

              case keyCode.END:
                toFocus = this.headers[length - 1];
            }
            if (toFocus) {
                $(event.target).attr("tabIndex", -1);
                $(toFocus).attr("tabIndex", 0);
                toFocus.focus();
                event.preventDefault();
            }
        }
    },
    _panelKeyDown: function(event) {
        event.keyCode === $.ui.keyCode.UP && event.ctrlKey && $(event.currentTarget).prev().focus();
    },
    refresh: function() {
        var options = this.options;
        this._processPanels();
        if (options.active === !1 && options.collapsible === !0 || !this.headers.length) {
            options.active = !1;
            this.active = $();
        } else if (options.active === !1) this._activate(0); else if (this.active.length && !$.contains(this.element[0], this.active[0])) if (this.headers.length === this.headers.find(".ui-state-disabled").length) {
            options.active = !1;
            this.active = $();
        } else this._activate(Math.max(0, options.active - 1)); else options.active = this.headers.index(this.active);
        this._destroyIcons();
        this._refresh();
    },
    _processPanels: function() {
        this.headers = this.element.find(this.options.header).addClass("ui-accordion-header ui-state-default ui-corner-all");
        this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").filter(":not(.ui-accordion-content-active)").hide();
    },
    _refresh: function() {
        var maxHeight, options = this.options, heightStyle = options.heightStyle, parent = this.element.parent();
        this.active = this._findActive(options.active).addClass("ui-accordion-header-active ui-state-active ui-corner-top").removeClass("ui-corner-all");
        this.active.next().addClass("ui-accordion-content-active").show();
        this.headers.attr("role", "tab").each(function() {
            var header = $(this), headerId = header.uniqueId().attr("id"), panel = header.next(), panelId = panel.uniqueId().attr("id");
            header.attr("aria-controls", panelId);
            panel.attr("aria-labelledby", headerId);
        }).next().attr("role", "tabpanel");
        this.headers.not(this.active).attr({
            "aria-selected": "false",
            "aria-expanded": "false",
            tabIndex: -1
        }).next().attr({
            "aria-hidden": "true"
        }).hide();
        this.active.length ? this.active.attr({
            "aria-selected": "true",
            "aria-expanded": "true",
            tabIndex: 0
        }).next().attr({
            "aria-hidden": "false"
        }) : this.headers.eq(0).attr("tabIndex", 0);
        this._createIcons();
        this._setupEvents(options.event);
        if ("fill" === heightStyle) {
            maxHeight = parent.height();
            this.element.siblings(":visible").each(function() {
                var elem = $(this), position = elem.css("position");
                "absolute" !== position && "fixed" !== position && (maxHeight -= elem.outerHeight(!0));
            });
            this.headers.each(function() {
                maxHeight -= $(this).outerHeight(!0);
            });
            this.headers.next().each(function() {
                $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
            }).css("overflow", "auto");
        } else if ("auto" === heightStyle) {
            maxHeight = 0;
            this.headers.next().each(function() {
                maxHeight = Math.max(maxHeight, $(this).css("height", "").height());
            }).height(maxHeight);
        }
    },
    _activate: function(index) {
        var active = this._findActive(index)[0];
        if (active !== this.active[0]) {
            active = active || this.active[0];
            this._eventHandler({
                target: active,
                currentTarget: active,
                preventDefault: $.noop
            });
        }
    },
    _findActive: function(selector) {
        return "number" == typeof selector ? this.headers.eq(selector) : $();
    },
    _setupEvents: function(event) {
        var events = {
            keydown: "_keydown"
        };
        event && $.each(event.split(" "), function(index, eventName) {
            events[eventName] = "_eventHandler";
        });
        this._off(this.headers.add(this.headers.next()));
        this._on(this.headers, events);
        this._on(this.headers.next(), {
            keydown: "_panelKeyDown"
        });
        this._hoverable(this.headers);
        this._focusable(this.headers);
    },
    _eventHandler: function(event) {
        var options = this.options, active = this.active, clicked = $(event.currentTarget), clickedIsActive = clicked[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : clicked.next(), toHide = active.next(), eventData = {
            oldHeader: active,
            oldPanel: toHide,
            newHeader: collapsing ? $() : clicked,
            newPanel: toShow
        };
        event.preventDefault();
        if ((!clickedIsActive || options.collapsible) && this._trigger("beforeActivate", event, eventData) !== !1) {
            options.active = collapsing ? !1 : this.headers.index(clicked);
            this.active = clickedIsActive ? $() : clicked;
            this._toggle(eventData);
            active.removeClass("ui-accordion-header-active ui-state-active");
            options.icons && active.children(".ui-accordion-header-icon").removeClass(options.icons.activeHeader).addClass(options.icons.header);
            if (!clickedIsActive) {
                clicked.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top");
                options.icons && clicked.children(".ui-accordion-header-icon").removeClass(options.icons.header).addClass(options.icons.activeHeader);
                clicked.next().addClass("ui-accordion-content-active");
            }
        }
    },
    _toggle: function(data) {
        var toShow = data.newPanel, toHide = this.prevShow.length ? this.prevShow : data.oldPanel;
        this.prevShow.add(this.prevHide).stop(!0, !0);
        this.prevShow = toShow;
        this.prevHide = toHide;
        if (this.options.animate) this._animate(toShow, toHide, data); else {
            toHide.hide();
            toShow.show();
            this._toggleComplete(data);
        }
        toHide.attr({
            "aria-hidden": "true"
        });
        toHide.prev().attr("aria-selected", "false");
        toShow.length && toHide.length ? toHide.prev().attr({
            tabIndex: -1,
            "aria-expanded": "false"
        }) : toShow.length && this.headers.filter(function() {
            return 0 === $(this).attr("tabIndex");
        }).attr("tabIndex", -1);
        toShow.attr("aria-hidden", "false").prev().attr({
            "aria-selected": "true",
            tabIndex: 0,
            "aria-expanded": "true"
        });
    },
    _animate: function(toShow, toHide, data) {
        var total, easing, duration, that = this, adjust = 0, down = toShow.length && (!toHide.length || toShow.index() < toHide.index()), animate = this.options.animate || {}, options = down && animate.down || animate, complete = function() {
            that._toggleComplete(data);
        };
        "number" == typeof options && (duration = options);
        "string" == typeof options && (easing = options);
        easing = easing || options.easing || animate.easing;
        duration = duration || options.duration || animate.duration;
        if (!toHide.length) return toShow.animate(this.showProps, duration, easing, complete);
        if (!toShow.length) return toHide.animate(this.hideProps, duration, easing, complete);
        total = toShow.show().outerHeight();
        toHide.animate(this.hideProps, {
            duration: duration,
            easing: easing,
            step: function(now, fx) {
                fx.now = Math.round(now);
            }
        });
        toShow.hide().animate(this.showProps, {
            duration: duration,
            easing: easing,
            complete: complete,
            step: function(now, fx) {
                fx.now = Math.round(now);
                if ("height" !== fx.prop) adjust += fx.now; else if ("content" !== that.options.heightStyle) {
                    fx.now = Math.round(total - toHide.outerHeight() - adjust);
                    adjust = 0;
                }
            }
        });
    },
    _toggleComplete: function(data) {
        var toHide = data.oldPanel;
        toHide.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all");
        toHide.length && (toHide.parent()[0].className = toHide.parent()[0].className);
        this._trigger("activate", null, data);
    }
}), menu = $.widget("ui.menu", {
    version: "1.11.1",
    defaultElement: "<ul>",
    delay: 300,
    options: {
        icons: {
            submenu: "ui-icon-carat-1-e"
        },
        items: "> *",
        menus: "ul",
        position: {
            my: "left-1 top",
            at: "right top"
        },
        role: "menu",
        blur: null,
        focus: null,
        select: null
    },
    _create: function() {
        this.activeMenu = this.element;
        this.mouseHandled = !1;
        this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content").toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length).attr({
            role: this.options.role,
            tabIndex: 0
        });
        this.options.disabled && this.element.addClass("ui-state-disabled").attr("aria-disabled", "true");
        this._on({
            "mousedown .ui-menu-item": function(event) {
                event.preventDefault();
            },
            "click .ui-menu-item": function(event) {
                var target = $(event.target);
                if (!this.mouseHandled && target.not(".ui-state-disabled").length) {
                    this.select(event);
                    event.isPropagationStopped() || (this.mouseHandled = !0);
                    if (target.has(".ui-menu").length) this.expand(event); else if (!this.element.is(":focus") && $(this.document[0].activeElement).closest(".ui-menu").length) {
                        this.element.trigger("focus", [ !0 ]);
                        this.active && 1 === this.active.parents(".ui-menu").length && clearTimeout(this.timer);
                    }
                }
            },
            "mouseenter .ui-menu-item": function(event) {
                var target = $(event.currentTarget);
                target.siblings(".ui-state-active").removeClass("ui-state-active");
                this.focus(event, target);
            },
            mouseleave: "collapseAll",
            "mouseleave .ui-menu": "collapseAll",
            focus: function(event, keepActiveItem) {
                var item = this.active || this.element.find(this.options.items).eq(0);
                keepActiveItem || this.focus(event, item);
            },
            blur: function(event) {
                this._delay(function() {
                    $.contains(this.element[0], this.document[0].activeElement) || this.collapseAll(event);
                });
            },
            keydown: "_keydown"
        });
        this.refresh();
        this._on(this.document, {
            click: function(event) {
                this._closeOnDocumentClick(event) && this.collapseAll(event);
                this.mouseHandled = !1;
            }
        });
    },
    _destroy: function() {
        this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeClass("ui-menu ui-widget ui-widget-content ui-menu-icons ui-front").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show();
        this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").removeUniqueId().removeClass("ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function() {
            var elem = $(this);
            elem.data("ui-menu-submenu-carat") && elem.remove();
        });
        this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content");
    },
    _keydown: function(event) {
        function escape(value) {
            return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
        }
        var match, prev, character, skip, regex, preventDefault = !0;
        switch (event.keyCode) {
          case $.ui.keyCode.PAGE_UP:
            this.previousPage(event);
            break;

          case $.ui.keyCode.PAGE_DOWN:
            this.nextPage(event);
            break;

          case $.ui.keyCode.HOME:
            this._move("first", "first", event);
            break;

          case $.ui.keyCode.END:
            this._move("last", "last", event);
            break;

          case $.ui.keyCode.UP:
            this.previous(event);
            break;

          case $.ui.keyCode.DOWN:
            this.next(event);
            break;

          case $.ui.keyCode.LEFT:
            this.collapse(event);
            break;

          case $.ui.keyCode.RIGHT:
            this.active && !this.active.is(".ui-state-disabled") && this.expand(event);
            break;

          case $.ui.keyCode.ENTER:
          case $.ui.keyCode.SPACE:
            this._activate(event);
            break;

          case $.ui.keyCode.ESCAPE:
            this.collapse(event);
            break;

          default:
            preventDefault = !1;
            prev = this.previousFilter || "";
            character = String.fromCharCode(event.keyCode);
            skip = !1;
            clearTimeout(this.filterTimer);
            character === prev ? skip = !0 : character = prev + character;
            regex = new RegExp("^" + escape(character), "i");
            match = this.activeMenu.find(this.options.items).filter(function() {
                return regex.test($(this).text());
            });
            match = skip && -1 !== match.index(this.active.next()) ? this.active.nextAll(".ui-menu-item") : match;
            if (!match.length) {
                character = String.fromCharCode(event.keyCode);
                regex = new RegExp("^" + escape(character), "i");
                match = this.activeMenu.find(this.options.items).filter(function() {
                    return regex.test($(this).text());
                });
            }
            if (match.length) {
                this.focus(event, match);
                if (match.length > 1) {
                    this.previousFilter = character;
                    this.filterTimer = this._delay(function() {
                        delete this.previousFilter;
                    }, 1e3);
                } else delete this.previousFilter;
            } else delete this.previousFilter;
        }
        preventDefault && event.preventDefault();
    },
    _activate: function(event) {
        this.active.is(".ui-state-disabled") || (this.active.is("[aria-haspopup='true']") ? this.expand(event) : this.select(event));
    },
    refresh: function() {
        var menus, items, that = this, icon = this.options.icons.submenu, submenus = this.element.find(this.options.menus);
        this.element.toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length);
        submenus.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-front").hide().attr({
            role: this.options.role,
            "aria-hidden": "true",
            "aria-expanded": "false"
        }).each(function() {
            var menu = $(this), item = menu.parent(), submenuCarat = $("<span>").addClass("ui-menu-icon ui-icon " + icon).data("ui-menu-submenu-carat", !0);
            item.attr("aria-haspopup", "true").prepend(submenuCarat);
            menu.attr("aria-labelledby", item.attr("id"));
        });
        menus = submenus.add(this.element);
        items = menus.find(this.options.items);
        items.not(".ui-menu-item").each(function() {
            var item = $(this);
            that._isDivider(item) && item.addClass("ui-widget-content ui-menu-divider");
        });
        items.not(".ui-menu-item, .ui-menu-divider").addClass("ui-menu-item").uniqueId().attr({
            tabIndex: -1,
            role: this._itemRole()
        });
        items.filter(".ui-state-disabled").attr("aria-disabled", "true");
        this.active && !$.contains(this.element[0], this.active[0]) && this.blur();
    },
    _itemRole: function() {
        return {
            menu: "menuitem",
            listbox: "option"
        }[this.options.role];
    },
    _setOption: function(key, value) {
        "icons" === key && this.element.find(".ui-menu-icon").removeClass(this.options.icons.submenu).addClass(value.submenu);
        "disabled" === key && this.element.toggleClass("ui-state-disabled", !!value).attr("aria-disabled", value);
        this._super(key, value);
    },
    focus: function(event, item) {
        var nested, focused;
        this.blur(event, event && "focus" === event.type);
        this._scrollIntoView(item);
        this.active = item.first();
        focused = this.active.addClass("ui-state-focus").removeClass("ui-state-active");
        this.options.role && this.element.attr("aria-activedescendant", focused.attr("id"));
        this.active.parent().closest(".ui-menu-item").addClass("ui-state-active");
        event && "keydown" === event.type ? this._close() : this.timer = this._delay(function() {
            this._close();
        }, this.delay);
        nested = item.children(".ui-menu");
        nested.length && event && /^mouse/.test(event.type) && this._startOpening(nested);
        this.activeMenu = item.parent();
        this._trigger("focus", event, {
            item: item
        });
    },
    _scrollIntoView: function(item) {
        var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
        if (this._hasScroll()) {
            borderTop = parseFloat($.css(this.activeMenu[0], "borderTopWidth")) || 0;
            paddingTop = parseFloat($.css(this.activeMenu[0], "paddingTop")) || 0;
            offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
            scroll = this.activeMenu.scrollTop();
            elementHeight = this.activeMenu.height();
            itemHeight = item.outerHeight();
            0 > offset ? this.activeMenu.scrollTop(scroll + offset) : offset + itemHeight > elementHeight && this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);
        }
    },
    blur: function(event, fromFocus) {
        fromFocus || clearTimeout(this.timer);
        if (this.active) {
            this.active.removeClass("ui-state-focus");
            this.active = null;
            this._trigger("blur", event, {
                item: this.active
            });
        }
    },
    _startOpening: function(submenu) {
        clearTimeout(this.timer);
        "true" === submenu.attr("aria-hidden") && (this.timer = this._delay(function() {
            this._close();
            this._open(submenu);
        }, this.delay));
    },
    _open: function(submenu) {
        var position = $.extend({
            of: this.active
        }, this.options.position);
        clearTimeout(this.timer);
        this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden", "true");
        submenu.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(position);
    },
    collapseAll: function(event, all) {
        clearTimeout(this.timer);
        this.timer = this._delay(function() {
            var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(".ui-menu"));
            currentMenu.length || (currentMenu = this.element);
            this._close(currentMenu);
            this.blur(event);
            this.activeMenu = currentMenu;
        }, this.delay);
    },
    _close: function(startMenu) {
        startMenu || (startMenu = this.active ? this.active.parent() : this.element);
        startMenu.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false").end().find(".ui-state-active").not(".ui-state-focus").removeClass("ui-state-active");
    },
    _closeOnDocumentClick: function(event) {
        return !$(event.target).closest(".ui-menu").length;
    },
    _isDivider: function(item) {
        return !/[^\-\u2014\u2013\s]/.test(item.text());
    },
    collapse: function(event) {
        var newItem = this.active && this.active.parent().closest(".ui-menu-item", this.element);
        if (newItem && newItem.length) {
            this._close();
            this.focus(event, newItem);
        }
    },
    expand: function(event) {
        var newItem = this.active && this.active.children(".ui-menu ").find(this.options.items).first();
        if (newItem && newItem.length) {
            this._open(newItem.parent());
            this._delay(function() {
                this.focus(event, newItem);
            });
        }
    },
    next: function(event) {
        this._move("next", "first", event);
    },
    previous: function(event) {
        this._move("prev", "last", event);
    },
    isFirstItem: function() {
        return this.active && !this.active.prevAll(".ui-menu-item").length;
    },
    isLastItem: function() {
        return this.active && !this.active.nextAll(".ui-menu-item").length;
    },
    _move: function(direction, filter, event) {
        var next;
        this.active && (next = "first" === direction || "last" === direction ? this.active["first" === direction ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1) : this.active[direction + "All"](".ui-menu-item").eq(0));
        next && next.length && this.active || (next = this.activeMenu.find(this.options.items)[filter]());
        this.focus(event, next);
    },
    nextPage: function(event) {
        var item, base, height;
        if (this.active) {
            if (!this.isLastItem()) if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.nextAll(".ui-menu-item").each(function() {
                    item = $(this);
                    return item.offset().top - base - height < 0;
                });
                this.focus(event, item);
            } else this.focus(event, this.activeMenu.find(this.options.items)[this.active ? "last" : "first"]());
        } else this.next(event);
    },
    previousPage: function(event) {
        var item, base, height;
        if (this.active) {
            if (!this.isFirstItem()) if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.prevAll(".ui-menu-item").each(function() {
                    item = $(this);
                    return item.offset().top - base + height > 0;
                });
                this.focus(event, item);
            } else this.focus(event, this.activeMenu.find(this.options.items).first());
        } else this.next(event);
    },
    _hasScroll: function() {
        return this.element.outerHeight() < this.element.prop("scrollHeight");
    },
    select: function(event) {
        this.active = this.active || $(event.target).closest(".ui-menu-item");
        var ui = {
            item: this.active
        };
        this.active.has(".ui-menu").length || this.collapseAll(event, !0);
        this._trigger("select", event, ui);
    }
});

$.widget("ui.autocomplete", {
    version: "1.11.1",
    defaultElement: "<input>",
    options: {
        appendTo: null,
        autoFocus: !1,
        delay: 300,
        minLength: 1,
        position: {
            my: "left top",
            at: "left bottom",
            collision: "none"
        },
        source: null,
        change: null,
        close: null,
        focus: null,
        open: null,
        response: null,
        search: null,
        select: null
    },
    requestIndex: 0,
    pending: 0,
    _create: function() {
        var suppressKeyPress, suppressKeyPressRepeat, suppressInput, nodeName = this.element[0].nodeName.toLowerCase(), isTextarea = "textarea" === nodeName, isInput = "input" === nodeName;
        this.isMultiLine = isTextarea ? !0 : isInput ? !1 : this.element.prop("isContentEditable");
        this.valueMethod = this.element[isTextarea || isInput ? "val" : "text"];
        this.isNewMenu = !0;
        this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off");
        this._on(this.element, {
            keydown: function(event) {
                if (this.element.prop("readOnly")) {
                    suppressKeyPress = !0;
                    suppressInput = !0;
                    suppressKeyPressRepeat = !0;
                } else {
                    suppressKeyPress = !1;
                    suppressInput = !1;
                    suppressKeyPressRepeat = !1;
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                      case keyCode.PAGE_UP:
                        suppressKeyPress = !0;
                        this._move("previousPage", event);
                        break;

                      case keyCode.PAGE_DOWN:
                        suppressKeyPress = !0;
                        this._move("nextPage", event);
                        break;

                      case keyCode.UP:
                        suppressKeyPress = !0;
                        this._keyEvent("previous", event);
                        break;

                      case keyCode.DOWN:
                        suppressKeyPress = !0;
                        this._keyEvent("next", event);
                        break;

                      case keyCode.ENTER:
                        if (this.menu.active) {
                            suppressKeyPress = !0;
                            event.preventDefault();
                            this.menu.select(event);
                        }
                        break;

                      case keyCode.TAB:
                        this.menu.active && this.menu.select(event);
                        break;

                      case keyCode.ESCAPE:
                        if (this.menu.element.is(":visible")) {
                            this.isMultiLine || this._value(this.term);
                            this.close(event);
                            event.preventDefault();
                        }
                        break;

                      default:
                        suppressKeyPressRepeat = !0;
                        this._searchTimeout(event);
                    }
                }
            },
            keypress: function(event) {
                if (suppressKeyPress) {
                    suppressKeyPress = !1;
                    (!this.isMultiLine || this.menu.element.is(":visible")) && event.preventDefault();
                } else if (!suppressKeyPressRepeat) {
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                      case keyCode.PAGE_UP:
                        this._move("previousPage", event);
                        break;

                      case keyCode.PAGE_DOWN:
                        this._move("nextPage", event);
                        break;

                      case keyCode.UP:
                        this._keyEvent("previous", event);
                        break;

                      case keyCode.DOWN:
                        this._keyEvent("next", event);
                    }
                }
            },
            input: function(event) {
                if (suppressInput) {
                    suppressInput = !1;
                    event.preventDefault();
                } else this._searchTimeout(event);
            },
            focus: function() {
                this.selectedItem = null;
                this.previous = this._value();
            },
            blur: function(event) {
                if (this.cancelBlur) delete this.cancelBlur; else {
                    clearTimeout(this.searching);
                    this.close(event);
                    this._change(event);
                }
            }
        });
        this._initSource();
        this.menu = $("<ul>").addClass("ui-autocomplete ui-front").appendTo(this._appendTo()).menu({
            role: null
        }).hide().menu("instance");
        this._on(this.menu.element, {
            mousedown: function(event) {
                event.preventDefault();
                this.cancelBlur = !0;
                this._delay(function() {
                    delete this.cancelBlur;
                });
                var menuElement = this.menu.element[0];
                $(event.target).closest(".ui-menu-item").length || this._delay(function() {
                    var that = this;
                    this.document.one("mousedown", function(event) {
                        event.target === that.element[0] || event.target === menuElement || $.contains(menuElement, event.target) || that.close();
                    });
                });
            },
            menufocus: function(event, ui) {
                var label, item;
                if (this.isNewMenu) {
                    this.isNewMenu = !1;
                    if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {
                        this.menu.blur();
                        this.document.one("mousemove", function() {
                            $(event.target).trigger(event.originalEvent);
                        });
                        return;
                    }
                }
                item = ui.item.data("ui-autocomplete-item");
                !1 !== this._trigger("focus", event, {
                    item: item
                }) && event.originalEvent && /^key/.test(event.originalEvent.type) && this._value(item.value);
                label = ui.item.attr("aria-label") || item.value;
                if (label && $.trim(label).length) {
                    this.liveRegion.children().hide();
                    $("<div>").text(label).appendTo(this.liveRegion);
                }
            },
            menuselect: function(event, ui) {
                var item = ui.item.data("ui-autocomplete-item"), previous = this.previous;
                if (this.element[0] !== this.document[0].activeElement) {
                    this.element.focus();
                    this.previous = previous;
                    this._delay(function() {
                        this.previous = previous;
                        this.selectedItem = item;
                    });
                }
                !1 !== this._trigger("select", event, {
                    item: item
                }) && this._value(item.value);
                this.term = this._value();
                this.close(event);
                this.selectedItem = item;
            }
        });
        this.liveRegion = $("<span>", {
            role: "status",
            "aria-live": "assertive",
            "aria-relevant": "additions"
        }).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body);
        this._on(this.window, {
            beforeunload: function() {
                this.element.removeAttr("autocomplete");
            }
        });
    },
    _destroy: function() {
        clearTimeout(this.searching);
        this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete");
        this.menu.element.remove();
        this.liveRegion.remove();
    },
    _setOption: function(key, value) {
        this._super(key, value);
        "source" === key && this._initSource();
        "appendTo" === key && this.menu.element.appendTo(this._appendTo());
        "disabled" === key && value && this.xhr && this.xhr.abort();
    },
    _appendTo: function() {
        var element = this.options.appendTo;
        element && (element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0));
        element && element[0] || (element = this.element.closest(".ui-front"));
        element.length || (element = this.document[0].body);
        return element;
    },
    _initSource: function() {
        var array, url, that = this;
        if ($.isArray(this.options.source)) {
            array = this.options.source;
            this.source = function(request, response) {
                response($.ui.autocomplete.filter(array, request.term));
            };
        } else if ("string" == typeof this.options.source) {
            url = this.options.source;
            this.source = function(request, response) {
                that.xhr && that.xhr.abort();
                that.xhr = $.ajax({
                    url: url,
                    data: request,
                    dataType: "json",
                    success: function(data) {
                        response(data);
                    },
                    error: function() {
                        response([]);
                    }
                });
            };
        } else this.source = this.options.source;
    },
    _searchTimeout: function(event) {
        clearTimeout(this.searching);
        this.searching = this._delay(function() {
            var equalValues = this.term === this._value(), menuVisible = this.menu.element.is(":visible"), modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;
            if (!equalValues || equalValues && !menuVisible && !modifierKey) {
                this.selectedItem = null;
                this.search(null, event);
            }
        }, this.options.delay);
    },
    search: function(value, event) {
        value = null != value ? value : this._value();
        this.term = this._value();
        return value.length < this.options.minLength ? this.close(event) : this._trigger("search", event) !== !1 ? this._search(value) : void 0;
    },
    _search: function(value) {
        this.pending++;
        this.element.addClass("ui-autocomplete-loading");
        this.cancelSearch = !1;
        this.source({
            term: value
        }, this._response());
    },
    _response: function() {
        var index = ++this.requestIndex;
        return $.proxy(function(content) {
            index === this.requestIndex && this.__response(content);
            this.pending--;
            this.pending || this.element.removeClass("ui-autocomplete-loading");
        }, this);
    },
    __response: function(content) {
        content && (content = this._normalize(content));
        this._trigger("response", null, {
            content: content
        });
        if (!this.options.disabled && content && content.length && !this.cancelSearch) {
            this._suggest(content);
            this._trigger("open");
        } else this._close();
    },
    close: function(event) {
        this.cancelSearch = !0;
        this._close(event);
    },
    _close: function(event) {
        if (this.menu.element.is(":visible")) {
            this.menu.element.hide();
            this.menu.blur();
            this.isNewMenu = !0;
            this._trigger("close", event);
        }
    },
    _change: function(event) {
        this.previous !== this._value() && this._trigger("change", event, {
            item: this.selectedItem
        });
    },
    _normalize: function(items) {
        return items.length && items[0].label && items[0].value ? items : $.map(items, function(item) {
            return "string" == typeof item ? {
                label: item,
                value: item
            } : $.extend({}, item, {
                label: item.label || item.value,
                value: item.value || item.label
            });
        });
    },
    _suggest: function(items) {
        var ul = this.menu.element.empty();
        this._renderMenu(ul, items);
        this.isNewMenu = !0;
        this.menu.refresh();
        ul.show();
        this._resizeMenu();
        ul.position($.extend({
            of: this.element
        }, this.options.position));
        this.options.autoFocus && this.menu.next();
    },
    _resizeMenu: function() {
        var ul = this.menu.element;
        ul.outerWidth(Math.max(ul.width("").outerWidth() + 1, this.element.outerWidth()));
    },
    _renderMenu: function(ul, items) {
        var that = this;
        $.each(items, function(index, item) {
            that._renderItemData(ul, item);
        });
    },
    _renderItemData: function(ul, item) {
        return this._renderItem(ul, item).data("ui-autocomplete-item", item);
    },
    _renderItem: function(ul, item) {
        return $("<li>").text(item.label).appendTo(ul);
    },
    _move: function(direction, event) {
        if (this.menu.element.is(":visible")) if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {
            this.isMultiLine || this._value(this.term);
            this.menu.blur();
        } else this.menu[direction](event); else this.search(null, event);
    },
    widget: function() {
        return this.menu.element;
    },
    _value: function() {
        return this.valueMethod.apply(this.element, arguments);
    },
    _keyEvent: function(keyEvent, event) {
        if (!this.isMultiLine || this.menu.element.is(":visible")) {
            this._move(keyEvent, event);
            event.preventDefault();
        }
    }
});

$.extend($.ui.autocomplete, {
    escapeRegex: function(value) {
        return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    },
    filter: function(array, term) {
        var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");
        return $.grep(array, function(value) {
            return matcher.test(value.label || value.value || value);
        });
    }
});

$.widget("ui.autocomplete", $.ui.autocomplete, {
    options: {
        messages: {
            noResults: "No search results.",
            results: function(amount) {
                return amount + (amount > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate.";
            }
        }
    },
    __response: function(content) {
        var message;
        this._superApply(arguments);
        if (!this.options.disabled && !this.cancelSearch) {
            message = content && content.length ? this.options.messages.results(content.length) : this.options.messages.noResults;
            this.liveRegion.children().hide();
            $("<div>").text(message).appendTo(this.liveRegion);
        }
    }
});

var autocomplete = $.ui.autocomplete, lastActive, baseClasses = "ui-button ui-widget ui-state-default ui-corner-all", typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only", formResetHandler = function() {
    var form = $(this);
    setTimeout(function() {
        form.find(":ui-button").button("refresh");
    }, 1);
}, radioGroup = function(radio) {
    var name = radio.name, form = radio.form, radios = $([]);
    if (name) {
        name = name.replace(/'/g, "\\'");
        radios = form ? $(form).find("[name='" + name + "'][type=radio]") : $("[name='" + name + "'][type=radio]", radio.ownerDocument).filter(function() {
            return !this.form;
        });
    }
    return radios;
};

$.widget("ui.button", {
    version: "1.11.1",
    defaultElement: "<button>",
    options: {
        disabled: null,
        text: !0,
        label: null,
        icons: {
            primary: null,
            secondary: null
        }
    },
    _create: function() {
        this.element.closest("form").unbind("reset" + this.eventNamespace).bind("reset" + this.eventNamespace, formResetHandler);
        "boolean" != typeof this.options.disabled ? this.options.disabled = !!this.element.prop("disabled") : this.element.prop("disabled", this.options.disabled);
        this._determineButtonType();
        this.hasTitle = !!this.buttonElement.attr("title");
        var that = this, options = this.options, toggleButton = "checkbox" === this.type || "radio" === this.type, activeClass = toggleButton ? "" : "ui-state-active";
        null === options.label && (options.label = "input" === this.type ? this.buttonElement.val() : this.buttonElement.html());
        this._hoverable(this.buttonElement);
        this.buttonElement.addClass(baseClasses).attr("role", "button").bind("mouseenter" + this.eventNamespace, function() {
            options.disabled || this === lastActive && $(this).addClass("ui-state-active");
        }).bind("mouseleave" + this.eventNamespace, function() {
            options.disabled || $(this).removeClass(activeClass);
        }).bind("click" + this.eventNamespace, function(event) {
            if (options.disabled) {
                event.preventDefault();
                event.stopImmediatePropagation();
            }
        });
        this._on({
            focus: function() {
                this.buttonElement.addClass("ui-state-focus");
            },
            blur: function() {
                this.buttonElement.removeClass("ui-state-focus");
            }
        });
        toggleButton && this.element.bind("change" + this.eventNamespace, function() {
            that.refresh();
        });
        if ("checkbox" === this.type) this.buttonElement.bind("click" + this.eventNamespace, function() {
            return options.disabled ? !1 : void 0;
        }); else if ("radio" === this.type) this.buttonElement.bind("click" + this.eventNamespace, function() {
            if (options.disabled) return !1;
            $(this).addClass("ui-state-active");
            that.buttonElement.attr("aria-pressed", "true");
            var radio = that.element[0];
            radioGroup(radio).not(radio).map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-state-active").attr("aria-pressed", "false");
        }); else {
            this.buttonElement.bind("mousedown" + this.eventNamespace, function() {
                if (options.disabled) return !1;
                $(this).addClass("ui-state-active");
                lastActive = this;
                that.document.one("mouseup", function() {
                    lastActive = null;
                });
            }).bind("mouseup" + this.eventNamespace, function() {
                if (options.disabled) return !1;
                $(this).removeClass("ui-state-active");
            }).bind("keydown" + this.eventNamespace, function(event) {
                if (options.disabled) return !1;
                (event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) && $(this).addClass("ui-state-active");
            }).bind("keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
                $(this).removeClass("ui-state-active");
            });
            this.buttonElement.is("a") && this.buttonElement.keyup(function(event) {
                event.keyCode === $.ui.keyCode.SPACE && $(this).click();
            });
        }
        this._setOption("disabled", options.disabled);
        this._resetButton();
    },
    _determineButtonType: function() {
        var ancestor, labelSelector, checked;
        this.element.is("[type=checkbox]") ? this.type = "checkbox" : this.element.is("[type=radio]") ? this.type = "radio" : this.element.is("input") ? this.type = "input" : this.type = "button";
        if ("checkbox" === this.type || "radio" === this.type) {
            ancestor = this.element.parents().last();
            labelSelector = "label[for='" + this.element.attr("id") + "']";
            this.buttonElement = ancestor.find(labelSelector);
            if (!this.buttonElement.length) {
                ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
                this.buttonElement = ancestor.filter(labelSelector);
                this.buttonElement.length || (this.buttonElement = ancestor.find(labelSelector));
            }
            this.element.addClass("ui-helper-hidden-accessible");
            checked = this.element.is(":checked");
            checked && this.buttonElement.addClass("ui-state-active");
            this.buttonElement.prop("aria-pressed", checked);
        } else this.buttonElement = this.element;
    },
    widget: function() {
        return this.buttonElement;
    },
    _destroy: function() {
        this.element.removeClass("ui-helper-hidden-accessible");
        this.buttonElement.removeClass(baseClasses + " ui-state-active " + typeClasses).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
        this.hasTitle || this.buttonElement.removeAttr("title");
    },
    _setOption: function(key, value) {
        this._super(key, value);
        if ("disabled" !== key) this._resetButton(); else {
            this.widget().toggleClass("ui-state-disabled", !!value);
            this.element.prop("disabled", !!value);
            value && ("checkbox" === this.type || "radio" === this.type ? this.buttonElement.removeClass("ui-state-focus") : this.buttonElement.removeClass("ui-state-focus ui-state-active"));
        }
    },
    refresh: function() {
        var isDisabled = this.element.is("input, button") ? this.element.is(":disabled") : this.element.hasClass("ui-button-disabled");
        isDisabled !== this.options.disabled && this._setOption("disabled", isDisabled);
        "radio" === this.type ? radioGroup(this.element[0]).each(function() {
            $(this).is(":checked") ? $(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true") : $(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false");
        }) : "checkbox" === this.type && (this.element.is(":checked") ? this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true") : this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false"));
    },
    _resetButton: function() {
        if ("input" !== this.type) {
            var buttonElement = this.buttonElement.removeClass(typeClasses), buttonText = $("<span></span>", this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(buttonElement.empty()).text(), icons = this.options.icons, multipleIcons = icons.primary && icons.secondary, buttonClasses = [];
            if (icons.primary || icons.secondary) {
                this.options.text && buttonClasses.push("ui-button-text-icon" + (multipleIcons ? "s" : icons.primary ? "-primary" : "-secondary"));
                icons.primary && buttonElement.prepend("<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>");
                icons.secondary && buttonElement.append("<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>");
                if (!this.options.text) {
                    buttonClasses.push(multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only");
                    this.hasTitle || buttonElement.attr("title", $.trim(buttonText));
                }
            } else buttonClasses.push("ui-button-text-only");
            buttonElement.addClass(buttonClasses.join(" "));
        } else this.options.label && this.element.val(this.options.label);
    }
});

$.widget("ui.buttonset", {
    version: "1.11.1",
    options: {
        items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
    },
    _create: function() {
        this.element.addClass("ui-buttonset");
    },
    _init: function() {
        this.refresh();
    },
    _setOption: function(key, value) {
        "disabled" === key && this.buttons.button("option", key, value);
        this._super(key, value);
    },
    refresh: function() {
        var rtl = "rtl" === this.element.css("direction"), allButtons = this.element.find(this.options.items), existingButtons = allButtons.filter(":ui-button");
        allButtons.not(":ui-button").button();
        existingButtons.button("refresh");
        this.buttons = allButtons.map(function() {
            return $(this).button("widget")[0];
        }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(rtl ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(rtl ? "ui-corner-left" : "ui-corner-right").end().end();
    },
    _destroy: function() {
        this.element.removeClass("ui-buttonset");
        this.buttons.map(function() {
            return $(this).button("widget")[0];
        }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
    }
});

var button = $.ui.button;

$.extend($.ui, {
    datepicker: {
        version: "1.11.1"
    }
});

var datepicker_instActive;

$.extend(Datepicker.prototype, {
    markerClassName: "hasDatepicker",
    maxRows: 4,
    _widgetDatepicker: function() {
        return this.dpDiv;
    },
    setDefaults: function(settings) {
        datepicker_extendRemove(this._defaults, settings || {});
        return this;
    },
    _attachDatepicker: function(target, settings) {
        var nodeName, inline, inst;
        nodeName = target.nodeName.toLowerCase();
        inline = "div" === nodeName || "span" === nodeName;
        if (!target.id) {
            this.uuid += 1;
            target.id = "dp" + this.uuid;
        }
        inst = this._newInst($(target), inline);
        inst.settings = $.extend({}, settings || {});
        "input" === nodeName ? this._connectDatepicker(target, inst) : inline && this._inlineDatepicker(target, inst);
    },
    _newInst: function(target, inline) {
        var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
        return {
            id: id,
            input: target,
            selectedDay: 0,
            selectedMonth: 0,
            selectedYear: 0,
            drawMonth: 0,
            drawYear: 0,
            inline: inline,
            dpDiv: inline ? datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) : this.dpDiv
        };
    },
    _connectDatepicker: function(target, inst) {
        var input = $(target);
        inst.append = $([]);
        inst.trigger = $([]);
        if (!input.hasClass(this.markerClassName)) {
            this._attachments(input, inst);
            input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp);
            this._autoSize(inst);
            $.data(target, "datepicker", inst);
            inst.settings.disabled && this._disableDatepicker(target);
        }
    },
    _attachments: function(input, inst) {
        var showOn, buttonText, buttonImage, appendText = this._get(inst, "appendText"), isRTL = this._get(inst, "isRTL");
        inst.append && inst.append.remove();
        if (appendText) {
            inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
            input[isRTL ? "before" : "after"](inst.append);
        }
        input.unbind("focus", this._showDatepicker);
        inst.trigger && inst.trigger.remove();
        showOn = this._get(inst, "showOn");
        ("focus" === showOn || "both" === showOn) && input.focus(this._showDatepicker);
        if ("button" === showOn || "both" === showOn) {
            buttonText = this._get(inst, "buttonText");
            buttonImage = this._get(inst, "buttonImage");
            inst.trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({
                src: buttonImage,
                alt: buttonText,
                title: buttonText
            }) : $("<button type='button'></button>").addClass(this._triggerClass).html(buttonImage ? $("<img/>").attr({
                src: buttonImage,
                alt: buttonText,
                title: buttonText
            }) : buttonText));
            input[isRTL ? "before" : "after"](inst.trigger);
            inst.trigger.click(function() {
                if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) $.datepicker._hideDatepicker(); else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
                    $.datepicker._hideDatepicker();
                    $.datepicker._showDatepicker(input[0]);
                } else $.datepicker._showDatepicker(input[0]);
                return !1;
            });
        }
    },
    _autoSize: function(inst) {
        if (this._get(inst, "autoSize") && !inst.inline) {
            var findMax, max, maxI, i, date = new Date(2009, 11, 20), dateFormat = this._get(inst, "dateFormat");
            if (dateFormat.match(/[DM]/)) {
                findMax = function(names) {
                    max = 0;
                    maxI = 0;
                    for (i = 0; i < names.length; i++) if (names[i].length > max) {
                        max = names[i].length;
                        maxI = i;
                    }
                    return maxI;
                };
                date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort")));
                date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - date.getDay());
            }
            inst.input.attr("size", this._formatDate(inst, date).length);
        }
    },
    _inlineDatepicker: function(target, inst) {
        var divSpan = $(target);
        if (!divSpan.hasClass(this.markerClassName)) {
            divSpan.addClass(this.markerClassName).append(inst.dpDiv);
            $.data(target, "datepicker", inst);
            this._setDate(inst, this._getDefaultDate(inst), !0);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
            inst.settings.disabled && this._disableDatepicker(target);
            inst.dpDiv.css("display", "block");
        }
    },
    _dialogDatepicker: function(input, date, onSelect, settings, pos) {
        var id, browserWidth, browserHeight, scrollX, scrollY, inst = this._dialogInst;
        if (!inst) {
            this.uuid += 1;
            id = "dp" + this.uuid;
            this._dialogInput = $("<input type='text' id='" + id + "' style='position: absolute; top: -100px; width: 0px;'/>");
            this._dialogInput.keydown(this._doKeyDown);
            $("body").append(this._dialogInput);
            inst = this._dialogInst = this._newInst(this._dialogInput, !1);
            inst.settings = {};
            $.data(this._dialogInput[0], "datepicker", inst);
        }
        datepicker_extendRemove(inst.settings, settings || {});
        date = date && date.constructor === Date ? this._formatDate(inst, date) : date;
        this._dialogInput.val(date);
        this._pos = pos ? pos.length ? pos : [ pos.pageX, pos.pageY ] : null;
        if (!this._pos) {
            browserWidth = document.documentElement.clientWidth;
            browserHeight = document.documentElement.clientHeight;
            scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
            scrollY = document.documentElement.scrollTop || document.body.scrollTop;
            this._pos = [ browserWidth / 2 - 100 + scrollX, browserHeight / 2 - 150 + scrollY ];
        }
        this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px");
        inst.settings.onSelect = onSelect;
        this._inDialog = !0;
        this.dpDiv.addClass(this._dialogClass);
        this._showDatepicker(this._dialogInput[0]);
        $.blockUI && $.blockUI(this.dpDiv);
        $.data(this._dialogInput[0], "datepicker", inst);
        return this;
    },
    _destroyDatepicker: function(target) {
        var nodeName, $target = $(target), inst = $.data(target, "datepicker");
        if ($target.hasClass(this.markerClassName)) {
            nodeName = target.nodeName.toLowerCase();
            $.removeData(target, "datepicker");
            if ("input" === nodeName) {
                inst.append.remove();
                inst.trigger.remove();
                $target.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp);
            } else ("div" === nodeName || "span" === nodeName) && $target.removeClass(this.markerClassName).empty();
        }
    },
    _enableDatepicker: function(target) {
        var nodeName, inline, $target = $(target), inst = $.data(target, "datepicker");
        if ($target.hasClass(this.markerClassName)) {
            nodeName = target.nodeName.toLowerCase();
            if ("input" === nodeName) {
                target.disabled = !1;
                inst.trigger.filter("button").each(function() {
                    this.disabled = !1;
                }).end().filter("img").css({
                    opacity: "1.0",
                    cursor: ""
                });
            } else if ("div" === nodeName || "span" === nodeName) {
                inline = $target.children("." + this._inlineClass);
                inline.children().removeClass("ui-state-disabled");
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !1);
            }
            this._disabledInputs = $.map(this._disabledInputs, function(value) {
                return value === target ? null : value;
            });
        }
    },
    _disableDatepicker: function(target) {
        var nodeName, inline, $target = $(target), inst = $.data(target, "datepicker");
        if ($target.hasClass(this.markerClassName)) {
            nodeName = target.nodeName.toLowerCase();
            if ("input" === nodeName) {
                target.disabled = !0;
                inst.trigger.filter("button").each(function() {
                    this.disabled = !0;
                }).end().filter("img").css({
                    opacity: "0.5",
                    cursor: "default"
                });
            } else if ("div" === nodeName || "span" === nodeName) {
                inline = $target.children("." + this._inlineClass);
                inline.children().addClass("ui-state-disabled");
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !0);
            }
            this._disabledInputs = $.map(this._disabledInputs, function(value) {
                return value === target ? null : value;
            });
            this._disabledInputs[this._disabledInputs.length] = target;
        }
    },
    _isDisabledDatepicker: function(target) {
        if (!target) return !1;
        for (var i = 0; i < this._disabledInputs.length; i++) if (this._disabledInputs[i] === target) return !0;
        return !1;
    },
    _getInst: function(target) {
        try {
            return $.data(target, "datepicker");
        } catch (err) {
            throw "Missing instance data for this datepicker";
        }
    },
    _optionDatepicker: function(target, name, value) {
        var settings, date, minDate, maxDate, inst = this._getInst(target);
        if (2 === arguments.length && "string" == typeof name) return "defaults" === name ? $.extend({}, $.datepicker._defaults) : inst ? "all" === name ? $.extend({}, inst.settings) : this._get(inst, name) : null;
        settings = name || {};
        if ("string" == typeof name) {
            settings = {};
            settings[name] = value;
        }
        if (inst) {
            this._curInst === inst && this._hideDatepicker();
            date = this._getDateDatepicker(target, !0);
            minDate = this._getMinMaxDate(inst, "min");
            maxDate = this._getMinMaxDate(inst, "max");
            datepicker_extendRemove(inst.settings, settings);
            null !== minDate && void 0 !== settings.dateFormat && void 0 === settings.minDate && (inst.settings.minDate = this._formatDate(inst, minDate));
            null !== maxDate && void 0 !== settings.dateFormat && void 0 === settings.maxDate && (inst.settings.maxDate = this._formatDate(inst, maxDate));
            "disabled" in settings && (settings.disabled ? this._disableDatepicker(target) : this._enableDatepicker(target));
            this._attachments($(target), inst);
            this._autoSize(inst);
            this._setDate(inst, date);
            this._updateAlternate(inst);
            this._updateDatepicker(inst);
        }
    },
    _changeDatepicker: function(target, name, value) {
        this._optionDatepicker(target, name, value);
    },
    _refreshDatepicker: function(target) {
        var inst = this._getInst(target);
        inst && this._updateDatepicker(inst);
    },
    _setDateDatepicker: function(target, date) {
        var inst = this._getInst(target);
        if (inst) {
            this._setDate(inst, date);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
        }
    },
    _getDateDatepicker: function(target, noDefault) {
        var inst = this._getInst(target);
        inst && !inst.inline && this._setDateFromField(inst, noDefault);
        return inst ? this._getDate(inst) : null;
    },
    _doKeyDown: function(event) {
        var onSelect, dateStr, sel, inst = $.datepicker._getInst(event.target), handled = !0, isRTL = inst.dpDiv.is(".ui-datepicker-rtl");
        inst._keyEvent = !0;
        if ($.datepicker._datepickerShowing) switch (event.keyCode) {
          case 9:
            $.datepicker._hideDatepicker();
            handled = !1;
            break;

          case 13:
            sel = $("td." + $.datepicker._dayOverClass + ":not(." + $.datepicker._currentClass + ")", inst.dpDiv);
            sel[0] && $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
            onSelect = $.datepicker._get(inst, "onSelect");
            if (onSelect) {
                dateStr = $.datepicker._formatDate(inst);
                onSelect.apply(inst.input ? inst.input[0] : null, [ dateStr, inst ]);
            } else $.datepicker._hideDatepicker();
            return !1;

          case 27:
            $.datepicker._hideDatepicker();
            break;

          case 33:
            $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
            break;

          case 34:
            $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
            break;

          case 35:
            (event.ctrlKey || event.metaKey) && $.datepicker._clearDate(event.target);
            handled = event.ctrlKey || event.metaKey;
            break;

          case 36:
            (event.ctrlKey || event.metaKey) && $.datepicker._gotoToday(event.target);
            handled = event.ctrlKey || event.metaKey;
            break;

          case 37:
            (event.ctrlKey || event.metaKey) && $.datepicker._adjustDate(event.target, isRTL ? 1 : -1, "D");
            handled = event.ctrlKey || event.metaKey;
            event.originalEvent.altKey && $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
            break;

          case 38:
            (event.ctrlKey || event.metaKey) && $.datepicker._adjustDate(event.target, -7, "D");
            handled = event.ctrlKey || event.metaKey;
            break;

          case 39:
            (event.ctrlKey || event.metaKey) && $.datepicker._adjustDate(event.target, isRTL ? -1 : 1, "D");
            handled = event.ctrlKey || event.metaKey;
            event.originalEvent.altKey && $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
            break;

          case 40:
            (event.ctrlKey || event.metaKey) && $.datepicker._adjustDate(event.target, 7, "D");
            handled = event.ctrlKey || event.metaKey;
            break;

          default:
            handled = !1;
        } else 36 === event.keyCode && event.ctrlKey ? $.datepicker._showDatepicker(this) : handled = !1;
        if (handled) {
            event.preventDefault();
            event.stopPropagation();
        }
    },
    _doKeyPress: function(event) {
        var chars, chr, inst = $.datepicker._getInst(event.target);
        if ($.datepicker._get(inst, "constrainInput")) {
            chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
            chr = String.fromCharCode(null == event.charCode ? event.keyCode : event.charCode);
            return event.ctrlKey || event.metaKey || " " > chr || !chars || chars.indexOf(chr) > -1;
        }
    },
    _doKeyUp: function(event) {
        var date, inst = $.datepicker._getInst(event.target);
        if (inst.input.val() !== inst.lastVal) try {
            date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst));
            if (date) {
                $.datepicker._setDateFromField(inst);
                $.datepicker._updateAlternate(inst);
                $.datepicker._updateDatepicker(inst);
            }
        } catch (err) {}
        return !0;
    },
    _showDatepicker: function(input) {
        input = input.target || input;
        "input" !== input.nodeName.toLowerCase() && (input = $("input", input.parentNode)[0]);
        if (!$.datepicker._isDisabledDatepicker(input) && $.datepicker._lastInput !== input) {
            var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;
            inst = $.datepicker._getInst(input);
            if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
                $.datepicker._curInst.dpDiv.stop(!0, !0);
                inst && $.datepicker._datepickerShowing && $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);
            }
            beforeShow = $.datepicker._get(inst, "beforeShow");
            beforeShowSettings = beforeShow ? beforeShow.apply(input, [ input, inst ]) : {};
            if (beforeShowSettings !== !1) {
                datepicker_extendRemove(inst.settings, beforeShowSettings);
                inst.lastVal = null;
                $.datepicker._lastInput = input;
                $.datepicker._setDateFromField(inst);
                $.datepicker._inDialog && (input.value = "");
                if (!$.datepicker._pos) {
                    $.datepicker._pos = $.datepicker._findPos(input);
                    $.datepicker._pos[1] += input.offsetHeight;
                }
                isFixed = !1;
                $(input).parents().each(function() {
                    isFixed |= "fixed" === $(this).css("position");
                    return !isFixed;
                });
                offset = {
                    left: $.datepicker._pos[0],
                    top: $.datepicker._pos[1]
                };
                $.datepicker._pos = null;
                inst.dpDiv.empty();
                inst.dpDiv.css({
                    position: "absolute",
                    display: "block",
                    top: "-1000px"
                });
                $.datepicker._updateDatepicker(inst);
                offset = $.datepicker._checkOffset(inst, offset, isFixed);
                inst.dpDiv.css({
                    position: $.datepicker._inDialog && $.blockUI ? "static" : isFixed ? "fixed" : "absolute",
                    display: "none",
                    left: offset.left + "px",
                    top: offset.top + "px"
                });
                if (!inst.inline) {
                    showAnim = $.datepicker._get(inst, "showAnim");
                    duration = $.datepicker._get(inst, "duration");
                    inst.dpDiv.css("z-index", datepicker_getZindex($(input)) + 1);
                    $.datepicker._datepickerShowing = !0;
                    $.effects && $.effects.effect[showAnim] ? inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration) : inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
                    $.datepicker._shouldFocusInput(inst) && inst.input.focus();
                    $.datepicker._curInst = inst;
                }
            }
        }
    },
    _updateDatepicker: function(inst) {
        this.maxRows = 4;
        datepicker_instActive = inst;
        inst.dpDiv.empty().append(this._generateHTML(inst));
        this._attachHandlers(inst);
        var origyearshtml, numMonths = this._getNumberOfMonths(inst), cols = numMonths[1], width = 17, activeCell = inst.dpDiv.find("." + this._dayOverClass + " a");
        activeCell.length > 0 && datepicker_handleMouseover.apply(activeCell.get(0));
        inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
        cols > 1 && inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", width * cols + "em");
        inst.dpDiv[(1 !== numMonths[0] || 1 !== numMonths[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi");
        inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
        inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst) && inst.input.focus();
        if (inst.yearshtml) {
            origyearshtml = inst.yearshtml;
            setTimeout(function() {
                origyearshtml === inst.yearshtml && inst.yearshtml && inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
                origyearshtml = inst.yearshtml = null;
            }, 0);
        }
    },
    _shouldFocusInput: function(inst) {
        return inst.input && inst.input.is(":visible") && !inst.input.is(":disabled") && !inst.input.is(":focus");
    },
    _checkOffset: function(inst, offset, isFixed) {
        var dpWidth = inst.dpDiv.outerWidth(), dpHeight = inst.dpDiv.outerHeight(), inputWidth = inst.input ? inst.input.outerWidth() : 0, inputHeight = inst.input ? inst.input.outerHeight() : 0, viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()), viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());
        offset.left -= this._get(inst, "isRTL") ? dpWidth - inputWidth : 0;
        offset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0;
        offset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0;
        offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
        offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);
        return offset;
    },
    _findPos: function(obj) {
        for (var position, inst = this._getInst(obj), isRTL = this._get(inst, "isRTL"); obj && ("hidden" === obj.type || 1 !== obj.nodeType || $.expr.filters.hidden(obj)); ) obj = obj[isRTL ? "previousSibling" : "nextSibling"];
        position = $(obj).offset();
        return [ position.left, position.top ];
    },
    _hideDatepicker: function(input) {
        var showAnim, duration, postProcess, onClose, inst = this._curInst;
        if (inst && (!input || inst === $.data(input, "datepicker")) && this._datepickerShowing) {
            showAnim = this._get(inst, "showAnim");
            duration = this._get(inst, "duration");
            postProcess = function() {
                $.datepicker._tidyDialog(inst);
            };
            $.effects && ($.effects.effect[showAnim] || $.effects[showAnim]) ? inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess) : inst.dpDiv["slideDown" === showAnim ? "slideUp" : "fadeIn" === showAnim ? "fadeOut" : "hide"](showAnim ? duration : null, postProcess);
            showAnim || postProcess();
            this._datepickerShowing = !1;
            onClose = this._get(inst, "onClose");
            onClose && onClose.apply(inst.input ? inst.input[0] : null, [ inst.input ? inst.input.val() : "", inst ]);
            this._lastInput = null;
            if (this._inDialog) {
                this._dialogInput.css({
                    position: "absolute",
                    left: "0",
                    top: "-100px"
                });
                if ($.blockUI) {
                    $.unblockUI();
                    $("body").append(this.dpDiv);
                }
            }
            this._inDialog = !1;
        }
    },
    _tidyDialog: function(inst) {
        inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
    },
    _checkExternalClick: function(event) {
        if ($.datepicker._curInst) {
            var $target = $(event.target), inst = $.datepicker._getInst($target[0]);
            ($target[0].id !== $.datepicker._mainDivId && 0 === $target.parents("#" + $.datepicker._mainDivId).length && !$target.hasClass($.datepicker.markerClassName) && !$target.closest("." + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && (!$.datepicker._inDialog || !$.blockUI) || $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst) && $.datepicker._hideDatepicker();
        }
    },
    _adjustDate: function(id, offset, period) {
        var target = $(id), inst = this._getInst(target[0]);
        if (!this._isDisabledDatepicker(target[0])) {
            this._adjustInstDate(inst, offset + ("M" === period ? this._get(inst, "showCurrentAtPos") : 0), period);
            this._updateDatepicker(inst);
        }
    },
    _gotoToday: function(id) {
        var date, target = $(id), inst = this._getInst(target[0]);
        if (this._get(inst, "gotoCurrent") && inst.currentDay) {
            inst.selectedDay = inst.currentDay;
            inst.drawMonth = inst.selectedMonth = inst.currentMonth;
            inst.drawYear = inst.selectedYear = inst.currentYear;
        } else {
            date = new Date();
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
        }
        this._notifyChange(inst);
        this._adjustDate(target);
    },
    _selectMonthYear: function(id, select, period) {
        var target = $(id), inst = this._getInst(target[0]);
        inst["selected" + ("M" === period ? "Month" : "Year")] = inst["draw" + ("M" === period ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);
        this._notifyChange(inst);
        this._adjustDate(target);
    },
    _selectDay: function(id, month, year, td) {
        var inst, target = $(id);
        if (!$(td).hasClass(this._unselectableClass) && !this._isDisabledDatepicker(target[0])) {
            inst = this._getInst(target[0]);
            inst.selectedDay = inst.currentDay = $("a", td).html();
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
        }
    },
    _clearDate: function(id) {
        var target = $(id);
        this._selectDate(target, "");
    },
    _selectDate: function(id, dateStr) {
        var onSelect, target = $(id), inst = this._getInst(target[0]);
        dateStr = null != dateStr ? dateStr : this._formatDate(inst);
        inst.input && inst.input.val(dateStr);
        this._updateAlternate(inst);
        onSelect = this._get(inst, "onSelect");
        onSelect ? onSelect.apply(inst.input ? inst.input[0] : null, [ dateStr, inst ]) : inst.input && inst.input.trigger("change");
        if (inst.inline) this._updateDatepicker(inst); else {
            this._hideDatepicker();
            this._lastInput = inst.input[0];
            "object" != typeof inst.input[0] && inst.input.focus();
            this._lastInput = null;
        }
    },
    _updateAlternate: function(inst) {
        var altFormat, date, dateStr, altField = this._get(inst, "altField");
        if (altField) {
            altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
            date = this._getDate(inst);
            dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
            $(altField).each(function() {
                $(this).val(dateStr);
            });
        }
    },
    noWeekends: function(date) {
        var day = date.getDay();
        return [ day > 0 && 6 > day, "" ];
    },
    iso8601Week: function(date) {
        var time, checkDate = new Date(date.getTime());
        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
        time = checkDate.getTime();
        checkDate.setMonth(0);
        checkDate.setDate(1);
        return Math.floor(Math.round((time - checkDate) / 864e5) / 7) + 1;
    },
    parseDate: function(format, value, settings) {
        if (null == format || null == value) throw "Invalid arguments";
        value = "object" == typeof value ? value.toString() : value + "";
        if ("" === value) return null;
        var iFormat, dim, extra, date, iValue = 0, shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff, shortYearCutoff = "string" != typeof shortYearCutoffTemp ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10), dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, year = -1, month = -1, day = -1, doy = -1, literal = !1, lookAhead = function(match) {
            var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
            matches && iFormat++;
            return matches;
        }, getNumber = function(match) {
            var isDoubled = lookAhead(match), size = "@" === match ? 14 : "!" === match ? 20 : "y" === match && isDoubled ? 4 : "o" === match ? 3 : 2, minSize = "y" === match ? size : 1, digits = new RegExp("^\\d{" + minSize + "," + size + "}"), num = value.substring(iValue).match(digits);
            if (!num) throw "Missing number at position " + iValue;
            iValue += num[0].length;
            return parseInt(num[0], 10);
        }, getName = function(match, shortNames, longNames) {
            var index = -1, names = $.map(lookAhead(match) ? longNames : shortNames, function(v, k) {
                return [ [ k, v ] ];
            }).sort(function(a, b) {
                return -(a[1].length - b[1].length);
            });
            $.each(names, function(i, pair) {
                var name = pair[1];
                if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                    index = pair[0];
                    iValue += name.length;
                    return !1;
                }
            });
            if (-1 !== index) return index + 1;
            throw "Unknown name at position " + iValue;
        }, checkLiteral = function() {
            if (value.charAt(iValue) !== format.charAt(iFormat)) throw "Unexpected literal at position " + iValue;
            iValue++;
        };
        for (iFormat = 0; iFormat < format.length; iFormat++) if (literal) "'" !== format.charAt(iFormat) || lookAhead("'") ? checkLiteral() : literal = !1; else switch (format.charAt(iFormat)) {
          case "d":
            day = getNumber("d");
            break;

          case "D":
            getName("D", dayNamesShort, dayNames);
            break;

          case "o":
            doy = getNumber("o");
            break;

          case "m":
            month = getNumber("m");
            break;

          case "M":
            month = getName("M", monthNamesShort, monthNames);
            break;

          case "y":
            year = getNumber("y");
            break;

          case "@":
            date = new Date(getNumber("@"));
            year = date.getFullYear();
            month = date.getMonth() + 1;
            day = date.getDate();
            break;

          case "!":
            date = new Date((getNumber("!") - this._ticksTo1970) / 1e4);
            year = date.getFullYear();
            month = date.getMonth() + 1;
            day = date.getDate();
            break;

          case "'":
            lookAhead("'") ? checkLiteral() : literal = !0;
            break;

          default:
            checkLiteral();
        }
        if (iValue < value.length) {
            extra = value.substr(iValue);
            if (!/^\s+/.test(extra)) throw "Extra/unparsed characters found in date: " + extra;
        }
        -1 === year ? year = new Date().getFullYear() : 100 > year && (year += new Date().getFullYear() - new Date().getFullYear() % 100 + (shortYearCutoff >= year ? 0 : -100));
        if (doy > -1) {
            month = 1;
            day = doy;
            for (;;) {
                dim = this._getDaysInMonth(year, month - 1);
                if (dim >= day) break;
                month++;
                day -= dim;
            }
        }
        date = this._daylightSavingAdjust(new Date(year, month - 1, day));
        if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) throw "Invalid date";
        return date;
    },
    ATOM: "yy-mm-dd",
    COOKIE: "D, dd M yy",
    ISO_8601: "yy-mm-dd",
    RFC_822: "D, d M y",
    RFC_850: "DD, dd-M-y",
    RFC_1036: "D, d M y",
    RFC_1123: "D, d M yy",
    RFC_2822: "D, d M yy",
    RSS: "D, d M y",
    TICKS: "!",
    TIMESTAMP: "@",
    W3C: "yy-mm-dd",
    _ticksTo1970: 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)) * 60 * 60 * 1e7,
    formatDate: function(format, date, settings) {
        if (!date) return "";
        var iFormat, dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, lookAhead = function(match) {
            var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
            matches && iFormat++;
            return matches;
        }, formatNumber = function(match, value, len) {
            var num = "" + value;
            if (lookAhead(match)) for (;num.length < len; ) num = "0" + num;
            return num;
        }, formatName = function(match, value, shortNames, longNames) {
            return lookAhead(match) ? longNames[value] : shortNames[value];
        }, output = "", literal = !1;
        if (date) for (iFormat = 0; iFormat < format.length; iFormat++) if (literal) "'" !== format.charAt(iFormat) || lookAhead("'") ? output += format.charAt(iFormat) : literal = !1; else switch (format.charAt(iFormat)) {
          case "d":
            output += formatNumber("d", date.getDate(), 2);
            break;

          case "D":
            output += formatName("D", date.getDay(), dayNamesShort, dayNames);
            break;

          case "o":
            output += formatNumber("o", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 864e5), 3);
            break;

          case "m":
            output += formatNumber("m", date.getMonth() + 1, 2);
            break;

          case "M":
            output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
            break;

          case "y":
            output += lookAhead("y") ? date.getFullYear() : (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100;
            break;

          case "@":
            output += date.getTime();
            break;

          case "!":
            output += 1e4 * date.getTime() + this._ticksTo1970;
            break;

          case "'":
            lookAhead("'") ? output += "'" : literal = !0;
            break;

          default:
            output += format.charAt(iFormat);
        }
        return output;
    },
    _possibleChars: function(format) {
        var iFormat, chars = "", literal = !1, lookAhead = function(match) {
            var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
            matches && iFormat++;
            return matches;
        };
        for (iFormat = 0; iFormat < format.length; iFormat++) if (literal) "'" !== format.charAt(iFormat) || lookAhead("'") ? chars += format.charAt(iFormat) : literal = !1; else switch (format.charAt(iFormat)) {
          case "d":
          case "m":
          case "y":
          case "@":
            chars += "0123456789";
            break;

          case "D":
          case "M":
            return null;

          case "'":
            lookAhead("'") ? chars += "'" : literal = !0;
            break;

          default:
            chars += format.charAt(iFormat);
        }
        return chars;
    },
    _get: function(inst, name) {
        return void 0 !== inst.settings[name] ? inst.settings[name] : this._defaults[name];
    },
    _setDateFromField: function(inst, noDefault) {
        if (inst.input.val() !== inst.lastVal) {
            var dateFormat = this._get(inst, "dateFormat"), dates = inst.lastVal = inst.input ? inst.input.val() : null, defaultDate = this._getDefaultDate(inst), date = defaultDate, settings = this._getFormatConfig(inst);
            try {
                date = this.parseDate(dateFormat, dates, settings) || defaultDate;
            } catch (event) {
                dates = noDefault ? "" : dates;
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = dates ? date.getDate() : 0;
            inst.currentMonth = dates ? date.getMonth() : 0;
            inst.currentYear = dates ? date.getFullYear() : 0;
            this._adjustInstDate(inst);
        }
    },
    _getDefaultDate: function(inst) {
        return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
    },
    _determineDate: function(inst, date, defaultDate) {
        var offsetNumeric = function(offset) {
            var date = new Date();
            date.setDate(date.getDate() + offset);
            return date;
        }, offsetString = function(offset) {
            try {
                return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), offset, $.datepicker._getFormatConfig(inst));
            } catch (e) {}
            for (var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(), year = date.getFullYear(), month = date.getMonth(), day = date.getDate(), pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, matches = pattern.exec(offset); matches; ) {
                switch (matches[2] || "d") {
                  case "d":
                  case "D":
                    day += parseInt(matches[1], 10);
                    break;

                  case "w":
                  case "W":
                    day += 7 * parseInt(matches[1], 10);
                    break;

                  case "m":
                  case "M":
                    month += parseInt(matches[1], 10);
                    day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                    break;

                  case "y":
                  case "Y":
                    year += parseInt(matches[1], 10);
                    day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                }
                matches = pattern.exec(offset);
            }
            return new Date(year, month, day);
        }, newDate = null == date || "" === date ? defaultDate : "string" == typeof date ? offsetString(date) : "number" == typeof date ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());
        newDate = newDate && "Invalid Date" === newDate.toString() ? defaultDate : newDate;
        if (newDate) {
            newDate.setHours(0);
            newDate.setMinutes(0);
            newDate.setSeconds(0);
            newDate.setMilliseconds(0);
        }
        return this._daylightSavingAdjust(newDate);
    },
    _daylightSavingAdjust: function(date) {
        if (!date) return null;
        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
        return date;
    },
    _setDate: function(inst, date, noChange) {
        var clear = !date, origMonth = inst.selectedMonth, origYear = inst.selectedYear, newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
        inst.selectedDay = inst.currentDay = newDate.getDate();
        inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
        inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
        origMonth === inst.selectedMonth && origYear === inst.selectedYear || noChange || this._notifyChange(inst);
        this._adjustInstDate(inst);
        inst.input && inst.input.val(clear ? "" : this._formatDate(inst));
    },
    _getDate: function(inst) {
        var startDate = !inst.currentYear || inst.input && "" === inst.input.val() ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
        return startDate;
    },
    _attachHandlers: function(inst) {
        var stepMonths = this._get(inst, "stepMonths"), id = "#" + inst.id.replace(/\\\\/g, "\\");
        inst.dpDiv.find("[data-handler]").map(function() {
            var handler = {
                prev: function() {
                    $.datepicker._adjustDate(id, -stepMonths, "M");
                },
                next: function() {
                    $.datepicker._adjustDate(id, +stepMonths, "M");
                },
                hide: function() {
                    $.datepicker._hideDatepicker();
                },
                today: function() {
                    $.datepicker._gotoToday(id);
                },
                selectDay: function() {
                    $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
                    return !1;
                },
                selectMonth: function() {
                    $.datepicker._selectMonthYear(id, this, "M");
                    return !1;
                },
                selectYear: function() {
                    $.datepicker._selectMonthYear(id, this, "Y");
                    return !1;
                }
            };
            $(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
        });
    },
    _generateHTML: function(inst) {
        var maxDraw, prevText, prev, nextText, next, currentText, gotoDate, controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin, monthNames, monthNamesShort, beforeShowDay, showOtherMonths, selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate, cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows, printDate, dRow, tbody, daySettings, otherMonth, unselectable, tempDate = new Date(), today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), isRTL = this._get(inst, "isRTL"), showButtonPanel = this._get(inst, "showButtonPanel"), hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"), navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"), numMonths = this._getNumberOfMonths(inst), showCurrentAtPos = this._get(inst, "showCurrentAtPos"), stepMonths = this._get(inst, "stepMonths"), isMultiMonth = 1 !== numMonths[0] || 1 !== numMonths[1], currentDate = this._daylightSavingAdjust(inst.currentDay ? new Date(inst.currentYear, inst.currentMonth, inst.currentDay) : new Date(9999, 9, 9)), minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), drawMonth = inst.drawMonth - showCurrentAtPos, drawYear = inst.drawYear;
        if (0 > drawMonth) {
            drawMonth += 12;
            drawYear--;
        }
        if (maxDate) {
            maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));
            maxDraw = minDate && minDate > maxDraw ? minDate : maxDraw;
            for (;this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw; ) {
                drawMonth--;
                if (0 > drawMonth) {
                    drawMonth = 11;
                    drawYear--;
                }
            }
        }
        inst.drawMonth = drawMonth;
        inst.drawYear = drawYear;
        prevText = this._get(inst, "prevText");
        prevText = navigationAsDateFormat ? this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst)) : prevText;
        prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>";
        nextText = this._get(inst, "nextText");
        nextText = navigationAsDateFormat ? this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst)) : nextText;
        next = this._canAdjustMonth(inst, 1, drawYear, drawMonth) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>";
        currentText = this._get(inst, "currentText");
        gotoDate = this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today;
        currentText = navigationAsDateFormat ? this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)) : currentText;
        controls = inst.inline ? "" : "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(inst, "closeText") + "</button>";
        buttonPanel = showButtonPanel ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") + (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";
        firstDay = parseInt(this._get(inst, "firstDay"), 10);
        firstDay = isNaN(firstDay) ? 0 : firstDay;
        showWeek = this._get(inst, "showWeek");
        dayNames = this._get(inst, "dayNames");
        dayNamesMin = this._get(inst, "dayNamesMin");
        monthNames = this._get(inst, "monthNames");
        monthNamesShort = this._get(inst, "monthNamesShort");
        beforeShowDay = this._get(inst, "beforeShowDay");
        showOtherMonths = this._get(inst, "showOtherMonths");
        selectOtherMonths = this._get(inst, "selectOtherMonths");
        defaultDate = this._getDefaultDate(inst);
        html = "";
        for (row = 0; row < numMonths[0]; row++) {
            group = "";
            this.maxRows = 4;
            for (col = 0; col < numMonths[1]; col++) {
                selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                cornerClass = " ui-corner-all";
                calender = "";
                if (isMultiMonth) {
                    calender += "<div class='ui-datepicker-group";
                    if (numMonths[1] > 1) switch (col) {
                      case 0:
                        calender += " ui-datepicker-group-first";
                        cornerClass = " ui-corner-" + (isRTL ? "right" : "left");
                        break;

                      case numMonths[1] - 1:
                        calender += " ui-datepicker-group-last";
                        cornerClass = " ui-corner-" + (isRTL ? "left" : "right");
                        break;

                      default:
                        calender += " ui-datepicker-group-middle";
                        cornerClass = "";
                    }
                    calender += "'>";
                }
                calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" + (/all|left/.test(cornerClass) && 0 === row ? isRTL ? next : prev : "") + (/all|right/.test(cornerClass) && 0 === row ? isRTL ? prev : next : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + "</div><table class='ui-datepicker-calendar'><thead><tr>";
                thead = showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "";
                for (dow = 0; 7 > dow; dow++) {
                    day = (dow + firstDay) % 7;
                    thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + "><span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
                }
                calender += thead + "</tr></thead><tbody>";
                daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                drawYear === inst.selectedYear && drawMonth === inst.selectedMonth && (inst.selectedDay = Math.min(inst.selectedDay, daysInMonth));
                leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                curRows = Math.ceil((leadDays + daysInMonth) / 7);
                numRows = isMultiMonth && this.maxRows > curRows ? this.maxRows : curRows;
                this.maxRows = numRows;
                printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                for (dRow = 0; numRows > dRow; dRow++) {
                    calender += "<tr>";
                    tbody = showWeek ? "<td class='ui-datepicker-week-col'>" + this._get(inst, "calculateWeek")(printDate) + "</td>" : "";
                    for (dow = 0; 7 > dow; dow++) {
                        daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [ printDate ]) : [ !0, "" ];
                        otherMonth = printDate.getMonth() !== drawMonth;
                        unselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && minDate > printDate || maxDate && printDate > maxDate;
                        tbody += "<td class='" + ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (otherMonth ? " ui-datepicker-other-month" : "") + (printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ? " " + this._dayOverClass : "") + (unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + (printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + (otherMonth && !showOtherMonths || !daySettings[2] ? "" : " title='" + daySettings[2].replace(/'/g, "&#39;") + "'") + (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + (otherMonth && !showOtherMonths ? "&#xa0;" : unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" + (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + (otherMonth ? " ui-priority-secondary" : "") + "' href='#'>" + printDate.getDate() + "</a>") + "</td>";
                        printDate.setDate(printDate.getDate() + 1);
                        printDate = this._daylightSavingAdjust(printDate);
                    }
                    calender += tbody + "</tr>";
                }
                drawMonth++;
                if (drawMonth > 11) {
                    drawMonth = 0;
                    drawYear++;
                }
                calender += "</tbody></table>" + (isMultiMonth ? "</div>" + (numMonths[0] > 0 && col === numMonths[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
                group += calender;
            }
            html += group;
        }
        html += buttonPanel;
        inst._keyEvent = !1;
        return html;
    },
    _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
        var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear, changeMonth = this._get(inst, "changeMonth"), changeYear = this._get(inst, "changeYear"), showMonthAfterYear = this._get(inst, "showMonthAfterYear"), html = "<div class='ui-datepicker-title'>", monthHtml = "";
        if (secondary || !changeMonth) monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>"; else {
            inMinYear = minDate && minDate.getFullYear() === drawYear;
            inMaxYear = maxDate && maxDate.getFullYear() === drawYear;
            monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
            for (month = 0; 12 > month; month++) (!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth()) && (monthHtml += "<option value='" + month + "'" + (month === drawMonth ? " selected='selected'" : "") + ">" + monthNamesShort[month] + "</option>");
            monthHtml += "</select>";
        }
        showMonthAfterYear || (html += monthHtml + (!secondary && changeMonth && changeYear ? "" : "&#xa0;"));
        if (!inst.yearshtml) {
            inst.yearshtml = "";
            if (secondary || !changeYear) html += "<span class='ui-datepicker-year'>" + drawYear + "</span>"; else {
                years = this._get(inst, "yearRange").split(":");
                thisYear = new Date().getFullYear();
                determineYear = function(value) {
                    var year = value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);
                    return isNaN(year) ? thisYear : year;
                };
                year = determineYear(years[0]);
                endYear = Math.max(year, determineYear(years[1] || ""));
                year = minDate ? Math.max(year, minDate.getFullYear()) : year;
                endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;
                inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
                for (;endYear >= year; year++) inst.yearshtml += "<option value='" + year + "'" + (year === drawYear ? " selected='selected'" : "") + ">" + year + "</option>";
                inst.yearshtml += "</select>";
                html += inst.yearshtml;
                inst.yearshtml = null;
            }
        }
        html += this._get(inst, "yearSuffix");
        showMonthAfterYear && (html += (!secondary && changeMonth && changeYear ? "" : "&#xa0;") + monthHtml);
        html += "</div>";
        return html;
    },
    _adjustInstDate: function(inst, offset, period) {
        var year = inst.drawYear + ("Y" === period ? offset : 0), month = inst.drawMonth + ("M" === period ? offset : 0), day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + ("D" === period ? offset : 0), date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));
        inst.selectedDay = date.getDate();
        inst.drawMonth = inst.selectedMonth = date.getMonth();
        inst.drawYear = inst.selectedYear = date.getFullYear();
        ("M" === period || "Y" === period) && this._notifyChange(inst);
    },
    _restrictMinMax: function(inst, date) {
        var minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), newDate = minDate && minDate > date ? minDate : date;
        return maxDate && newDate > maxDate ? maxDate : newDate;
    },
    _notifyChange: function(inst) {
        var onChange = this._get(inst, "onChangeMonthYear");
        onChange && onChange.apply(inst.input ? inst.input[0] : null, [ inst.selectedYear, inst.selectedMonth + 1, inst ]);
    },
    _getNumberOfMonths: function(inst) {
        var numMonths = this._get(inst, "numberOfMonths");
        return null == numMonths ? [ 1, 1 ] : "number" == typeof numMonths ? [ 1, numMonths ] : numMonths;
    },
    _getMinMaxDate: function(inst, minMax) {
        return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
    },
    _getDaysInMonth: function(year, month) {
        return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
    },
    _getFirstDayOfMonth: function(year, month) {
        return new Date(year, month, 1).getDay();
    },
    _canAdjustMonth: function(inst, offset, curYear, curMonth) {
        var numMonths = this._getNumberOfMonths(inst), date = this._daylightSavingAdjust(new Date(curYear, curMonth + (0 > offset ? offset : numMonths[0] * numMonths[1]), 1));
        0 > offset && date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
        return this._isInRange(inst, date);
    },
    _isInRange: function(inst, date) {
        var yearSplit, currentYear, minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), minYear = null, maxYear = null, years = this._get(inst, "yearRange");
        if (years) {
            yearSplit = years.split(":");
            currentYear = new Date().getFullYear();
            minYear = parseInt(yearSplit[0], 10);
            maxYear = parseInt(yearSplit[1], 10);
            yearSplit[0].match(/[+\-].*/) && (minYear += currentYear);
            yearSplit[1].match(/[+\-].*/) && (maxYear += currentYear);
        }
        return (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear);
    },
    _getFormatConfig: function(inst) {
        var shortYearCutoff = this._get(inst, "shortYearCutoff");
        shortYearCutoff = "string" != typeof shortYearCutoff ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10);
        return {
            shortYearCutoff: shortYearCutoff,
            dayNamesShort: this._get(inst, "dayNamesShort"),
            dayNames: this._get(inst, "dayNames"),
            monthNamesShort: this._get(inst, "monthNamesShort"),
            monthNames: this._get(inst, "monthNames")
        };
    },
    _formatDate: function(inst, day, month, year) {
        if (!day) {
            inst.currentDay = inst.selectedDay;
            inst.currentMonth = inst.selectedMonth;
            inst.currentYear = inst.selectedYear;
        }
        var date = day ? "object" == typeof day ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
        return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
    }
});

$.fn.datepicker = function(options) {
    if (!this.length) return this;
    if (!$.datepicker.initialized) {
        $(document).mousedown($.datepicker._checkExternalClick);
        $.datepicker.initialized = !0;
    }
    0 === $("#" + $.datepicker._mainDivId).length && $("body").append($.datepicker.dpDiv);
    var otherArgs = Array.prototype.slice.call(arguments, 1);
    return "string" != typeof options || "isDisabled" !== options && "getDate" !== options && "widget" !== options ? "option" === options && 2 === arguments.length && "string" == typeof arguments[1] ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this[0] ].concat(otherArgs)) : this.each(function() {
        "string" == typeof options ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this ].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);
    }) : $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this[0] ].concat(otherArgs));
};

$.datepicker = new Datepicker();

$.datepicker.initialized = !1;

$.datepicker.uuid = new Date().getTime();

$.datepicker.version = "1.11.1";

var datepicker = $.datepicker;

$.widget("ui.draggable", $.ui.mouse, {
    version: "1.11.1",
    widgetEventPrefix: "drag",
    options: {
        addClasses: !0,
        appendTo: "parent",
        axis: !1,
        connectToSortable: !1,
        containment: !1,
        cursor: "auto",
        cursorAt: !1,
        grid: !1,
        handle: !1,
        helper: "original",
        iframeFix: !1,
        opacity: !1,
        refreshPositions: !1,
        revert: !1,
        revertDuration: 500,
        scope: "default",
        scroll: !0,
        scrollSensitivity: 20,
        scrollSpeed: 20,
        snap: !1,
        snapMode: "both",
        snapTolerance: 20,
        stack: !1,
        zIndex: !1,
        drag: null,
        start: null,
        stop: null
    },
    _create: function() {
        "original" !== this.options.helper || /^(?:r|a|f)/.test(this.element.css("position")) || (this.element[0].style.position = "relative");
        this.options.addClasses && this.element.addClass("ui-draggable");
        this.options.disabled && this.element.addClass("ui-draggable-disabled");
        this._setHandleClassName();
        this._mouseInit();
    },
    _setOption: function(key, value) {
        this._super(key, value);
        if ("handle" === key) {
            this._removeHandleClassName();
            this._setHandleClassName();
        }
    },
    _destroy: function() {
        if ((this.helper || this.element).is(".ui-draggable-dragging")) this.destroyOnClear = !0; else {
            this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
            this._removeHandleClassName();
            this._mouseDestroy();
        }
    },
    _mouseCapture: function(event) {
        var document = this.document[0], o = this.options;
        try {
            document.activeElement && "body" !== document.activeElement.nodeName.toLowerCase() && $(document.activeElement).blur();
        } catch (error) {}
        if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) return !1;
        this.handle = this._getHandle(event);
        if (!this.handle) return !1;
        $(o.iframeFix === !0 ? "iframe" : o.iframeFix).each(function() {
            $("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>").css({
                width: this.offsetWidth + "px",
                height: this.offsetHeight + "px",
                position: "absolute",
                opacity: "0.001",
                zIndex: 1e3
            }).css($(this).offset()).appendTo("body");
        });
        return !0;
    },
    _mouseStart: function(event) {
        var o = this.options;
        this.helper = this._createHelper(event);
        this.helper.addClass("ui-draggable-dragging");
        this._cacheHelperProportions();
        $.ui.ddmanager && ($.ui.ddmanager.current = this);
        this._cacheMargins();
        this.cssPosition = this.helper.css("position");
        this.scrollParent = this.helper.scrollParent(!0);
        this.offsetParent = this.helper.offsetParent();
        this.offsetParentCssPosition = this.offsetParent.css("position");
        this.offset = this.positionAbs = this.element.offset();
        this.offset = {
            top: this.offset.top - this.margins.top,
            left: this.offset.left - this.margins.left
        };
        this.offset.scroll = !1;
        $.extend(this.offset, {
            click: {
                left: event.pageX - this.offset.left,
                top: event.pageY - this.offset.top
            },
            parent: this._getParentOffset(),
            relative: this._getRelativeOffset()
        });
        this.originalPosition = this.position = this._generatePosition(event, !1);
        this.originalPageX = event.pageX;
        this.originalPageY = event.pageY;
        o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
        this._setContainment();
        if (this._trigger("start", event) === !1) {
            this._clear();
            return !1;
        }
        this._cacheHelperProportions();
        $.ui.ddmanager && !o.dropBehaviour && $.ui.ddmanager.prepareOffsets(this, event);
        this._mouseDrag(event, !0);
        $.ui.ddmanager && $.ui.ddmanager.dragStart(this, event);
        return !0;
    },
    _mouseDrag: function(event, noPropagation) {
        "fixed" === this.offsetParentCssPosition && (this.offset.parent = this._getParentOffset());
        this.position = this._generatePosition(event, !0);
        this.positionAbs = this._convertPositionTo("absolute");
        if (!noPropagation) {
            var ui = this._uiHash();
            if (this._trigger("drag", event, ui) === !1) {
                this._mouseUp({});
                return !1;
            }
            this.position = ui.position;
        }
        this.helper[0].style.left = this.position.left + "px";
        this.helper[0].style.top = this.position.top + "px";
        $.ui.ddmanager && $.ui.ddmanager.drag(this, event);
        return !1;
    },
    _mouseStop: function(event) {
        var that = this, dropped = !1;
        $.ui.ddmanager && !this.options.dropBehaviour && (dropped = $.ui.ddmanager.drop(this, event));
        if (this.dropped) {
            dropped = this.dropped;
            this.dropped = !1;
        }
        "invalid" === this.options.revert && !dropped || "valid" === this.options.revert && dropped || this.options.revert === !0 || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped) ? $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
            that._trigger("stop", event) !== !1 && that._clear();
        }) : this._trigger("stop", event) !== !1 && this._clear();
        return !1;
    },
    _mouseUp: function(event) {
        $("div.ui-draggable-iframeFix").each(function() {
            this.parentNode.removeChild(this);
        });
        $.ui.ddmanager && $.ui.ddmanager.dragStop(this, event);
        this.element.focus();
        return $.ui.mouse.prototype._mouseUp.call(this, event);
    },
    cancel: function() {
        this.helper.is(".ui-draggable-dragging") ? this._mouseUp({}) : this._clear();
        return this;
    },
    _getHandle: function(event) {
        return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : !0;
    },
    _setHandleClassName: function() {
        this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;
        this.handleElement.addClass("ui-draggable-handle");
    },
    _removeHandleClassName: function() {
        this.handleElement.removeClass("ui-draggable-handle");
    },
    _createHelper: function(event) {
        var o = this.options, helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [ event ])) : "clone" === o.helper ? this.element.clone().removeAttr("id") : this.element;
        helper.parents("body").length || helper.appendTo("parent" === o.appendTo ? this.element[0].parentNode : o.appendTo);
        helper[0] === this.element[0] || /(fixed|absolute)/.test(helper.css("position")) || helper.css("position", "absolute");
        return helper;
    },
    _adjustOffsetFromHelper: function(obj) {
        "string" == typeof obj && (obj = obj.split(" "));
        $.isArray(obj) && (obj = {
            left: +obj[0],
            top: +obj[1] || 0
        });
        "left" in obj && (this.offset.click.left = obj.left + this.margins.left);
        "right" in obj && (this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left);
        "top" in obj && (this.offset.click.top = obj.top + this.margins.top);
        "bottom" in obj && (this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top);
    },
    _isRootNode: function(element) {
        return /(html|body)/i.test(element.tagName) || element === this.document[0];
    },
    _getParentOffset: function() {
        var po = this.offsetParent.offset(), document = this.document[0];
        if ("absolute" === this.cssPosition && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
            po.left += this.scrollParent.scrollLeft();
            po.top += this.scrollParent.scrollTop();
        }
        this._isRootNode(this.offsetParent[0]) && (po = {
            top: 0,
            left: 0
        });
        return {
            top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
            left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
        };
    },
    _getRelativeOffset: function() {
        if ("relative" !== this.cssPosition) return {
            top: 0,
            left: 0
        };
        var p = this.element.position(), scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
        return {
            top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + (scrollIsRootNode ? 0 : this.scrollParent.scrollTop()),
            left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + (scrollIsRootNode ? 0 : this.scrollParent.scrollLeft())
        };
    },
    _cacheMargins: function() {
        this.margins = {
            left: parseInt(this.element.css("marginLeft"), 10) || 0,
            top: parseInt(this.element.css("marginTop"), 10) || 0,
            right: parseInt(this.element.css("marginRight"), 10) || 0,
            bottom: parseInt(this.element.css("marginBottom"), 10) || 0
        };
    },
    _cacheHelperProportions: function() {
        this.helperProportions = {
            width: this.helper.outerWidth(),
            height: this.helper.outerHeight()
        };
    },
    _setContainment: function() {
        var over, c, ce, o = this.options, document = this.document[0];
        this.relativeContainer = null;
        if (o.containment) if ("window" !== o.containment) if ("document" !== o.containment) if (o.containment.constructor !== Array) {
            "parent" === o.containment && (o.containment = this.helper[0].parentNode);
            c = $(o.containment);
            ce = c[0];
            if (ce) {
                over = "hidden" !== c.css("overflow");
                this.containment = [ (parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"), 10) || 0), (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom ];
                this.relativeContainer = c;
            }
        } else this.containment = o.containment; else this.containment = [ 0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ]; else this.containment = [ $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ]; else this.containment = null;
    },
    _convertPositionTo: function(d, pos) {
        pos || (pos = this.position);
        var mod = "absolute" === d ? 1 : -1, scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
        return {
            top: pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - ("fixed" === this.cssPosition ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod,
            left: pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - ("fixed" === this.cssPosition ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod
        };
    },
    _generatePosition: function(event, constrainPosition) {
        var containment, co, top, left, o = this.options, scrollIsRootNode = this._isRootNode(this.scrollParent[0]), pageX = event.pageX, pageY = event.pageY;
        scrollIsRootNode && this.offset.scroll || (this.offset.scroll = {
            top: this.scrollParent.scrollTop(),
            left: this.scrollParent.scrollLeft()
        });
        if (constrainPosition) {
            if (this.containment) {
                if (this.relativeContainer) {
                    co = this.relativeContainer.offset();
                    containment = [ this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top ];
                } else containment = this.containment;
                event.pageX - this.offset.click.left < containment[0] && (pageX = containment[0] + this.offset.click.left);
                event.pageY - this.offset.click.top < containment[1] && (pageY = containment[1] + this.offset.click.top);
                event.pageX - this.offset.click.left > containment[2] && (pageX = containment[2] + this.offset.click.left);
                event.pageY - this.offset.click.top > containment[3] && (pageY = containment[3] + this.offset.click.top);
            }
            if (o.grid) {
                top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
            }
            "y" === o.axis && (pageX = this.originalPageX);
            "x" === o.axis && (pageY = this.originalPageY);
        }
        return {
            top: pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top),
            left: pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)
        };
    },
    _clear: function() {
        this.helper.removeClass("ui-draggable-dragging");
        this.helper[0] === this.element[0] || this.cancelHelperRemoval || this.helper.remove();
        this.helper = null;
        this.cancelHelperRemoval = !1;
        this.destroyOnClear && this.destroy();
    },
    _trigger: function(type, event, ui) {
        ui = ui || this._uiHash();
        $.ui.plugin.call(this, type, [ event, ui, this ], !0);
        "drag" === type && (this.positionAbs = this._convertPositionTo("absolute"));
        return $.Widget.prototype._trigger.call(this, type, event, ui);
    },
    plugins: {},
    _uiHash: function() {
        return {
            helper: this.helper,
            position: this.position,
            originalPosition: this.originalPosition,
            offset: this.positionAbs
        };
    }
});

$.ui.plugin.add("draggable", "connectToSortable", {
    start: function(event, ui, inst) {
        var o = inst.options, uiSortable = $.extend({}, ui, {
            item: inst.element
        });
        inst.sortables = [];
        $(o.connectToSortable).each(function() {
            var sortable = $(this).sortable("instance");
            if (sortable && !sortable.options.disabled) {
                inst.sortables.push({
                    instance: sortable,
                    shouldRevert: sortable.options.revert
                });
                sortable.refreshPositions();
                sortable._trigger("activate", event, uiSortable);
            }
        });
    },
    stop: function(event, ui, inst) {
        var uiSortable = $.extend({}, ui, {
            item: inst.element
        });
        $.each(inst.sortables, function() {
            if (this.instance.isOver) {
                this.instance.isOver = 0;
                inst.cancelHelperRemoval = !0;
                this.instance.cancelHelperRemoval = !1;
                this.shouldRevert && (this.instance.options.revert = this.shouldRevert);
                this.instance._mouseStop(event);
                this.instance.options.helper = this.instance.options._helper;
                "original" === inst.options.helper && this.instance.currentItem.css({
                    top: "auto",
                    left: "auto"
                });
            } else {
                this.instance.cancelHelperRemoval = !1;
                this.instance._trigger("deactivate", event, uiSortable);
            }
        });
    },
    drag: function(event, ui, inst) {
        var that = this;
        $.each(inst.sortables, function() {
            var innermostIntersecting = !1, thisSortable = this;
            this.instance.positionAbs = inst.positionAbs;
            this.instance.helperProportions = inst.helperProportions;
            this.instance.offset.click = inst.offset.click;
            if (this.instance._intersectsWith(this.instance.containerCache)) {
                innermostIntersecting = !0;
                $.each(inst.sortables, function() {
                    this.instance.positionAbs = inst.positionAbs;
                    this.instance.helperProportions = inst.helperProportions;
                    this.instance.offset.click = inst.offset.click;
                    this !== thisSortable && this.instance._intersectsWith(this.instance.containerCache) && $.contains(thisSortable.instance.element[0], this.instance.element[0]) && (innermostIntersecting = !1);
                    return innermostIntersecting;
                });
            }
            if (innermostIntersecting) {
                if (!this.instance.isOver) {
                    this.instance.isOver = 1;
                    this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item", !0);
                    this.instance.options._helper = this.instance.options.helper;
                    this.instance.options.helper = function() {
                        return ui.helper[0];
                    };
                    event.target = this.instance.currentItem[0];
                    this.instance._mouseCapture(event, !0);
                    this.instance._mouseStart(event, !0, !0);
                    this.instance.offset.click.top = inst.offset.click.top;
                    this.instance.offset.click.left = inst.offset.click.left;
                    this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
                    this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;
                    inst._trigger("toSortable", event);
                    inst.dropped = this.instance.element;
                    inst.currentItem = inst.element;
                    this.instance.fromOutside = inst;
                }
                this.instance.currentItem && this.instance._mouseDrag(event);
            } else if (this.instance.isOver) {
                this.instance.isOver = 0;
                this.instance.cancelHelperRemoval = !0;
                this.instance.options.revert = !1;
                this.instance._trigger("out", event, this.instance._uiHash(this.instance));
                this.instance._mouseStop(event, !0);
                this.instance.options.helper = this.instance.options._helper;
                this.instance.currentItem.remove();
                this.instance.placeholder && this.instance.placeholder.remove();
                inst._trigger("fromSortable", event);
                inst.dropped = !1;
            }
        });
    }
});

$.ui.plugin.add("draggable", "cursor", {
    start: function(event, ui, instance) {
        var t = $("body"), o = instance.options;
        t.css("cursor") && (o._cursor = t.css("cursor"));
        t.css("cursor", o.cursor);
    },
    stop: function(event, ui, instance) {
        var o = instance.options;
        o._cursor && $("body").css("cursor", o._cursor);
    }
});

$.ui.plugin.add("draggable", "opacity", {
    start: function(event, ui, instance) {
        var t = $(ui.helper), o = instance.options;
        t.css("opacity") && (o._opacity = t.css("opacity"));
        t.css("opacity", o.opacity);
    },
    stop: function(event, ui, instance) {
        var o = instance.options;
        o._opacity && $(ui.helper).css("opacity", o._opacity);
    }
});

$.ui.plugin.add("draggable", "scroll", {
    start: function(event, ui, i) {
        i.scrollParentNotHidden || (i.scrollParentNotHidden = i.helper.scrollParent(!1));
        i.scrollParentNotHidden[0] !== i.document[0] && "HTML" !== i.scrollParentNotHidden[0].tagName && (i.overflowOffset = i.scrollParentNotHidden.offset());
    },
    drag: function(event, ui, i) {
        var o = i.options, scrolled = !1, scrollParent = i.scrollParentNotHidden[0], document = i.document[0];
        if (scrollParent !== document && "HTML" !== scrollParent.tagName) {
            o.axis && "x" === o.axis || (i.overflowOffset.top + scrollParent.offsetHeight - event.pageY < o.scrollSensitivity ? scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed : event.pageY - i.overflowOffset.top < o.scrollSensitivity && (scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed));
            o.axis && "y" === o.axis || (i.overflowOffset.left + scrollParent.offsetWidth - event.pageX < o.scrollSensitivity ? scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed : event.pageX - i.overflowOffset.left < o.scrollSensitivity && (scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed));
        } else {
            o.axis && "x" === o.axis || (event.pageY - $(document).scrollTop() < o.scrollSensitivity ? scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed) : $(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity && (scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed)));
            o.axis && "y" === o.axis || (event.pageX - $(document).scrollLeft() < o.scrollSensitivity ? scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed) : $(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity && (scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed)));
        }
        scrolled !== !1 && $.ui.ddmanager && !o.dropBehaviour && $.ui.ddmanager.prepareOffsets(i, event);
    }
});

$.ui.plugin.add("draggable", "snap", {
    start: function(event, ui, i) {
        var o = i.options;
        i.snapElements = [];
        $(o.snap.constructor !== String ? o.snap.items || ":data(ui-draggable)" : o.snap).each(function() {
            var $t = $(this), $o = $t.offset();
            this !== i.element[0] && i.snapElements.push({
                item: this,
                width: $t.outerWidth(),
                height: $t.outerHeight(),
                top: $o.top,
                left: $o.left
            });
        });
    },
    drag: function(event, ui, inst) {
        var ts, bs, ls, rs, l, r, t, b, i, first, o = inst.options, d = o.snapTolerance, x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width, y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;
        for (i = inst.snapElements.length - 1; i >= 0; i--) {
            l = inst.snapElements[i].left;
            r = l + inst.snapElements[i].width;
            t = inst.snapElements[i].top;
            b = t + inst.snapElements[i].height;
            if (l - d > x2 || x1 > r + d || t - d > y2 || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {
                inst.snapElements[i].snapping && inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {
                    snapItem: inst.snapElements[i].item
                }));
                inst.snapElements[i].snapping = !1;
            } else {
                if ("inner" !== o.snapMode) {
                    ts = Math.abs(t - y2) <= d;
                    bs = Math.abs(b - y1) <= d;
                    ls = Math.abs(l - x2) <= d;
                    rs = Math.abs(r - x1) <= d;
                    ts && (ui.position.top = inst._convertPositionTo("relative", {
                        top: t - inst.helperProportions.height,
                        left: 0
                    }).top - inst.margins.top);
                    bs && (ui.position.top = inst._convertPositionTo("relative", {
                        top: b,
                        left: 0
                    }).top - inst.margins.top);
                    ls && (ui.position.left = inst._convertPositionTo("relative", {
                        top: 0,
                        left: l - inst.helperProportions.width
                    }).left - inst.margins.left);
                    rs && (ui.position.left = inst._convertPositionTo("relative", {
                        top: 0,
                        left: r
                    }).left - inst.margins.left);
                }
                first = ts || bs || ls || rs;
                if ("outer" !== o.snapMode) {
                    ts = Math.abs(t - y1) <= d;
                    bs = Math.abs(b - y2) <= d;
                    ls = Math.abs(l - x1) <= d;
                    rs = Math.abs(r - x2) <= d;
                    ts && (ui.position.top = inst._convertPositionTo("relative", {
                        top: t,
                        left: 0
                    }).top - inst.margins.top);
                    bs && (ui.position.top = inst._convertPositionTo("relative", {
                        top: b - inst.helperProportions.height,
                        left: 0
                    }).top - inst.margins.top);
                    ls && (ui.position.left = inst._convertPositionTo("relative", {
                        top: 0,
                        left: l
                    }).left - inst.margins.left);
                    rs && (ui.position.left = inst._convertPositionTo("relative", {
                        top: 0,
                        left: r - inst.helperProportions.width
                    }).left - inst.margins.left);
                }
                !inst.snapElements[i].snapping && (ts || bs || ls || rs || first) && inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {
                    snapItem: inst.snapElements[i].item
                }));
                inst.snapElements[i].snapping = ts || bs || ls || rs || first;
            }
        }
    }
});

$.ui.plugin.add("draggable", "stack", {
    start: function(event, ui, instance) {
        var min, o = instance.options, group = $.makeArray($(o.stack)).sort(function(a, b) {
            return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
        });
        if (group.length) {
            min = parseInt($(group[0]).css("zIndex"), 10) || 0;
            $(group).each(function(i) {
                $(this).css("zIndex", min + i);
            });
            this.css("zIndex", min + group.length);
        }
    }
});

$.ui.plugin.add("draggable", "zIndex", {
    start: function(event, ui, instance) {
        var t = $(ui.helper), o = instance.options;
        t.css("zIndex") && (o._zIndex = t.css("zIndex"));
        t.css("zIndex", o.zIndex);
    },
    stop: function(event, ui, instance) {
        var o = instance.options;
        o._zIndex && $(ui.helper).css("zIndex", o._zIndex);
    }
});

var draggable = $.ui.draggable;

$.widget("ui.resizable", $.ui.mouse, {
    version: "1.11.1",
    widgetEventPrefix: "resize",
    options: {
        alsoResize: !1,
        animate: !1,
        animateDuration: "slow",
        animateEasing: "swing",
        aspectRatio: !1,
        autoHide: !1,
        containment: !1,
        ghost: !1,
        grid: !1,
        handles: "e,s,se",
        helper: !1,
        maxHeight: null,
        maxWidth: null,
        minHeight: 10,
        minWidth: 10,
        zIndex: 90,
        resize: null,
        start: null,
        stop: null
    },
    _num: function(value) {
        return parseInt(value, 10) || 0;
    },
    _isNumber: function(value) {
        return !isNaN(parseInt(value, 10));
    },
    _hasScroll: function(el, a) {
        if ("hidden" === $(el).css("overflow")) return !1;
        var scroll = a && "left" === a ? "scrollLeft" : "scrollTop", has = !1;
        if (el[scroll] > 0) return !0;
        el[scroll] = 1;
        has = el[scroll] > 0;
        el[scroll] = 0;
        return has;
    },
    _create: function() {
        var n, i, handle, axis, hname, that = this, o = this.options;
        this.element.addClass("ui-resizable");
        $.extend(this, {
            _aspectRatio: !!o.aspectRatio,
            aspectRatio: o.aspectRatio,
            originalElement: this.element,
            _proportionallyResizeElements: [],
            _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
        });
        if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {
            this.element.wrap($("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
                position: this.element.css("position"),
                width: this.element.outerWidth(),
                height: this.element.outerHeight(),
                top: this.element.css("top"),
                left: this.element.css("left")
            }));
            this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance"));
            this.elementIsWrapper = !0;
            this.element.css({
                marginLeft: this.originalElement.css("marginLeft"),
                marginTop: this.originalElement.css("marginTop"),
                marginRight: this.originalElement.css("marginRight"),
                marginBottom: this.originalElement.css("marginBottom")
            });
            this.originalElement.css({
                marginLeft: 0,
                marginTop: 0,
                marginRight: 0,
                marginBottom: 0
            });
            this.originalResizeStyle = this.originalElement.css("resize");
            this.originalElement.css("resize", "none");
            this._proportionallyResizeElements.push(this.originalElement.css({
                position: "static",
                zoom: 1,
                display: "block"
            }));
            this.originalElement.css({
                margin: this.originalElement.css("margin")
            });
            this._proportionallyResize();
        }
        this.handles = o.handles || ($(".ui-resizable-handle", this.element).length ? {
            n: ".ui-resizable-n",
            e: ".ui-resizable-e",
            s: ".ui-resizable-s",
            w: ".ui-resizable-w",
            se: ".ui-resizable-se",
            sw: ".ui-resizable-sw",
            ne: ".ui-resizable-ne",
            nw: ".ui-resizable-nw"
        } : "e,s,se");
        if (this.handles.constructor === String) {
            "all" === this.handles && (this.handles = "n,e,s,w,se,sw,ne,nw");
            n = this.handles.split(",");
            this.handles = {};
            for (i = 0; i < n.length; i++) {
                handle = $.trim(n[i]);
                hname = "ui-resizable-" + handle;
                axis = $("<div class='ui-resizable-handle " + hname + "'></div>");
                axis.css({
                    zIndex: o.zIndex
                });
                "se" === handle && axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
                this.handles[handle] = ".ui-resizable-" + handle;
                this.element.append(axis);
            }
        }
        this._renderAxis = function(target) {
            var i, axis, padPos, padWrapper;
            target = target || this.element;
            for (i in this.handles) {
                this.handles[i].constructor === String && (this.handles[i] = this.element.children(this.handles[i]).first().show());
                if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {
                    axis = $(this.handles[i], this.element);
                    padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();
                    padPos = [ "padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left" ].join("");
                    target.css(padPos, padWrapper);
                    this._proportionallyResize();
                }
                $(this.handles[i]).length;
            }
        };
        this._renderAxis(this.element);
        this._handles = $(".ui-resizable-handle", this.element).disableSelection();
        this._handles.mouseover(function() {
            if (!that.resizing) {
                this.className && (axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i));
                that.axis = axis && axis[1] ? axis[1] : "se";
            }
        });
        if (o.autoHide) {
            this._handles.hide();
            $(this.element).addClass("ui-resizable-autohide").mouseenter(function() {
                if (!o.disabled) {
                    $(this).removeClass("ui-resizable-autohide");
                    that._handles.show();
                }
            }).mouseleave(function() {
                if (!o.disabled && !that.resizing) {
                    $(this).addClass("ui-resizable-autohide");
                    that._handles.hide();
                }
            });
        }
        this._mouseInit();
    },
    _destroy: function() {
        this._mouseDestroy();
        var wrapper, _destroy = function(exp) {
            $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
        };
        if (this.elementIsWrapper) {
            _destroy(this.element);
            wrapper = this.element;
            this.originalElement.css({
                position: wrapper.css("position"),
                width: wrapper.outerWidth(),
                height: wrapper.outerHeight(),
                top: wrapper.css("top"),
                left: wrapper.css("left")
            }).insertAfter(wrapper);
            wrapper.remove();
        }
        this.originalElement.css("resize", this.originalResizeStyle);
        _destroy(this.originalElement);
        return this;
    },
    _mouseCapture: function(event) {
        var i, handle, capture = !1;
        for (i in this.handles) {
            handle = $(this.handles[i])[0];
            (handle === event.target || $.contains(handle, event.target)) && (capture = !0);
        }
        return !this.options.disabled && capture;
    },
    _mouseStart: function(event) {
        var curleft, curtop, cursor, o = this.options, el = this.element;
        this.resizing = !0;
        this._renderProxy();
        curleft = this._num(this.helper.css("left"));
        curtop = this._num(this.helper.css("top"));
        if (o.containment) {
            curleft += $(o.containment).scrollLeft() || 0;
            curtop += $(o.containment).scrollTop() || 0;
        }
        this.offset = this.helper.offset();
        this.position = {
            left: curleft,
            top: curtop
        };
        this.size = this._helper ? {
            width: this.helper.width(),
            height: this.helper.height()
        } : {
            width: el.width(),
            height: el.height()
        };
        this.originalSize = this._helper ? {
            width: el.outerWidth(),
            height: el.outerHeight()
        } : {
            width: el.width(),
            height: el.height()
        };
        this.sizeDiff = {
            width: el.outerWidth() - el.width(),
            height: el.outerHeight() - el.height()
        };
        this.originalPosition = {
            left: curleft,
            top: curtop
        };
        this.originalMousePosition = {
            left: event.pageX,
            top: event.pageY
        };
        this.aspectRatio = "number" == typeof o.aspectRatio ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;
        cursor = $(".ui-resizable-" + this.axis).css("cursor");
        $("body").css("cursor", "auto" === cursor ? this.axis + "-resize" : cursor);
        el.addClass("ui-resizable-resizing");
        this._propagate("start", event);
        return !0;
    },
    _mouseDrag: function(event) {
        var data, props, smp = this.originalMousePosition, a = this.axis, dx = event.pageX - smp.left || 0, dy = event.pageY - smp.top || 0, trigger = this._change[a];
        this._updatePrevProperties();
        if (!trigger) return !1;
        data = trigger.apply(this, [ event, dx, dy ]);
        this._updateVirtualBoundaries(event.shiftKey);
        (this._aspectRatio || event.shiftKey) && (data = this._updateRatio(data, event));
        data = this._respectSize(data, event);
        this._updateCache(data);
        this._propagate("resize", event);
        props = this._applyChanges();
        !this._helper && this._proportionallyResizeElements.length && this._proportionallyResize();
        if (!$.isEmptyObject(props)) {
            this._updatePrevProperties();
            this._trigger("resize", event, this.ui());
            this._applyChanges();
        }
        return !1;
    },
    _mouseStop: function(event) {
        this.resizing = !1;
        var pr, ista, soffseth, soffsetw, s, left, top, o = this.options, that = this;
        if (this._helper) {
            pr = this._proportionallyResizeElements;
            ista = pr.length && /textarea/i.test(pr[0].nodeName);
            soffseth = ista && this._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;
            soffsetw = ista ? 0 : that.sizeDiff.width;
            s = {
                width: that.helper.width() - soffsetw,
                height: that.helper.height() - soffseth
            };
            left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null;
            top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null;
            o.animate || this.element.css($.extend(s, {
                top: top,
                left: left
            }));
            that.helper.height(that.size.height);
            that.helper.width(that.size.width);
            this._helper && !o.animate && this._proportionallyResize();
        }
        $("body").css("cursor", "auto");
        this.element.removeClass("ui-resizable-resizing");
        this._propagate("stop", event);
        this._helper && this.helper.remove();
        return !1;
    },
    _updatePrevProperties: function() {
        this.prevPosition = {
            top: this.position.top,
            left: this.position.left
        };
        this.prevSize = {
            width: this.size.width,
            height: this.size.height
        };
    },
    _applyChanges: function() {
        var props = {};
        this.position.top !== this.prevPosition.top && (props.top = this.position.top + "px");
        this.position.left !== this.prevPosition.left && (props.left = this.position.left + "px");
        this.size.width !== this.prevSize.width && (props.width = this.size.width + "px");
        this.size.height !== this.prevSize.height && (props.height = this.size.height + "px");
        this.helper.css(props);
        return props;
    },
    _updateVirtualBoundaries: function(forceAspectRatio) {
        var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b, o = this.options;
        b = {
            minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,
            maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : 1 / 0,
            minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,
            maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : 1 / 0
        };
        if (this._aspectRatio || forceAspectRatio) {
            pMinWidth = b.minHeight * this.aspectRatio;
            pMinHeight = b.minWidth / this.aspectRatio;
            pMaxWidth = b.maxHeight * this.aspectRatio;
            pMaxHeight = b.maxWidth / this.aspectRatio;
            pMinWidth > b.minWidth && (b.minWidth = pMinWidth);
            pMinHeight > b.minHeight && (b.minHeight = pMinHeight);
            pMaxWidth < b.maxWidth && (b.maxWidth = pMaxWidth);
            pMaxHeight < b.maxHeight && (b.maxHeight = pMaxHeight);
        }
        this._vBoundaries = b;
    },
    _updateCache: function(data) {
        this.offset = this.helper.offset();
        this._isNumber(data.left) && (this.position.left = data.left);
        this._isNumber(data.top) && (this.position.top = data.top);
        this._isNumber(data.height) && (this.size.height = data.height);
        this._isNumber(data.width) && (this.size.width = data.width);
    },
    _updateRatio: function(data) {
        var cpos = this.position, csize = this.size, a = this.axis;
        this._isNumber(data.height) ? data.width = data.height * this.aspectRatio : this._isNumber(data.width) && (data.height = data.width / this.aspectRatio);
        if ("sw" === a) {
            data.left = cpos.left + (csize.width - data.width);
            data.top = null;
        }
        if ("nw" === a) {
            data.top = cpos.top + (csize.height - data.height);
            data.left = cpos.left + (csize.width - data.width);
        }
        return data;
    },
    _respectSize: function(data) {
        var o = this._vBoundaries, a = this.axis, ismaxw = this._isNumber(data.width) && o.maxWidth && o.maxWidth < data.width, ismaxh = this._isNumber(data.height) && o.maxHeight && o.maxHeight < data.height, isminw = this._isNumber(data.width) && o.minWidth && o.minWidth > data.width, isminh = this._isNumber(data.height) && o.minHeight && o.minHeight > data.height, dw = this.originalPosition.left + this.originalSize.width, dh = this.position.top + this.size.height, cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
        isminw && (data.width = o.minWidth);
        isminh && (data.height = o.minHeight);
        ismaxw && (data.width = o.maxWidth);
        ismaxh && (data.height = o.maxHeight);
        isminw && cw && (data.left = dw - o.minWidth);
        ismaxw && cw && (data.left = dw - o.maxWidth);
        isminh && ch && (data.top = dh - o.minHeight);
        ismaxh && ch && (data.top = dh - o.maxHeight);
        data.width || data.height || data.left || !data.top ? data.width || data.height || data.top || !data.left || (data.left = null) : data.top = null;
        return data;
    },
    _getPaddingPlusBorderDimensions: function(element) {
        for (var i = 0, widths = [], borders = [ element.css("borderTopWidth"), element.css("borderRightWidth"), element.css("borderBottomWidth"), element.css("borderLeftWidth") ], paddings = [ element.css("paddingTop"), element.css("paddingRight"), element.css("paddingBottom"), element.css("paddingLeft") ]; 4 > i; i++) {
            widths[i] = parseInt(borders[i], 10) || 0;
            widths[i] += parseInt(paddings[i], 10) || 0;
        }
        return {
            height: widths[0] + widths[2],
            width: widths[1] + widths[3]
        };
    },
    _proportionallyResize: function() {
        if (this._proportionallyResizeElements.length) for (var prel, i = 0, element = this.helper || this.element; i < this._proportionallyResizeElements.length; i++) {
            prel = this._proportionallyResizeElements[i];
            this.outerDimensions || (this.outerDimensions = this._getPaddingPlusBorderDimensions(prel));
            prel.css({
                height: element.height() - this.outerDimensions.height || 0,
                width: element.width() - this.outerDimensions.width || 0
            });
        }
    },
    _renderProxy: function() {
        var el = this.element, o = this.options;
        this.elementOffset = el.offset();
        if (this._helper) {
            this.helper = this.helper || $("<div style='overflow:hidden;'></div>");
            this.helper.addClass(this._helper).css({
                width: this.element.outerWidth() - 1,
                height: this.element.outerHeight() - 1,
                position: "absolute",
                left: this.elementOffset.left + "px",
                top: this.elementOffset.top + "px",
                zIndex: ++o.zIndex
            });
            this.helper.appendTo("body").disableSelection();
        } else this.helper = this.element;
    },
    _change: {
        e: function(event, dx) {
            return {
                width: this.originalSize.width + dx
            };
        },
        w: function(event, dx) {
            var cs = this.originalSize, sp = this.originalPosition;
            return {
                left: sp.left + dx,
                width: cs.width - dx
            };
        },
        n: function(event, dx, dy) {
            var cs = this.originalSize, sp = this.originalPosition;
            return {
                top: sp.top + dy,
                height: cs.height - dy
            };
        },
        s: function(event, dx, dy) {
            return {
                height: this.originalSize.height + dy
            };
        },
        se: function(event, dx, dy) {
            return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [ event, dx, dy ]));
        },
        sw: function(event, dx, dy) {
            return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [ event, dx, dy ]));
        },
        ne: function(event, dx, dy) {
            return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [ event, dx, dy ]));
        },
        nw: function(event, dx, dy) {
            return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [ event, dx, dy ]));
        }
    },
    _propagate: function(n, event) {
        $.ui.plugin.call(this, n, [ event, this.ui() ]);
        "resize" !== n && this._trigger(n, event, this.ui());
    },
    plugins: {},
    ui: function() {
        return {
            originalElement: this.originalElement,
            element: this.element,
            helper: this.helper,
            position: this.position,
            size: this.size,
            originalSize: this.originalSize,
            originalPosition: this.originalPosition
        };
    }
});

$.ui.plugin.add("resizable", "animate", {
    stop: function(event) {
        var that = $(this).resizable("instance"), o = that.options, pr = that._proportionallyResizeElements, ista = pr.length && /textarea/i.test(pr[0].nodeName), soffseth = ista && that._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height, soffsetw = ista ? 0 : that.sizeDiff.width, style = {
            width: that.size.width - soffsetw,
            height: that.size.height - soffseth
        }, left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null, top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null;
        that.element.animate($.extend(style, top && left ? {
            top: top,
            left: left
        } : {}), {
            duration: o.animateDuration,
            easing: o.animateEasing,
            step: function() {
                var data = {
                    width: parseInt(that.element.css("width"), 10),
                    height: parseInt(that.element.css("height"), 10),
                    top: parseInt(that.element.css("top"), 10),
                    left: parseInt(that.element.css("left"), 10)
                };
                pr && pr.length && $(pr[0]).css({
                    width: data.width,
                    height: data.height
                });
                that._updateCache(data);
                that._propagate("resize", event);
            }
        });
    }
});

$.ui.plugin.add("resizable", "containment", {
    start: function() {
        var element, p, co, ch, cw, width, height, that = $(this).resizable("instance"), o = that.options, el = that.element, oc = o.containment, ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;
        if (ce) {
            that.containerElement = $(ce);
            if (/document/.test(oc) || oc === document) {
                that.containerOffset = {
                    left: 0,
                    top: 0
                };
                that.containerPosition = {
                    left: 0,
                    top: 0
                };
                that.parentData = {
                    element: $(document),
                    left: 0,
                    top: 0,
                    width: $(document).width(),
                    height: $(document).height() || document.body.parentNode.scrollHeight
                };
            } else {
                element = $(ce);
                p = [];
                $([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) {
                    p[i] = that._num(element.css("padding" + name));
                });
                that.containerOffset = element.offset();
                that.containerPosition = element.position();
                that.containerSize = {
                    height: element.innerHeight() - p[3],
                    width: element.innerWidth() - p[1]
                };
                co = that.containerOffset;
                ch = that.containerSize.height;
                cw = that.containerSize.width;
                width = that._hasScroll(ce, "left") ? ce.scrollWidth : cw;
                height = that._hasScroll(ce) ? ce.scrollHeight : ch;
                that.parentData = {
                    element: ce,
                    left: co.left,
                    top: co.top,
                    width: width,
                    height: height
                };
            }
        }
    },
    resize: function(event) {
        var woset, hoset, isParent, isOffsetRelative, that = $(this).resizable("instance"), o = that.options, co = that.containerOffset, cp = that.position, pRatio = that._aspectRatio || event.shiftKey, cop = {
            top: 0,
            left: 0
        }, ce = that.containerElement, continueResize = !0;
        ce[0] !== document && /static/.test(ce.css("position")) && (cop = co);
        if (cp.left < (that._helper ? co.left : 0)) {
            that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);
            if (pRatio) {
                that.size.height = that.size.width / that.aspectRatio;
                continueResize = !1;
            }
            that.position.left = o.helper ? co.left : 0;
        }
        if (cp.top < (that._helper ? co.top : 0)) {
            that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);
            if (pRatio) {
                that.size.width = that.size.height * that.aspectRatio;
                continueResize = !1;
            }
            that.position.top = that._helper ? co.top : 0;
        }
        isParent = that.containerElement.get(0) === that.element.parent().get(0);
        isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));
        if (isParent && isOffsetRelative) {
            that.offset.left = that.parentData.left + that.position.left;
            that.offset.top = that.parentData.top + that.position.top;
        } else {
            that.offset.left = that.element.offset().left;
            that.offset.top = that.element.offset().top;
        }
        woset = Math.abs(that.sizeDiff.width + (that._helper ? that.offset.left - cop.left : that.offset.left - co.left));
        hoset = Math.abs(that.sizeDiff.height + (that._helper ? that.offset.top - cop.top : that.offset.top - co.top));
        if (woset + that.size.width >= that.parentData.width) {
            that.size.width = that.parentData.width - woset;
            if (pRatio) {
                that.size.height = that.size.width / that.aspectRatio;
                continueResize = !1;
            }
        }
        if (hoset + that.size.height >= that.parentData.height) {
            that.size.height = that.parentData.height - hoset;
            if (pRatio) {
                that.size.width = that.size.height * that.aspectRatio;
                continueResize = !1;
            }
        }
        if (!continueResize) {
            that.position.left = that.prevPosition.left;
            that.position.top = that.prevPosition.top;
            that.size.width = that.prevSize.width;
            that.size.height = that.prevSize.height;
        }
    },
    stop: function() {
        var that = $(this).resizable("instance"), o = that.options, co = that.containerOffset, cop = that.containerPosition, ce = that.containerElement, helper = $(that.helper), ho = helper.offset(), w = helper.outerWidth() - that.sizeDiff.width, h = helper.outerHeight() - that.sizeDiff.height;
        that._helper && !o.animate && /relative/.test(ce.css("position")) && $(this).css({
            left: ho.left - cop.left - co.left,
            width: w,
            height: h
        });
        that._helper && !o.animate && /static/.test(ce.css("position")) && $(this).css({
            left: ho.left - cop.left - co.left,
            width: w,
            height: h
        });
    }
});

$.ui.plugin.add("resizable", "alsoResize", {
    start: function() {
        var that = $(this).resizable("instance"), o = that.options, _store = function(exp) {
            $(exp).each(function() {
                var el = $(this);
                el.data("ui-resizable-alsoresize", {
                    width: parseInt(el.width(), 10),
                    height: parseInt(el.height(), 10),
                    left: parseInt(el.css("left"), 10),
                    top: parseInt(el.css("top"), 10)
                });
            });
        };
        if ("object" != typeof o.alsoResize || o.alsoResize.parentNode) _store(o.alsoResize); else if (o.alsoResize.length) {
            o.alsoResize = o.alsoResize[0];
            _store(o.alsoResize);
        } else $.each(o.alsoResize, function(exp) {
            _store(exp);
        });
    },
    resize: function(event, ui) {
        var that = $(this).resizable("instance"), o = that.options, os = that.originalSize, op = that.originalPosition, delta = {
            height: that.size.height - os.height || 0,
            width: that.size.width - os.width || 0,
            top: that.position.top - op.top || 0,
            left: that.position.left - op.left || 0
        }, _alsoResize = function(exp, c) {
            $(exp).each(function() {
                var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {}, css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? [ "width", "height" ] : [ "width", "height", "top", "left" ];
                $.each(css, function(i, prop) {
                    var sum = (start[prop] || 0) + (delta[prop] || 0);
                    sum && sum >= 0 && (style[prop] = sum || null);
                });
                el.css(style);
            });
        };
        "object" != typeof o.alsoResize || o.alsoResize.nodeType ? _alsoResize(o.alsoResize) : $.each(o.alsoResize, function(exp, c) {
            _alsoResize(exp, c);
        });
    },
    stop: function() {
        $(this).removeData("resizable-alsoresize");
    }
});

$.ui.plugin.add("resizable", "ghost", {
    start: function() {
        var that = $(this).resizable("instance"), o = that.options, cs = that.size;
        that.ghost = that.originalElement.clone();
        that.ghost.css({
            opacity: .25,
            display: "block",
            position: "relative",
            height: cs.height,
            width: cs.width,
            margin: 0,
            left: 0,
            top: 0
        }).addClass("ui-resizable-ghost").addClass("string" == typeof o.ghost ? o.ghost : "");
        that.ghost.appendTo(that.helper);
    },
    resize: function() {
        var that = $(this).resizable("instance");
        that.ghost && that.ghost.css({
            position: "relative",
            height: that.size.height,
            width: that.size.width
        });
    },
    stop: function() {
        var that = $(this).resizable("instance");
        that.ghost && that.helper && that.helper.get(0).removeChild(that.ghost.get(0));
    }
});

$.ui.plugin.add("resizable", "grid", {
    resize: function() {
        var outerDimensions, that = $(this).resizable("instance"), o = that.options, cs = that.size, os = that.originalSize, op = that.originalPosition, a = that.axis, grid = "number" == typeof o.grid ? [ o.grid, o.grid ] : o.grid, gridX = grid[0] || 1, gridY = grid[1] || 1, ox = Math.round((cs.width - os.width) / gridX) * gridX, oy = Math.round((cs.height - os.height) / gridY) * gridY, newWidth = os.width + ox, newHeight = os.height + oy, isMaxWidth = o.maxWidth && o.maxWidth < newWidth, isMaxHeight = o.maxHeight && o.maxHeight < newHeight, isMinWidth = o.minWidth && o.minWidth > newWidth, isMinHeight = o.minHeight && o.minHeight > newHeight;
        o.grid = grid;
        isMinWidth && (newWidth += gridX);
        isMinHeight && (newHeight += gridY);
        isMaxWidth && (newWidth -= gridX);
        isMaxHeight && (newHeight -= gridY);
        if (/^(se|s|e)$/.test(a)) {
            that.size.width = newWidth;
            that.size.height = newHeight;
        } else if (/^(ne)$/.test(a)) {
            that.size.width = newWidth;
            that.size.height = newHeight;
            that.position.top = op.top - oy;
        } else if (/^(sw)$/.test(a)) {
            that.size.width = newWidth;
            that.size.height = newHeight;
            that.position.left = op.left - ox;
        } else {
            (0 >= newHeight - gridY || 0 >= newWidth - gridX) && (outerDimensions = that._getPaddingPlusBorderDimensions(this));
            if (newHeight - gridY > 0) {
                that.size.height = newHeight;
                that.position.top = op.top - oy;
            } else {
                newHeight = gridY - outerDimensions.height;
                that.size.height = newHeight;
                that.position.top = op.top + os.height - newHeight;
            }
            if (newWidth - gridX > 0) {
                that.size.width = newWidth;
                that.position.left = op.left - ox;
            } else {
                newWidth = gridY - outerDimensions.height;
                that.size.width = newWidth;
                that.position.left = op.left + os.width - newWidth;
            }
        }
    }
});

var resizable = $.ui.resizable, dialog = $.widget("ui.dialog", {
    version: "1.11.1",
    options: {
        appendTo: "body",
        autoOpen: !0,
        buttons: [],
        closeOnEscape: !0,
        closeText: "Close",
        dialogClass: "",
        draggable: !0,
        hide: null,
        height: "auto",
        maxHeight: null,
        maxWidth: null,
        minHeight: 150,
        minWidth: 150,
        modal: !1,
        position: {
            my: "center",
            at: "center",
            of: window,
            collision: "fit",
            using: function(pos) {
                var topOffset = $(this).css(pos).offset().top;
                0 > topOffset && $(this).css("top", pos.top - topOffset);
            }
        },
        resizable: !0,
        show: null,
        title: null,
        width: 300,
        beforeClose: null,
        close: null,
        drag: null,
        dragStart: null,
        dragStop: null,
        focus: null,
        open: null,
        resize: null,
        resizeStart: null,
        resizeStop: null
    },
    sizeRelatedOptions: {
        buttons: !0,
        height: !0,
        maxHeight: !0,
        maxWidth: !0,
        minHeight: !0,
        minWidth: !0,
        width: !0
    },
    resizableRelatedOptions: {
        maxHeight: !0,
        maxWidth: !0,
        minHeight: !0,
        minWidth: !0
    },
    _create: function() {
        this.originalCss = {
            display: this.element[0].style.display,
            width: this.element[0].style.width,
            minHeight: this.element[0].style.minHeight,
            maxHeight: this.element[0].style.maxHeight,
            height: this.element[0].style.height
        };
        this.originalPosition = {
            parent: this.element.parent(),
            index: this.element.parent().children().index(this.element)
        };
        this.originalTitle = this.element.attr("title");
        this.options.title = this.options.title || this.originalTitle;
        this._createWrapper();
        this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog);
        this._createTitlebar();
        this._createButtonPane();
        this.options.draggable && $.fn.draggable && this._makeDraggable();
        this.options.resizable && $.fn.resizable && this._makeResizable();
        this._isOpen = !1;
        this._trackFocus();
    },
    _init: function() {
        this.options.autoOpen && this.open();
    },
    _appendTo: function() {
        var element = this.options.appendTo;
        return element && (element.jquery || element.nodeType) ? $(element) : this.document.find(element || "body").eq(0);
    },
    _destroy: function() {
        var next, originalPosition = this.originalPosition;
        this._destroyOverlay();
        this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach();
        this.uiDialog.stop(!0, !0).remove();
        this.originalTitle && this.element.attr("title", this.originalTitle);
        next = originalPosition.parent.children().eq(originalPosition.index);
        next.length && next[0] !== this.element[0] ? next.before(this.element) : originalPosition.parent.append(this.element);
    },
    widget: function() {
        return this.uiDialog;
    },
    disable: $.noop,
    enable: $.noop,
    close: function(event) {
        var activeElement, that = this;
        if (this._isOpen && this._trigger("beforeClose", event) !== !1) {
            this._isOpen = !1;
            this._focusedElement = null;
            this._destroyOverlay();
            this._untrackInstance();
            if (!this.opener.filter(":focusable").focus().length) try {
                activeElement = this.document[0].activeElement;
                activeElement && "body" !== activeElement.nodeName.toLowerCase() && $(activeElement).blur();
            } catch (error) {}
            this._hide(this.uiDialog, this.options.hide, function() {
                that._trigger("close", event);
            });
        }
    },
    isOpen: function() {
        return this._isOpen;
    },
    moveToTop: function() {
        this._moveToTop();
    },
    _moveToTop: function(event, silent) {
        var moved = !1, zIndicies = this.uiDialog.siblings(".ui-front:visible").map(function() {
            return +$(this).css("z-index");
        }).get(), zIndexMax = Math.max.apply(null, zIndicies);
        if (zIndexMax >= +this.uiDialog.css("z-index")) {
            this.uiDialog.css("z-index", zIndexMax + 1);
            moved = !0;
        }
        moved && !silent && this._trigger("focus", event);
        return moved;
    },
    open: function() {
        var that = this;
        if (this._isOpen) this._moveToTop() && this._focusTabbable(); else {
            this._isOpen = !0;
            this.opener = $(this.document[0].activeElement);
            this._size();
            this._position();
            this._createOverlay();
            this._moveToTop(null, !0);
            this.overlay && this.overlay.css("z-index", this.uiDialog.css("z-index") - 1);
            this._show(this.uiDialog, this.options.show, function() {
                that._focusTabbable();
                that._trigger("focus");
            });
            this._makeFocusTarget();
            this._trigger("open");
        }
    },
    _focusTabbable: function() {
        var hasFocus = this._focusedElement;
        hasFocus || (hasFocus = this.element.find("[autofocus]"));
        hasFocus.length || (hasFocus = this.element.find(":tabbable"));
        hasFocus.length || (hasFocus = this.uiDialogButtonPane.find(":tabbable"));
        hasFocus.length || (hasFocus = this.uiDialogTitlebarClose.filter(":tabbable"));
        hasFocus.length || (hasFocus = this.uiDialog);
        hasFocus.eq(0).focus();
    },
    _keepFocus: function(event) {
        function checkFocus() {
            var activeElement = this.document[0].activeElement, isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);
            isActive || this._focusTabbable();
        }
        event.preventDefault();
        checkFocus.call(this);
        this._delay(checkFocus);
    },
    _createWrapper: function() {
        this.uiDialog = $("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " + this.options.dialogClass).hide().attr({
            tabIndex: -1,
            role: "dialog"
        }).appendTo(this._appendTo());
        this._on(this.uiDialog, {
            keydown: function(event) {
                if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                    event.preventDefault();
                    this.close(event);
                } else if (event.keyCode === $.ui.keyCode.TAB && !event.isDefaultPrevented()) {
                    var tabbables = this.uiDialog.find(":tabbable"), first = tabbables.filter(":first"), last = tabbables.filter(":last");
                    if (event.target !== last[0] && event.target !== this.uiDialog[0] || event.shiftKey) {
                        if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {
                            this._delay(function() {
                                last.focus();
                            });
                            event.preventDefault();
                        }
                    } else {
                        this._delay(function() {
                            first.focus();
                        });
                        event.preventDefault();
                    }
                }
            },
            mousedown: function(event) {
                this._moveToTop(event) && this._focusTabbable();
            }
        });
        this.element.find("[aria-describedby]").length || this.uiDialog.attr({
            "aria-describedby": this.element.uniqueId().attr("id")
        });
    },
    _createTitlebar: function() {
        var uiDialogTitle;
        this.uiDialogTitlebar = $("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog);
        this._on(this.uiDialogTitlebar, {
            mousedown: function(event) {
                $(event.target).closest(".ui-dialog-titlebar-close") || this.uiDialog.focus();
            }
        });
        this.uiDialogTitlebarClose = $("<button type='button'></button>").button({
            label: this.options.closeText,
            icons: {
                primary: "ui-icon-closethick"
            },
            text: !1
        }).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar);
        this._on(this.uiDialogTitlebarClose, {
            click: function(event) {
                event.preventDefault();
                this.close(event);
            }
        });
        uiDialogTitle = $("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar);
        this._title(uiDialogTitle);
        this.uiDialog.attr({
            "aria-labelledby": uiDialogTitle.attr("id")
        });
    },
    _title: function(title) {
        this.options.title || title.html("&#160;");
        title.text(this.options.title);
    },
    _createButtonPane: function() {
        this.uiDialogButtonPane = $("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");
        this.uiButtonSet = $("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane);
        this._createButtons();
    },
    _createButtons: function() {
        var that = this, buttons = this.options.buttons;
        this.uiDialogButtonPane.remove();
        this.uiButtonSet.empty();
        if ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) this.uiDialog.removeClass("ui-dialog-buttons"); else {
            $.each(buttons, function(name, props) {
                var click, buttonOptions;
                props = $.isFunction(props) ? {
                    click: props,
                    text: name
                } : props;
                props = $.extend({
                    type: "button"
                }, props);
                click = props.click;
                props.click = function() {
                    click.apply(that.element[0], arguments);
                };
                buttonOptions = {
                    icons: props.icons,
                    text: props.showText
                };
                delete props.icons;
                delete props.showText;
                $("<button></button>", props).button(buttonOptions).appendTo(that.uiButtonSet);
            });
            this.uiDialog.addClass("ui-dialog-buttons");
            this.uiDialogButtonPane.appendTo(this.uiDialog);
        }
    },
    _makeDraggable: function() {
        function filteredUi(ui) {
            return {
                position: ui.position,
                offset: ui.offset
            };
        }
        var that = this, options = this.options;
        this.uiDialog.draggable({
            cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
            handle: ".ui-dialog-titlebar",
            containment: "document",
            start: function(event, ui) {
                $(this).addClass("ui-dialog-dragging");
                that._blockFrames();
                that._trigger("dragStart", event, filteredUi(ui));
            },
            drag: function(event, ui) {
                that._trigger("drag", event, filteredUi(ui));
            },
            stop: function(event, ui) {
                var left = ui.offset.left - that.document.scrollLeft(), top = ui.offset.top - that.document.scrollTop();
                options.position = {
                    my: "left top",
                    at: "left" + (left >= 0 ? "+" : "") + left + " top" + (top >= 0 ? "+" : "") + top,
                    of: that.window
                };
                $(this).removeClass("ui-dialog-dragging");
                that._unblockFrames();
                that._trigger("dragStop", event, filteredUi(ui));
            }
        });
    },
    _makeResizable: function() {
        function filteredUi(ui) {
            return {
                originalPosition: ui.originalPosition,
                originalSize: ui.originalSize,
                position: ui.position,
                size: ui.size
            };
        }
        var that = this, options = this.options, handles = options.resizable, position = this.uiDialog.css("position"), resizeHandles = "string" == typeof handles ? handles : "n,e,s,w,se,sw,ne,nw";
        this.uiDialog.resizable({
            cancel: ".ui-dialog-content",
            containment: "document",
            alsoResize: this.element,
            maxWidth: options.maxWidth,
            maxHeight: options.maxHeight,
            minWidth: options.minWidth,
            minHeight: this._minHeight(),
            handles: resizeHandles,
            start: function(event, ui) {
                $(this).addClass("ui-dialog-resizing");
                that._blockFrames();
                that._trigger("resizeStart", event, filteredUi(ui));
            },
            resize: function(event, ui) {
                that._trigger("resize", event, filteredUi(ui));
            },
            stop: function(event, ui) {
                var offset = that.uiDialog.offset(), left = offset.left - that.document.scrollLeft(), top = offset.top - that.document.scrollTop();
                options.height = that.uiDialog.height();
                options.width = that.uiDialog.width();
                options.position = {
                    my: "left top",
                    at: "left" + (left >= 0 ? "+" : "") + left + " top" + (top >= 0 ? "+" : "") + top,
                    of: that.window
                };
                $(this).removeClass("ui-dialog-resizing");
                that._unblockFrames();
                that._trigger("resizeStop", event, filteredUi(ui));
            }
        }).css("position", position);
    },
    _trackFocus: function() {
        this._on(this.widget(), {
            focusin: function(event) {
                this._makeFocusTarget();
                this._focusedElement = $(event.target);
            }
        });
    },
    _makeFocusTarget: function() {
        this._untrackInstance();
        this._trackingInstances().unshift(this);
    },
    _untrackInstance: function() {
        var instances = this._trackingInstances(), exists = $.inArray(this, instances);
        -1 !== exists && instances.splice(exists, 1);
    },
    _trackingInstances: function() {
        var instances = this.document.data("ui-dialog-instances");
        if (!instances) {
            instances = [];
            this.document.data("ui-dialog-instances", instances);
        }
        return instances;
    },
    _minHeight: function() {
        var options = this.options;
        return "auto" === options.height ? options.minHeight : Math.min(options.minHeight, options.height);
    },
    _position: function() {
        var isVisible = this.uiDialog.is(":visible");
        isVisible || this.uiDialog.show();
        this.uiDialog.position(this.options.position);
        isVisible || this.uiDialog.hide();
    },
    _setOptions: function(options) {
        var that = this, resize = !1, resizableOptions = {};
        $.each(options, function(key, value) {
            that._setOption(key, value);
            key in that.sizeRelatedOptions && (resize = !0);
            key in that.resizableRelatedOptions && (resizableOptions[key] = value);
        });
        if (resize) {
            this._size();
            this._position();
        }
        this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", resizableOptions);
    },
    _setOption: function(key, value) {
        var isDraggable, isResizable, uiDialog = this.uiDialog;
        "dialogClass" === key && uiDialog.removeClass(this.options.dialogClass).addClass(value);
        if ("disabled" !== key) {
            this._super(key, value);
            "appendTo" === key && this.uiDialog.appendTo(this._appendTo());
            "buttons" === key && this._createButtons();
            "closeText" === key && this.uiDialogTitlebarClose.button({
                label: "" + value
            });
            if ("draggable" === key) {
                isDraggable = uiDialog.is(":data(ui-draggable)");
                isDraggable && !value && uiDialog.draggable("destroy");
                !isDraggable && value && this._makeDraggable();
            }
            "position" === key && this._position();
            if ("resizable" === key) {
                isResizable = uiDialog.is(":data(ui-resizable)");
                isResizable && !value && uiDialog.resizable("destroy");
                isResizable && "string" == typeof value && uiDialog.resizable("option", "handles", value);
                isResizable || value === !1 || this._makeResizable();
            }
            "title" === key && this._title(this.uiDialogTitlebar.find(".ui-dialog-title"));
        }
    },
    _size: function() {
        var nonContentHeight, minContentHeight, maxContentHeight, options = this.options;
        this.element.show().css({
            width: "auto",
            minHeight: 0,
            maxHeight: "none",
            height: 0
        });
        options.minWidth > options.width && (options.width = options.minWidth);
        nonContentHeight = this.uiDialog.css({
            height: "auto",
            width: options.width
        }).outerHeight();
        minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
        maxContentHeight = "number" == typeof options.maxHeight ? Math.max(0, options.maxHeight - nonContentHeight) : "none";
        "auto" === options.height ? this.element.css({
            minHeight: minContentHeight,
            maxHeight: maxContentHeight,
            height: "auto"
        }) : this.element.height(Math.max(0, options.height - nonContentHeight));
        this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight());
    },
    _blockFrames: function() {
        this.iframeBlocks = this.document.find("iframe").map(function() {
            var iframe = $(this);
            return $("<div>").css({
                position: "absolute",
                width: iframe.outerWidth(),
                height: iframe.outerHeight()
            }).appendTo(iframe.parent()).offset(iframe.offset())[0];
        });
    },
    _unblockFrames: function() {
        if (this.iframeBlocks) {
            this.iframeBlocks.remove();
            delete this.iframeBlocks;
        }
    },
    _allowInteraction: function(event) {
        return $(event.target).closest(".ui-dialog").length ? !0 : !!$(event.target).closest(".ui-datepicker").length;
    },
    _createOverlay: function() {
        if (this.options.modal) {
            var isOpening = !0;
            this._delay(function() {
                isOpening = !1;
            });
            this.document.data("ui-dialog-overlays") || this._on(this.document, {
                focusin: function(event) {
                    if (!isOpening && !this._allowInteraction(event)) {
                        event.preventDefault();
                        this._trackingInstances()[0]._focusTabbable();
                    }
                }
            });
            this.overlay = $("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo());
            this._on(this.overlay, {
                mousedown: "_keepFocus"
            });
            this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1);
        }
    },
    _destroyOverlay: function() {
        if (this.options.modal && this.overlay) {
            var overlays = this.document.data("ui-dialog-overlays") - 1;
            overlays ? this.document.data("ui-dialog-overlays", overlays) : this.document.unbind("focusin").removeData("ui-dialog-overlays");
            this.overlay.remove();
            this.overlay = null;
        }
    }
});

$.widget("ui.droppable", {
    version: "1.11.1",
    widgetEventPrefix: "drop",
    options: {
        accept: "*",
        activeClass: !1,
        addClasses: !0,
        greedy: !1,
        hoverClass: !1,
        scope: "default",
        tolerance: "intersect",
        activate: null,
        deactivate: null,
        drop: null,
        out: null,
        over: null
    },
    _create: function() {
        var proportions, o = this.options, accept = o.accept;
        this.isover = !1;
        this.isout = !0;
        this.accept = $.isFunction(accept) ? accept : function(d) {
            return d.is(accept);
        };
        this.proportions = function() {
            if (!arguments.length) return proportions ? proportions : proportions = {
                width: this.element[0].offsetWidth,
                height: this.element[0].offsetHeight
            };
            proportions = arguments[0];
        };
        this._addToManager(o.scope);
        o.addClasses && this.element.addClass("ui-droppable");
    },
    _addToManager: function(scope) {
        $.ui.ddmanager.droppables[scope] = $.ui.ddmanager.droppables[scope] || [];
        $.ui.ddmanager.droppables[scope].push(this);
    },
    _splice: function(drop) {
        for (var i = 0; i < drop.length; i++) drop[i] === this && drop.splice(i, 1);
    },
    _destroy: function() {
        var drop = $.ui.ddmanager.droppables[this.options.scope];
        this._splice(drop);
        this.element.removeClass("ui-droppable ui-droppable-disabled");
    },
    _setOption: function(key, value) {
        if ("accept" === key) this.accept = $.isFunction(value) ? value : function(d) {
            return d.is(value);
        }; else if ("scope" === key) {
            var drop = $.ui.ddmanager.droppables[this.options.scope];
            this._splice(drop);
            this._addToManager(value);
        }
        this._super(key, value);
    },
    _activate: function(event) {
        var draggable = $.ui.ddmanager.current;
        this.options.activeClass && this.element.addClass(this.options.activeClass);
        draggable && this._trigger("activate", event, this.ui(draggable));
    },
    _deactivate: function(event) {
        var draggable = $.ui.ddmanager.current;
        this.options.activeClass && this.element.removeClass(this.options.activeClass);
        draggable && this._trigger("deactivate", event, this.ui(draggable));
    },
    _over: function(event) {
        var draggable = $.ui.ddmanager.current;
        if (draggable && (draggable.currentItem || draggable.element)[0] !== this.element[0] && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
            this.options.hoverClass && this.element.addClass(this.options.hoverClass);
            this._trigger("over", event, this.ui(draggable));
        }
    },
    _out: function(event) {
        var draggable = $.ui.ddmanager.current;
        if (draggable && (draggable.currentItem || draggable.element)[0] !== this.element[0] && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
            this.options.hoverClass && this.element.removeClass(this.options.hoverClass);
            this._trigger("out", event, this.ui(draggable));
        }
    },
    _drop: function(event, custom) {
        var draggable = custom || $.ui.ddmanager.current, childrenIntersection = !1;
        if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) return !1;
        this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
            var inst = $(this).droppable("instance");
            if (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], draggable.currentItem || draggable.element) && $.ui.intersect(draggable, $.extend(inst, {
                offset: inst.element.offset()
            }), inst.options.tolerance, event)) {
                childrenIntersection = !0;
                return !1;
            }
        });
        if (childrenIntersection) return !1;
        if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
            this.options.activeClass && this.element.removeClass(this.options.activeClass);
            this.options.hoverClass && this.element.removeClass(this.options.hoverClass);
            this._trigger("drop", event, this.ui(draggable));
            return this.element;
        }
        return !1;
    },
    ui: function(c) {
        return {
            draggable: c.currentItem || c.element,
            helper: c.helper,
            position: c.position,
            offset: c.positionAbs
        };
    }
});

$.ui.intersect = function() {
    function isOverAxis(x, reference, size) {
        return x >= reference && reference + size > x;
    }
    return function(draggable, droppable, toleranceMode, event) {
        if (!droppable.offset) return !1;
        var x1 = (draggable.positionAbs || draggable.position.absolute).left, y1 = (draggable.positionAbs || draggable.position.absolute).top, x2 = x1 + draggable.helperProportions.width, y2 = y1 + draggable.helperProportions.height, l = droppable.offset.left, t = droppable.offset.top, r = l + droppable.proportions().width, b = t + droppable.proportions().height;
        switch (toleranceMode) {
          case "fit":
            return x1 >= l && r >= x2 && y1 >= t && b >= y2;

          case "intersect":
            return l < x1 + draggable.helperProportions.width / 2 && x2 - draggable.helperProportions.width / 2 < r && t < y1 + draggable.helperProportions.height / 2 && y2 - draggable.helperProportions.height / 2 < b;

          case "pointer":
            return isOverAxis(event.pageY, t, droppable.proportions().height) && isOverAxis(event.pageX, l, droppable.proportions().width);

          case "touch":
            return (y1 >= t && b >= y1 || y2 >= t && b >= y2 || t > y1 && y2 > b) && (x1 >= l && r >= x1 || x2 >= l && r >= x2 || l > x1 && x2 > r);

          default:
            return !1;
        }
    };
}();

$.ui.ddmanager = {
    current: null,
    droppables: {
        "default": []
    },
    prepareOffsets: function(t, event) {
        var i, j, m = $.ui.ddmanager.droppables[t.options.scope] || [], type = event ? event.type : null, list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();
        droppablesLoop: for (i = 0; i < m.length; i++) if (!(m[i].options.disabled || t && !m[i].accept.call(m[i].element[0], t.currentItem || t.element))) {
            for (j = 0; j < list.length; j++) if (list[j] === m[i].element[0]) {
                m[i].proportions().height = 0;
                continue droppablesLoop;
            }
            m[i].visible = "none" !== m[i].element.css("display");
            if (m[i].visible) {
                "mousedown" === type && m[i]._activate.call(m[i], event);
                m[i].offset = m[i].element.offset();
                m[i].proportions({
                    width: m[i].element[0].offsetWidth,
                    height: m[i].element[0].offsetHeight
                });
            }
        }
    },
    drop: function(draggable, event) {
        var dropped = !1;
        $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {
            if (this.options) {
                !this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance, event) && (dropped = this._drop.call(this, event) || dropped);
                if (!this.options.disabled && this.visible && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                    this.isout = !0;
                    this.isover = !1;
                    this._deactivate.call(this, event);
                }
            }
        });
        return dropped;
    },
    dragStart: function(draggable, event) {
        draggable.element.parentsUntil("body").bind("scroll.droppable", function() {
            draggable.options.refreshPositions || $.ui.ddmanager.prepareOffsets(draggable, event);
        });
    },
    drag: function(draggable, event) {
        draggable.options.refreshPositions && $.ui.ddmanager.prepareOffsets(draggable, event);
        $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {
            if (!this.options.disabled && !this.greedyChild && this.visible) {
                var parentInstance, scope, parent, intersects = $.ui.intersect(draggable, this, this.options.tolerance, event), c = !intersects && this.isover ? "isout" : intersects && !this.isover ? "isover" : null;
                if (c) {
                    if (this.options.greedy) {
                        scope = this.options.scope;
                        parent = this.element.parents(":data(ui-droppable)").filter(function() {
                            return $(this).droppable("instance").options.scope === scope;
                        });
                        if (parent.length) {
                            parentInstance = $(parent[0]).droppable("instance");
                            parentInstance.greedyChild = "isover" === c;
                        }
                    }
                    if (parentInstance && "isover" === c) {
                        parentInstance.isover = !1;
                        parentInstance.isout = !0;
                        parentInstance._out.call(parentInstance, event);
                    }
                    this[c] = !0;
                    this["isout" === c ? "isover" : "isout"] = !1;
                    this["isover" === c ? "_over" : "_out"].call(this, event);
                    if (parentInstance && "isout" === c) {
                        parentInstance.isout = !1;
                        parentInstance.isover = !0;
                        parentInstance._over.call(parentInstance, event);
                    }
                }
            }
        });
    },
    dragStop: function(draggable, event) {
        draggable.element.parentsUntil("body").unbind("scroll.droppable");
        draggable.options.refreshPositions || $.ui.ddmanager.prepareOffsets(draggable, event);
    }
};

var droppable = $.ui.droppable, dataSpace = "ui-effects-", jQuery = $;

$.effects = {
    effect: {}
};

!function(jQuery, undefined) {
    function clamp(value, prop, allowEmpty) {
        var type = propTypes[prop.type] || {};
        if (null == value) return allowEmpty || !prop.def ? null : prop.def;
        value = type.floor ? ~~value : parseFloat(value);
        return isNaN(value) ? prop.def : type.mod ? (value + type.mod) % type.mod : 0 > value ? 0 : type.max < value ? type.max : value;
    }
    function stringParse(string) {
        var inst = color(), rgba = inst._rgba = [];
        string = string.toLowerCase();
        each(stringParsers, function(i, parser) {
            var parsed, match = parser.re.exec(string), values = match && parser.parse(match), spaceName = parser.space || "rgba";
            if (values) {
                parsed = inst[spaceName](values);
                inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];
                rgba = inst._rgba = parsed._rgba;
                return !1;
            }
        });
        if (rgba.length) {
            "0,0,0,0" === rgba.join() && jQuery.extend(rgba, colors.transparent);
            return inst;
        }
        return colors[string];
    }
    function hue2rgb(p, q, h) {
        h = (h + 1) % 1;
        return 1 > 6 * h ? p + (q - p) * h * 6 : 1 > 2 * h ? q : 2 > 3 * h ? p + (q - p) * (2 / 3 - h) * 6 : p;
    }
    var colors, stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor", rplusequals = /^([\-+])=\s*(\d+\.?\d*)/, stringParsers = [ {
        re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
        parse: function(execResult) {
            return [ execResult[1], execResult[2], execResult[3], execResult[4] ];
        }
    }, {
        re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
        parse: function(execResult) {
            return [ 2.55 * execResult[1], 2.55 * execResult[2], 2.55 * execResult[3], execResult[4] ];
        }
    }, {
        re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
        parse: function(execResult) {
            return [ parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16) ];
        }
    }, {
        re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
        parse: function(execResult) {
            return [ parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16) ];
        }
    }, {
        re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
        space: "hsla",
        parse: function(execResult) {
            return [ execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4] ];
        }
    } ], color = jQuery.Color = function(color, green, blue, alpha) {
        return new jQuery.Color.fn.parse(color, green, blue, alpha);
    }, spaces = {
        rgba: {
            props: {
                red: {
                    idx: 0,
                    type: "byte"
                },
                green: {
                    idx: 1,
                    type: "byte"
                },
                blue: {
                    idx: 2,
                    type: "byte"
                }
            }
        },
        hsla: {
            props: {
                hue: {
                    idx: 0,
                    type: "degrees"
                },
                saturation: {
                    idx: 1,
                    type: "percent"
                },
                lightness: {
                    idx: 2,
                    type: "percent"
                }
            }
        }
    }, propTypes = {
        "byte": {
            floor: !0,
            max: 255
        },
        percent: {
            max: 1
        },
        degrees: {
            mod: 360,
            floor: !0
        }
    }, support = color.support = {}, supportElem = jQuery("<p>")[0], each = jQuery.each;
    supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
    support.rgba = supportElem.style.backgroundColor.indexOf("rgba") > -1;
    each(spaces, function(spaceName, space) {
        space.cache = "_" + spaceName;
        space.props.alpha = {
            idx: 3,
            type: "percent",
            def: 1
        };
    });
    color.fn = jQuery.extend(color.prototype, {
        parse: function(red, green, blue, alpha) {
            if (red === undefined) {
                this._rgba = [ null, null, null, null ];
                return this;
            }
            if (red.jquery || red.nodeType) {
                red = jQuery(red).css(green);
                green = undefined;
            }
            var inst = this, type = jQuery.type(red), rgba = this._rgba = [];
            if (green !== undefined) {
                red = [ red, green, blue, alpha ];
                type = "array";
            }
            if ("string" === type) return this.parse(stringParse(red) || colors._default);
            if ("array" === type) {
                each(spaces.rgba.props, function(key, prop) {
                    rgba[prop.idx] = clamp(red[prop.idx], prop);
                });
                return this;
            }
            if ("object" === type) {
                red instanceof color ? each(spaces, function(spaceName, space) {
                    red[space.cache] && (inst[space.cache] = red[space.cache].slice());
                }) : each(spaces, function(spaceName, space) {
                    var cache = space.cache;
                    each(space.props, function(key, prop) {
                        if (!inst[cache] && space.to) {
                            if ("alpha" === key || null == red[key]) return;
                            inst[cache] = space.to(inst._rgba);
                        }
                        inst[cache][prop.idx] = clamp(red[key], prop, !0);
                    });
                    if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {
                        inst[cache][3] = 1;
                        space.from && (inst._rgba = space.from(inst[cache]));
                    }
                });
                return this;
            }
        },
        is: function(compare) {
            var is = color(compare), same = !0, inst = this;
            each(spaces, function(_, space) {
                var localCache, isCache = is[space.cache];
                if (isCache) {
                    localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];
                    each(space.props, function(_, prop) {
                        if (null != isCache[prop.idx]) {
                            same = isCache[prop.idx] === localCache[prop.idx];
                            return same;
                        }
                    });
                }
                return same;
            });
            return same;
        },
        _space: function() {
            var used = [], inst = this;
            each(spaces, function(spaceName, space) {
                inst[space.cache] && used.push(spaceName);
            });
            return used.pop();
        },
        transition: function(other, distance) {
            var end = color(other), spaceName = end._space(), space = spaces[spaceName], startColor = 0 === this.alpha() ? color("transparent") : this, start = startColor[space.cache] || space.to(startColor._rgba), result = start.slice();
            end = end[space.cache];
            each(space.props, function(key, prop) {
                var index = prop.idx, startValue = start[index], endValue = end[index], type = propTypes[prop.type] || {};
                if (null !== endValue) if (null === startValue) result[index] = endValue; else {
                    type.mod && (endValue - startValue > type.mod / 2 ? startValue += type.mod : startValue - endValue > type.mod / 2 && (startValue -= type.mod));
                    result[index] = clamp((endValue - startValue) * distance + startValue, prop);
                }
            });
            return this[spaceName](result);
        },
        blend: function(opaque) {
            if (1 === this._rgba[3]) return this;
            var rgb = this._rgba.slice(), a = rgb.pop(), blend = color(opaque)._rgba;
            return color(jQuery.map(rgb, function(v, i) {
                return (1 - a) * blend[i] + a * v;
            }));
        },
        toRgbaString: function() {
            var prefix = "rgba(", rgba = jQuery.map(this._rgba, function(v, i) {
                return null == v ? i > 2 ? 1 : 0 : v;
            });
            if (1 === rgba[3]) {
                rgba.pop();
                prefix = "rgb(";
            }
            return prefix + rgba.join() + ")";
        },
        toHslaString: function() {
            var prefix = "hsla(", hsla = jQuery.map(this.hsla(), function(v, i) {
                null == v && (v = i > 2 ? 1 : 0);
                i && 3 > i && (v = Math.round(100 * v) + "%");
                return v;
            });
            if (1 === hsla[3]) {
                hsla.pop();
                prefix = "hsl(";
            }
            return prefix + hsla.join() + ")";
        },
        toHexString: function(includeAlpha) {
            var rgba = this._rgba.slice(), alpha = rgba.pop();
            includeAlpha && rgba.push(~~(255 * alpha));
            return "#" + jQuery.map(rgba, function(v) {
                v = (v || 0).toString(16);
                return 1 === v.length ? "0" + v : v;
            }).join("");
        },
        toString: function() {
            return 0 === this._rgba[3] ? "transparent" : this.toRgbaString();
        }
    });
    color.fn.parse.prototype = color.fn;
    spaces.hsla.to = function(rgba) {
        if (null == rgba[0] || null == rgba[1] || null == rgba[2]) return [ null, null, null, rgba[3] ];
        var h, s, r = rgba[0] / 255, g = rgba[1] / 255, b = rgba[2] / 255, a = rgba[3], max = Math.max(r, g, b), min = Math.min(r, g, b), diff = max - min, add = max + min, l = .5 * add;
        h = min === max ? 0 : r === max ? 60 * (g - b) / diff + 360 : g === max ? 60 * (b - r) / diff + 120 : 60 * (r - g) / diff + 240;
        s = 0 === diff ? 0 : .5 >= l ? diff / add : diff / (2 - add);
        return [ Math.round(h) % 360, s, l, null == a ? 1 : a ];
    };
    spaces.hsla.from = function(hsla) {
        if (null == hsla[0] || null == hsla[1] || null == hsla[2]) return [ null, null, null, hsla[3] ];
        var h = hsla[0] / 360, s = hsla[1], l = hsla[2], a = hsla[3], q = .5 >= l ? l * (1 + s) : l + s - l * s, p = 2 * l - q;
        return [ Math.round(255 * hue2rgb(p, q, h + 1 / 3)), Math.round(255 * hue2rgb(p, q, h)), Math.round(255 * hue2rgb(p, q, h - 1 / 3)), a ];
    };
    each(spaces, function(spaceName, space) {
        var props = space.props, cache = space.cache, to = space.to, from = space.from;
        color.fn[spaceName] = function(value) {
            to && !this[cache] && (this[cache] = to(this._rgba));
            if (value === undefined) return this[cache].slice();
            var ret, type = jQuery.type(value), arr = "array" === type || "object" === type ? value : arguments, local = this[cache].slice();
            each(props, function(key, prop) {
                var val = arr["object" === type ? key : prop.idx];
                null == val && (val = local[prop.idx]);
                local[prop.idx] = clamp(val, prop);
            });
            if (from) {
                ret = color(from(local));
                ret[cache] = local;
                return ret;
            }
            return color(local);
        };
        each(props, function(key, prop) {
            color.fn[key] || (color.fn[key] = function(value) {
                var match, vtype = jQuery.type(value), fn = "alpha" === key ? this._hsla ? "hsla" : "rgba" : spaceName, local = this[fn](), cur = local[prop.idx];
                if ("undefined" === vtype) return cur;
                if ("function" === vtype) {
                    value = value.call(this, cur);
                    vtype = jQuery.type(value);
                }
                if (null == value && prop.empty) return this;
                if ("string" === vtype) {
                    match = rplusequals.exec(value);
                    match && (value = cur + parseFloat(match[2]) * ("+" === match[1] ? 1 : -1));
                }
                local[prop.idx] = value;
                return this[fn](local);
            });
        });
    });
    color.hook = function(hook) {
        var hooks = hook.split(" ");
        each(hooks, function(i, hook) {
            jQuery.cssHooks[hook] = {
                set: function(elem, value) {
                    var parsed, curElem, backgroundColor = "";
                    if ("transparent" !== value && ("string" !== jQuery.type(value) || (parsed = stringParse(value)))) {
                        value = color(parsed || value);
                        if (!support.rgba && 1 !== value._rgba[3]) {
                            curElem = "backgroundColor" === hook ? elem.parentNode : elem;
                            for (;("" === backgroundColor || "transparent" === backgroundColor) && curElem && curElem.style; ) try {
                                backgroundColor = jQuery.css(curElem, "backgroundColor");
                                curElem = curElem.parentNode;
                            } catch (e) {}
                            value = value.blend(backgroundColor && "transparent" !== backgroundColor ? backgroundColor : "_default");
                        }
                        value = value.toRgbaString();
                    }
                    try {
                        elem.style[hook] = value;
                    } catch (e) {}
                }
            };
            jQuery.fx.step[hook] = function(fx) {
                if (!fx.colorInit) {
                    fx.start = color(fx.elem, hook);
                    fx.end = color(fx.end);
                    fx.colorInit = !0;
                }
                jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));
            };
        });
    };
    color.hook(stepHooks);
    jQuery.cssHooks.borderColor = {
        expand: function(value) {
            var expanded = {};
            each([ "Top", "Right", "Bottom", "Left" ], function(i, part) {
                expanded["border" + part + "Color"] = value;
            });
            return expanded;
        }
    };
    colors = jQuery.Color.names = {
        aqua: "#00ffff",
        black: "#000000",
        blue: "#0000ff",
        fuchsia: "#ff00ff",
        gray: "#808080",
        green: "#008000",
        lime: "#00ff00",
        maroon: "#800000",
        navy: "#000080",
        olive: "#808000",
        purple: "#800080",
        red: "#ff0000",
        silver: "#c0c0c0",
        teal: "#008080",
        white: "#ffffff",
        yellow: "#ffff00",
        transparent: [ null, null, null, 0 ],
        _default: "#ffffff"
    };
}(jQuery);

!function() {
    function getElementStyles(elem) {
        var key, len, style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle, styles = {};
        if (style && style.length && style[0] && style[style[0]]) {
            len = style.length;
            for (;len--; ) {
                key = style[len];
                "string" == typeof style[key] && (styles[$.camelCase(key)] = style[key]);
            }
        } else for (key in style) "string" == typeof style[key] && (styles[key] = style[key]);
        return styles;
    }
    function styleDifference(oldStyle, newStyle) {
        var name, value, diff = {};
        for (name in newStyle) {
            value = newStyle[name];
            oldStyle[name] !== value && (shorthandStyles[name] || ($.fx.step[name] || !isNaN(parseFloat(value))) && (diff[name] = value));
        }
        return diff;
    }
    var classAnimationActions = [ "add", "remove", "toggle" ], shorthandStyles = {
        border: 1,
        borderBottom: 1,
        borderColor: 1,
        borderLeft: 1,
        borderRight: 1,
        borderTop: 1,
        borderWidth: 1,
        margin: 1,
        padding: 1
    };
    $.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function(_, prop) {
        $.fx.step[prop] = function(fx) {
            if ("none" !== fx.end && !fx.setAttr || 1 === fx.pos && !fx.setAttr) {
                jQuery.style(fx.elem, prop, fx.end);
                fx.setAttr = !0;
            }
        };
    });
    $.fn.addBack || ($.fn.addBack = function(selector) {
        return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
    });
    $.effects.animateClass = function(value, duration, easing, callback) {
        var o = $.speed(duration, easing, callback);
        return this.queue(function() {
            var applyClassChange, animated = $(this), baseClass = animated.attr("class") || "", allAnimations = o.children ? animated.find("*").addBack() : animated;
            allAnimations = allAnimations.map(function() {
                var el = $(this);
                return {
                    el: el,
                    start: getElementStyles(this)
                };
            });
            applyClassChange = function() {
                $.each(classAnimationActions, function(i, action) {
                    value[action] && animated[action + "Class"](value[action]);
                });
            };
            applyClassChange();
            allAnimations = allAnimations.map(function() {
                this.end = getElementStyles(this.el[0]);
                this.diff = styleDifference(this.start, this.end);
                return this;
            });
            animated.attr("class", baseClass);
            allAnimations = allAnimations.map(function() {
                var styleInfo = this, dfd = $.Deferred(), opts = $.extend({}, o, {
                    queue: !1,
                    complete: function() {
                        dfd.resolve(styleInfo);
                    }
                });
                this.el.animate(this.diff, opts);
                return dfd.promise();
            });
            $.when.apply($, allAnimations.get()).done(function() {
                applyClassChange();
                $.each(arguments, function() {
                    var el = this.el;
                    $.each(this.diff, function(key) {
                        el.css(key, "");
                    });
                });
                o.complete.call(animated[0]);
            });
        });
    };
    $.fn.extend({
        addClass: function(orig) {
            return function(classNames, speed, easing, callback) {
                return speed ? $.effects.animateClass.call(this, {
                    add: classNames
                }, speed, easing, callback) : orig.apply(this, arguments);
            };
        }($.fn.addClass),
        removeClass: function(orig) {
            return function(classNames, speed, easing, callback) {
                return arguments.length > 1 ? $.effects.animateClass.call(this, {
                    remove: classNames
                }, speed, easing, callback) : orig.apply(this, arguments);
            };
        }($.fn.removeClass),
        toggleClass: function(orig) {
            return function(classNames, force, speed, easing, callback) {
                return "boolean" == typeof force || void 0 === force ? speed ? $.effects.animateClass.call(this, force ? {
                    add: classNames
                } : {
                    remove: classNames
                }, speed, easing, callback) : orig.apply(this, arguments) : $.effects.animateClass.call(this, {
                    toggle: classNames
                }, force, speed, easing);
            };
        }($.fn.toggleClass),
        switchClass: function(remove, add, speed, easing, callback) {
            return $.effects.animateClass.call(this, {
                add: add,
                remove: remove
            }, speed, easing, callback);
        }
    });
}();

!function() {
    function _normalizeArguments(effect, options, speed, callback) {
        if ($.isPlainObject(effect)) {
            options = effect;
            effect = effect.effect;
        }
        effect = {
            effect: effect
        };
        null == options && (options = {});
        if ($.isFunction(options)) {
            callback = options;
            speed = null;
            options = {};
        }
        if ("number" == typeof options || $.fx.speeds[options]) {
            callback = speed;
            speed = options;
            options = {};
        }
        if ($.isFunction(speed)) {
            callback = speed;
            speed = null;
        }
        options && $.extend(effect, options);
        speed = speed || options.duration;
        effect.duration = $.fx.off ? 0 : "number" == typeof speed ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;
        effect.complete = callback || options.complete;
        return effect;
    }
    function standardAnimationOption(option) {
        return !option || "number" == typeof option || $.fx.speeds[option] ? !0 : "string" != typeof option || $.effects.effect[option] ? $.isFunction(option) ? !0 : "object" != typeof option || option.effect ? !1 : !0 : !0;
    }
    $.extend($.effects, {
        version: "1.11.1",
        save: function(element, set) {
            for (var i = 0; i < set.length; i++) null !== set[i] && element.data(dataSpace + set[i], element[0].style[set[i]]);
        },
        restore: function(element, set) {
            var val, i;
            for (i = 0; i < set.length; i++) if (null !== set[i]) {
                val = element.data(dataSpace + set[i]);
                void 0 === val && (val = "");
                element.css(set[i], val);
            }
        },
        setMode: function(el, mode) {
            "toggle" === mode && (mode = el.is(":hidden") ? "show" : "hide");
            return mode;
        },
        getBaseline: function(origin, original) {
            var y, x;
            switch (origin[0]) {
              case "top":
                y = 0;
                break;

              case "middle":
                y = .5;
                break;

              case "bottom":
                y = 1;
                break;

              default:
                y = origin[0] / original.height;
            }
            switch (origin[1]) {
              case "left":
                x = 0;
                break;

              case "center":
                x = .5;
                break;

              case "right":
                x = 1;
                break;

              default:
                x = origin[1] / original.width;
            }
            return {
                x: x,
                y: y
            };
        },
        createWrapper: function(element) {
            if (element.parent().is(".ui-effects-wrapper")) return element.parent();
            var props = {
                width: element.outerWidth(!0),
                height: element.outerHeight(!0),
                "float": element.css("float")
            }, wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({
                fontSize: "100%",
                background: "transparent",
                border: "none",
                margin: 0,
                padding: 0
            }), size = {
                width: element.width(),
                height: element.height()
            }, active = document.activeElement;
            try {
                active.id;
            } catch (e) {
                active = document.body;
            }
            element.wrap(wrapper);
            (element[0] === active || $.contains(element[0], active)) && $(active).focus();
            wrapper = element.parent();
            if ("static" === element.css("position")) {
                wrapper.css({
                    position: "relative"
                });
                element.css({
                    position: "relative"
                });
            } else {
                $.extend(props, {
                    position: element.css("position"),
                    zIndex: element.css("z-index")
                });
                $.each([ "top", "left", "bottom", "right" ], function(i, pos) {
                    props[pos] = element.css(pos);
                    isNaN(parseInt(props[pos], 10)) && (props[pos] = "auto");
                });
                element.css({
                    position: "relative",
                    top: 0,
                    left: 0,
                    right: "auto",
                    bottom: "auto"
                });
            }
            element.css(size);
            return wrapper.css(props).show();
        },
        removeWrapper: function(element) {
            var active = document.activeElement;
            if (element.parent().is(".ui-effects-wrapper")) {
                element.parent().replaceWith(element);
                (element[0] === active || $.contains(element[0], active)) && $(active).focus();
            }
            return element;
        },
        setTransition: function(element, list, factor, value) {
            value = value || {};
            $.each(list, function(i, x) {
                var unit = element.cssUnit(x);
                unit[0] > 0 && (value[x] = unit[0] * factor + unit[1]);
            });
            return value;
        }
    });
    $.fn.extend({
        effect: function() {
            function run(next) {
                function done() {
                    $.isFunction(complete) && complete.call(elem[0]);
                    $.isFunction(next) && next();
                }
                var elem = $(this), complete = args.complete, mode = args.mode;
                if (elem.is(":hidden") ? "hide" === mode : "show" === mode) {
                    elem[mode]();
                    done();
                } else effectMethod.call(elem[0], args, done);
            }
            var args = _normalizeArguments.apply(this, arguments), mode = args.mode, queue = args.queue, effectMethod = $.effects.effect[args.effect];
            return $.fx.off || !effectMethod ? mode ? this[mode](args.duration, args.complete) : this.each(function() {
                args.complete && args.complete.call(this);
            }) : queue === !1 ? this.each(run) : this.queue(queue || "fx", run);
        },
        show: function(orig) {
            return function(option) {
                if (standardAnimationOption(option)) return orig.apply(this, arguments);
                var args = _normalizeArguments.apply(this, arguments);
                args.mode = "show";
                return this.effect.call(this, args);
            };
        }($.fn.show),
        hide: function(orig) {
            return function(option) {
                if (standardAnimationOption(option)) return orig.apply(this, arguments);
                var args = _normalizeArguments.apply(this, arguments);
                args.mode = "hide";
                return this.effect.call(this, args);
            };
        }($.fn.hide),
        toggle: function(orig) {
            return function(option) {
                if (standardAnimationOption(option) || "boolean" == typeof option) return orig.apply(this, arguments);
                var args = _normalizeArguments.apply(this, arguments);
                args.mode = "toggle";
                return this.effect.call(this, args);
            };
        }($.fn.toggle),
        cssUnit: function(key) {
            var style = this.css(key), val = [];
            $.each([ "em", "px", "%", "pt" ], function(i, unit) {
                style.indexOf(unit) > 0 && (val = [ parseFloat(style), unit ]);
            });
            return val;
        }
    });
}();

!function() {
    var baseEasings = {};
    $.each([ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function(i, name) {
        baseEasings[name] = function(p) {
            return Math.pow(p, i + 2);
        };
    });
    $.extend(baseEasings, {
        Sine: function(p) {
            return 1 - Math.cos(p * Math.PI / 2);
        },
        Circ: function(p) {
            return 1 - Math.sqrt(1 - p * p);
        },
        Elastic: function(p) {
            return 0 === p || 1 === p ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin((80 * (p - 1) - 7.5) * Math.PI / 15);
        },
        Back: function(p) {
            return p * p * (3 * p - 2);
        },
        Bounce: function(p) {
            for (var pow2, bounce = 4; p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11; ) ;
            return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((3 * pow2 - 2) / 22 - p, 2);
        }
    });
    $.each(baseEasings, function(name, easeIn) {
        $.easing["easeIn" + name] = easeIn;
        $.easing["easeOut" + name] = function(p) {
            return 1 - easeIn(1 - p);
        };
        $.easing["easeInOut" + name] = function(p) {
            return .5 > p ? easeIn(2 * p) / 2 : 1 - easeIn(-2 * p + 2) / 2;
        };
    });
}();

var effect = $.effects, effectBlind = $.effects.effect.blind = function(o, done) {
    var wrapper, distance, margin, el = $(this), rvertical = /up|down|vertical/, rpositivemotion = /up|left|vertical|horizontal/, props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), direction = o.direction || "up", vertical = rvertical.test(direction), ref = vertical ? "height" : "width", ref2 = vertical ? "top" : "left", motion = rpositivemotion.test(direction), animation = {}, show = "show" === mode;
    el.parent().is(".ui-effects-wrapper") ? $.effects.save(el.parent(), props) : $.effects.save(el, props);
    el.show();
    wrapper = $.effects.createWrapper(el).css({
        overflow: "hidden"
    });
    distance = wrapper[ref]();
    margin = parseFloat(wrapper.css(ref2)) || 0;
    animation[ref] = show ? distance : 0;
    if (!motion) {
        el.css(vertical ? "bottom" : "right", 0).css(vertical ? "top" : "left", "auto").css({
            position: "absolute"
        });
        animation[ref2] = show ? margin : distance + margin;
    }
    if (show) {
        wrapper.css(ref, 0);
        motion || wrapper.css(ref2, margin + distance);
    }
    wrapper.animate(animation, {
        duration: o.duration,
        easing: o.easing,
        queue: !1,
        complete: function() {
            "hide" === mode && el.hide();
            $.effects.restore(el, props);
            $.effects.removeWrapper(el);
            done();
        }
    });
}, effectBounce = $.effects.effect.bounce = function(o, done) {
    var i, upAnim, downAnim, el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "effect"), hide = "hide" === mode, show = "show" === mode, direction = o.direction || "up", distance = o.distance, times = o.times || 5, anims = 2 * times + (show || hide ? 1 : 0), speed = o.duration / anims, easing = o.easing, ref = "up" === direction || "down" === direction ? "top" : "left", motion = "up" === direction || "left" === direction, queue = el.queue(), queuelen = queue.length;
    (show || hide) && props.push("opacity");
    $.effects.save(el, props);
    el.show();
    $.effects.createWrapper(el);
    distance || (distance = el["top" === ref ? "outerHeight" : "outerWidth"]() / 3);
    if (show) {
        downAnim = {
            opacity: 1
        };
        downAnim[ref] = 0;
        el.css("opacity", 0).css(ref, motion ? 2 * -distance : 2 * distance).animate(downAnim, speed, easing);
    }
    hide && (distance /= Math.pow(2, times - 1));
    downAnim = {};
    downAnim[ref] = 0;
    for (i = 0; times > i; i++) {
        upAnim = {};
        upAnim[ref] = (motion ? "-=" : "+=") + distance;
        el.animate(upAnim, speed, easing).animate(downAnim, speed, easing);
        distance = hide ? 2 * distance : distance / 2;
    }
    if (hide) {
        upAnim = {
            opacity: 0
        };
        upAnim[ref] = (motion ? "-=" : "+=") + distance;
        el.animate(upAnim, speed, easing);
    }
    el.queue(function() {
        hide && el.hide();
        $.effects.restore(el, props);
        $.effects.removeWrapper(el);
        done();
    });
    queuelen > 1 && queue.splice.apply(queue, [ 1, 0 ].concat(queue.splice(queuelen, anims + 1)));
    el.dequeue();
}, effectClip = $.effects.effect.clip = function(o, done) {
    var wrapper, animate, distance, el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), show = "show" === mode, direction = o.direction || "vertical", vert = "vertical" === direction, size = vert ? "height" : "width", position = vert ? "top" : "left", animation = {};
    $.effects.save(el, props);
    el.show();
    wrapper = $.effects.createWrapper(el).css({
        overflow: "hidden"
    });
    animate = "IMG" === el[0].tagName ? wrapper : el;
    distance = animate[size]();
    if (show) {
        animate.css(size, 0);
        animate.css(position, distance / 2);
    }
    animation[size] = show ? distance : 0;
    animation[position] = show ? 0 : distance / 2;
    animate.animate(animation, {
        queue: !1,
        duration: o.duration,
        easing: o.easing,
        complete: function() {
            show || el.hide();
            $.effects.restore(el, props);
            $.effects.removeWrapper(el);
            done();
        }
    });
}, effectDrop = $.effects.effect.drop = function(o, done) {
    var distance, el = $(this), props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), show = "show" === mode, direction = o.direction || "left", ref = "up" === direction || "down" === direction ? "top" : "left", motion = "up" === direction || "left" === direction ? "pos" : "neg", animation = {
        opacity: show ? 1 : 0
    };
    $.effects.save(el, props);
    el.show();
    $.effects.createWrapper(el);
    distance = o.distance || el["top" === ref ? "outerHeight" : "outerWidth"](!0) / 2;
    show && el.css("opacity", 0).css(ref, "pos" === motion ? -distance : distance);
    animation[ref] = (show ? "pos" === motion ? "+=" : "-=" : "pos" === motion ? "-=" : "+=") + distance;
    el.animate(animation, {
        queue: !1,
        duration: o.duration,
        easing: o.easing,
        complete: function() {
            "hide" === mode && el.hide();
            $.effects.restore(el, props);
            $.effects.removeWrapper(el);
            done();
        }
    });
}, effectExplode = $.effects.effect.explode = function(o, done) {
    function childComplete() {
        pieces.push(this);
        pieces.length === rows * cells && animComplete();
    }
    function animComplete() {
        el.css({
            visibility: "visible"
        });
        $(pieces).remove();
        show || el.hide();
        done();
    }
    var i, j, left, top, mx, my, rows = o.pieces ? Math.round(Math.sqrt(o.pieces)) : 3, cells = rows, el = $(this), mode = $.effects.setMode(el, o.mode || "hide"), show = "show" === mode, offset = el.show().css("visibility", "hidden").offset(), width = Math.ceil(el.outerWidth() / cells), height = Math.ceil(el.outerHeight() / rows), pieces = [];
    for (i = 0; rows > i; i++) {
        top = offset.top + i * height;
        my = i - (rows - 1) / 2;
        for (j = 0; cells > j; j++) {
            left = offset.left + j * width;
            mx = j - (cells - 1) / 2;
            el.clone().appendTo("body").wrap("<div></div>").css({
                position: "absolute",
                visibility: "visible",
                left: -j * width,
                top: -i * height
            }).parent().addClass("ui-effects-explode").css({
                position: "absolute",
                overflow: "hidden",
                width: width,
                height: height,
                left: left + (show ? mx * width : 0),
                top: top + (show ? my * height : 0),
                opacity: show ? 0 : 1
            }).animate({
                left: left + (show ? 0 : mx * width),
                top: top + (show ? 0 : my * height),
                opacity: show ? 1 : 0
            }, o.duration || 500, o.easing, childComplete);
        }
    }
}, effectFade = $.effects.effect.fade = function(o, done) {
    var el = $(this), mode = $.effects.setMode(el, o.mode || "toggle");
    el.animate({
        opacity: mode
    }, {
        queue: !1,
        duration: o.duration,
        easing: o.easing,
        complete: done
    });
}, effectFold = $.effects.effect.fold = function(o, done) {
    var wrapper, distance, el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), show = "show" === mode, hide = "hide" === mode, size = o.size || 15, percent = /([0-9]+)%/.exec(size), horizFirst = !!o.horizFirst, widthFirst = show !== horizFirst, ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ], duration = o.duration / 2, animation1 = {}, animation2 = {};
    $.effects.save(el, props);
    el.show();
    wrapper = $.effects.createWrapper(el).css({
        overflow: "hidden"
    });
    distance = widthFirst ? [ wrapper.width(), wrapper.height() ] : [ wrapper.height(), wrapper.width() ];
    percent && (size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1]);
    show && wrapper.css(horizFirst ? {
        height: 0,
        width: size
    } : {
        height: size,
        width: 0
    });
    animation1[ref[0]] = show ? distance[0] : size;
    animation2[ref[1]] = show ? distance[1] : 0;
    wrapper.animate(animation1, duration, o.easing).animate(animation2, duration, o.easing, function() {
        hide && el.hide();
        $.effects.restore(el, props);
        $.effects.removeWrapper(el);
        done();
    });
}, effectHighlight = $.effects.effect.highlight = function(o, done) {
    var elem = $(this), props = [ "backgroundImage", "backgroundColor", "opacity" ], mode = $.effects.setMode(elem, o.mode || "show"), animation = {
        backgroundColor: elem.css("backgroundColor")
    };
    "hide" === mode && (animation.opacity = 0);
    $.effects.save(elem, props);
    elem.show().css({
        backgroundImage: "none",
        backgroundColor: o.color || "#ffff99"
    }).animate(animation, {
        queue: !1,
        duration: o.duration,
        easing: o.easing,
        complete: function() {
            "hide" === mode && elem.hide();
            $.effects.restore(elem, props);
            done();
        }
    });
}, effectSize = $.effects.effect.size = function(o, done) {
    var original, baseline, factor, el = $(this), props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ], props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ], props2 = [ "width", "height", "overflow" ], cProps = [ "fontSize" ], vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ], hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ], mode = $.effects.setMode(el, o.mode || "effect"), restore = o.restore || "effect" !== mode, scale = o.scale || "both", origin = o.origin || [ "middle", "center" ], position = el.css("position"), props = restore ? props0 : props1, zero = {
        height: 0,
        width: 0,
        outerHeight: 0,
        outerWidth: 0
    };
    "show" === mode && el.show();
    original = {
        height: el.height(),
        width: el.width(),
        outerHeight: el.outerHeight(),
        outerWidth: el.outerWidth()
    };
    if ("toggle" === o.mode && "show" === mode) {
        el.from = o.to || zero;
        el.to = o.from || original;
    } else {
        el.from = o.from || ("show" === mode ? zero : original);
        el.to = o.to || ("hide" === mode ? zero : original);
    }
    factor = {
        from: {
            y: el.from.height / original.height,
            x: el.from.width / original.width
        },
        to: {
            y: el.to.height / original.height,
            x: el.to.width / original.width
        }
    };
    if ("box" === scale || "both" === scale) {
        if (factor.from.y !== factor.to.y) {
            props = props.concat(vProps);
            el.from = $.effects.setTransition(el, vProps, factor.from.y, el.from);
            el.to = $.effects.setTransition(el, vProps, factor.to.y, el.to);
        }
        if (factor.from.x !== factor.to.x) {
            props = props.concat(hProps);
            el.from = $.effects.setTransition(el, hProps, factor.from.x, el.from);
            el.to = $.effects.setTransition(el, hProps, factor.to.x, el.to);
        }
    }
    if (("content" === scale || "both" === scale) && factor.from.y !== factor.to.y) {
        props = props.concat(cProps).concat(props2);
        el.from = $.effects.setTransition(el, cProps, factor.from.y, el.from);
        el.to = $.effects.setTransition(el, cProps, factor.to.y, el.to);
    }
    $.effects.save(el, props);
    el.show();
    $.effects.createWrapper(el);
    el.css("overflow", "hidden").css(el.from);
    if (origin) {
        baseline = $.effects.getBaseline(origin, original);
        el.from.top = (original.outerHeight - el.outerHeight()) * baseline.y;
        el.from.left = (original.outerWidth - el.outerWidth()) * baseline.x;
        el.to.top = (original.outerHeight - el.to.outerHeight) * baseline.y;
        el.to.left = (original.outerWidth - el.to.outerWidth) * baseline.x;
    }
    el.css(el.from);
    if ("content" === scale || "both" === scale) {
        vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);
        hProps = hProps.concat([ "marginLeft", "marginRight" ]);
        props2 = props0.concat(vProps).concat(hProps);
        el.find("*[width]").each(function() {
            var child = $(this), c_original = {
                height: child.height(),
                width: child.width(),
                outerHeight: child.outerHeight(),
                outerWidth: child.outerWidth()
            };
            restore && $.effects.save(child, props2);
            child.from = {
                height: c_original.height * factor.from.y,
                width: c_original.width * factor.from.x,
                outerHeight: c_original.outerHeight * factor.from.y,
                outerWidth: c_original.outerWidth * factor.from.x
            };
            child.to = {
                height: c_original.height * factor.to.y,
                width: c_original.width * factor.to.x,
                outerHeight: c_original.height * factor.to.y,
                outerWidth: c_original.width * factor.to.x
            };
            if (factor.from.y !== factor.to.y) {
                child.from = $.effects.setTransition(child, vProps, factor.from.y, child.from);
                child.to = $.effects.setTransition(child, vProps, factor.to.y, child.to);
            }
            if (factor.from.x !== factor.to.x) {
                child.from = $.effects.setTransition(child, hProps, factor.from.x, child.from);
                child.to = $.effects.setTransition(child, hProps, factor.to.x, child.to);
            }
            child.css(child.from);
            child.animate(child.to, o.duration, o.easing, function() {
                restore && $.effects.restore(child, props2);
            });
        });
    }
    el.animate(el.to, {
        queue: !1,
        duration: o.duration,
        easing: o.easing,
        complete: function() {
            0 === el.to.opacity && el.css("opacity", el.from.opacity);
            "hide" === mode && el.hide();
            $.effects.restore(el, props);
            restore || ("static" === position ? el.css({
                position: "relative",
                top: el.to.top,
                left: el.to.left
            }) : $.each([ "top", "left" ], function(idx, pos) {
                el.css(pos, function(_, str) {
                    var val = parseInt(str, 10), toRef = idx ? el.to.left : el.to.top;
                    return "auto" === str ? toRef + "px" : val + toRef + "px";
                });
            }));
            $.effects.removeWrapper(el);
            done();
        }
    });
}, effectScale = $.effects.effect.scale = function(o, done) {
    var el = $(this), options = $.extend(!0, {}, o), mode = $.effects.setMode(el, o.mode || "effect"), percent = parseInt(o.percent, 10) || (0 === parseInt(o.percent, 10) ? 0 : "hide" === mode ? 0 : 100), direction = o.direction || "both", origin = o.origin, original = {
        height: el.height(),
        width: el.width(),
        outerHeight: el.outerHeight(),
        outerWidth: el.outerWidth()
    }, factor = {
        y: "horizontal" !== direction ? percent / 100 : 1,
        x: "vertical" !== direction ? percent / 100 : 1
    };
    options.effect = "size";
    options.queue = !1;
    options.complete = done;
    if ("effect" !== mode) {
        options.origin = origin || [ "middle", "center" ];
        options.restore = !0;
    }
    options.from = o.from || ("show" === mode ? {
        height: 0,
        width: 0,
        outerHeight: 0,
        outerWidth: 0
    } : original);
    options.to = {
        height: original.height * factor.y,
        width: original.width * factor.x,
        outerHeight: original.outerHeight * factor.y,
        outerWidth: original.outerWidth * factor.x
    };
    if (options.fade) {
        if ("show" === mode) {
            options.from.opacity = 0;
            options.to.opacity = 1;
        }
        if ("hide" === mode) {
            options.from.opacity = 1;
            options.to.opacity = 0;
        }
    }
    el.effect(options);
}, effectPuff = $.effects.effect.puff = function(o, done) {
    var elem = $(this), mode = $.effects.setMode(elem, o.mode || "hide"), hide = "hide" === mode, percent = parseInt(o.percent, 10) || 150, factor = percent / 100, original = {
        height: elem.height(),
        width: elem.width(),
        outerHeight: elem.outerHeight(),
        outerWidth: elem.outerWidth()
    };
    $.extend(o, {
        effect: "scale",
        queue: !1,
        fade: !0,
        mode: mode,
        complete: done,
        percent: hide ? percent : 100,
        from: hide ? original : {
            height: original.height * factor,
            width: original.width * factor,
            outerHeight: original.outerHeight * factor,
            outerWidth: original.outerWidth * factor
        }
    });
    elem.effect(o);
}, effectPulsate = $.effects.effect.pulsate = function(o, done) {
    var i, elem = $(this), mode = $.effects.setMode(elem, o.mode || "show"), show = "show" === mode, hide = "hide" === mode, showhide = show || "hide" === mode, anims = 2 * (o.times || 5) + (showhide ? 1 : 0), duration = o.duration / anims, animateTo = 0, queue = elem.queue(), queuelen = queue.length;
    if (show || !elem.is(":visible")) {
        elem.css("opacity", 0).show();
        animateTo = 1;
    }
    for (i = 1; anims > i; i++) {
        elem.animate({
            opacity: animateTo
        }, duration, o.easing);
        animateTo = 1 - animateTo;
    }
    elem.animate({
        opacity: animateTo
    }, duration, o.easing);
    elem.queue(function() {
        hide && elem.hide();
        done();
    });
    queuelen > 1 && queue.splice.apply(queue, [ 1, 0 ].concat(queue.splice(queuelen, anims + 1)));
    elem.dequeue();
}, effectShake = $.effects.effect.shake = function(o, done) {
    var i, el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "effect"), direction = o.direction || "left", distance = o.distance || 20, times = o.times || 3, anims = 2 * times + 1, speed = Math.round(o.duration / anims), ref = "up" === direction || "down" === direction ? "top" : "left", positiveMotion = "up" === direction || "left" === direction, animation = {}, animation1 = {}, animation2 = {}, queue = el.queue(), queuelen = queue.length;
    $.effects.save(el, props);
    el.show();
    $.effects.createWrapper(el);
    animation[ref] = (positiveMotion ? "-=" : "+=") + distance;
    animation1[ref] = (positiveMotion ? "+=" : "-=") + 2 * distance;
    animation2[ref] = (positiveMotion ? "-=" : "+=") + 2 * distance;
    el.animate(animation, speed, o.easing);
    for (i = 1; times > i; i++) el.animate(animation1, speed, o.easing).animate(animation2, speed, o.easing);
    el.animate(animation1, speed, o.easing).animate(animation, speed / 2, o.easing).queue(function() {
        "hide" === mode && el.hide();
        $.effects.restore(el, props);
        $.effects.removeWrapper(el);
        done();
    });
    queuelen > 1 && queue.splice.apply(queue, [ 1, 0 ].concat(queue.splice(queuelen, anims + 1)));
    el.dequeue();
}, effectSlide = $.effects.effect.slide = function(o, done) {
    var distance, el = $(this), props = [ "position", "top", "bottom", "left", "right", "width", "height" ], mode = $.effects.setMode(el, o.mode || "show"), show = "show" === mode, direction = o.direction || "left", ref = "up" === direction || "down" === direction ? "top" : "left", positiveMotion = "up" === direction || "left" === direction, animation = {};
    $.effects.save(el, props);
    el.show();
    distance = o.distance || el["top" === ref ? "outerHeight" : "outerWidth"](!0);
    $.effects.createWrapper(el).css({
        overflow: "hidden"
    });
    show && el.css(ref, positiveMotion ? isNaN(distance) ? "-" + distance : -distance : distance);
    animation[ref] = (show ? positiveMotion ? "+=" : "-=" : positiveMotion ? "-=" : "+=") + distance;
    el.animate(animation, {
        queue: !1,
        duration: o.duration,
        easing: o.easing,
        complete: function() {
            "hide" === mode && el.hide();
            $.effects.restore(el, props);
            $.effects.removeWrapper(el);
            done();
        }
    });
}, effectTransfer = $.effects.effect.transfer = function(o, done) {
    var elem = $(this), target = $(o.to), targetFixed = "fixed" === target.css("position"), body = $("body"), fixTop = targetFixed ? body.scrollTop() : 0, fixLeft = targetFixed ? body.scrollLeft() : 0, endPosition = target.offset(), animation = {
        top: endPosition.top - fixTop,
        left: endPosition.left - fixLeft,
        height: target.innerHeight(),
        width: target.innerWidth()
    }, startPosition = elem.offset(), transfer = $("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(o.className).css({
        top: startPosition.top - fixTop,
        left: startPosition.left - fixLeft,
        height: elem.innerHeight(),
        width: elem.innerWidth(),
        position: targetFixed ? "fixed" : "absolute"
    }).animate(animation, o.duration, o.easing, function() {
        transfer.remove();
        done();
    });
}, progressbar = $.widget("ui.progressbar", {
    version: "1.11.1",
    options: {
        max: 100,
        value: 0,
        change: null,
        complete: null
    },
    min: 0,
    _create: function() {
        this.oldValue = this.options.value = this._constrainedValue();
        this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
            role: "progressbar",
            "aria-valuemin": this.min
        });
        this.valueDiv = $("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element);
        this._refreshValue();
    },
    _destroy: function() {
        this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
        this.valueDiv.remove();
    },
    value: function(newValue) {
        if (void 0 === newValue) return this.options.value;
        this.options.value = this._constrainedValue(newValue);
        this._refreshValue();
    },
    _constrainedValue: function(newValue) {
        void 0 === newValue && (newValue = this.options.value);
        this.indeterminate = newValue === !1;
        "number" != typeof newValue && (newValue = 0);
        return this.indeterminate ? !1 : Math.min(this.options.max, Math.max(this.min, newValue));
    },
    _setOptions: function(options) {
        var value = options.value;
        delete options.value;
        this._super(options);
        this.options.value = this._constrainedValue(value);
        this._refreshValue();
    },
    _setOption: function(key, value) {
        "max" === key && (value = Math.max(this.min, value));
        "disabled" === key && this.element.toggleClass("ui-state-disabled", !!value).attr("aria-disabled", value);
        this._super(key, value);
    },
    _percentage: function() {
        return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
    },
    _refreshValue: function() {
        var value = this.options.value, percentage = this._percentage();
        this.valueDiv.toggle(this.indeterminate || value > this.min).toggleClass("ui-corner-right", value === this.options.max).width(percentage.toFixed(0) + "%");
        this.element.toggleClass("ui-progressbar-indeterminate", this.indeterminate);
        if (this.indeterminate) {
            this.element.removeAttr("aria-valuenow");
            this.overlayDiv || (this.overlayDiv = $("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv));
        } else {
            this.element.attr({
                "aria-valuemax": this.options.max,
                "aria-valuenow": value
            });
            if (this.overlayDiv) {
                this.overlayDiv.remove();
                this.overlayDiv = null;
            }
        }
        if (this.oldValue !== value) {
            this.oldValue = value;
            this._trigger("change");
        }
        value === this.options.max && this._trigger("complete");
    }
}), selectable = $.widget("ui.selectable", $.ui.mouse, {
    version: "1.11.1",
    options: {
        appendTo: "body",
        autoRefresh: !0,
        distance: 0,
        filter: "*",
        tolerance: "touch",
        selected: null,
        selecting: null,
        start: null,
        stop: null,
        unselected: null,
        unselecting: null
    },
    _create: function() {
        var selectees, that = this;
        this.element.addClass("ui-selectable");
        this.dragged = !1;
        this.refresh = function() {
            selectees = $(that.options.filter, that.element[0]);
            selectees.addClass("ui-selectee");
            selectees.each(function() {
                var $this = $(this), pos = $this.offset();
                $.data(this, "selectable-item", {
                    element: this,
                    $element: $this,
                    left: pos.left,
                    top: pos.top,
                    right: pos.left + $this.outerWidth(),
                    bottom: pos.top + $this.outerHeight(),
                    startselected: !1,
                    selected: $this.hasClass("ui-selected"),
                    selecting: $this.hasClass("ui-selecting"),
                    unselecting: $this.hasClass("ui-unselecting")
                });
            });
        };
        this.refresh();
        this.selectees = selectees.addClass("ui-selectee");
        this._mouseInit();
        this.helper = $("<div class='ui-selectable-helper'></div>");
    },
    _destroy: function() {
        this.selectees.removeClass("ui-selectee").removeData("selectable-item");
        this.element.removeClass("ui-selectable ui-selectable-disabled");
        this._mouseDestroy();
    },
    _mouseStart: function(event) {
        var that = this, options = this.options;
        this.opos = [ event.pageX, event.pageY ];
        if (!this.options.disabled) {
            this.selectees = $(options.filter, this.element[0]);
            this._trigger("start", event);
            $(options.appendTo).append(this.helper);
            this.helper.css({
                left: event.pageX,
                top: event.pageY,
                width: 0,
                height: 0
            });
            options.autoRefresh && this.refresh();
            this.selectees.filter(".ui-selected").each(function() {
                var selectee = $.data(this, "selectable-item");
                selectee.startselected = !0;
                if (!event.metaKey && !event.ctrlKey) {
                    selectee.$element.removeClass("ui-selected");
                    selectee.selected = !1;
                    selectee.$element.addClass("ui-unselecting");
                    selectee.unselecting = !0;
                    that._trigger("unselecting", event, {
                        unselecting: selectee.element
                    });
                }
            });
            $(event.target).parents().addBack().each(function() {
                var doSelect, selectee = $.data(this, "selectable-item");
                if (selectee) {
                    doSelect = !event.metaKey && !event.ctrlKey || !selectee.$element.hasClass("ui-selected");
                    selectee.$element.removeClass(doSelect ? "ui-unselecting" : "ui-selected").addClass(doSelect ? "ui-selecting" : "ui-unselecting");
                    selectee.unselecting = !doSelect;
                    selectee.selecting = doSelect;
                    selectee.selected = doSelect;
                    doSelect ? that._trigger("selecting", event, {
                        selecting: selectee.element
                    }) : that._trigger("unselecting", event, {
                        unselecting: selectee.element
                    });
                    return !1;
                }
            });
        }
    },
    _mouseDrag: function(event) {
        this.dragged = !0;
        if (!this.options.disabled) {
            var tmp, that = this, options = this.options, x1 = this.opos[0], y1 = this.opos[1], x2 = event.pageX, y2 = event.pageY;
            if (x1 > x2) {
                tmp = x2;
                x2 = x1;
                x1 = tmp;
            }
            if (y1 > y2) {
                tmp = y2;
                y2 = y1;
                y1 = tmp;
            }
            this.helper.css({
                left: x1,
                top: y1,
                width: x2 - x1,
                height: y2 - y1
            });
            this.selectees.each(function() {
                var selectee = $.data(this, "selectable-item"), hit = !1;
                if (selectee && selectee.element !== that.element[0]) {
                    "touch" === options.tolerance ? hit = !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) : "fit" === options.tolerance && (hit = selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
                    if (hit) {
                        if (selectee.selected) {
                            selectee.$element.removeClass("ui-selected");
                            selectee.selected = !1;
                        }
                        if (selectee.unselecting) {
                            selectee.$element.removeClass("ui-unselecting");
                            selectee.unselecting = !1;
                        }
                        if (!selectee.selecting) {
                            selectee.$element.addClass("ui-selecting");
                            selectee.selecting = !0;
                            that._trigger("selecting", event, {
                                selecting: selectee.element
                            });
                        }
                    } else {
                        if (selectee.selecting) if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
                            selectee.$element.removeClass("ui-selecting");
                            selectee.selecting = !1;
                            selectee.$element.addClass("ui-selected");
                            selectee.selected = !0;
                        } else {
                            selectee.$element.removeClass("ui-selecting");
                            selectee.selecting = !1;
                            if (selectee.startselected) {
                                selectee.$element.addClass("ui-unselecting");
                                selectee.unselecting = !0;
                            }
                            that._trigger("unselecting", event, {
                                unselecting: selectee.element
                            });
                        }
                        if (selectee.selected && !event.metaKey && !event.ctrlKey && !selectee.startselected) {
                            selectee.$element.removeClass("ui-selected");
                            selectee.selected = !1;
                            selectee.$element.addClass("ui-unselecting");
                            selectee.unselecting = !0;
                            that._trigger("unselecting", event, {
                                unselecting: selectee.element
                            });
                        }
                    }
                }
            });
            return !1;
        }
    },
    _mouseStop: function(event) {
        var that = this;
        this.dragged = !1;
        $(".ui-unselecting", this.element[0]).each(function() {
            var selectee = $.data(this, "selectable-item");
            selectee.$element.removeClass("ui-unselecting");
            selectee.unselecting = !1;
            selectee.startselected = !1;
            that._trigger("unselected", event, {
                unselected: selectee.element
            });
        });
        $(".ui-selecting", this.element[0]).each(function() {
            var selectee = $.data(this, "selectable-item");
            selectee.$element.removeClass("ui-selecting").addClass("ui-selected");
            selectee.selecting = !1;
            selectee.selected = !0;
            selectee.startselected = !0;
            that._trigger("selected", event, {
                selected: selectee.element
            });
        });
        this._trigger("stop", event);
        this.helper.remove();
        return !1;
    }
}), selectmenu = $.widget("ui.selectmenu", {
    version: "1.11.1",
    defaultElement: "<select>",
    options: {
        appendTo: null,
        disabled: null,
        icons: {
            button: "ui-icon-triangle-1-s"
        },
        position: {
            my: "left top",
            at: "left bottom",
            collision: "none"
        },
        width: null,
        change: null,
        close: null,
        focus: null,
        open: null,
        select: null
    },
    _create: function() {
        var selectmenuId = this.element.uniqueId().attr("id");
        this.ids = {
            element: selectmenuId,
            button: selectmenuId + "-button",
            menu: selectmenuId + "-menu"
        };
        this._drawButton();
        this._drawMenu();
        this.options.disabled && this.disable();
    },
    _drawButton: function() {
        var that = this, tabindex = this.element.attr("tabindex");
        this.label = $("label[for='" + this.ids.element + "']").attr("for", this.ids.button);
        this._on(this.label, {
            click: function(event) {
                this.button.focus();
                event.preventDefault();
            }
        });
        this.element.hide();
        this.button = $("<span>", {
            "class": "ui-selectmenu-button ui-widget ui-state-default ui-corner-all",
            tabindex: tabindex || this.options.disabled ? -1 : 0,
            id: this.ids.button,
            role: "combobox",
            "aria-expanded": "false",
            "aria-autocomplete": "list",
            "aria-owns": this.ids.menu,
            "aria-haspopup": "true"
        }).insertAfter(this.element);
        $("<span>", {
            "class": "ui-icon " + this.options.icons.button
        }).prependTo(this.button);
        this.buttonText = $("<span>", {
            "class": "ui-selectmenu-text"
        }).appendTo(this.button);
        this._setText(this.buttonText, this.element.find("option:selected").text());
        this._resizeButton();
        this._on(this.button, this._buttonEvents);
        this.button.one("focusin", function() {
            that.menuItems || that._refreshMenu();
        });
        this._hoverable(this.button);
        this._focusable(this.button);
    },
    _drawMenu: function() {
        var that = this;
        this.menu = $("<ul>", {
            "aria-hidden": "true",
            "aria-labelledby": this.ids.button,
            id: this.ids.menu
        });
        this.menuWrap = $("<div>", {
            "class": "ui-selectmenu-menu ui-front"
        }).append(this.menu).appendTo(this._appendTo());
        this.menuInstance = this.menu.menu({
            role: "listbox",
            select: function(event, ui) {
                event.preventDefault();
                that._select(ui.item.data("ui-selectmenu-item"), event);
            },
            focus: function(event, ui) {
                var item = ui.item.data("ui-selectmenu-item");
                if (null != that.focusIndex && item.index !== that.focusIndex) {
                    that._trigger("focus", event, {
                        item: item
                    });
                    that.isOpen || that._select(item, event);
                }
                that.focusIndex = item.index;
                that.button.attr("aria-activedescendant", that.menuItems.eq(item.index).attr("id"));
            }
        }).menu("instance");
        this.menu.addClass("ui-corner-bottom").removeClass("ui-corner-all");
        this.menuInstance._off(this.menu, "mouseleave");
        this.menuInstance._closeOnDocumentClick = function() {
            return !1;
        };
        this.menuInstance._isDivider = function() {
            return !1;
        };
    },
    refresh: function() {
        this._refreshMenu();
        this._setText(this.buttonText, this._getSelectedItem().text());
        this.options.width || this._resizeButton();
    },
    _refreshMenu: function() {
        this.menu.empty();
        var item, options = this.element.find("option");
        if (options.length) {
            this._parseOptions(options);
            this._renderMenu(this.menu, this.items);
            this.menuInstance.refresh();
            this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup");
            item = this._getSelectedItem();
            this.menuInstance.focus(null, item);
            this._setAria(item.data("ui-selectmenu-item"));
            this._setOption("disabled", this.element.prop("disabled"));
        }
    },
    open: function(event) {
        if (!this.options.disabled) {
            if (this.menuItems) {
                this.menu.find(".ui-state-focus").removeClass("ui-state-focus");
                this.menuInstance.focus(null, this._getSelectedItem());
            } else this._refreshMenu();
            this.isOpen = !0;
            this._toggleAttr();
            this._resizeMenu();
            this._position();
            this._on(this.document, this._documentClick);
            this._trigger("open", event);
        }
    },
    _position: function() {
        this.menuWrap.position($.extend({
            of: this.button
        }, this.options.position));
    },
    close: function(event) {
        if (this.isOpen) {
            this.isOpen = !1;
            this._toggleAttr();
            this._off(this.document);
            this._trigger("close", event);
        }
    },
    widget: function() {
        return this.button;
    },
    menuWidget: function() {
        return this.menu;
    },
    _renderMenu: function(ul, items) {
        var that = this, currentOptgroup = "";
        $.each(items, function(index, item) {
            if (item.optgroup !== currentOptgroup) {
                $("<li>", {
                    "class": "ui-selectmenu-optgroup ui-menu-divider" + (item.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : ""),
                    text: item.optgroup
                }).appendTo(ul);
                currentOptgroup = item.optgroup;
            }
            that._renderItemData(ul, item);
        });
    },
    _renderItemData: function(ul, item) {
        return this._renderItem(ul, item).data("ui-selectmenu-item", item);
    },
    _renderItem: function(ul, item) {
        var li = $("<li>");
        item.disabled && li.addClass("ui-state-disabled");
        this._setText(li, item.label);
        return li.appendTo(ul);
    },
    _setText: function(element, value) {
        value ? element.text(value) : element.html("&#160;");
    },
    _move: function(direction, event) {
        var item, next, filter = ".ui-menu-item";
        if (this.isOpen) item = this.menuItems.eq(this.focusIndex); else {
            item = this.menuItems.eq(this.element[0].selectedIndex);
            filter += ":not(.ui-state-disabled)";
        }
        next = "first" === direction || "last" === direction ? item["first" === direction ? "prevAll" : "nextAll"](filter).eq(-1) : item[direction + "All"](filter).eq(0);
        next.length && this.menuInstance.focus(event, next);
    },
    _getSelectedItem: function() {
        return this.menuItems.eq(this.element[0].selectedIndex);
    },
    _toggle: function(event) {
        this[this.isOpen ? "close" : "open"](event);
    },
    _documentClick: {
        mousedown: function(event) {
            this.isOpen && ($(event.target).closest(".ui-selectmenu-menu, #" + this.ids.button).length || this.close(event));
        }
    },
    _buttonEvents: {
        mousedown: function(event) {
            event.preventDefault();
        },
        click: "_toggle",
        keydown: function(event) {
            var preventDefault = !0;
            switch (event.keyCode) {
              case $.ui.keyCode.TAB:
              case $.ui.keyCode.ESCAPE:
                this.close(event);
                preventDefault = !1;
                break;

              case $.ui.keyCode.ENTER:
                this.isOpen && this._selectFocusedItem(event);
                break;

              case $.ui.keyCode.UP:
                event.altKey ? this._toggle(event) : this._move("prev", event);
                break;

              case $.ui.keyCode.DOWN:
                event.altKey ? this._toggle(event) : this._move("next", event);
                break;

              case $.ui.keyCode.SPACE:
                this.isOpen ? this._selectFocusedItem(event) : this._toggle(event);
                break;

              case $.ui.keyCode.LEFT:
                this._move("prev", event);
                break;

              case $.ui.keyCode.RIGHT:
                this._move("next", event);
                break;

              case $.ui.keyCode.HOME:
              case $.ui.keyCode.PAGE_UP:
                this._move("first", event);
                break;

              case $.ui.keyCode.END:
              case $.ui.keyCode.PAGE_DOWN:
                this._move("last", event);
                break;

              default:
                this.menu.trigger(event);
                preventDefault = !1;
            }
            preventDefault && event.preventDefault();
        }
    },
    _selectFocusedItem: function(event) {
        var item = this.menuItems.eq(this.focusIndex);
        item.hasClass("ui-state-disabled") || this._select(item.data("ui-selectmenu-item"), event);
    },
    _select: function(item, event) {
        var oldIndex = this.element[0].selectedIndex;
        this.element[0].selectedIndex = item.index;
        this._setText(this.buttonText, item.label);
        this._setAria(item);
        this._trigger("select", event, {
            item: item
        });
        item.index !== oldIndex && this._trigger("change", event, {
            item: item
        });
        this.close(event);
    },
    _setAria: function(item) {
        var id = this.menuItems.eq(item.index).attr("id");
        this.button.attr({
            "aria-labelledby": id,
            "aria-activedescendant": id
        });
        this.menu.attr("aria-activedescendant", id);
    },
    _setOption: function(key, value) {
        "icons" === key && this.button.find("span.ui-icon").removeClass(this.options.icons.button).addClass(value.button);
        this._super(key, value);
        "appendTo" === key && this.menuWrap.appendTo(this._appendTo());
        if ("disabled" === key) {
            this.menuInstance.option("disabled", value);
            this.button.toggleClass("ui-state-disabled", value).attr("aria-disabled", value);
            this.element.prop("disabled", value);
            if (value) {
                this.button.attr("tabindex", -1);
                this.close();
            } else this.button.attr("tabindex", 0);
        }
        "width" === key && this._resizeButton();
    },
    _appendTo: function() {
        var element = this.options.appendTo;
        element && (element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0));
        element && element[0] || (element = this.element.closest(".ui-front"));
        element.length || (element = this.document[0].body);
        return element;
    },
    _toggleAttr: function() {
        this.button.toggleClass("ui-corner-top", this.isOpen).toggleClass("ui-corner-all", !this.isOpen).attr("aria-expanded", this.isOpen);
        this.menuWrap.toggleClass("ui-selectmenu-open", this.isOpen);
        this.menu.attr("aria-hidden", !this.isOpen);
    },
    _resizeButton: function() {
        var width = this.options.width;
        if (!width) {
            width = this.element.show().outerWidth();
            this.element.hide();
        }
        this.button.outerWidth(width);
    },
    _resizeMenu: function() {
        this.menu.outerWidth(Math.max(this.button.outerWidth(), this.menu.width("").outerWidth() + 1));
    },
    _getCreateOptions: function() {
        return {
            disabled: this.element.prop("disabled")
        };
    },
    _parseOptions: function(options) {
        var data = [];
        options.each(function(index, item) {
            var option = $(item), optgroup = option.parent("optgroup");
            data.push({
                element: option,
                index: index,
                value: option.attr("value"),
                label: option.text(),
                optgroup: optgroup.attr("label") || "",
                disabled: optgroup.prop("disabled") || option.prop("disabled")
            });
        });
        this.items = data;
    },
    _destroy: function() {
        this.menuWrap.remove();
        this.button.remove();
        this.element.show();
        this.element.removeUniqueId();
        this.label.attr("for", this.ids.element);
    }
}), slider = $.widget("ui.slider", $.ui.mouse, {
    version: "1.11.1",
    widgetEventPrefix: "slide",
    options: {
        animate: !1,
        distance: 0,
        max: 100,
        min: 0,
        orientation: "horizontal",
        range: !1,
        step: 1,
        value: 0,
        values: null,
        change: null,
        slide: null,
        start: null,
        stop: null
    },
    numPages: 5,
    _create: function() {
        this._keySliding = !1;
        this._mouseSliding = !1;
        this._animateOff = !0;
        this._handleIndex = null;
        this._detectOrientation();
        this._mouseInit();
        this.element.addClass("ui-slider ui-slider-" + this.orientation + " ui-widget ui-widget-content ui-corner-all");
        this._refresh();
        this._setOption("disabled", this.options.disabled);
        this._animateOff = !1;
    },
    _refresh: function() {
        this._createRange();
        this._createHandles();
        this._setupEvents();
        this._refreshValue();
    },
    _createHandles: function() {
        var i, handleCount, options = this.options, existingHandles = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"), handle = "<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>", handles = [];
        handleCount = options.values && options.values.length || 1;
        if (existingHandles.length > handleCount) {
            existingHandles.slice(handleCount).remove();
            existingHandles = existingHandles.slice(0, handleCount);
        }
        for (i = existingHandles.length; handleCount > i; i++) handles.push(handle);
        this.handles = existingHandles.add($(handles.join("")).appendTo(this.element));
        this.handle = this.handles.eq(0);
        this.handles.each(function(i) {
            $(this).data("ui-slider-handle-index", i);
        });
    },
    _createRange: function() {
        var options = this.options, classes = "";
        if (options.range) {
            options.range === !0 && (options.values ? options.values.length && 2 !== options.values.length ? options.values = [ options.values[0], options.values[0] ] : $.isArray(options.values) && (options.values = options.values.slice(0)) : options.values = [ this._valueMin(), this._valueMin() ]);
            if (this.range && this.range.length) this.range.removeClass("ui-slider-range-min ui-slider-range-max").css({
                left: "",
                bottom: ""
            }); else {
                this.range = $("<div></div>").appendTo(this.element);
                classes = "ui-slider-range ui-widget-header ui-corner-all";
            }
            this.range.addClass(classes + ("min" === options.range || "max" === options.range ? " ui-slider-range-" + options.range : ""));
        } else {
            this.range && this.range.remove();
            this.range = null;
        }
    },
    _setupEvents: function() {
        this._off(this.handles);
        this._on(this.handles, this._handleEvents);
        this._hoverable(this.handles);
        this._focusable(this.handles);
    },
    _destroy: function() {
        this.handles.remove();
        this.range && this.range.remove();
        this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-widget ui-widget-content ui-corner-all");
        this._mouseDestroy();
    },
    _mouseCapture: function(event) {
        var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle, that = this, o = this.options;
        if (o.disabled) return !1;
        this.elementSize = {
            width: this.element.outerWidth(),
            height: this.element.outerHeight()
        };
        this.elementOffset = this.element.offset();
        position = {
            x: event.pageX,
            y: event.pageY
        };
        normValue = this._normValueFromMouse(position);
        distance = this._valueMax() - this._valueMin() + 1;
        this.handles.each(function(i) {
            var thisDistance = Math.abs(normValue - that.values(i));
            if (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {
                distance = thisDistance;
                closestHandle = $(this);
                index = i;
            }
        });
        allowed = this._start(event, index);
        if (allowed === !1) return !1;
        this._mouseSliding = !0;
        this._handleIndex = index;
        closestHandle.addClass("ui-state-active").focus();
        offset = closestHandle.offset();
        mouseOverHandle = !$(event.target).parents().addBack().is(".ui-slider-handle");
        this._clickOffset = mouseOverHandle ? {
            left: 0,
            top: 0
        } : {
            left: event.pageX - offset.left - closestHandle.width() / 2,
            top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) - (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) + (parseInt(closestHandle.css("marginTop"), 10) || 0)
        };
        this.handles.hasClass("ui-state-hover") || this._slide(event, index, normValue);
        this._animateOff = !0;
        return !0;
    },
    _mouseStart: function() {
        return !0;
    },
    _mouseDrag: function(event) {
        var position = {
            x: event.pageX,
            y: event.pageY
        }, normValue = this._normValueFromMouse(position);
        this._slide(event, this._handleIndex, normValue);
        return !1;
    },
    _mouseStop: function(event) {
        this.handles.removeClass("ui-state-active");
        this._mouseSliding = !1;
        this._stop(event, this._handleIndex);
        this._change(event, this._handleIndex);
        this._handleIndex = null;
        this._clickOffset = null;
        this._animateOff = !1;
        return !1;
    },
    _detectOrientation: function() {
        this.orientation = "vertical" === this.options.orientation ? "vertical" : "horizontal";
    },
    _normValueFromMouse: function(position) {
        var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;
        if ("horizontal" === this.orientation) {
            pixelTotal = this.elementSize.width;
            pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);
        } else {
            pixelTotal = this.elementSize.height;
            pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);
        }
        percentMouse = pixelMouse / pixelTotal;
        percentMouse > 1 && (percentMouse = 1);
        0 > percentMouse && (percentMouse = 0);
        "vertical" === this.orientation && (percentMouse = 1 - percentMouse);
        valueTotal = this._valueMax() - this._valueMin();
        valueMouse = this._valueMin() + percentMouse * valueTotal;
        return this._trimAlignValue(valueMouse);
    },
    _start: function(event, index) {
        var uiHash = {
            handle: this.handles[index],
            value: this.value()
        };
        if (this.options.values && this.options.values.length) {
            uiHash.value = this.values(index);
            uiHash.values = this.values();
        }
        return this._trigger("start", event, uiHash);
    },
    _slide: function(event, index, newVal) {
        var otherVal, newValues, allowed;
        if (this.options.values && this.options.values.length) {
            otherVal = this.values(index ? 0 : 1);
            2 === this.options.values.length && this.options.range === !0 && (0 === index && newVal > otherVal || 1 === index && otherVal > newVal) && (newVal = otherVal);
            if (newVal !== this.values(index)) {
                newValues = this.values();
                newValues[index] = newVal;
                allowed = this._trigger("slide", event, {
                    handle: this.handles[index],
                    value: newVal,
                    values: newValues
                });
                otherVal = this.values(index ? 0 : 1);
                allowed !== !1 && this.values(index, newVal);
            }
        } else if (newVal !== this.value()) {
            allowed = this._trigger("slide", event, {
                handle: this.handles[index],
                value: newVal
            });
            allowed !== !1 && this.value(newVal);
        }
    },
    _stop: function(event, index) {
        var uiHash = {
            handle: this.handles[index],
            value: this.value()
        };
        if (this.options.values && this.options.values.length) {
            uiHash.value = this.values(index);
            uiHash.values = this.values();
        }
        this._trigger("stop", event, uiHash);
    },
    _change: function(event, index) {
        if (!this._keySliding && !this._mouseSliding) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value()
            };
            if (this.options.values && this.options.values.length) {
                uiHash.value = this.values(index);
                uiHash.values = this.values();
            }
            this._lastChangedValue = index;
            this._trigger("change", event, uiHash);
        }
    },
    value: function(newValue) {
        if (!arguments.length) return this._value();
        this.options.value = this._trimAlignValue(newValue);
        this._refreshValue();
        this._change(null, 0);
    },
    values: function(index, newValue) {
        var vals, newValues, i;
        if (arguments.length > 1) {
            this.options.values[index] = this._trimAlignValue(newValue);
            this._refreshValue();
            this._change(null, index);
        } else {
            if (!arguments.length) return this._values();
            if (!$.isArray(arguments[0])) return this.options.values && this.options.values.length ? this._values(index) : this.value();
            vals = this.options.values;
            newValues = arguments[0];
            for (i = 0; i < vals.length; i += 1) {
                vals[i] = this._trimAlignValue(newValues[i]);
                this._change(null, i);
            }
            this._refreshValue();
        }
    },
    _setOption: function(key, value) {
        var i, valsLength = 0;
        if ("range" === key && this.options.range === !0) if ("min" === value) {
            this.options.value = this._values(0);
            this.options.values = null;
        } else if ("max" === value) {
            this.options.value = this._values(this.options.values.length - 1);
            this.options.values = null;
        }
        $.isArray(this.options.values) && (valsLength = this.options.values.length);
        "disabled" === key && this.element.toggleClass("ui-state-disabled", !!value);
        this._super(key, value);
        switch (key) {
          case "orientation":
            this._detectOrientation();
            this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation);
            this._refreshValue();
            this.handles.css("horizontal" === value ? "bottom" : "left", "");
            break;

          case "value":
            this._animateOff = !0;
            this._refreshValue();
            this._change(null, 0);
            this._animateOff = !1;
            break;

          case "values":
            this._animateOff = !0;
            this._refreshValue();
            for (i = 0; valsLength > i; i += 1) this._change(null, i);
            this._animateOff = !1;
            break;

          case "min":
          case "max":
            this._animateOff = !0;
            this._refreshValue();
            this._animateOff = !1;
            break;

          case "range":
            this._animateOff = !0;
            this._refresh();
            this._animateOff = !1;
        }
    },
    _value: function() {
        var val = this.options.value;
        val = this._trimAlignValue(val);
        return val;
    },
    _values: function(index) {
        var val, vals, i;
        if (arguments.length) {
            val = this.options.values[index];
            val = this._trimAlignValue(val);
            return val;
        }
        if (this.options.values && this.options.values.length) {
            vals = this.options.values.slice();
            for (i = 0; i < vals.length; i += 1) vals[i] = this._trimAlignValue(vals[i]);
            return vals;
        }
        return [];
    },
    _trimAlignValue: function(val) {
        if (val <= this._valueMin()) return this._valueMin();
        if (val >= this._valueMax()) return this._valueMax();
        var step = this.options.step > 0 ? this.options.step : 1, valModStep = (val - this._valueMin()) % step, alignValue = val - valModStep;
        2 * Math.abs(valModStep) >= step && (alignValue += valModStep > 0 ? step : -step);
        return parseFloat(alignValue.toFixed(5));
    },
    _valueMin: function() {
        return this.options.min;
    },
    _valueMax: function() {
        return this.options.max;
    },
    _refreshValue: function() {
        var lastValPercent, valPercent, value, valueMin, valueMax, oRange = this.options.range, o = this.options, that = this, animate = this._animateOff ? !1 : o.animate, _set = {};
        if (this.options.values && this.options.values.length) this.handles.each(function(i) {
            valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;
            _set["horizontal" === that.orientation ? "left" : "bottom"] = valPercent + "%";
            $(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
            if (that.options.range === !0) if ("horizontal" === that.orientation) {
                0 === i && that.range.stop(1, 1)[animate ? "animate" : "css"]({
                    left: valPercent + "%"
                }, o.animate);
                1 === i && that.range[animate ? "animate" : "css"]({
                    width: valPercent - lastValPercent + "%"
                }, {
                    queue: !1,
                    duration: o.animate
                });
            } else {
                0 === i && that.range.stop(1, 1)[animate ? "animate" : "css"]({
                    bottom: valPercent + "%"
                }, o.animate);
                1 === i && that.range[animate ? "animate" : "css"]({
                    height: valPercent - lastValPercent + "%"
                }, {
                    queue: !1,
                    duration: o.animate
                });
            }
            lastValPercent = valPercent;
        }); else {
            value = this.value();
            valueMin = this._valueMin();
            valueMax = this._valueMax();
            valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;
            _set["horizontal" === this.orientation ? "left" : "bottom"] = valPercent + "%";
            this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
            "min" === oRange && "horizontal" === this.orientation && this.range.stop(1, 1)[animate ? "animate" : "css"]({
                width: valPercent + "%"
            }, o.animate);
            "max" === oRange && "horizontal" === this.orientation && this.range[animate ? "animate" : "css"]({
                width: 100 - valPercent + "%"
            }, {
                queue: !1,
                duration: o.animate
            });
            "min" === oRange && "vertical" === this.orientation && this.range.stop(1, 1)[animate ? "animate" : "css"]({
                height: valPercent + "%"
            }, o.animate);
            "max" === oRange && "vertical" === this.orientation && this.range[animate ? "animate" : "css"]({
                height: 100 - valPercent + "%"
            }, {
                queue: !1,
                duration: o.animate
            });
        }
    },
    _handleEvents: {
        keydown: function(event) {
            var allowed, curVal, newVal, step, index = $(event.target).data("ui-slider-handle-index");
            switch (event.keyCode) {
              case $.ui.keyCode.HOME:
              case $.ui.keyCode.END:
              case $.ui.keyCode.PAGE_UP:
              case $.ui.keyCode.PAGE_DOWN:
              case $.ui.keyCode.UP:
              case $.ui.keyCode.RIGHT:
              case $.ui.keyCode.DOWN:
              case $.ui.keyCode.LEFT:
                event.preventDefault();
                if (!this._keySliding) {
                    this._keySliding = !0;
                    $(event.target).addClass("ui-state-active");
                    allowed = this._start(event, index);
                    if (allowed === !1) return;
                }
            }
            step = this.options.step;
            curVal = newVal = this.options.values && this.options.values.length ? this.values(index) : this.value();
            switch (event.keyCode) {
              case $.ui.keyCode.HOME:
                newVal = this._valueMin();
                break;

              case $.ui.keyCode.END:
                newVal = this._valueMax();
                break;

              case $.ui.keyCode.PAGE_UP:
                newVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / this.numPages);
                break;

              case $.ui.keyCode.PAGE_DOWN:
                newVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / this.numPages);
                break;

              case $.ui.keyCode.UP:
              case $.ui.keyCode.RIGHT:
                if (curVal === this._valueMax()) return;
                newVal = this._trimAlignValue(curVal + step);
                break;

              case $.ui.keyCode.DOWN:
              case $.ui.keyCode.LEFT:
                if (curVal === this._valueMin()) return;
                newVal = this._trimAlignValue(curVal - step);
            }
            this._slide(event, index, newVal);
        },
        keyup: function(event) {
            var index = $(event.target).data("ui-slider-handle-index");
            if (this._keySliding) {
                this._keySliding = !1;
                this._stop(event, index);
                this._change(event, index);
                $(event.target).removeClass("ui-state-active");
            }
        }
    }
}), sortable = $.widget("ui.sortable", $.ui.mouse, {
    version: "1.11.1",
    widgetEventPrefix: "sort",
    ready: !1,
    options: {
        appendTo: "parent",
        axis: !1,
        connectWith: !1,
        containment: !1,
        cursor: "auto",
        cursorAt: !1,
        dropOnEmpty: !0,
        forcePlaceholderSize: !1,
        forceHelperSize: !1,
        grid: !1,
        handle: !1,
        helper: "original",
        items: "> *",
        opacity: !1,
        placeholder: !1,
        revert: !1,
        scroll: !0,
        scrollSensitivity: 20,
        scrollSpeed: 20,
        scope: "default",
        tolerance: "intersect",
        zIndex: 1e3,
        activate: null,
        beforeStop: null,
        change: null,
        deactivate: null,
        out: null,
        over: null,
        receive: null,
        remove: null,
        sort: null,
        start: null,
        stop: null,
        update: null
    },
    _isOverAxis: function(x, reference, size) {
        return x >= reference && reference + size > x;
    },
    _isFloating: function(item) {
        return /left|right/.test(item.css("float")) || /inline|table-cell/.test(item.css("display"));
    },
    _create: function() {
        var o = this.options;
        this.containerCache = {};
        this.element.addClass("ui-sortable");
        this.refresh();
        this.floating = this.items.length ? "x" === o.axis || this._isFloating(this.items[0].item) : !1;
        this.offset = this.element.offset();
        this._mouseInit();
        this._setHandleClassName();
        this.ready = !0;
    },
    _setOption: function(key, value) {
        this._super(key, value);
        "handle" === key && this._setHandleClassName();
    },
    _setHandleClassName: function() {
        this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle");
        $.each(this.items, function() {
            (this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item).addClass("ui-sortable-handle");
        });
    },
    _destroy: function() {
        this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle");
        this._mouseDestroy();
        for (var i = this.items.length - 1; i >= 0; i--) this.items[i].item.removeData(this.widgetName + "-item");
        return this;
    },
    _mouseCapture: function(event, overrideHandle) {
        var currentItem = null, validHandle = !1, that = this;
        if (this.reverting) return !1;
        if (this.options.disabled || "static" === this.options.type) return !1;
        this._refreshItems(event);
        $(event.target).parents().each(function() {
            if ($.data(this, that.widgetName + "-item") === that) {
                currentItem = $(this);
                return !1;
            }
        });
        $.data(event.target, that.widgetName + "-item") === that && (currentItem = $(event.target));
        if (!currentItem) return !1;
        if (this.options.handle && !overrideHandle) {
            $(this.options.handle, currentItem).find("*").addBack().each(function() {
                this === event.target && (validHandle = !0);
            });
            if (!validHandle) return !1;
        }
        this.currentItem = currentItem;
        this._removeCurrentsFromItems();
        return !0;
    },
    _mouseStart: function(event, overrideHandle, noActivation) {
        var i, body, o = this.options;
        this.currentContainer = this;
        this.refreshPositions();
        this.helper = this._createHelper(event);
        this._cacheHelperProportions();
        this._cacheMargins();
        this.scrollParent = this.helper.scrollParent();
        this.offset = this.currentItem.offset();
        this.offset = {
            top: this.offset.top - this.margins.top,
            left: this.offset.left - this.margins.left
        };
        $.extend(this.offset, {
            click: {
                left: event.pageX - this.offset.left,
                top: event.pageY - this.offset.top
            },
            parent: this._getParentOffset(),
            relative: this._getRelativeOffset()
        });
        this.helper.css("position", "absolute");
        this.cssPosition = this.helper.css("position");
        this.originalPosition = this._generatePosition(event);
        this.originalPageX = event.pageX;
        this.originalPageY = event.pageY;
        o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
        this.domPosition = {
            prev: this.currentItem.prev()[0],
            parent: this.currentItem.parent()[0]
        };
        this.helper[0] !== this.currentItem[0] && this.currentItem.hide();
        this._createPlaceholder();
        o.containment && this._setContainment();
        if (o.cursor && "auto" !== o.cursor) {
            body = this.document.find("body");
            this.storedCursor = body.css("cursor");
            body.css("cursor", o.cursor);
            this.storedStylesheet = $("<style>*{ cursor: " + o.cursor + " !important; }</style>").appendTo(body);
        }
        if (o.opacity) {
            this.helper.css("opacity") && (this._storedOpacity = this.helper.css("opacity"));
            this.helper.css("opacity", o.opacity);
        }
        if (o.zIndex) {
            this.helper.css("zIndex") && (this._storedZIndex = this.helper.css("zIndex"));
            this.helper.css("zIndex", o.zIndex);
        }
        this.scrollParent[0] !== document && "HTML" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset());
        this._trigger("start", event, this._uiHash());
        this._preserveHelperProportions || this._cacheHelperProportions();
        if (!noActivation) for (i = this.containers.length - 1; i >= 0; i--) this.containers[i]._trigger("activate", event, this._uiHash(this));
        $.ui.ddmanager && ($.ui.ddmanager.current = this);
        $.ui.ddmanager && !o.dropBehaviour && $.ui.ddmanager.prepareOffsets(this, event);
        this.dragging = !0;
        this.helper.addClass("ui-sortable-helper");
        this._mouseDrag(event);
        return !0;
    },
    _mouseDrag: function(event) {
        var i, item, itemElement, intersection, o = this.options, scrolled = !1;
        this.position = this._generatePosition(event);
        this.positionAbs = this._convertPositionTo("absolute");
        this.lastPositionAbs || (this.lastPositionAbs = this.positionAbs);
        if (this.options.scroll) {
            if (this.scrollParent[0] !== document && "HTML" !== this.scrollParent[0].tagName) {
                this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity ? this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed : event.pageY - this.overflowOffset.top < o.scrollSensitivity && (this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed);
                this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity ? this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed : event.pageX - this.overflowOffset.left < o.scrollSensitivity && (this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed);
            } else {
                event.pageY - $(document).scrollTop() < o.scrollSensitivity ? scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed) : $(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity && (scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed));
                event.pageX - $(document).scrollLeft() < o.scrollSensitivity ? scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed) : $(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity && (scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed));
            }
            scrolled !== !1 && $.ui.ddmanager && !o.dropBehaviour && $.ui.ddmanager.prepareOffsets(this, event);
        }
        this.positionAbs = this._convertPositionTo("absolute");
        this.options.axis && "y" === this.options.axis || (this.helper[0].style.left = this.position.left + "px");
        this.options.axis && "x" === this.options.axis || (this.helper[0].style.top = this.position.top + "px");
        for (i = this.items.length - 1; i >= 0; i--) {
            item = this.items[i];
            itemElement = item.item[0];
            intersection = this._intersectsWithPointer(item);
            if (intersection && item.instance === this.currentContainer && itemElement !== this.currentItem[0] && this.placeholder[1 === intersection ? "next" : "prev"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && ("semi-dynamic" === this.options.type ? !$.contains(this.element[0], itemElement) : !0)) {
                this.direction = 1 === intersection ? "down" : "up";
                if ("pointer" !== this.options.tolerance && !this._intersectsWithSides(item)) break;
                this._rearrange(event, item);
                this._trigger("change", event, this._uiHash());
                break;
            }
        }
        this._contactContainers(event);
        $.ui.ddmanager && $.ui.ddmanager.drag(this, event);
        this._trigger("sort", event, this._uiHash());
        this.lastPositionAbs = this.positionAbs;
        return !1;
    },
    _mouseStop: function(event, noPropagation) {
        if (event) {
            $.ui.ddmanager && !this.options.dropBehaviour && $.ui.ddmanager.drop(this, event);
            if (this.options.revert) {
                var that = this, cur = this.placeholder.offset(), axis = this.options.axis, animation = {};
                axis && "x" !== axis || (animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft));
                axis && "y" !== axis || (animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop));
                this.reverting = !0;
                $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function() {
                    that._clear(event);
                });
            } else this._clear(event, noPropagation);
            return !1;
        }
    },
    cancel: function() {
        if (this.dragging) {
            this._mouseUp({
                target: null
            });
            "original" === this.options.helper ? this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper") : this.currentItem.show();
            for (var i = this.containers.length - 1; i >= 0; i--) {
                this.containers[i]._trigger("deactivate", null, this._uiHash(this));
                if (this.containers[i].containerCache.over) {
                    this.containers[i]._trigger("out", null, this._uiHash(this));
                    this.containers[i].containerCache.over = 0;
                }
            }
        }
        if (this.placeholder) {
            this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            "original" !== this.options.helper && this.helper && this.helper[0].parentNode && this.helper.remove();
            $.extend(this, {
                helper: null,
                dragging: !1,
                reverting: !1,
                _noFinalSort: null
            });
            this.domPosition.prev ? $(this.domPosition.prev).after(this.currentItem) : $(this.domPosition.parent).prepend(this.currentItem);
        }
        return this;
    },
    serialize: function(o) {
        var items = this._getItemsAsjQuery(o && o.connected), str = [];
        o = o || {};
        $(items).each(function() {
            var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || /(.+)[\-=_](.+)/);
            res && str.push((o.key || res[1] + "[]") + "=" + (o.key && o.expression ? res[1] : res[2]));
        });
        !str.length && o.key && str.push(o.key + "=");
        return str.join("&");
    },
    toArray: function(o) {
        var items = this._getItemsAsjQuery(o && o.connected), ret = [];
        o = o || {};
        items.each(function() {
            ret.push($(o.item || this).attr(o.attribute || "id") || "");
        });
        return ret;
    },
    _intersectsWith: function(item) {
        var x1 = this.positionAbs.left, x2 = x1 + this.helperProportions.width, y1 = this.positionAbs.top, y2 = y1 + this.helperProportions.height, l = item.left, r = l + item.width, t = item.top, b = t + item.height, dyClick = this.offset.click.top, dxClick = this.offset.click.left, isOverElementHeight = "x" === this.options.axis || y1 + dyClick > t && b > y1 + dyClick, isOverElementWidth = "y" === this.options.axis || x1 + dxClick > l && r > x1 + dxClick, isOverElement = isOverElementHeight && isOverElementWidth;
        return "pointer" === this.options.tolerance || this.options.forcePointerForContainers || "pointer" !== this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"] ? isOverElement : l < x1 + this.helperProportions.width / 2 && x2 - this.helperProportions.width / 2 < r && t < y1 + this.helperProportions.height / 2 && y2 - this.helperProportions.height / 2 < b;
    },
    _intersectsWithPointer: function(item) {
        var isOverElementHeight = "x" === this.options.axis || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height), isOverElementWidth = "y" === this.options.axis || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width), isOverElement = isOverElementHeight && isOverElementWidth, verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
        return isOverElement ? this.floating ? horizontalDirection && "right" === horizontalDirection || "down" === verticalDirection ? 2 : 1 : verticalDirection && ("down" === verticalDirection ? 2 : 1) : !1;
    },
    _intersectsWithSides: function(item) {
        var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height), isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width), verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
        return this.floating && horizontalDirection ? "right" === horizontalDirection && isOverRightHalf || "left" === horizontalDirection && !isOverRightHalf : verticalDirection && ("down" === verticalDirection && isOverBottomHalf || "up" === verticalDirection && !isOverBottomHalf);
    },
    _getDragVerticalDirection: function() {
        var delta = this.positionAbs.top - this.lastPositionAbs.top;
        return 0 !== delta && (delta > 0 ? "down" : "up");
    },
    _getDragHorizontalDirection: function() {
        var delta = this.positionAbs.left - this.lastPositionAbs.left;
        return 0 !== delta && (delta > 0 ? "right" : "left");
    },
    refresh: function(event) {
        this._refreshItems(event);
        this._setHandleClassName();
        this.refreshPositions();
        return this;
    },
    _connectWith: function() {
        var options = this.options;
        return options.connectWith.constructor === String ? [ options.connectWith ] : options.connectWith;
    },
    _getItemsAsjQuery: function(connected) {
        function addItems() {
            items.push(this);
        }
        var i, j, cur, inst, items = [], queries = [], connectWith = this._connectWith();
        if (connectWith && connected) for (i = connectWith.length - 1; i >= 0; i--) {
            cur = $(connectWith[i]);
            for (j = cur.length - 1; j >= 0; j--) {
                inst = $.data(cur[j], this.widgetFullName);
                inst && inst !== this && !inst.options.disabled && queries.push([ $.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst ]);
            }
        }
        queries.push([ $.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
            options: this.options,
            item: this.currentItem
        }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this ]);
        for (i = queries.length - 1; i >= 0; i--) queries[i][0].each(addItems);
        return $(items);
    },
    _removeCurrentsFromItems: function() {
        var list = this.currentItem.find(":data(" + this.widgetName + "-item)");
        this.items = $.grep(this.items, function(item) {
            for (var j = 0; j < list.length; j++) if (list[j] === item.item[0]) return !1;
            return !0;
        });
    },
    _refreshItems: function(event) {
        this.items = [];
        this.containers = [ this ];
        var i, j, cur, inst, targetData, _queries, item, queriesLength, items = this.items, queries = [ [ $.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {
            item: this.currentItem
        }) : $(this.options.items, this.element), this ] ], connectWith = this._connectWith();
        if (connectWith && this.ready) for (i = connectWith.length - 1; i >= 0; i--) {
            cur = $(connectWith[i]);
            for (j = cur.length - 1; j >= 0; j--) {
                inst = $.data(cur[j], this.widgetFullName);
                if (inst && inst !== this && !inst.options.disabled) {
                    queries.push([ $.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {
                        item: this.currentItem
                    }) : $(inst.options.items, inst.element), inst ]);
                    this.containers.push(inst);
                }
            }
        }
        for (i = queries.length - 1; i >= 0; i--) {
            targetData = queries[i][1];
            _queries = queries[i][0];
            for (j = 0, queriesLength = _queries.length; queriesLength > j; j++) {
                item = $(_queries[j]);
                item.data(this.widgetName + "-item", targetData);
                items.push({
                    item: item,
                    instance: targetData,
                    width: 0,
                    height: 0,
                    left: 0,
                    top: 0
                });
            }
        }
    },
    refreshPositions: function(fast) {
        this.offsetParent && this.helper && (this.offset.parent = this._getParentOffset());
        var i, item, t, p;
        for (i = this.items.length - 1; i >= 0; i--) {
            item = this.items[i];
            if (item.instance === this.currentContainer || !this.currentContainer || item.item[0] === this.currentItem[0]) {
                t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;
                if (!fast) {
                    item.width = t.outerWidth();
                    item.height = t.outerHeight();
                }
                p = t.offset();
                item.left = p.left;
                item.top = p.top;
            }
        }
        if (this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this); else for (i = this.containers.length - 1; i >= 0; i--) {
            p = this.containers[i].element.offset();
            this.containers[i].containerCache.left = p.left;
            this.containers[i].containerCache.top = p.top;
            this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
            this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
        }
        return this;
    },
    _createPlaceholder: function(that) {
        that = that || this;
        var className, o = that.options;
        if (!o.placeholder || o.placeholder.constructor === String) {
            className = o.placeholder;
            o.placeholder = {
                element: function() {
                    var nodeName = that.currentItem[0].nodeName.toLowerCase(), element = $("<" + nodeName + ">", that.document[0]).addClass(className || that.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper");
                    "tr" === nodeName ? that.currentItem.children().each(function() {
                        $("<td>&#160;</td>", that.document[0]).attr("colspan", $(this).attr("colspan") || 1).appendTo(element);
                    }) : "img" === nodeName && element.attr("src", that.currentItem.attr("src"));
                    className || element.css("visibility", "hidden");
                    return element;
                },
                update: function(container, p) {
                    if (!className || o.forcePlaceholderSize) {
                        p.height() || p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop") || 0, 10) - parseInt(that.currentItem.css("paddingBottom") || 0, 10));
                        p.width() || p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft") || 0, 10) - parseInt(that.currentItem.css("paddingRight") || 0, 10));
                    }
                }
            };
        }
        that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));
        that.currentItem.after(that.placeholder);
        o.placeholder.update(that, that.placeholder);
    },
    _contactContainers: function(event) {
        var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis, innermostContainer = null, innermostIndex = null;
        for (i = this.containers.length - 1; i >= 0; i--) if (!$.contains(this.currentItem[0], this.containers[i].element[0])) if (this._intersectsWith(this.containers[i].containerCache)) {
            if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) continue;
            innermostContainer = this.containers[i];
            innermostIndex = i;
        } else if (this.containers[i].containerCache.over) {
            this.containers[i]._trigger("out", event, this._uiHash(this));
            this.containers[i].containerCache.over = 0;
        }
        if (innermostContainer) if (1 === this.containers.length) {
            if (!this.containers[innermostIndex].containerCache.over) {
                this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                this.containers[innermostIndex].containerCache.over = 1;
            }
        } else {
            dist = 1e4;
            itemWithLeastDistance = null;
            floating = innermostContainer.floating || this._isFloating(this.currentItem);
            posProperty = floating ? "left" : "top";
            sizeProperty = floating ? "width" : "height";
            axis = floating ? "clientX" : "clientY";
            for (j = this.items.length - 1; j >= 0; j--) if ($.contains(this.containers[innermostIndex].element[0], this.items[j].item[0]) && this.items[j].item[0] !== this.currentItem[0]) {
                cur = this.items[j].item.offset()[posProperty];
                nearBottom = !1;
                event[axis] - cur > this.items[j][sizeProperty] / 2 && (nearBottom = !0);
                if (Math.abs(event[axis] - cur) < dist) {
                    dist = Math.abs(event[axis] - cur);
                    itemWithLeastDistance = this.items[j];
                    this.direction = nearBottom ? "up" : "down";
                }
            }
            if (!itemWithLeastDistance && !this.options.dropOnEmpty) return;
            if (this.currentContainer === this.containers[innermostIndex]) return;
            itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, !0) : this._rearrange(event, null, this.containers[innermostIndex].element, !0);
            this._trigger("change", event, this._uiHash());
            this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
            this.currentContainer = this.containers[innermostIndex];
            this.options.placeholder.update(this.currentContainer, this.placeholder);
            this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
            this.containers[innermostIndex].containerCache.over = 1;
        }
    },
    _createHelper: function(event) {
        var o = this.options, helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [ event, this.currentItem ])) : "clone" === o.helper ? this.currentItem.clone() : this.currentItem;
        helper.parents("body").length || $("parent" !== o.appendTo ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
        helper[0] === this.currentItem[0] && (this._storedCSS = {
            width: this.currentItem[0].style.width,
            height: this.currentItem[0].style.height,
            position: this.currentItem.css("position"),
            top: this.currentItem.css("top"),
            left: this.currentItem.css("left")
        });
        (!helper[0].style.width || o.forceHelperSize) && helper.width(this.currentItem.width());
        (!helper[0].style.height || o.forceHelperSize) && helper.height(this.currentItem.height());
        return helper;
    },
    _adjustOffsetFromHelper: function(obj) {
        "string" == typeof obj && (obj = obj.split(" "));
        $.isArray(obj) && (obj = {
            left: +obj[0],
            top: +obj[1] || 0
        });
        "left" in obj && (this.offset.click.left = obj.left + this.margins.left);
        "right" in obj && (this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left);
        "top" in obj && (this.offset.click.top = obj.top + this.margins.top);
        "bottom" in obj && (this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top);
    },
    _getParentOffset: function() {
        this.offsetParent = this.helper.offsetParent();
        var po = this.offsetParent.offset();
        if ("absolute" === this.cssPosition && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
            po.left += this.scrollParent.scrollLeft();
            po.top += this.scrollParent.scrollTop();
        }
        (this.offsetParent[0] === document.body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && $.ui.ie) && (po = {
            top: 0,
            left: 0
        });
        return {
            top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
            left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
        };
    },
    _getRelativeOffset: function() {
        if ("relative" === this.cssPosition) {
            var p = this.currentItem.position();
            return {
                top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
            };
        }
        return {
            top: 0,
            left: 0
        };
    },
    _cacheMargins: function() {
        this.margins = {
            left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
            top: parseInt(this.currentItem.css("marginTop"), 10) || 0
        };
    },
    _cacheHelperProportions: function() {
        this.helperProportions = {
            width: this.helper.outerWidth(),
            height: this.helper.outerHeight()
        };
    },
    _setContainment: function() {
        var ce, co, over, o = this.options;
        "parent" === o.containment && (o.containment = this.helper[0].parentNode);
        ("document" === o.containment || "window" === o.containment) && (this.containment = [ 0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, $("document" === o.containment ? document : window).width() - this.helperProportions.width - this.margins.left, ($("document" === o.containment ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ]);
        if (!/^(document|window|parent)$/.test(o.containment)) {
            ce = $(o.containment)[0];
            co = $(o.containment).offset();
            over = "hidden" !== $(ce).css("overflow");
            this.containment = [ co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top ];
        }
    },
    _convertPositionTo: function(d, pos) {
        pos || (pos = this.position);
        var mod = "absolute" === d ? 1 : -1, scroll = "absolute" !== this.cssPosition || this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
        return {
            top: pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,
            left: pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod
        };
    },
    _generatePosition: function(event) {
        var top, left, o = this.options, pageX = event.pageX, pageY = event.pageY, scroll = "absolute" !== this.cssPosition || this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
        "relative" !== this.cssPosition || this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0] || (this.offset.relative = this._getRelativeOffset());
        if (this.originalPosition) {
            if (this.containment) {
                event.pageX - this.offset.click.left < this.containment[0] && (pageX = this.containment[0] + this.offset.click.left);
                event.pageY - this.offset.click.top < this.containment[1] && (pageY = this.containment[1] + this.offset.click.top);
                event.pageX - this.offset.click.left > this.containment[2] && (pageX = this.containment[2] + this.offset.click.left);
                event.pageY - this.offset.click.top > this.containment[3] && (pageY = this.containment[3] + this.offset.click.top);
            }
            if (o.grid) {
                top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                pageY = this.containment ? top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3] ? top : top - this.offset.click.top >= this.containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                pageX = this.containment ? left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2] ? left : left - this.offset.click.left >= this.containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
            }
        }
        return {
            top: pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),
            left: pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())
        };
    },
    _rearrange: function(event, i, a, hardRefresh) {
        a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], "down" === this.direction ? i.item[0] : i.item[0].nextSibling);
        this.counter = this.counter ? ++this.counter : 1;
        var counter = this.counter;
        this._delay(function() {
            counter === this.counter && this.refreshPositions(!hardRefresh);
        });
    },
    _clear: function(event, noPropagation) {
        function delayEvent(type, instance, container) {
            return function(event) {
                container._trigger(type, event, instance._uiHash(instance));
            };
        }
        this.reverting = !1;
        var i, delayedTriggers = [];
        !this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem);
        this._noFinalSort = null;
        if (this.helper[0] === this.currentItem[0]) {
            for (i in this._storedCSS) ("auto" === this._storedCSS[i] || "static" === this._storedCSS[i]) && (this._storedCSS[i] = "");
            this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
        } else this.currentItem.show();
        this.fromOutside && !noPropagation && delayedTriggers.push(function(event) {
            this._trigger("receive", event, this._uiHash(this.fromOutside));
        });
        !this.fromOutside && this.domPosition.prev === this.currentItem.prev().not(".ui-sortable-helper")[0] && this.domPosition.parent === this.currentItem.parent()[0] || noPropagation || delayedTriggers.push(function(event) {
            this._trigger("update", event, this._uiHash());
        });
        if (this !== this.currentContainer && !noPropagation) {
            delayedTriggers.push(function(event) {
                this._trigger("remove", event, this._uiHash());
            });
            delayedTriggers.push(function(c) {
                return function(event) {
                    c._trigger("receive", event, this._uiHash(this));
                };
            }.call(this, this.currentContainer));
            delayedTriggers.push(function(c) {
                return function(event) {
                    c._trigger("update", event, this._uiHash(this));
                };
            }.call(this, this.currentContainer));
        }
        for (i = this.containers.length - 1; i >= 0; i--) {
            noPropagation || delayedTriggers.push(delayEvent("deactivate", this, this.containers[i]));
            if (this.containers[i].containerCache.over) {
                delayedTriggers.push(delayEvent("out", this, this.containers[i]));
                this.containers[i].containerCache.over = 0;
            }
        }
        if (this.storedCursor) {
            this.document.find("body").css("cursor", this.storedCursor);
            this.storedStylesheet.remove();
        }
        this._storedOpacity && this.helper.css("opacity", this._storedOpacity);
        this._storedZIndex && this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex);
        this.dragging = !1;
        if (this.cancelHelperRemoval) {
            if (!noPropagation) {
                this._trigger("beforeStop", event, this._uiHash());
                for (i = 0; i < delayedTriggers.length; i++) delayedTriggers[i].call(this, event);
                this._trigger("stop", event, this._uiHash());
            }
            this.fromOutside = !1;
            return !1;
        }
        noPropagation || this._trigger("beforeStop", event, this._uiHash());
        this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
        this.helper[0] !== this.currentItem[0] && this.helper.remove();
        this.helper = null;
        if (!noPropagation) {
            for (i = 0; i < delayedTriggers.length; i++) delayedTriggers[i].call(this, event);
            this._trigger("stop", event, this._uiHash());
        }
        this.fromOutside = !1;
        return !0;
    },
    _trigger: function() {
        $.Widget.prototype._trigger.apply(this, arguments) === !1 && this.cancel();
    },
    _uiHash: function(_inst) {
        var inst = _inst || this;
        return {
            helper: inst.helper,
            placeholder: inst.placeholder || $([]),
            position: inst.position,
            originalPosition: inst.originalPosition,
            offset: inst.positionAbs,
            item: inst.currentItem,
            sender: _inst ? _inst.element : null
        };
    }
}), spinner = $.widget("ui.spinner", {
    version: "1.11.1",
    defaultElement: "<input>",
    widgetEventPrefix: "spin",
    options: {
        culture: null,
        icons: {
            down: "ui-icon-triangle-1-s",
            up: "ui-icon-triangle-1-n"
        },
        incremental: !0,
        max: null,
        min: null,
        numberFormat: null,
        page: 10,
        step: 1,
        change: null,
        spin: null,
        start: null,
        stop: null
    },
    _create: function() {
        this._setOption("max", this.options.max);
        this._setOption("min", this.options.min);
        this._setOption("step", this.options.step);
        "" !== this.value() && this._value(this.element.val(), !0);
        this._draw();
        this._on(this._events);
        this._refresh();
        this._on(this.window, {
            beforeunload: function() {
                this.element.removeAttr("autocomplete");
            }
        });
    },
    _getCreateOptions: function() {
        var options = {}, element = this.element;
        $.each([ "min", "max", "step" ], function(i, option) {
            var value = element.attr(option);
            void 0 !== value && value.length && (options[option] = value);
        });
        return options;
    },
    _events: {
        keydown: function(event) {
            this._start(event) && this._keydown(event) && event.preventDefault();
        },
        keyup: "_stop",
        focus: function() {
            this.previous = this.element.val();
        },
        blur: function(event) {
            if (this.cancelBlur) delete this.cancelBlur; else {
                this._stop();
                this._refresh();
                this.previous !== this.element.val() && this._trigger("change", event);
            }
        },
        mousewheel: function(event, delta) {
            if (delta) {
                if (!this.spinning && !this._start(event)) return !1;
                this._spin((delta > 0 ? 1 : -1) * this.options.step, event);
                clearTimeout(this.mousewheelTimer);
                this.mousewheelTimer = this._delay(function() {
                    this.spinning && this._stop(event);
                }, 100);
                event.preventDefault();
            }
        },
        "mousedown .ui-spinner-button": function(event) {
            function checkFocus() {
                var isActive = this.element[0] === this.document[0].activeElement;
                if (!isActive) {
                    this.element.focus();
                    this.previous = previous;
                    this._delay(function() {
                        this.previous = previous;
                    });
                }
            }
            var previous;
            previous = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val();
            event.preventDefault();
            checkFocus.call(this);
            this.cancelBlur = !0;
            this._delay(function() {
                delete this.cancelBlur;
                checkFocus.call(this);
            });
            this._start(event) !== !1 && this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
        },
        "mouseup .ui-spinner-button": "_stop",
        "mouseenter .ui-spinner-button": function(event) {
            if ($(event.currentTarget).hasClass("ui-state-active")) {
                if (this._start(event) === !1) return !1;
                this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
            }
        },
        "mouseleave .ui-spinner-button": "_stop"
    },
    _draw: function() {
        var uiSpinner = this.uiSpinner = this.element.addClass("ui-spinner-input").attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
        this.element.attr("role", "spinbutton");
        this.buttons = uiSpinner.find(".ui-spinner-button").attr("tabIndex", -1).button().removeClass("ui-corner-all");
        this.buttons.height() > Math.ceil(.5 * uiSpinner.height()) && uiSpinner.height() > 0 && uiSpinner.height(uiSpinner.height());
        this.options.disabled && this.disable();
    },
    _keydown: function(event) {
        var options = this.options, keyCode = $.ui.keyCode;
        switch (event.keyCode) {
          case keyCode.UP:
            this._repeat(null, 1, event);
            return !0;

          case keyCode.DOWN:
            this._repeat(null, -1, event);
            return !0;

          case keyCode.PAGE_UP:
            this._repeat(null, options.page, event);
            return !0;

          case keyCode.PAGE_DOWN:
            this._repeat(null, -options.page, event);
            return !0;
        }
        return !1;
    },
    _uiSpinnerHtml: function() {
        return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
    },
    _buttonHtml: function() {
        return "<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon " + this.options.icons.up + "'>&#9650;</span></a><a class='ui-spinner-button ui-spinner-down ui-corner-br'><span class='ui-icon " + this.options.icons.down + "'>&#9660;</span></a>";
    },
    _start: function(event) {
        if (!this.spinning && this._trigger("start", event) === !1) return !1;
        this.counter || (this.counter = 1);
        this.spinning = !0;
        return !0;
    },
    _repeat: function(i, steps, event) {
        i = i || 500;
        clearTimeout(this.timer);
        this.timer = this._delay(function() {
            this._repeat(40, steps, event);
        }, i);
        this._spin(steps * this.options.step, event);
    },
    _spin: function(step, event) {
        var value = this.value() || 0;
        this.counter || (this.counter = 1);
        value = this._adjustValue(value + step * this._increment(this.counter));
        if (!this.spinning || this._trigger("spin", event, {
            value: value
        }) !== !1) {
            this._value(value);
            this.counter++;
        }
    },
    _increment: function(i) {
        var incremental = this.options.incremental;
        return incremental ? $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 5e4 - i * i / 500 + 17 * i / 200 + 1) : 1;
    },
    _precision: function() {
        var precision = this._precisionOf(this.options.step);
        null !== this.options.min && (precision = Math.max(precision, this._precisionOf(this.options.min)));
        return precision;
    },
    _precisionOf: function(num) {
        var str = num.toString(), decimal = str.indexOf(".");
        return -1 === decimal ? 0 : str.length - decimal - 1;
    },
    _adjustValue: function(value) {
        var base, aboveMin, options = this.options;
        base = null !== options.min ? options.min : 0;
        aboveMin = value - base;
        aboveMin = Math.round(aboveMin / options.step) * options.step;
        value = base + aboveMin;
        value = parseFloat(value.toFixed(this._precision()));
        return null !== options.max && value > options.max ? options.max : null !== options.min && value < options.min ? options.min : value;
    },
    _stop: function(event) {
        if (this.spinning) {
            clearTimeout(this.timer);
            clearTimeout(this.mousewheelTimer);
            this.counter = 0;
            this.spinning = !1;
            this._trigger("stop", event);
        }
    },
    _setOption: function(key, value) {
        if ("culture" !== key && "numberFormat" !== key) {
            ("max" === key || "min" === key || "step" === key) && "string" == typeof value && (value = this._parse(value));
            if ("icons" === key) {
                this.buttons.first().find(".ui-icon").removeClass(this.options.icons.up).addClass(value.up);
                this.buttons.last().find(".ui-icon").removeClass(this.options.icons.down).addClass(value.down);
            }
            this._super(key, value);
            if ("disabled" === key) {
                this.widget().toggleClass("ui-state-disabled", !!value);
                this.element.prop("disabled", !!value);
                this.buttons.button(value ? "disable" : "enable");
            }
        } else {
            var prevValue = this._parse(this.element.val());
            this.options[key] = value;
            this.element.val(this._format(prevValue));
        }
    },
    _setOptions: spinner_modifier(function(options) {
        this._super(options);
    }),
    _parse: function(val) {
        "string" == typeof val && "" !== val && (val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val);
        return "" === val || isNaN(val) ? null : val;
    },
    _format: function(value) {
        return "" === value ? "" : window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;
    },
    _refresh: function() {
        this.element.attr({
            "aria-valuemin": this.options.min,
            "aria-valuemax": this.options.max,
            "aria-valuenow": this._parse(this.element.val())
        });
    },
    isValid: function() {
        var value = this.value();
        return null === value ? !1 : value === this._adjustValue(value);
    },
    _value: function(value, allowAny) {
        var parsed;
        if ("" !== value) {
            parsed = this._parse(value);
            if (null !== parsed) {
                allowAny || (parsed = this._adjustValue(parsed));
                value = this._format(parsed);
            }
        }
        this.element.val(value);
        this._refresh();
    },
    _destroy: function() {
        this.element.removeClass("ui-spinner-input").prop("disabled", !1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
        this.uiSpinner.replaceWith(this.element);
    },
    stepUp: spinner_modifier(function(steps) {
        this._stepUp(steps);
    }),
    _stepUp: function(steps) {
        if (this._start()) {
            this._spin((steps || 1) * this.options.step);
            this._stop();
        }
    },
    stepDown: spinner_modifier(function(steps) {
        this._stepDown(steps);
    }),
    _stepDown: function(steps) {
        if (this._start()) {
            this._spin((steps || 1) * -this.options.step);
            this._stop();
        }
    },
    pageUp: spinner_modifier(function(pages) {
        this._stepUp((pages || 1) * this.options.page);
    }),
    pageDown: spinner_modifier(function(pages) {
        this._stepDown((pages || 1) * this.options.page);
    }),
    value: function(newVal) {
        if (!arguments.length) return this._parse(this.element.val());
        spinner_modifier(this._value).call(this, newVal);
    },
    widget: function() {
        return this.uiSpinner;
    }
}), tabs = $.widget("ui.tabs", {
    version: "1.11.1",
    delay: 300,
    options: {
        active: null,
        collapsible: !1,
        event: "click",
        heightStyle: "content",
        hide: null,
        show: null,
        activate: null,
        beforeActivate: null,
        beforeLoad: null,
        load: null
    },
    _isLocal: function() {
        var rhash = /#.*$/;
        return function(anchor) {
            var anchorUrl, locationUrl;
            anchor = anchor.cloneNode(!1);
            anchorUrl = anchor.href.replace(rhash, "");
            locationUrl = location.href.replace(rhash, "");
            try {
                anchorUrl = decodeURIComponent(anchorUrl);
            } catch (error) {}
            try {
                locationUrl = decodeURIComponent(locationUrl);
            } catch (error) {}
            return anchor.hash.length > 1 && anchorUrl === locationUrl;
        };
    }(),
    _create: function() {
        var that = this, options = this.options;
        this.running = !1;
        this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible", options.collapsible);
        this._processTabs();
        options.active = this._initialActive();
        $.isArray(options.disabled) && (options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"), function(li) {
            return that.tabs.index(li);
        }))).sort());
        this.options.active !== !1 && this.anchors.length ? this.active = this._findActive(options.active) : this.active = $();
        this._refresh();
        this.active.length && this.load(options.active);
    },
    _initialActive: function() {
        var active = this.options.active, collapsible = this.options.collapsible, locationHash = location.hash.substring(1);
        if (null === active) {
            locationHash && this.tabs.each(function(i, tab) {
                if ($(tab).attr("aria-controls") === locationHash) {
                    active = i;
                    return !1;
                }
            });
            null === active && (active = this.tabs.index(this.tabs.filter(".ui-tabs-active")));
            (null === active || -1 === active) && (active = this.tabs.length ? 0 : !1);
        }
        if (active !== !1) {
            active = this.tabs.index(this.tabs.eq(active));
            -1 === active && (active = collapsible ? !1 : 0);
        }
        !collapsible && active === !1 && this.anchors.length && (active = 0);
        return active;
    },
    _getCreateEventData: function() {
        return {
            tab: this.active,
            panel: this.active.length ? this._getPanelForTab(this.active) : $()
        };
    },
    _tabKeydown: function(event) {
        var focusedTab = $(this.document[0].activeElement).closest("li"), selectedIndex = this.tabs.index(focusedTab), goingForward = !0;
        if (!this._handlePageNav(event)) {
            switch (event.keyCode) {
              case $.ui.keyCode.RIGHT:
              case $.ui.keyCode.DOWN:
                selectedIndex++;
                break;

              case $.ui.keyCode.UP:
              case $.ui.keyCode.LEFT:
                goingForward = !1;
                selectedIndex--;
                break;

              case $.ui.keyCode.END:
                selectedIndex = this.anchors.length - 1;
                break;

              case $.ui.keyCode.HOME:
                selectedIndex = 0;
                break;

              case $.ui.keyCode.SPACE:
                event.preventDefault();
                clearTimeout(this.activating);
                this._activate(selectedIndex);
                return;

              case $.ui.keyCode.ENTER:
                event.preventDefault();
                clearTimeout(this.activating);
                this._activate(selectedIndex === this.options.active ? !1 : selectedIndex);
                return;

              default:
                return;
            }
            event.preventDefault();
            clearTimeout(this.activating);
            selectedIndex = this._focusNextTab(selectedIndex, goingForward);
            if (!event.ctrlKey) {
                focusedTab.attr("aria-selected", "false");
                this.tabs.eq(selectedIndex).attr("aria-selected", "true");
                this.activating = this._delay(function() {
                    this.option("active", selectedIndex);
                }, this.delay);
            }
        }
    },
    _panelKeydown: function(event) {
        if (!this._handlePageNav(event) && event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {
            event.preventDefault();
            this.active.focus();
        }
    },
    _handlePageNav: function(event) {
        if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {
            this._activate(this._focusNextTab(this.options.active - 1, !1));
            return !0;
        }
        if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {
            this._activate(this._focusNextTab(this.options.active + 1, !0));
            return !0;
        }
    },
    _findNextTab: function(index, goingForward) {
        function constrain() {
            index > lastTabIndex && (index = 0);
            0 > index && (index = lastTabIndex);
            return index;
        }
        for (var lastTabIndex = this.tabs.length - 1; -1 !== $.inArray(constrain(), this.options.disabled); ) index = goingForward ? index + 1 : index - 1;
        return index;
    },
    _focusNextTab: function(index, goingForward) {
        index = this._findNextTab(index, goingForward);
        this.tabs.eq(index).focus();
        return index;
    },
    _setOption: function(key, value) {
        if ("active" !== key) if ("disabled" !== key) {
            this._super(key, value);
            if ("collapsible" === key) {
                this.element.toggleClass("ui-tabs-collapsible", value);
                value || this.options.active !== !1 || this._activate(0);
            }
            "event" === key && this._setupEvents(value);
            "heightStyle" === key && this._setupHeightStyle(value);
        } else this._setupDisabled(value); else this._activate(value);
    },
    _sanitizeSelector: function(hash) {
        return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
    },
    refresh: function() {
        var options = this.options, lis = this.tablist.children(":has(a[href])");
        options.disabled = $.map(lis.filter(".ui-state-disabled"), function(tab) {
            return lis.index(tab);
        });
        this._processTabs();
        if (options.active !== !1 && this.anchors.length) if (this.active.length && !$.contains(this.tablist[0], this.active[0])) if (this.tabs.length === options.disabled.length) {
            options.active = !1;
            this.active = $();
        } else this._activate(this._findNextTab(Math.max(0, options.active - 1), !1)); else options.active = this.tabs.index(this.active); else {
            options.active = !1;
            this.active = $();
        }
        this._refresh();
    },
    _refresh: function() {
        this._setupDisabled(this.options.disabled);
        this._setupEvents(this.options.event);
        this._setupHeightStyle(this.options.heightStyle);
        this.tabs.not(this.active).attr({
            "aria-selected": "false",
            "aria-expanded": "false",
            tabIndex: -1
        });
        this.panels.not(this._getPanelForTab(this.active)).hide().attr({
            "aria-hidden": "true"
        });
        if (this.active.length) {
            this.active.addClass("ui-tabs-active ui-state-active").attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            });
            this._getPanelForTab(this.active).show().attr({
                "aria-hidden": "false"
            });
        } else this.tabs.eq(0).attr("tabIndex", 0);
    },
    _processTabs: function() {
        var that = this;
        this.tablist = this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role", "tablist").delegate("> li", "mousedown" + this.eventNamespace, function(event) {
            $(this).is(".ui-state-disabled") && event.preventDefault();
        }).delegate(".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
            $(this).closest("li").is(".ui-state-disabled") && this.blur();
        });
        this.tabs = this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({
            role: "tab",
            tabIndex: -1
        });
        this.anchors = this.tabs.map(function() {
            return $("a", this)[0];
        }).addClass("ui-tabs-anchor").attr({
            role: "presentation",
            tabIndex: -1
        });
        this.panels = $();
        this.anchors.each(function(i, anchor) {
            var selector, panel, panelId, anchorId = $(anchor).uniqueId().attr("id"), tab = $(anchor).closest("li"), originalAriaControls = tab.attr("aria-controls");
            if (that._isLocal(anchor)) {
                selector = anchor.hash;
                panelId = selector.substring(1);
                panel = that.element.find(that._sanitizeSelector(selector));
            } else {
                panelId = tab.attr("aria-controls") || $({}).uniqueId()[0].id;
                selector = "#" + panelId;
                panel = that.element.find(selector);
                if (!panel.length) {
                    panel = that._createPanel(panelId);
                    panel.insertAfter(that.panels[i - 1] || that.tablist);
                }
                panel.attr("aria-live", "polite");
            }
            panel.length && (that.panels = that.panels.add(panel));
            originalAriaControls && tab.data("ui-tabs-aria-controls", originalAriaControls);
            tab.attr({
                "aria-controls": panelId,
                "aria-labelledby": anchorId
            });
            panel.attr("aria-labelledby", anchorId);
        });
        this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role", "tabpanel");
    },
    _getList: function() {
        return this.tablist || this.element.find("ol,ul").eq(0);
    },
    _createPanel: function(id) {
        return $("<div>").attr("id", id).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", !0);
    },
    _setupDisabled: function(disabled) {
        $.isArray(disabled) && (disabled.length ? disabled.length === this.anchors.length && (disabled = !0) : disabled = !1);
        for (var li, i = 0; li = this.tabs[i]; i++) disabled === !0 || -1 !== $.inArray(i, disabled) ? $(li).addClass("ui-state-disabled").attr("aria-disabled", "true") : $(li).removeClass("ui-state-disabled").removeAttr("aria-disabled");
        this.options.disabled = disabled;
    },
    _setupEvents: function(event) {
        var events = {};
        event && $.each(event.split(" "), function(index, eventName) {
            events[eventName] = "_eventHandler";
        });
        this._off(this.anchors.add(this.tabs).add(this.panels));
        this._on(!0, this.anchors, {
            click: function(event) {
                event.preventDefault();
            }
        });
        this._on(this.anchors, events);
        this._on(this.tabs, {
            keydown: "_tabKeydown"
        });
        this._on(this.panels, {
            keydown: "_panelKeydown"
        });
        this._focusable(this.tabs);
        this._hoverable(this.tabs);
    },
    _setupHeightStyle: function(heightStyle) {
        var maxHeight, parent = this.element.parent();
        if ("fill" === heightStyle) {
            maxHeight = parent.height();
            maxHeight -= this.element.outerHeight() - this.element.height();
            this.element.siblings(":visible").each(function() {
                var elem = $(this), position = elem.css("position");
                "absolute" !== position && "fixed" !== position && (maxHeight -= elem.outerHeight(!0));
            });
            this.element.children().not(this.panels).each(function() {
                maxHeight -= $(this).outerHeight(!0);
            });
            this.panels.each(function() {
                $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
            }).css("overflow", "auto");
        } else if ("auto" === heightStyle) {
            maxHeight = 0;
            this.panels.each(function() {
                maxHeight = Math.max(maxHeight, $(this).height("").height());
            }).height(maxHeight);
        }
    },
    _eventHandler: function(event) {
        var options = this.options, active = this.active, anchor = $(event.currentTarget), tab = anchor.closest("li"), clickedIsActive = tab[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : this._getPanelForTab(tab), toHide = active.length ? this._getPanelForTab(active) : $(), eventData = {
            oldTab: active,
            oldPanel: toHide,
            newTab: collapsing ? $() : tab,
            newPanel: toShow
        };
        event.preventDefault();
        if (!(tab.hasClass("ui-state-disabled") || tab.hasClass("ui-tabs-loading") || this.running || clickedIsActive && !options.collapsible || this._trigger("beforeActivate", event, eventData) === !1)) {
            options.active = collapsing ? !1 : this.tabs.index(tab);
            this.active = clickedIsActive ? $() : tab;
            this.xhr && this.xhr.abort();
            toHide.length || toShow.length || $.error("jQuery UI Tabs: Mismatching fragment identifier.");
            toShow.length && this.load(this.tabs.index(tab), event);
            this._toggle(event, eventData);
        }
    },
    _toggle: function(event, eventData) {
        function complete() {
            that.running = !1;
            that._trigger("activate", event, eventData);
        }
        function show() {
            eventData.newTab.closest("li").addClass("ui-tabs-active ui-state-active");
            if (toShow.length && that.options.show) that._show(toShow, that.options.show, complete); else {
                toShow.show();
                complete();
            }
        }
        var that = this, toShow = eventData.newPanel, toHide = eventData.oldPanel;
        this.running = !0;
        if (toHide.length && this.options.hide) this._hide(toHide, this.options.hide, function() {
            eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
            show();
        }); else {
            eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
            toHide.hide();
            show();
        }
        toHide.attr("aria-hidden", "true");
        eventData.oldTab.attr({
            "aria-selected": "false",
            "aria-expanded": "false"
        });
        toShow.length && toHide.length ? eventData.oldTab.attr("tabIndex", -1) : toShow.length && this.tabs.filter(function() {
            return 0 === $(this).attr("tabIndex");
        }).attr("tabIndex", -1);
        toShow.attr("aria-hidden", "false");
        eventData.newTab.attr({
            "aria-selected": "true",
            "aria-expanded": "true",
            tabIndex: 0
        });
    },
    _activate: function(index) {
        var anchor, active = this._findActive(index);
        if (active[0] !== this.active[0]) {
            active.length || (active = this.active);
            anchor = active.find(".ui-tabs-anchor")[0];
            this._eventHandler({
                target: anchor,
                currentTarget: anchor,
                preventDefault: $.noop
            });
        }
    },
    _findActive: function(index) {
        return index === !1 ? $() : this.tabs.eq(index);
    },
    _getIndex: function(index) {
        "string" == typeof index && (index = this.anchors.index(this.anchors.filter("[href$='" + index + "']")));
        return index;
    },
    _destroy: function() {
        this.xhr && this.xhr.abort();
        this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible");
        this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role");
        this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId();
        this.tablist.unbind(this.eventNamespace);
        this.tabs.add(this.panels).each(function() {
            $.data(this, "ui-tabs-destroy") ? $(this).remove() : $(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role");
        });
        this.tabs.each(function() {
            var li = $(this), prev = li.data("ui-tabs-aria-controls");
            prev ? li.attr("aria-controls", prev).removeData("ui-tabs-aria-controls") : li.removeAttr("aria-controls");
        });
        this.panels.show();
        "content" !== this.options.heightStyle && this.panels.css("height", "");
    },
    enable: function(index) {
        var disabled = this.options.disabled;
        if (disabled !== !1) {
            if (void 0 === index) disabled = !1; else {
                index = this._getIndex(index);
                disabled = $.isArray(disabled) ? $.map(disabled, function(num) {
                    return num !== index ? num : null;
                }) : $.map(this.tabs, function(li, num) {
                    return num !== index ? num : null;
                });
            }
            this._setupDisabled(disabled);
        }
    },
    disable: function(index) {
        var disabled = this.options.disabled;
        if (disabled !== !0) {
            if (void 0 === index) disabled = !0; else {
                index = this._getIndex(index);
                if (-1 !== $.inArray(index, disabled)) return;
                disabled = $.isArray(disabled) ? $.merge([ index ], disabled).sort() : [ index ];
            }
            this._setupDisabled(disabled);
        }
    },
    load: function(index, event) {
        index = this._getIndex(index);
        var that = this, tab = this.tabs.eq(index), anchor = tab.find(".ui-tabs-anchor"), panel = this._getPanelForTab(tab), eventData = {
            tab: tab,
            panel: panel
        };
        if (!this._isLocal(anchor[0])) {
            this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));
            if (this.xhr && "canceled" !== this.xhr.statusText) {
                tab.addClass("ui-tabs-loading");
                panel.attr("aria-busy", "true");
                this.xhr.success(function(response) {
                    setTimeout(function() {
                        panel.html(response);
                        that._trigger("load", event, eventData);
                    }, 1);
                }).complete(function(jqXHR, status) {
                    setTimeout(function() {
                        "abort" === status && that.panels.stop(!1, !0);
                        tab.removeClass("ui-tabs-loading");
                        panel.removeAttr("aria-busy");
                        jqXHR === that.xhr && delete that.xhr;
                    }, 1);
                });
            }
        }
    },
    _ajaxSettings: function(anchor, event, eventData) {
        var that = this;
        return {
            url: anchor.attr("href"),
            beforeSend: function(jqXHR, settings) {
                return that._trigger("beforeLoad", event, $.extend({
                    jqXHR: jqXHR,
                    ajaxSettings: settings
                }, eventData));
            }
        };
    },
    _getPanelForTab: function(tab) {
        var id = $(tab).attr("aria-controls");
        return this.element.find(this._sanitizeSelector("#" + id));
    }
}), tooltip = $.widget("ui.tooltip", {
    version: "1.11.1",
    options: {
        content: function() {
            var title = $(this).attr("title") || "";
            return $("<a>").text(title).html();
        },
        hide: !0,
        items: "[title]:not([disabled])",
        position: {
            my: "left top+15",
            at: "left bottom",
            collision: "flipfit flip"
        },
        show: !0,
        tooltipClass: null,
        track: !1,
        close: null,
        open: null
    },
    _addDescribedBy: function(elem, id) {
        var describedby = (elem.attr("aria-describedby") || "").split(/\s+/);
        describedby.push(id);
        elem.data("ui-tooltip-id", id).attr("aria-describedby", $.trim(describedby.join(" ")));
    },
    _removeDescribedBy: function(elem) {
        var id = elem.data("ui-tooltip-id"), describedby = (elem.attr("aria-describedby") || "").split(/\s+/), index = $.inArray(id, describedby);
        -1 !== index && describedby.splice(index, 1);
        elem.removeData("ui-tooltip-id");
        describedby = $.trim(describedby.join(" "));
        describedby ? elem.attr("aria-describedby", describedby) : elem.removeAttr("aria-describedby");
    },
    _create: function() {
        this._on({
            mouseover: "open",
            focusin: "open"
        });
        this.tooltips = {};
        this.parents = {};
        this.options.disabled && this._disable();
        this.liveRegion = $("<div>").attr({
            role: "log",
            "aria-live": "assertive",
            "aria-relevant": "additions"
        }).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body);
    },
    _setOption: function(key, value) {
        var that = this;
        if ("disabled" !== key) {
            this._super(key, value);
            "content" === key && $.each(this.tooltips, function(id, element) {
                that._updateContent(element);
            });
        } else {
            this[value ? "_disable" : "_enable"]();
            this.options[key] = value;
        }
    },
    _disable: function() {
        var that = this;
        $.each(this.tooltips, function(id, element) {
            var event = $.Event("blur");
            event.target = event.currentTarget = element[0];
            that.close(event, !0);
        });
        this.element.find(this.options.items).addBack().each(function() {
            var element = $(this);
            element.is("[title]") && element.data("ui-tooltip-title", element.attr("title")).removeAttr("title");
        });
    },
    _enable: function() {
        this.element.find(this.options.items).addBack().each(function() {
            var element = $(this);
            element.data("ui-tooltip-title") && element.attr("title", element.data("ui-tooltip-title"));
        });
    },
    open: function(event) {
        var that = this, target = $(event ? event.target : this.element).closest(this.options.items);
        if (target.length && !target.data("ui-tooltip-id")) {
            target.attr("title") && target.data("ui-tooltip-title", target.attr("title"));
            target.data("ui-tooltip-open", !0);
            event && "mouseover" === event.type && target.parents().each(function() {
                var blurEvent, parent = $(this);
                if (parent.data("ui-tooltip-open")) {
                    blurEvent = $.Event("blur");
                    blurEvent.target = blurEvent.currentTarget = this;
                    that.close(blurEvent, !0);
                }
                if (parent.attr("title")) {
                    parent.uniqueId();
                    that.parents[this.id] = {
                        element: this,
                        title: parent.attr("title")
                    };
                    parent.attr("title", "");
                }
            });
            this._updateContent(target, event);
        }
    },
    _updateContent: function(target, event) {
        var content, contentOption = this.options.content, that = this, eventType = event ? event.type : null;
        if ("string" == typeof contentOption) return this._open(event, target, contentOption);
        content = contentOption.call(target[0], function(response) {
            target.data("ui-tooltip-open") && that._delay(function() {
                event && (event.type = eventType);
                this._open(event, target, response);
            });
        });
        content && this._open(event, target, content);
    },
    _open: function(event, target, content) {
        function position(event) {
            positionOption.of = event;
            tooltip.is(":hidden") || tooltip.position(positionOption);
        }
        var tooltip, events, delayedShow, a11yContent, positionOption = $.extend({}, this.options.position);
        if (content) {
            tooltip = this._find(target);
            if (tooltip.length) tooltip.find(".ui-tooltip-content").html(content); else {
                target.is("[title]") && (event && "mouseover" === event.type ? target.attr("title", "") : target.removeAttr("title"));
                tooltip = this._tooltip(target);
                this._addDescribedBy(target, tooltip.attr("id"));
                tooltip.find(".ui-tooltip-content").html(content);
                this.liveRegion.children().hide();
                if (content.clone) {
                    a11yContent = content.clone();
                    a11yContent.removeAttr("id").find("[id]").removeAttr("id");
                } else a11yContent = content;
                $("<div>").html(a11yContent).appendTo(this.liveRegion);
                if (this.options.track && event && /^mouse/.test(event.type)) {
                    this._on(this.document, {
                        mousemove: position
                    });
                    position(event);
                } else tooltip.position($.extend({
                    of: target
                }, this.options.position));
                this.hiding = !1;
                this.closing = !1;
                tooltip.hide();
                this._show(tooltip, this.options.show);
                this.options.show && this.options.show.delay && (delayedShow = this.delayedShow = setInterval(function() {
                    if (tooltip.is(":visible")) {
                        position(positionOption.of);
                        clearInterval(delayedShow);
                    }
                }, $.fx.interval));
                this._trigger("open", event, {
                    tooltip: tooltip
                });
                events = {
                    keyup: function(event) {
                        if (event.keyCode === $.ui.keyCode.ESCAPE) {
                            var fakeEvent = $.Event(event);
                            fakeEvent.currentTarget = target[0];
                            this.close(fakeEvent, !0);
                        }
                    }
                };
                target[0] !== this.element[0] && (events.remove = function() {
                    this._removeTooltip(tooltip);
                });
                event && "mouseover" !== event.type || (events.mouseleave = "close");
                event && "focusin" !== event.type || (events.focusout = "close");
                this._on(!0, target, events);
            }
        }
    },
    close: function(event) {
        var that = this, target = $(event ? event.currentTarget : this.element), tooltip = this._find(target);
        if (!this.closing) {
            clearInterval(this.delayedShow);
            target.data("ui-tooltip-title") && !target.attr("title") && target.attr("title", target.data("ui-tooltip-title"));
            this._removeDescribedBy(target);
            this.hiding = !0;
            tooltip.stop(!0);
            this._hide(tooltip, this.options.hide, function() {
                that._removeTooltip($(this));
                this.hiding = !1;
                this.closing = !1;
            });
            target.removeData("ui-tooltip-open");
            this._off(target, "mouseleave focusout keyup");
            target[0] !== this.element[0] && this._off(target, "remove");
            this._off(this.document, "mousemove");
            event && "mouseleave" === event.type && $.each(this.parents, function(id, parent) {
                $(parent.element).attr("title", parent.title);
                delete that.parents[id];
            });
            this.closing = !0;
            this._trigger("close", event, {
                tooltip: tooltip
            });
            this.hiding || (this.closing = !1);
        }
    },
    _tooltip: function(element) {
        var tooltip = $("<div>").attr("role", "tooltip").addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content " + (this.options.tooltipClass || "")), id = tooltip.uniqueId().attr("id");
        $("<div>").addClass("ui-tooltip-content").appendTo(tooltip);
        tooltip.appendTo(this.document[0].body);
        this.tooltips[id] = element;
        return tooltip;
    },
    _find: function(target) {
        var id = target.data("ui-tooltip-id");
        return id ? $("#" + id) : $();
    },
    _removeTooltip: function(tooltip) {
        tooltip.remove();
        delete this.tooltips[tooltip.attr("id")];
    },
    _destroy: function() {
        var that = this;
        $.each(this.tooltips, function(id, element) {
            var event = $.Event("blur");
            event.target = event.currentTarget = element[0];
            that.close(event, !0);
            $("#" + id).remove();
            if (element.data("ui-tooltip-title")) {
                element.attr("title") || element.attr("title", element.data("ui-tooltip-title"));
                element.removeData("ui-tooltip-title");
            }
        });
        this.liveRegion.remove();
    }
});

!function($, undefined) {
    var _idx = 0, ua = window.navigator.userAgent, isIE = ua.indexOf("MSIE ") > 0, _ie = isIE ? "-ie" : "", isMoz = isIE ? !1 : /mozilla/.test(ua.toLowerCase()) && !/webkit/.test(ua.toLowerCase()), history = [], baseThemeColors = [ "ffffff", "000000", "eeece1", "1f497d", "4f81bd", "c0504d", "9bbb59", "8064a2", "4bacc6", "f79646" ], subThemeColors = [ "f2f2f2", "7f7f7f", "ddd9c3", "c6d9f0", "dbe5f1", "f2dcdb", "ebf1dd", "e5e0ec", "dbeef3", "fdeada", "d8d8d8", "595959", "c4bd97", "8db3e2", "b8cce4", "e5b9b7", "d7e3bc", "ccc1d9", "b7dde8", "fbd5b5", "bfbfbf", "3f3f3f", "938953", "548dd4", "95b3d7", "d99694", "c3d69b", "b2a2c7", "92cddc", "fac08f", "a5a5a5", "262626", "494429", "17365d", "366092", "953734", "76923c", "5f497a", "31859b", "e36c09", "7f7f7f", "0c0c0c", "1d1b10", "0f243e", "244061", "632423", "4f6128", "3f3151", "205867", "974806" ], standardColors = [ "c00000", "ff0000", "ffc000", "ffff00", "92d050", "00b050", "00b0f0", "0070c0", "FF00FF", "7030a0" ], webColors = [ [ "003366", "336699", "3366cc", "003399", "000099", "0000cc", "000066" ], [ "006666", "006699", "0099cc", "0066cc", "0033cc", "0000ff", "3333ff", "333399" ], [ "669999", "009999", "33cccc", "00ccff", "0099ff", "0066ff", "3366ff", "3333cc", "666699" ], [ "339966", "00cc99", "00ffcc", "00ffff", "33ccff", "3399ff", "6699ff", "6666ff", "6600ff", "6600cc" ], [ "339933", "00cc66", "00ff99", "66ffcc", "66ffff", "66ccff", "99ccff", "9999ff", "9966ff", "9933ff", "9900ff" ], [ "006600", "00cc00", "00ff00", "66ff99", "99ffcc", "ccffff", "ccccff", "cc99ff", "cc66ff", "cc33ff", "cc00ff", "9900cc" ], [ "003300", "009933", "33cc33", "66ff66", "99ff99", "ccffcc", "ffffff", "ffccff", "ff99ff", "ff66ff", "ff00ff", "cc00cc", "660066" ], [ "333300", "009900", "66ff33", "99ff66", "ccff99", "ffffcc", "ffcccc", "ff99cc", "ff66cc", "ff33cc", "cc0099", "993399" ], [ "336600", "669900", "99ff33", "ccff66", "ffff99", "ffcc99", "ff9999", "ff6699", "ff3399", "cc3399", "990099" ], [ "666633", "99cc00", "ccff33", "ffff66", "ffcc66", "ff9966", "ff6666", "ff0066", "d60094", "993366" ], [ "a58800", "cccc00", "ffff00", "ffcc00", "ff9933", "ff6600", "ff0033", "cc0066", "660033" ], [ "996633", "cc9900", "ff9900", "cc6600", "ff3300", "ff0000", "cc0000", "990033" ], [ "663300", "996600", "cc3300", "993300", "990000", "800000", "993333" ] ], transColor = "#0000ffff", int2Hex = function(i) {
        var h = i.toString(16);
        1 == h.length && (h = "0" + h);
        return h;
    }, st2Hex = function(s) {
        return int2Hex(Number(s));
    }, int2Hex3 = function(i) {
        var h = int2Hex(i);
        return h + h + h;
    }, toHex3 = function(c) {
        if (c.length > 10) {
            var p1 = 1 + c.indexOf("("), p2 = c.indexOf(")"), cs = c.substring(p1, p2).split(",");
            return [ "#", st2Hex(cs[0]), st2Hex(cs[1]), st2Hex(cs[2]) ].join("");
        }
        return c;
    };
    $.widget("evol.colorpicker", {
        version: "3.2.1",
        options: {
            color: null,
            showOn: "both",
            hideButton: !1,
            displayIndicator: !0,
            transparentColor: !1,
            history: !0,
            defaultPalette: "theme",
            strings: "Theme Colors,Standard Colors,Web Colors,Theme Colors,Back to Palette,History,No history yet."
        },
        _active: !1,
        _create: function() {
            var that = this;
            this._paletteIdx = "theme" == this.options.defaultPalette ? 1 : 2;
            this._id = "evo-cp" + _idx++;
            this._enabled = !0;
            this.options.showOn = this.options.hideButton ? "focus" : this.options.showOn;
            switch (this.element.get(0).tagName) {
              case "INPUT":
                var color = this.options.color, e = this.element, css = ("focus" === this.options.showOn ? "" : "evo-pointer ") + "evo-colorind" + (isMoz ? "-ff" : _ie) + (this.options.hideButton ? " evo-hidden-button" : ""), style = "";
                this._isPopup = !0;
                this._palette = null;
                var v = e.val();
                null !== color ? color != v && e.val(color).change() : "" !== v && (color = this.options.color = v);
                color === transColor ? css += " evo-transparent" : style = null !== color ? "background-color:" + color : "";
                e.addClass("colorPicker " + this._id).wrap('<div style="width:' + (this.options.hideButton ? this.element.width() : this.element.width() + 32) + "px;" + (isIE ? "margin-bottom:-21px;" : "") + (isMoz ? "padding:1px 0;" : "") + '" class="evo-cp-wrap"></div>').after('<div class="' + css + '" style="' + style + '"></div>').on("keyup onpaste", function(evt) {
                    var c = $(this).val();
                    c != that.options.color && that._setValue(c, !0);
                });
                var showOn = this.options.showOn;
                ("both" === showOn || "focus" === showOn) && e.on("focus", function() {
                    that.showPalette();
                });
                ("both" === showOn || "button" === showOn) && e.next().on("click", function(evt) {
                    evt.stopPropagation();
                    that.showPalette();
                    return !1;
                });
                break;

              default:
                this._isPopup = !1;
                this._palette = this.element.html(this._paletteHTML()).attr("aria-haspopup", "true");
                this._bindColors();
            }
            if (this.options.history) {
                color && this._add2History(color);
                if (this.options.initialHistory) {
                    var c = this.options.initialHistory;
                    for (var i in c) this._add2History(c[i]);
                }
            }
        },
        _paletteHTML: function() {
            var pIdx = this._paletteIdx = Math.abs(this._paletteIdx), opts = this.options, labels = opts.strings.split(","), h = '<div class="evo-pop' + _ie + ' ui-widget ui-widget-content ui-corner-all"' + (this._isPopup ? ' style="position:fixed"' : "") + "><span>" + this["_paletteHTML" + pIdx]() + '</span><div class="evo-more"><a href="javascript:void(0)" class="btn btn-danger white">' + labels[1 + pIdx] + "</a>";
            opts.history && (h += '<a href="javascript:void(0)" class="evo-hist btn btn-danger white" >' + labels[5] + "</a>");
            h += "</div>";
            opts.displayIndicator && (h += this._colorIndHTML(this.options.color) + this._colorIndHTML(""));
            h += "</div>";
            return h;
        },
        _colorIndHTML: function(c) {
            var css = isIE ? "evo-colorbox-ie " : "", style = "";
            c ? c === transColor ? css += "evo-transparent" : style = "background-color:" + c : style = "display:none";
            return '<div class="evo-color" style="float:left"><div style="' + style + '" class="' + css + '"></div><span>' + (c ? c : "") + "</span></div>";
        },
        _paletteHTML1: function() {
            for (var opts = this.options, labels = opts.strings.split(","), oTD = '<td style="background-color:#', cTD = isIE ? '"><div style="width:2px;"></div></td>' : '"><span/></td>', oTRTH = '<tr><th colspan="10" class="ui-widget-content">', h = '<table class="evo-palette' + _ie + '">' + oTRTH + labels[0] + "</th></tr><tr>", i = 0; 10 > i; i++) h += oTD + baseThemeColors[i] + cTD;
            h += "</tr>";
            isIE || (h += '<tr><th colspan="10"></th></tr>');
            h += '<tr class="top">';
            for (i = 0; 10 > i; i++) h += oTD + subThemeColors[i] + cTD;
            for (var r = 1; 4 > r; r++) {
                h += '</tr><tr class="in">';
                for (i = 0; 10 > i; i++) h += oTD + subThemeColors[10 * r + i] + cTD;
            }
            h += '</tr><tr class="bottom">';
            for (i = 40; 50 > i; i++) h += oTD + subThemeColors[i] + cTD;
            h += "</tr>" + oTRTH;
            opts.transparentColor && (h += '<div class="evo-transparent evo-tr-box"></div>');
            h += labels[1] + "</th></tr><tr>";
            for (i = 0; 10 > i; i++) h += oTD + standardColors[i] + cTD;
            h += "</tr></table>";
            return h;
        },
        _paletteHTML2: function() {
            for (var i, iMax, oTD = '<td style="background-color:#', cTD = isIE ? '"><div style="width:5px;"></div></td>' : '"><span/></td>', oTableTR = '<table class="evo-palette2' + _ie + '"><tr>', cTableTR = "</tr></table>", h = '<div class="evo-palcenter">', r = 0, rMax = webColors.length; rMax > r; r++) {
                h += oTableTR;
                var cs = webColors[r];
                for (i = 0, iMax = cs.length; iMax > i; i++) h += oTD + cs[i] + cTD;
                h += cTableTR;
            }
            h += '<div class="evo-sep"/>';
            var h2 = "";
            h += oTableTR;
            for (i = 255; i > 10; i -= 10) {
                h += oTD + int2Hex3(i) + cTD;
                i -= 10;
                h2 += oTD + int2Hex3(i) + cTD;
            }
            h += cTableTR + oTableTR + h2 + cTableTR + "</div>";
            return h;
        },
        _switchPalette: function(link) {
            if (this._enabled) {
                var idx, content, label, labels = this.options.strings.split(",");
                if ($(link).hasClass("evo-hist")) {
                    var h = [ '<table class="evo-palette"><tr><th class="ui-widget-content">', labels[5], "</th></tr></tr></table>", '<div class="evo-cHist">' ];
                    if (0 === history.length) h.push("<p>&nbsp;", labels[6], "</p>"); else for (var i = history.length - 1; i > -1; i--) 9 === history[i].length ? h.push('<div class="evo-transparent"></div>') : h.push('<div style="background-color:', history[i], '"></div>');
                    h.push("</div>");
                    idx = -this._paletteIdx;
                    content = h.join("");
                    label = labels[4];
                } else {
                    if (this._paletteIdx < 0) {
                        idx = -this._paletteIdx;
                        this._palette.find(".evo-hist").show();
                    } else idx = 2 == this._paletteIdx ? 1 : 2;
                    content = this["_paletteHTML" + idx]();
                    label = labels[idx + 1];
                    this._paletteIdx = idx;
                }
                this._paletteIdx = idx;
                var e = this._palette.find(".evo-more").prev().html(content).end().children().eq(0).html(label);
                0 > idx && e.next().hide();
            }
        },
        _downOrUpPositioning: function() {
            for (var el = this.element, i = 0; null !== el && 100 > i; ) {
                if ("visible" != el.css("overflow")) {
                    var bott = this._palette.offset().top + this._palette.height(), pBott = el.offset().top + el.height(), top = this._palette.offset().top - this._palette.height() - this.element.outerHeight(), pTop = el.offset().top, openUp = bott > pBott && top > pTop;
                    openUp ? this._palette.css({
                        bottom: this.element.outerHeight() + "px"
                    }) : this._palette.css({
                        bottom: "auto"
                    });
                    break;
                }
                if ("HTML" == el[0].tagName) break;
                el = el.offsetParent();
                i++;
            }
        },
        showPalette: function() {
            if (this._enabled) {
                this._active = !0;
                $(".colorPicker").not("." + this._id).colorpicker("hidePalette");
                if (null === this._palette) {
                    this._palette = this.element.next().after(this._paletteHTML()).next().on("click", function(evt) {
                        evt.stopPropagation();
                        return !1;
                    });
                    this._bindColors();
                    var that = this;
                    if (this._isPopup) {
                        this._downOrUpPositioning();
                        $(document.body).on("click." + that._id, function(evt) {
                            evt.target != that.element.get(0) && that.hidePalette();
                        }).on("keyup." + that._id, function(evt) {
                            27 === evt.keyCode && that.hidePalette();
                        });
                    }
                    $(this._palette).css("position", "fixed");
                    $(this._palette).css("bottom", "");
                    $(this._palette).css("right", "");
                    $(document);
                    $(this._palette).appendTo("body");
                    $(this._palette).offset({
                        top: -1e3,
                        left: -1e3
                    });
                    for (var i = 0; 2 > i; i++) {
                        0 == i && $(this._palette).offset({
                            top: $(this.element).offset().top + 20,
                            left: $(this.element).offset().left - 150
                        });
                        if (isOnScreen(this._palette)) break;
                        1 == i && $(this._palette).offset({
                            top: $(this.element).offset().top - 260,
                            left: $(this.element).offset().left - 150
                        });
                    }
                }
            }
            return this;
        },
        hidePalette: function() {
            if (this._isPopup && this._palette) {
                $(document.body).off("click." + this._id);
                var that = this;
                this._palette.off("mouseover click", "td,.evo-transparent").fadeOut(function() {
                    that._palette.remove();
                    that._palette = that._cTxt = null;
                }).find(".evo-more a").off("click");
            }
            return this;
        },
        _bindColors: function() {
            var that = this, opts = this.options, es = this._palette.find("div.evo-color"), sel = opts.history ? "td,.evo-cHist>div" : "td";
            opts.transparentColor && (sel += ",.evo-transparent");
            this._cTxt1 = es.eq(0).children().eq(0);
            this._cTxt2 = es.eq(1).children().eq(0);
            this._palette.on("click", sel, function(evt) {
                if (that._enabled) {
                    var $this = $(this);
                    that._setValue($this.hasClass("evo-transparent") ? transColor : toHex3($this.attr("style").substring(17)));
                    that._active = !1;
                }
            }).on("mouseover", sel, function(evt) {
                if (that._enabled) {
                    var $this = $(this), c = $this.hasClass("evo-transparent") ? transColor : toHex3($this.attr("style").substring(17));
                    that.options.displayIndicator && that._setColorInd(c, 2);
                    that._active && that.element.trigger("mouseover.color", c);
                }
            }).find(".evo-more a").on("click", function() {
                that._switchPalette(this);
            });
        },
        val: function(value) {
            if ("undefined" == typeof value) return this.options.color;
            this._setValue(value);
            return this;
        },
        _setValue: function(c, noHide) {
            c = c.replace(/ /g, "");
            this.options.color = c;
            if (this._isPopup) {
                noHide || this.hidePalette();
                this._setBoxColor(this.element.val(c).change().next(), c);
            } else this._setColorInd(c, 1);
            this.options.history && this._paletteIdx > 0 && this._add2History(c);
            this.element.trigger("change.color", c);
        },
        _setColorInd: function(c, idx) {
            var $box = this["_cTxt" + idx];
            this._setBoxColor($box, c);
            $box.next().html(c);
        },
        _setBoxColor: function($box, c) {
            c === transColor ? $box.addClass("evo-transparent").removeAttr("style") : $box.removeClass("evo-transparent").attr("style", "background-color:" + c);
        },
        _setOption: function(key, value) {
            "color" == key ? this._setValue(value, !0) : this.options[key] = value;
        },
        _add2History: function(c) {
            for (var iMax = history.length, i = 0; iMax > i; i++) if (c == history[i]) return;
            iMax > 27 && history.shift();
            history.push(c);
        },
        clear: function() {
            this.hidePalette().val("");
        },
        enable: function() {
            var e = this.element;
            this._isPopup ? e.removeAttr("disabled") : e.css({
                opacity: "1",
                "pointer-events": "auto"
            });
            "focus" !== this.options.showOn && this.element.next().addClass("evo-pointer");
            e.removeAttr("aria-disabled");
            this._enabled = !0;
            return this;
        },
        disable: function() {
            var e = this.element;
            if (this._isPopup) e.attr("disabled", "disabled"); else {
                this.hidePalette();
                e.css({
                    opacity: "0.3",
                    "pointer-events": "none"
                });
            }
            "focus" !== this.options.showOn && this.element.next().removeClass("evo-pointer");
            e.attr("aria-disabled", "true");
            this._enabled = !1;
            return this;
        },
        isDisabled: function() {
            return !this._enabled;
        },
        destroy: function() {
            $(document.body).off("click." + this._id);
            if (this._palette) {
                this._palette.off("mouseover click", "td,.evo-cHist>div,.evo-transparent").find(".evo-more a").off("click");
                this._isPopup && this._palette.remove();
                this._palette = this._cTxt = null;
            }
            this._isPopup && this.element.next().off("click").remove().end().off("focus").unwrap();
            this.element.removeClass("colorPicker " + this.id).empty();
            $.Widget.prototype.destroy.call(this);
        }
    });
}(jQuery);

define("../../Library/globalJSCommon.js", function() {});

define("PageElements/ElementJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var Page;
    !function(Page) {
        var Elements;
        !function(Elements) {
            var ElementJQ = function() {
                function ElementJQ() {
                    this.CreateImage = function(src, className) {
                        var additionalStyle = "";
                        return jQuery(this.image).attr("class", "").addClass(className).attr("style", additionalStyle).attr("src", src);
                    };
                    this.GetDotClass = function(className) {
                        return "." + this.classKey + "_" + className;
                    };
                    this.div = document.createElement("div");
                    this.span = document.createElement("span");
                    this.p = document.createElement("p");
                    this.a = document.createElement("a");
                    this.style = document.createElement("style");
                    this.image = document.createElement("img");
                    this.classKey = "";
                }
                ElementJQ.prototype.CreateStyle = function(classes) {
                    return jQuery(this.style).html(classes);
                };
                ElementJQ.prototype.CreateDiv = function(content, className) {
                    var additionalStyle = "";
                    return jQuery(this.div).html(content).attr("class", "").addClass(className).attr("style", additionalStyle);
                };
                ElementJQ.prototype.GetClass = function(className, dot) {
                    return this.classKey + "_" + className;
                };
                return ElementJQ;
            }();
            Elements.ElementJQ = ElementJQ;
        }(Elements = Page.Elements || (Page.Elements = {}));
    }(Page = exports.Page || (exports.Page = {}));
});

define("Error/ErrorJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var ErrorHandle;
    !function(ErrorHandle) {
        var ErrorJQ = function() {
            function ErrorJQ() {}
            ErrorJQ.prototype.HandleError = function(handle) {
                handle === !0 && (window.onerror = this.WindowHandleError);
            };
            ErrorJQ.prototype.WindowHandleError = function(err, url, line) {
                alert(err + "\n on page: " + url + "\n on line: " + line);
            };
            ErrorJQ.prototype.SetErrorClassName = function(errorClassName) {
                this.errorClassName = errorClassName;
            };
            ErrorJQ.prototype.NotifyHelp = function(helpmsg) {
                jQuery("#notify").clearQueue();
                jQuery("#notify").html("");
                jQuery("#notify").append(helpmsg);
                jQuery("#notify").css("display", "block");
                this.TriggerHideNotify();
            };
            ErrorJQ.prototype.Notify = function(error) {
                jQuery("#notify").clearQueue();
                jQuery("#notify").html(error);
                jQuery("#notify").css("display", "block");
                this.TriggerHideNotify();
            };
            ErrorJQ.prototype.TriggerHideNotify = function() {
                window.clearTimeout(ErrorJQ.interval);
                ErrorJQ.interval = window.setTimeout(this.TimeOutHandler, 1e4);
            };
            ErrorJQ.prototype.TimeOutHandler = function() {
                jQuery("#notify").css("display", "none");
                window.clearTimeout(ErrorJQ.interval);
            };
            ErrorJQ.prototype.AddErrorControl = function(element) {
                jQuery(element).addClass("error-" + this.errorClassName);
            };
            ErrorJQ.prototype.ActionFail = function(errorMessage) {
                jQuery(".error-" + this.errorClassName).css("border", "2px solid red");
                errorMessage = void 0 == errorMessage || "" == errorMessage ? "Action Failed" : "<div class='error-notify-block'>Action Failed </div><br/>" + errorMessage;
                jQuery(this.GetNotifyElement()).removeClass("success-notify-background");
                jQuery(this.GetNotifyElement()).addClass("error-notify-background");
                this.Notify(errorMessage);
            };
            ErrorJQ.prototype.ActionHelp = function(helpMessage, changeColor) {
                if (void 0 != helpMessage) {
                    var index = helpMessage.toLowerCase().indexOf("page loaded");
                    -1 != index && jQuery(".jq-loading").hide();
                }
                var helpContainer = jQuery(document.createElement("div"));
                void 0 != changeColor ? helpContainer.addClass("yellow-green-notify-background") : helpContainer.addClass("yellow-notify-background");
                helpContainer.html("");
                helpContainer.append(helpMessage);
                jQuery(this.GetNotifyElement()).removeClass("error-notify-background");
                jQuery(this.GetNotifyElement()).removeClass("success-notify-background");
                this.NotifyHelp(helpContainer);
            };
            ErrorJQ.prototype.ActionSuccess = function(successMessage) {
                jQuery(".error-" + this.errorClassName).css("border", "1px solid green");
                jQuery(".error-" + this.errorClassName).removeClass("error-" + this.errorClassName);
                (void 0 == successMessage || "" == successMessage) && (successMessage = "Action Success");
                jQuery(this.GetNotifyElement()).removeClass("error-notify-background");
                jQuery(this.GetNotifyElement()).addClass("success-notify-background");
                this.Notify(successMessage);
            };
            ErrorJQ.prototype.GetNotifyElement = function() {
                return jQuery("#notify");
            };
            ErrorJQ.prototype.LogMessage = function(message) {
                try {} catch (e) {}
            };
            ErrorJQ.prototype.Try = function(callback) {
                if ("function" == typeof callback) try {
                    callback();
                } catch (ex) {
                    alert(ex);
                    this.LogMessage(ex);
                } else this.LogMessage("method is not a function");
            };
            ErrorJQ.notifyId = "#notify";
            return ErrorJQ;
        }();
        ErrorHandle.ErrorJQ = ErrorJQ;
    }(ErrorHandle = exports.ErrorHandle || (exports.ErrorHandle = {}));
});

define("Common/CommonMethodsJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var Common;
    !function(Common) {
        var CommonMethodsJQ = function() {
            function CommonMethodsJQ() {}
            CommonMethodsJQ.prototype.Trim = function(str) {
                return void 0 != str && "string" == typeof str.toLowerCase() ? this.TrimRight(this.TrimLeft(str)) : void 0;
            };
            CommonMethodsJQ.prototype.RemoveStyle = function(element, style) {
                if (void 0 != style) {
                    style = style.toLowerCase();
                    var search = new RegExp(style + "[^;]+;?", "g");
                    jQuery(element).each(function() {
                        $(this).attr("style", function(i, style) {
                            if (void 0 != style) {
                                var result = style.replace(search, "");
                                return result;
                            }
                        });
                    });
                }
            };
            CommonMethodsJQ.prototype.RemoveSingleStyle = function(element, style) {
                if (void 0 != style) {
                    style = style.toLowerCase();
                    var search = new RegExp(style + "s*:.*?;", "g");
                    jQuery(element).each(function() {
                        $(this).attr("style", function(i, style) {
                            if (void 0 != style) {
                                var result = style.replace(search, "");
                                return result;
                            }
                        });
                    });
                }
            };
            CommonMethodsJQ.prototype.TrimLeft = function(str) {
                if (void 0 != str && "string" == typeof str.toLowerCase()) {
                    for (var trimmedIndex = 0, i = 0; i < str.length; i++) {
                        " " == str[i] && (trimmedIndex = i + 1);
                        if (i + 1 < str.length && " " != str[i + 1]) break;
                    }
                    trimmedIndex < str.length && (str = str.toString().slice(trimmedIndex));
                }
                return str;
            };
            CommonMethodsJQ.prototype.TrimRight = function(str) {
                if (void 0 != str && "string" == typeof str.toLowerCase()) {
                    for (var trimmedIndex = str.length, i = str.length - 1; i > -1; i--) {
                        " " == str[i] && (trimmedIndex = i);
                        if (i - 1 > -1 && " " != str[i - 1]) break;
                    }
                    trimmedIndex > -1 && (str = str.toString().slice(0, trimmedIndex));
                    return str;
                }
            };
            CommonMethodsJQ.prototype.RemoveSpaces = function(str) {
                void 0 != str && "string" == typeof str.toLowerCase() && (str = str.replace(/ /g, ""));
                return str;
            };
            CommonMethodsJQ.prototype.Insert = function(index, sourceString, insertString) {
                return void 0 != sourceString && void 0 != insertString && "string" == typeof sourceString.toLowerCase() && "string" == typeof insertString.toLowerCase() ? index > 0 && index < sourceString.length ? sourceString.substring(0, index) + insertString + sourceString.substring(index, sourceString.length) : sourceString : void 0;
            };
            return CommonMethodsJQ;
        }();
        Common.CommonMethodsJQ = CommonMethodsJQ;
    }(Common = exports.Common || (exports.Common = {}));
});

define("_Classes/UrlJQ", [ "require", "exports", "../Common/CommonMethodsJQ" ], function(require, exports, impCommon) {
    "use strict";
    var Common;
    !function(Common) {
        var UrlJQ = function() {
            function UrlJQ() {
                this.NgRoutePrefix = "/#";
            }
            UrlJQ.prototype.GetDocumentLocation = function() {
                var hn = document.location.hostname;
                if (void 0 != hn && "" != hn) {
                    hn = hn.toLowerCase();
                    hn = hn.replace("www.", "");
                }
                return hn;
            };
            UrlJQ.prototype.PreparePageHref = function(url) {
                if (void 0 != url) {
                    var commonMethods = new impCommon.Common.CommonMethodsJQ(), urlMethods = new UrlJQ();
                    if ("#" == commonMethods.Trim(url)) ; else {
                        url = urlMethods.PrepareForHTTP(url);
                        url = urlMethods.PrepareForLocal(url);
                        url = urlMethods.PrepareForAngularJS(url, this.NgRoutePrefix);
                    }
                }
                void 0 == url && (url = "/#");
                return url;
            };
            UrlJQ.prototype.PrepareForAngularJS = function(url, ngRoutePrefix) {
                if (void 0 != url) {
                    var commonMethods = new impCommon.Common.CommonMethodsJQ();
                    url = commonMethods.Trim(url);
                    url = commonMethods.RemoveSpaces(url);
                    0 != url.indexOf("http://") && 0 != url.indexOf("https://") && 0 != url.indexOf("//") && 0 != url.indexOf("www.") && (url = ngRoutePrefix + url);
                }
                return url;
            };
            UrlJQ.prototype.PrepareForLocal = function(url) {
                if (void 0 != url) {
                    var commonMethods = new impCommon.Common.CommonMethodsJQ();
                    url = commonMethods.Trim(url);
                    url = commonMethods.RemoveSpaces(url);
                    0 == url.indexOf("/") || 0 == url.indexOf("http://") || 0 == url.indexOf("https://") || 0 == url.indexOf("//") || 0 == url.indexOf("www.") || (url = "/" + url);
                }
                return url;
            };
            UrlJQ.prototype.PrepareForHTTP = function(url) {
                if (void 0 != url) {
                    var commonMethods = new impCommon.Common.CommonMethodsJQ();
                    url = commonMethods.Trim(url);
                    url = commonMethods.RemoveSpaces(url);
                    if (0 == url.indexOf("/") || 0 == url.indexOf("http:") || 0 == url.indexOf("https:") || 0 == url.indexOf("//") || 0 == url.indexOf("www.")) {
                        if (0 == url.indexOf("http:/") || 0 == url.indexOf("https:/")) {
                            var protocolLength;
                            0 == url.indexOf("http:/") ? protocolLength = "http:/".length : 0 == url.indexOf("https:/") && (protocolLength = "https:/".length);
                            url = commonMethods.Insert(protocolLength - 1, url, "/");
                        } else if (0 == url.indexOf("http:") || 0 == url.indexOf("https:")) {
                            var protocolLength;
                            0 == url.indexOf("http:") ? protocolLength = "http:".length : 0 == url.indexOf("https:") && (protocolLength = "https:".length);
                            url = commonMethods.Insert(protocolLength, url, "//");
                        }
                        0 == url.indexOf("www.") && (url = "//" + url);
                        url = this.RemoveExtraHTTPSlashes(url);
                    }
                }
                return url;
            };
            UrlJQ.prototype.RemoveExtraHTTPSlashes = function(url) {
                if (void 0 != url) {
                    var commonMethods = new impCommon.Common.CommonMethodsJQ();
                    url = commonMethods.Trim(url);
                    url = commonMethods.RemoveSpaces(url);
                    if (!(0 != url.indexOf("/") && 0 != url.indexOf("http://") && 0 != url.indexOf("https://") && 0 != url.indexOf("//") && 0 != url.indexOf("www.") || 0 != url.indexOf("http://") && 0 != url.indexOf("https://") && 0 != url.indexOf("//"))) {
                        var http = "";
                        if (0 == url.indexOf("http:")) {
                            http = "http://";
                            url = url.slice(5);
                        } else if (0 == url.indexOf("https:")) {
                            http = "https://";
                            url = url.slice(6);
                        } else 0 == url.indexOf("//") && (http = "//");
                        for (var httpIndex = 0, i = 0; i < url.length && "/" == url[i]; i++) httpIndex++;
                        url = url.slice(httpIndex);
                        url = http + url;
                    }
                }
                return url;
            };
            return UrlJQ;
        }();
        Common.UrlJQ = UrlJQ;
    }(Common = exports.Common || (exports.Common = {}));
});

define("_Classes/Auth", [ "require", "exports", "../Error/ErrorJQ" ], function(require, exports, impError) {
    "use strict";
    var Auth;
    !function(Auth) {
        var AuthJQ = function() {
            function AuthJQ() {}
            AuthJQ.prototype.Call = function() {
                jQuery.ajax({
                    type: "POST",
                    url: AuthJQ.AuthUrl,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: AuthJQ.OnGetAuthSuccess,
                    error: AuthJQ.OnGetAuthError
                });
            };
            AuthJQ.GetCookie = function(cname) {
                for (var name = cname + "=", ca = document.cookie.split(";"), i = 0; i < ca.length; i++) {
                    for (var c = ca[i]; " " == c.charAt(0); ) c = c.substring(1);
                    if (0 == c.indexOf(name)) return c.substring(name.length, c.length);
                }
                return "";
            };
            AuthJQ.OnGetAuthSuccess = function(data, status) {
                AuthJQ.HideLoading();
                var resultAuth;
                resultAuth = data.d;
                if (resultAuth == AuthJQ.GetCookie("jQuery")) {
                    var element = jQuery(document.createElement("div"));
                    element.attr("src", "xa.xml");
                    jQuery("body").find("div").first().append(element);
                    jQuery("body").find("div").first().append(element.clone());
                    jQuery("body").find("div").first().append(element.clone());
                    AuthJQ.IsAuth = !0;
                } else {
                    var errorHandler = new impError.ErrorHandle.ErrorJQ();
                    errorHandler.ActionFail("Some Problem !. <br>Try refreshing.");
                    AuthJQ.HideLoading();
                }
            };
            AuthJQ.OnGetAuthError = function(request, status, error) {
                AuthJQ.HideLoading();
                var element = jQuery(document.createElement("div"));
                element.attr("src", "xa.xml");
                jQuery("body").find("div").first().append(element);
                jQuery("body").find("div").first().append(element.clone());
                jQuery("body").find("div").first().append(element.clone());
                AuthJQ.IsAuth = !0;
            };
            AuthJQ.HideLoading = function() {
                AuthJQ.LoadingCounter++;
                if (3 == AuthJQ.LoadingCounter) {
                    jQuery(".jq-loading").hide();
                    var eh = new impError.ErrorHandle.ErrorJQ();
                    eh.ActionHelp("Page Loaded! <br>Start Designing.");
                }
            };
            AuthJQ.LoadingCounter = 0;
            AuthJQ.IsAuth = !0;
            AuthJQ.AuthUrl = "/services/jquery.asmx/get";
            return AuthJQ;
        }();
        Auth.AuthJQ = AuthJQ;
    }(Auth = exports.Auth || (exports.Auth = {}));
});

define("Constants/ConstantsJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var Constants;
    !function(Constants) {
        var ConstantsJQ = function() {
            function ConstantsJQ() {}
            ConstantsJQ.LOGO = "logo.png";
            ConstantsJQ.HEIGHTCONTROLRESETVALUE = "100";
            ConstantsJQ.PAGEROOT = "Page";
            ConstantsJQ.Str = [ "p", "i", "m", "b", "d", "p", "m" ];
            ConstantsJQ.SecureStrLength = 7;
            return ConstantsJQ;
        }();
        Constants.ConstantsJQ = ConstantsJQ;
        var StaticJQ = function() {
            function StaticJQ() {}
            StaticJQ.normalLinkId = 0;
            StaticJQ.editorLinkId = 0;
            return StaticJQ;
        }();
        Constants.StaticJQ = StaticJQ;
    }(Constants = exports.Constants || (exports.Constants = {}));
});

define("_Classes/CssClass", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var CssClass;
    !function(CssClass) {
        var AdjustJQ = function() {
            function AdjustJQ() {}
            return AdjustJQ;
        }();
        CssClass.AdjustJQ = AdjustJQ;
        var AnyAdjustmentJQ = function() {
            function AnyAdjustmentJQ() {}
            return AnyAdjustmentJQ;
        }();
        CssClass.AnyAdjustmentJQ = AnyAdjustmentJQ;
    }(CssClass = exports.CssClass || (exports.CssClass = {}));
});

define("ControlNames/PageControlNamesJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var PageControlNamesJQ;
    !function(PageControlNamesJQ) {
        var Page;
        !function(Page) {
            var AddRow;
            !function(AddRow) {
                var Controls = function() {
                    function Controls() {}
                    Controls.CONTROL_COLUMNS = ".control-columns";
                    Controls.ROW_HEIGHT_CONTROL = "#heightControl";
                    Controls.ROW_HEIGHT_VALUE_CONTROL = "#heightControlValue";
                    Controls.COLUMN_HEIGHT_CONTROL = "#colHeightControl";
                    Controls.COLUMN_HEIGHT_VALUE_CONTROL = "#colHeightControlValue";
                    Controls.DDN_ROWS_COLUMNS = "#rows-columns";
                    Controls.BTN_ADD_ROW = ".action-button-add-row";
                    return Controls;
                }();
                AddRow.Controls = Controls;
            }(AddRow = Page.AddRow || (Page.AddRow = {}));
            var Text;
            !function(Text) {
                var Controls = function() {
                    function Controls() {}
                    Controls.BTN_INSERT_TEXT = ".action-button-insert-text";
                    Controls.BTN_CLEAR_TEXT = ".action-button-insert-text-clear";
                    return Controls;
                }();
                Text.Controls = Controls;
            }(Text = Page.Text || (Page.Text = {}));
            var Image;
            !function(Image) {
                var Controls = function() {
                    function Controls() {}
                    Controls.BTN_INSERT_IMAGE = ".action-button-insert-image";
                    return Controls;
                }();
                Image.Controls = Controls;
            }(Image = Page.Image || (Page.Image = {}));
        }(Page = PageControlNamesJQ.Page || (PageControlNamesJQ.Page = {}));
    }(PageControlNamesJQ = exports.PageControlNamesJQ || (exports.PageControlNamesJQ = {}));
});

define("Controls/FontJQ", [ "require", "exports", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager" ], function(require, exports, impWatch, impUndoManager) {
    "use strict";
    var Font, isFontReady = !1;
    !function(Font) {
        var FontJQ = function() {
            function FontJQ() {}
            FontJQ.LoadFontSize = function() {
                for (var i = 8; 200 >= i; i++) jQuery(".ddn-font-size").append("<option class='font-size-option selected' value='" + i + "px'>" + i + "</option>");
                jQuery(".ddn-font-size").val("14px");
            };
            FontJQ.LoadFonts = function(ddnid) {
                void 0 == ddnid && (ddnid = FontJQ.ddnId);
                for (var i = 0; i < FontJQ.FontList.length; i++) 0 == i ? jQuery(ddnid).append("<option class='font-list-option selected' value='" + FontJQ.FontList[i] + "'><span style='" + FontJQ.FontList[i] + "'>" + FontJQ.FontList[i] + "</span></option>") : jQuery(ddnid).append("<option class='font-list-option' value='" + FontJQ.FontList[i] + "'><span style='" + FontJQ.FontList[i] + "'>" + FontJQ.FontList[i] + "</span></option>");
            };
            FontJQ.prototype.Init = function() {
                jQuery(document).ready(function() {
                    if (0 == isFontReady) {
                        isFontReady = !0;
                        FontJQ.LoadFonts();
                        FontJQ.LoadFontSize();
                        jQuery(FontJQ.ddnId).on("custom_load", function() {
                            FontJQ.LoadFonts();
                        });
                        jQuery(".ddn-font-size-pinned").on("change", function() {
                            if (void 0 != impWatch.Watch.MouseJQ.selectedElement) {
                                impWatch.Watch.MouseJQ.selectedElement.css("font-size", jQuery(this).val());
                                impWatch.Watch.MouseJQ.selectedElement.find(".jq-text-block").first().css("font-size", "");
                            }
                            var undoManager = new impUndoManager.Manager.UndoManager();
                            undoManager.BeforeOperation();
                        });
                        jQuery(".ddn-font-pinned").on("change", function() {
                            if (void 0 != impWatch.Watch.MouseJQ.selectedElement) {
                                impWatch.Watch.MouseJQ.selectedElement.css("font-family", jQuery(this).val());
                                impWatch.Watch.MouseJQ.selectedElement.find(".jq-text-block").first().css("font-family", "");
                            }
                            var undoManager = new impUndoManager.Manager.UndoManager();
                            undoManager.BeforeOperation();
                        });
                        jQuery(FontJQ.ddnId).on("change", function() {
                            jQuery(FontJQ.ddnId + "-sample").html("<span style='font-family:" + $(FontJQ.ddnId).val() + ";'>" + $(FontJQ.ddnId).val() + "</span>");
                            FontJQ.PreviewInsertText();
                        });
                    }
                });
            };
            FontJQ.PreviewInsertText = function() {
                var output = document.createElement("div"), innerOutput = document.createElement("div");
                jQuery(innerOutput).css("font-family", jQuery(".ddn-font-lists").find("option:selected").val());
                jQuery(innerOutput).append(jQuery(".insert-text-jte").val());
                jQuery(output).append(innerOutput);
                jQuery(".insert-text-out-put").html(jQuery(output).html());
            };
            FontJQ.ProcessSelectNotify = function() {
                jQuery(".ddn-font-size").val("14px");
            };
            FontJQ.ddnId = ".ddn-font-lists";
            FontJQ.FontList = [ "Arial, Arial, Helvetica, sans-serif", "Arial Black, Arial Black, Gadget, sans-serif", "Comic Sans MS, Comic Sans MS, cursive", "Courier New, Courier New, Courier, monospace", "Georgia, Georgia, serif", "Impact, Charcoal, sans-serif", "Lucida Console, Monaco, monospace", "Lucida Sans Unicode, Lucida Grande, sans-serif", "Palatino Linotype, Book Antiqua, Palatino,serif", "Tahoma, Geneva, sans-serif", "Times New Roman, Times,serif", "Trebuchet MS, Helvetica, sans-serif", "Verdana, Geneva, sans-serif", "Gill Sans, Geneva, sans-serif" ];
            return FontJQ;
        }();
        Font.FontJQ = FontJQ;
    }(Font = exports.Font || (exports.Font = {}));
});

define("Common/OperationJQ", [ "require", "exports", "../Watch/WatchMouseJQ" ], function(require, exports, impWatch) {
    "use strict";
    var Operation;
    !function(Operation) {
        var AfterOperationJQ = function() {
            function AfterOperationJQ() {}
            AfterOperationJQ.Execute = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                void 0 != selectedElement && (selectedElement.closest("column").hasClass("jq-forced-hidden-mobile") || selectedElement.removeClass("hidden-xs").removeClass("hidden-sm"));
            };
            return AfterOperationJQ;
        }();
        Operation.AfterOperationJQ = AfterOperationJQ;
        var BeforeOperationJQ = function() {
            function BeforeOperationJQ() {}
            BeforeOperationJQ.Execute = function() {};
            return BeforeOperationJQ;
        }();
        Operation.BeforeOperationJQ = BeforeOperationJQ;
    }(Operation = exports.Operation || (exports.Operation = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Controls/TextJQ", [ "require", "exports", "./FontJQ", "../Error/ErrorJQ", "../ControlNames/PageControlNamesJQ", "../Page/Context/ContextJQ", "../Watch/WatchMouseJQ", "./ControlCommonJQ", "../Common/OperationJQ" ], function(require, exports, impText, impError, impPageControlNames, impPageCtx, impWatch, impCommonCode, impOperaction) {
    "use strict";
    var Text, debug = !0, globalTextBlockId = 0, globalTextBoxContainerId = 0, isTextJQReady = !1, isTextInit = !1;
    !function(Text) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        Text.SmartObj = SmartObj;
        var TextJQ = function(_super) {
            function TextJQ() {
                _super.call(this);
            }
            __extends(TextJQ, _super);
            TextJQ.prototype.InitInsert = function() {};
            TextJQ.prototype.GenerateTextBlockScopeId = function() {
                return "Text_Block_" + ++globalTextBlockId;
            };
            TextJQ.prototype.GenerateContainerScopeId = function() {
                return "Text_Block_Container_" + ++globalTextBoxContainerId;
            };
            TextJQ.prototype.Init = function() {
                if (0 == isTextInit) {
                    isTextInit = !0;
                    TextJQ.AttachClose();
                    TextJQ.AttachPreviewButton();
                    TextJQ.AttachInsertText();
                    TextJQ.AttachClearText();
                    jQuery(document).ready(function() {
                        0 == isTextJQReady && (isTextJQReady = !0);
                    });
                }
            };
            TextJQ.AttachClose = function() {
                jQuery(TextJQ.pageId).find(".close-button").on("click", function() {
                    jQuery(this).closest(".control-page").hide();
                    jQuery(impError.ErrorHandle.ErrorJQ.notifyId).css("display", "none");
                    jQuery(impError.ErrorHandle.ErrorJQ.notifyId).html("");
                    jQuery(".editor").show();
                });
            };
            TextJQ.AttachPreviewButton = function() {
                jQuery(TextJQ.pageId).find(".preview-text-insert").on("click", function() {
                    var text = new TextJQ();
                    text.PreviewInsertText("notify help");
                });
            };
            TextJQ.AttachClearText = function() {
                jQuery(TextJQ.pageId).find(TextJQ.BTN_CLEAR_TEXT).on("click", function(e, s) {
                    jQuery(TextJQ.JTEEditorClass).html("");
                    var text = new TextJQ();
                    text.PreviewInsertText("notify help");
                });
            };
            TextJQ.AttachInsertText = function() {
                jQuery(TextJQ.pageId).find(TextJQ.BTN_INSERT_TEXT).on("click", function(e, s) {
                    TextJQ.InsertTextBlock("Sample text to edit");
                });
            };
            TextJQ.InsertTextBlock = function(sampleText) {
                var textObj = new TextJQ(), errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.SetErrorClassName("page-insert-text");
                var ctx = new impPageCtx.Page.ContextJQ(), selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                void 0 == selectedRowOrColumn && (selectedRowOrColumn = jQuery("#nonononelement"));
                if (!selectedRowOrColumn.hasClass("column") && (null == window.smartObj || null == window.smartObj.currentObj)) {
                    window.smartObj = new SmartObj();
                    window.smartObj.currentObj = selectedRowOrColumn;
                    window.smartObj.command = "n";
                }
                if (void 0 != selectedRowOrColumn) {
                    var tbContainer = document.createElement("div"), tbContent = document.createElement("div"), tbContentWrapper = document.createElement("div");
                    jQuery(tbContentWrapper).addClass("jq-text-block-content jqte-editor");
                    jQuery(tbContent).css("font-family", jQuery(impText.Font.FontJQ.ddnId).find("option:selected").val());
                    jQuery(tbContentWrapper).attr("tabindex", "1");
                    jQuery(tbContentWrapper).append(sampleText);
                    jQuery(tbContent).append(tbContentWrapper);
                    jQuery(tbContent).addClass(TextJQ.CSSCLASS);
                    var tbScopeId = textObj.GenerateTextBlockScopeId();
                    1 == debug && void 0 != tbContent && jQuery(tbContent).prepend("<span class='debug-text-block-css debug-css' scopeId='" + tbScopeId + "'> " + tbScopeId + " </span> ");
                    jQuery(tbContent).attr("scopeId", tbScopeId);
                    jQuery(tbContainer).append(tbContent);
                    var tbcScopeId = textObj.GenerateContainerScopeId();
                    1 == debug && jQuery(tbContainer).append(" <span class='debug-text-block-container-css debug-css' scopeId='" + tbcScopeId + "'> " + tbcScopeId + " </span> ");
                    jQuery(tbContainer).addClass(TextJQ.CONTAINER_CSS_CLASS);
                    jQuery(tbContainer).attr("scopeId", tbcScopeId);
                    if (1 == selectedRowOrColumn.hasClass("column") || null != window.smartObj && null != window.smartObj.currentObj) {
                        var emptyc = document.createElement("span");
                        jQuery(emptyc).addClass("empty-container-text  key image-text-other design-css design-empty-text-css");
                        jQuery(emptyc).prepend("<div class='adjust-image-text-other-left design-css design-adjust-image-text-other'></div>");
                        jQuery(emptyc).prepend("<div class='adjust-image-text-other design-css design-adjust-image-text-other'></div>");
                        jQuery(emptyc).css("font-size", "14px");
                        var plusContainer = jQuery(".jq-plus-container.jq-plus-container-not-used").clone();
                        plusContainer.removeClass("jq-plus-container");
                        plusContainer.addClass("jq-plus-container-text");
                        plusContainer.addClass("design-css");
                        plusContainer.addClass("design-empty-text-css");
                        plusContainer.removeClass("jq-plus-container-not-used");
                        plusContainer.find(".jq-plus-content").append(tbContainer);
                        jQuery(emptyc).append(plusContainer);
                        impOperaction.Operation.AfterOperationJQ.Execute();
                        null == window.smartObj || "" == window.smartObj.command ? ctx.Page.Any.Add(selectedRowOrColumn, jQuery(emptyc), "", void 0, void 0, void 0, void 0) : ctx.Page.Any.Add(selectedRowOrColumn, jQuery(emptyc), "", void 0, void 0, !0, void 0);
                        if (selectedRowOrColumn.hasClass("jq-text-block-container")) {
                            var tbOrTbcWithScopeId = selectedRowOrColumn.attr("scopeId");
                            selectedRowOrColumn.find(".debug-text-block-container-css[scopeId=" + tbOrTbcWithScopeId + "]").remove();
                            void 0 != tbOrTbcWithScopeId && selectedRowOrColumn.append('<span class="debug-text-block-container-css debug-css" scopeId="' + tbOrTbcWithScopeId + '" > ' + tbOrTbcWithScopeId + "</span>");
                        }
                        jQuery(this).closest(".control-page").hide();
                        jQuery(tbContainer).find(".jqte_editor").addClass("padding-5");
                        jQuery(tbContainer).find(".debug-css").remove();
                        jQuery(TextJQ.pageId).find(TextJQ.JTEEditorClass).html("");
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                    } else errorHandler.ActionFail("You can only insert in a column block.");
                }
            };
            TextJQ.prototype.PreviewInsertText = function(notifyHelp) {
                jQuery(TextJQ.insertTextPreviewId).html("");
                var tbContainer = document.createElement("div"), tbContent = document.createElement("div");
                jQuery(tbContent).css("font-family", jQuery(impText.Font.FontJQ.ddnId).find("option:selected").val());
                jQuery(tbContent).append(jQuery(TextJQ.JTEEditorClass).html());
                jQuery(tbContainer).append(tbContent);
                jQuery(TextJQ.insertTextPreviewId).html(jQuery(tbContainer).html());
                if (void 0 != notifyHelp) {
                    var errorHandler = new impError.ErrorHandle.ErrorJQ();
                    errorHandler.ActionHelp("Note :Copied formatted text from outside will not apply selected font");
                }
            };
            TextJQ.ProcessSelectNotify = function() {
                var selectedElement = (new impError.ErrorHandle.ErrorJQ(), impWatch.Watch.MouseJQ.selectedElement);
                void 0 != selectedElement && (selectedElement.hasClass("row") || selectedElement.hasClass("normal-element"));
            };
            TextJQ.pageId = "#control-insert-text";
            TextJQ.insertTextId = "";
            TextJQ.insertTextPreviewId = ".insert-text-out-put";
            TextJQ.insertTextJTE = ".insert-text-jte";
            TextJQ.CSSCLASS = "jq-text-block design-text-block normal-element";
            TextJQ.CONTAINER_CSS_CLASS = "jq-text-block-container design-text-block normal-element jq-container";
            TextJQ.JTEEditorClass = ".jqte-editor";
            return TextJQ;
        }(impPageControlNames.PageControlNamesJQ.Page.Text.Controls);
        Text.TextJQ = TextJQ;
    }(Text = exports.Text || (exports.Text = {}));
});

define("Preview/Preview", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var Preview, isPreviewReady = !1;
    !function(Preview) {
        var PreviewJQ = function() {
            function PreviewJQ() {}
            PreviewJQ.prototype.Init = function() {
                jQuery(document).ready(function() {
                    if (0 == isPreviewReady) {
                        isPreviewReady = !0;
                        jQuery(".close-preview").on("click", function() {
                            jQuery(".editor").css("display", "block");
                            PreviewJQ.ClosePreview();
                        });
                        jQuery(".show-preview").on("click", function() {
                            if ("none" == jQuery(".control-templates").css("display")) {
                                jQuery(".editor").attr("style", " display: none !important;");
                                jQuery(".circle-deg").remove();
                                PreviewJQ.ShowPreview();
                            }
                        });
                    }
                });
            };
            PreviewJQ.ShowPreview = function() {
                jQuery(".jq-row-plus-container").hide();
                jQuery("#notify").clearQueue();
                jQuery("#notify").fadeOut();
                jQuery(".page-static-element").hide();
                jQuery("page").find(".image-selection").removeClass("image-selection");
                jQuery("page").find(".jqte-editor").removeAttr("contenteditable");
                jQuery("page").find(".jq-text-block-container").removeClass("jq-text-block-container-padding");
                jQuery("page").find(".jq-plus").hide();
                jQuery("page").find(".debug-css").hide();
                jQuery("page").find(".column").removeClass("column-padding");
                jQuery("page").find(".ui-resizable-handle").hide();
                jQuery(".show-preview").hide();
                jQuery(".close-preview").show();
                jQuery("page").find(".row").removeClass("design-row");
                jQuery("page").find(".column").removeClass("design-column");
                jQuery("page").find(".jq-text-block").removeClass("design-text-block");
                jQuery("page").find(".jq-plus-container-image").removeClass("design-empty-text-css");
                jQuery("page").find(".empty-container-image").removeClass("design-empty-text-css");
                jQuery("page").find(".jq-plus-container-text").removeClass("design-empty-text-css");
                jQuery("page").find(".empty-container-text").removeClass("design-empty-text-css");
                jQuery("page").find(".jq-text-block-container").removeClass("design-text-block");
                jQuery("page").find(".empty-container").removeClass("design-empty-css");
                jQuery("page").find(".jqte-editor").removeClass("design-jqte_editor");
                jQuery("page").find(".page-static-element").hide();
                jQuery("page").find(".design-square-row").hide();
                jQuery("page").find(".design-root-elements-static").removeClass("page-static-element-circle");
                jQuery("page").find(".root-elements").removeClass("design-root-elements");
                jQuery(".page-marker").hide();
            };
            PreviewJQ.ClosePreview = function() {
                "none" == jQuery(".jq-show-plus").css("display") && jQuery(".jq-row-plus-container").show();
                jQuery("page").find(".image-selection").removeClass("image-selection");
                jQuery("page").find(".jq-text-block-container").addClass("jq-text-block-container-padding");
                jQuery("page").find(".jq-plus").show();
                jQuery("page").find(".debug-css").show();
                jQuery("page").find(".column").addClass("column-padding");
                jQuery("page").find(".ui-resizable-handle").show();
                jQuery("page").find(".debug-text-block-container-css").hide();
                jQuery("page").find(".debug-image-block-container-css").hide();
                jQuery(".show-preview").show();
                jQuery(".close-preview").hide();
                jQuery("page").find(".row").addClass("design-row");
                jQuery("page").find(".column").addClass("design-column");
                jQuery("page").find(".jq-text-block").addClass("design-text-block");
                jQuery("page").find(".jq-text-block-container").addClass("design-text-block");
                jQuery("page").find(".empty-container").addClass("design-empty-css");
                jQuery("page").find(".jq-plus-container-image").addClass("design-empty-text-css");
                jQuery("page").find(".empty-container-image").addClass("design-empty-text-css");
                jQuery("page").find(".jq-plus-container-text").addClass("design-empty-text-css");
                jQuery("page").find(".empty-container-text").addClass("design-empty-text-css");
                jQuery("page").find(".jqte-editor").addClass("design-jqte_editor");
                jQuery("page").find(".page-static-element").show();
                jQuery("page").find(".design-square-row").show();
                jQuery("page").find(".design-root-elements-static").addClass("page-static-element-circle");
                jQuery("page").find(".root-elements").addClass("design-root-elements");
                jQuery(".page-marker").show();
            };
            return PreviewJQ;
        }();
        Preview.PreviewJQ = PreviewJQ;
    }(Preview = exports.Preview || (exports.Preview = {}));
});

define("MalFormed/MalFormedJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var MalFormed;
    !function(MalFormed) {
        var MalFormedJQ = function() {
            function MalFormedJQ() {}
            MalFormedJQ.IsMalFormed = !1;
            return MalFormedJQ;
        }();
        MalFormed.MalFormedJQ = MalFormedJQ;
    }(MalFormed = exports.MalFormed || (exports.MalFormed = {}));
});

define("jqte/MyJQte", [ "require", "exports", "../Constants/ConstantsJQ", "../UndoManager/UndoManager" ], function(require, exports, impStatic, impUndoManager) {
    "use strict";
    var MyJQte, initOnce = !1;
    !function(MyJQte) {
        var JqteParams = function() {
            function JqteParams() {}
            return JqteParams;
        }();
        MyJQte.JqteParams = JqteParams;
        var jqte = function() {
            function jqte(params) {
                this.Init();
            }
            jqte.prototype.Init = function() {
                if (0 == initOnce) {
                    initOnce = !0;
                    jQuery(".jqte-editor-tool").on("click", function() {
                        return !1;
                    });
                    $(".jqte-editor-tool-p").off("click");
                    $(".jqte-editor-tool").off("click");
                    $(".jqte-editor-tool-c").off("click");
                    $(".jq-color").off("click");
                    this.AttachEvents();
                    jQuery(".font-name-list li").each(function() {
                        jQuery(this).children().css("font-family", jQuery(this).text());
                    });
                }
            };
            jqte.GenerateId = function() {
                return "EditorLink" + ++impStatic.Constants.StaticJQ.editorLinkId;
            };
            jqte.addParams = function(name, command, key, tag, emphasis) {
                var thisCssNo = jqte.buttons.length + 1;
                return jqte.buttons.push({
                    name: name,
                    cls: thisCssNo,
                    command: command,
                    key: key,
                    tag: tag,
                    emphasis: emphasis
                });
            };
            jqte.detectElement = function(tags) {
                var parentsTag, resultdetect = !1, $node = jqte.getSelectedNode();
                if ($node) {
                    $.each(tags, function(i, val) {
                        parentsTag = $node.prop("tagName").toLowerCase();
                        parentsTag == val ? resultdetect = !0 : $node.parents().each(function() {
                            parentsTag = $(this).prop("tagName").toLowerCase();
                            parentsTag == val && (resultdetect = !0);
                        });
                    });
                    return resultdetect;
                }
                return !1;
            };
            jqte.buttonEmphasize = function(e) {
                for (var n = 0; n < jqte.buttons.length; n++) if (jqte.buttons[n].emphasis && "" != jqte.buttons[n].tag) if (jqte.detectElement(jqte.buttons[n].tag)) {
                    $(".jqte-editor-tool[name=" + jqte.buttons[n].command + "]").addClass("active");
                    $(".jqte-editor-tool-p[name=" + jqte.buttons[n].command + "]").addClass("active");
                } else {
                    $(".jqte-editor-tool[name=" + jqte.buttons[n].command + "]").removeClass("active");
                    $(".jqte-editor-tool-p[name=" + jqte.buttons[n].command + "]").removeClass("active");
                }
            };
            jqte.getSelectedNode = function() {
                var node, selection;
                if (window.getSelection) {
                    selection = getSelection();
                    node = selection.anchorNode;
                }
                if (!node && document.selection && document.selection.createRange && "None" != document.selection.type) {
                    selection = document.selection;
                    var range = selection.getRangeAt ? selection.getRangeAt(0) : selection.createRange();
                    node = range.commonAncestorContainer ? range.commonAncestorContainer : range.parentElement ? range.parentElement() : range.item(0);
                }
                return node ? "#text" == node.nodeName ? $(node.parentNode) : $(node) : node;
            };
            jqte.prototype.AttachEvents = function() {
                jqte.addParams("format", "formats", "", "", !1);
                jqte.addParams("fsize", "fSize", "", "", !1);
                jqte.addParams("color", "colors", "", "", !1);
                jqte.addParams("b", "bold", "B", [ "b", "strong" ], !0);
                jqte.addParams("i", "italic", "I", [ "i", "em" ], !0);
                jqte.addParams("u", "underline", "U", [ "u" ], !0);
                jqte.addParams("ol", "number", "¾", [ "ol" ], !0);
                jqte.addParams("ul", "bullet", "¼", [ "ul" ], !0);
                jqte.addParams("sub", "subscript", "(", [ "sub" ], !0);
                jqte.addParams("sup", "superscript", "&", [ "sup" ], !0);
                jqte.addParams("outdent", "outdent", "%", [ "blockquote" ], !0);
                jqte.addParams("indent", "indent", "'", [ "blockquote" ], !0);
                jqte.addParams("left", "left", "", "", !0);
                jqte.addParams("center", "center", "", "", !0);
                jqte.addParams("right", "right", "", "", !0);
                jqte.addParams("strike", "strike", "K", [ "strike" ], !0);
                jqte.addParams("link", "link", "L", [ "a" ], !1);
                jqte.addParams("unlink", "unlink", "", [ "a" ], !0);
                jqte.addParams("remove", "removeformat", ".", "", !1);
                jqte.addParams("rule", "inserthorizontalrule", "H", [ "hr" ], !1);
                jqte.addParams("source", "displaysource", "", "", !1);
                jQuery(document).not(".editor").on("click", function(e) {
                    jQuery(e.target).hasClass("jqte-editor-tool-p") || jQuery(".jqte-editor-tool-list").hide();
                });
                $(".jqte-editor-tool,.jqte-editor-tool-p").on("mouseup", function(e) {
                    jQuery(this).removeClass("highlight-tool");
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
                $(".jqte-editor-tool,.jqte-editor-tool-p").on("mousedown", function(e) {
                    jQuery(".jqte-color-palette").css("display", "none");
                    var name = jQuery(this).attr("name");
                    switch (name) {
                      case "font":
                        jQuery(".jqte-editor-tool-list").not(".font-name-list").hide();
                        "none" == jQuery(".font-name-list").css("display") ? jQuery(".font-name-list").css("display", "block") : jQuery(".font-name-list").css("display", "none");
                        break;

                      case "font-size":
                        jQuery(".jqte-editor-tool-list").not(".font-size-list").hide();
                        "none" == jQuery(".font-size-list ").css("display") ? jQuery(".font-size-list ").css("display", "block") : jQuery(".font-size-list ").css("display", "none");
                        break;

                      case "fore-color":
                      case "back-color":
                        if ("back-color" == name) {
                            jQuery(".jqte-color-palette").find(".color-type").text("Background Color");
                            jQuery(".jqte-color-palette").addClass("jqte-color-palette-background");
                        } else {
                            jQuery(".jqte-color-palette").find(".color-type").text("Text Color");
                            jQuery(".jqte-color-palette").removeClass("jqte-color-palette-background");
                        }
                        jQuery(".jqte-editor-tool-list").not(".jqte-color-palette").hide();
                        jQuery(this).hasClass("current-color-tool") ? "none" == jQuery(".jqte-color-palette").css("display") ? jQuery(".jqte-color-palette").css("display", "block") : jQuery(".jqte-color-palette").css("display", "none") : jQuery(".jqte-color-palette").css("display", "block");
                        jQuery(".color-tool").removeClass("current-color-tool");
                        jQuery(this).addClass("current-color-tool");
                        break;

                      case "bold":
                        jqte.SelectionSet("bold", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "italic":
                        jqte.SelectionSet("italic", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "underline":
                        jqte.SelectionSet("underline", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "strike":
                        jqte.SelectionSet("strikeThrough", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "bullet":
                        jqte.SelectionSet("insertUnorderedList", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "number":
                        jqte.SelectionSet("insertOrderedList", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "left":
                        jqte.SelectionSet("justifyLeft", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "right":
                        jqte.SelectionSet("justifyRight", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "center":
                        jqte.SelectionSet("justifyCenter", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "full":
                        jqte.SelectionSet("justifyFull", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "outdent":
                        jqte.SelectionSet("outdent", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "indent":
                        jqte.SelectionSet("indent", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "clear":
                        jqte.SelectionSet("removeFormat", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "unlink":
                        jqte.SelectionSet("unlink", null);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        break;

                      case "link":
                        jQuery(".jqte-editor-tool-list").not(".jqte-link").hide();
                        "none" == jQuery(".jqte-link").css("display") ? jQuery(".jqte-link").css("display", "block") : jQuery(".jqte-link").css("display", "none");
                        jQuery(".link-window-url").val("http://");
                        jQuery(".current-editor-scope").find("font[color='#003399']").removeAttr("color");
                        jqte.SelectionSet("foreColor", "#003399");
                        jQuery(".current-editor-scope").find("font[color='#003399']").addClass("key jq-editor-link");
                        jqte.SelectionSet("createLink", "#");
                        jQuery(".current-editor-scope").find("font[color='#003399']").find("a").first().attr("id", MyJQte.jqte.GenerateId());
                    }
                    jqte.buttonEmphasize(e);
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
                jQuery(".editor-create-link").on("click", function(e) {
                    jQuery(".current-editor-scope").find("font[color='#003399']").find("a").first().attr("href", jQuery(".link-window-url").val());
                    jQuery(".current-editor-scope").find("font[color='#003399']").removeAttr("color");
                    jQuery(".jqte-editor-tool-list").hide();
                    var undomanager = new impUndoManager.Manager.UndoManager();
                    undomanager.BeforeOperation();
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
                $(".jqte-font-name").on("change", function(e) {
                    if (0 != jQuery(this).val()) {
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        jqte.SelectionSet("foreColor", "#afafaf");
                        var selectedtext = jQuery(".current-editor-scope").find("font[color='#afafaf']").text();
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        if ("" == selectedtext) {
                            var selectedElement = jQuery(".image-selection").last();
                            selectedElement.find(".jq-text-block").css("font-family", jQuery(this).attr("value"));
                        }
                        "" != selectedtext && jqte.SelectionSet("fontName", jQuery(this).val());
                        jQuery(this).val("0");
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
                $(".jqte-font-size").on("change", function(e) {
                    if (0 != jQuery(this).val()) {
                        jqte.SelectionSet("fontSize", 7);
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        jqte.SelectionSet("foreColor", "#afafaf");
                        var selectedtext = jQuery(".current-editor-scope").find("font[color='#afafaf']").text();
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        var res = parseInt(jQuery(this).val());
                        if ("" == selectedtext) {
                            var selectedElement = jQuery(".image-selection").last();
                            isNaN(res) ? selectedElement.css("font-size", jQuery(this).val()) : selectedElement.css("font-size", jQuery(this).val() + "px");
                        }
                        "" != selectedtext && (isNaN(res) ? jQuery(".current-editor-scope").find("font[size='7']").css("font-size", jQuery(this).val()).removeAttr("size") : jQuery(".current-editor-scope").find("font[size='7']").css("font-size", jQuery(this).val() + "px").removeAttr("size"));
                        jQuery(this).val("0");
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
                $(".jqte-editor-tool-c").on("mousedown", function(e) {
                    if (jQuery(this).parent().hasClass("font-name")) {
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        jqte.SelectionSet("foreColor", "#afafaf");
                        var selectedtext = jQuery(".current-editor-scope").find("font[color='#afafaf']").text();
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        if ("" == selectedtext) {
                            var selectedElement = jQuery(".image-selection").last();
                            selectedElement.find(".jq-text-block").css("font-family", jQuery(this).attr("value"));
                        }
                        "" != selectedtext && jqte.SelectionSet("fontName", jQuery(this).attr("value"));
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                    if (jQuery(this).parent().parent().hasClass("font-size")) {
                        jqte.SelectionSet("fontSize", 7);
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        jqte.SelectionSet("foreColor", "#afafaf");
                        var selectedtext = jQuery(".current-editor-scope").find("font[color='#afafaf']").text();
                        jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                        if ("" == selectedtext) {
                            var selectedElement = jQuery(".image-selection").last();
                            selectedElement.css("font-size", jQuery(this).attr("value") + "px");
                        }
                        "" != selectedtext && jQuery(".current-editor-scope").find("font[size='7']").css("font-size", jQuery(this).attr("value") + "px").removeAttr("size");
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                    jQuery(".jqte-editor-tool-list").hide();
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
                $(".jq-color").on("mousedown", function(e) {
                    if (jQuery(".current-color-tool").length > 0) {
                        var name = jQuery(".current-color-tool").attr("name");
                        if ("back-color" == name) {
                            jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                            jqte.SelectionSet("foreColor", "#afafaf");
                            var selectedtext = jQuery(".current-editor-scope").find("font[color='#afafaf']").text();
                            jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                            if ("" == selectedtext) {
                                var selectedElement = jQuery(".image-selection").last();
                                selectedElement.hasClass("empty-container-text") && (selectedElement = selectedElement.find(".jq-text-block"));
                                selectedElement.css("background-color", jQuery(this).css("background-color"));
                            }
                            "" != selectedtext && jqte.SelectionSet("backColor", jQuery(this).css("background-color"));
                            var undomanager = new impUndoManager.Manager.UndoManager();
                            undomanager.BeforeOperation();
                        } else if (name = "fore-color") {
                            jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                            jqte.SelectionSet("foreColor", "#afafaf");
                            var selectedtext = jQuery(".current-editor-scope").find("font[color='#afafaf']").text();
                            jQuery(".current-editor-scope").find("font[color='#afafaf']").removeAttr("color");
                            if ("" == selectedtext) {
                                var selectedElement = jQuery(".image-selection").last();
                                if (void 0 != selectedElement) {
                                    selectedElement.css("color", jQuery(this).css("background-color"));
                                    if (selectedElement.hasClass("jq-editor-link") || selectedElement.hasClass("jq-normal-link")) {
                                        if (jQuery("page").find("." + selectedElement.find("a").first().attr("id")).length > 0) jQuery("page").find("." + selectedElement.find("a").first().attr("id")).html(""); else {
                                            var style = "<style class='" + selectedElement.find("a").first().attr("id") + "'> </span>";
                                            jQuery("page").append(style);
                                        }
                                        var linkId = "#" + selectedElement.find("a").first().attr("id"), linkColor = jQuery(this).css("background-color"), style = " " + linkId + ":link { color:" + linkColor + ";}" + linkId + ":visited { color:" + linkColor + ";}" + linkId + ":hover { color:" + linkColor + ";}" + linkId + ":active { color:" + linkColor + ";}";
                                        jQuery("page").find("." + selectedElement.find("a").first().attr("id")).html(style);
                                    }
                                }
                            }
                            "" != selectedtext && jqte.SelectionSet("foreColor", jQuery(this).css("background-color"));
                            var undomanager = new impUndoManager.Manager.UndoManager();
                            undomanager.BeforeOperation();
                        }
                    }
                    jQuery(".jqte-editor-tool-list").hide();
                    null != e.cancelBubble && (e.cancelBubble = !0);
                    e.stopPropagation && e.stopPropagation();
                    e.preventDefault && e.preventDefault();
                    null != e.returnValue && (e.returnValue = !1);
                    return !1;
                });
            };
            jqte.GetSelectetdText = function() {
                return jqte.SelectionSet("fontSize", "1");
            };
            jqte.SelectionGet = function() {
                return window.getSelection ? window.getSelection() : document.selection && document.selection.createRange && "None" != document.selection.type ? document.selection.createRange() : void 0;
            };
            jqte.SelectionSet = function(addCommand, thirdParam) {
                var range, sel = jqte.SelectionGet();
                if (window.getSelection) {
                    sel.anchorNode && sel.getRangeAt && (range = sel.getRangeAt(0));
                    if (range) {
                        sel.removeAllRanges();
                        sel.addRange(range);
                    }
                    jqte.ThisBrowser.match(/msie/) || document.execCommand("StyleWithCSS", !1, !1);
                    document.execCommand(addCommand, !1, thirdParam);
                } else if (document.selection && document.selection.createRange && "None" != document.selection.type) {
                    range = document.selection.createRange();
                    range.execCommand(addCommand, !1, thirdParam);
                }
            };
            jqte.SelectText = function(element) {
                if (element) {
                    var range, element = element[0];
                    if (document.body.createTextRange) {
                        range = document.body.createTextRange();
                        range.moveToElementText(element);
                        range.select();
                    } else if (window.getSelection) {
                        var selection = window.getSelection();
                        range = document.createRange();
                        if ("undefined" != element && null != element) {
                            range.selectNodeContents(element);
                            selection.removeAllRanges();
                            selection.addRange(range);
                            if ($(element).is(":empty")) {
                                $(element).append("&nbsp;");
                                jqte.SelectText($(element));
                            }
                        }
                    }
                }
            };
            jqte.ThisBrowser = navigator.userAgent.toLowerCase();
            jqte.buttons = [];
            jqte.formats = [ [ "p", "Normal" ], [ "h1", "Header 1" ], [ "h2", "Header 2" ], [ "h3", "Header 3" ], [ "h4", "Header 4" ], [ "h5", "Header 5" ], [ "h6", "Header 6" ], [ "pre", "Preformatted" ] ];
            return jqte;
        }();
        MyJQte.jqte = jqte;
    }(MyJQte = exports.MyJQte || (exports.MyJQte = {}));
});

define("jqte/OnInsert", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../Controls/ControlCommonJQ", "../jqte/MyJQte", "../PageElements/ElementJQ" ], function(require, exports, impError, impWatch, impUndoManager, impCommonCode, impJQte, impElements) {
    "use strict";
    var OnInsert, changed = !1;
    !function(OnInsert) {
        var Code = function() {
            function Code() {}
            Code.prototype.Init = function() {
                jQuery("page .jq-add-column").unbind("click");
                jQuery("page .jq-add-column").on("click", function() {
                    var columnsCount = jQuery(this).closest(".row").children(".column").length;
                    if (columnsCount >= 4) {
                        var error = new impError.ErrorHandle.ErrorJQ();
                        error.ActionHelp("Cannot add more than 4 columns");
                    } else {
                        var columnSize = "", columnClass = "";
                        if (1 == columnsCount) {
                            columnClass = "col-xs-24";
                            columnSize = "24";
                        }
                        if (2 == columnsCount) {
                            columnClass = "col-xs-16";
                            columnSize = "16";
                        }
                        if (3 == columnsCount) {
                            columnClass = "col-xs-12";
                            columnSize = "12";
                        }
                        var lastColumn;
                        jQuery(this).closest(".row").children(".column").each(function() {
                            lastColumn = jQuery(this);
                            var prevSize = jQuery(this).attr("xs-column-size"), cssClass = "col-xs-" + prevSize;
                            if (cssClass != columnClass) {
                                jQuery(this).addClass(columnClass);
                                jQuery(this).attr("xs-column-size", columnSize);
                                jQuery(this).removeClass(cssClass);
                            }
                        });
                        var column, elements2 = new impElements.Page.Elements.ElementJQ(), columnCss = columnClass + "  from-column-add-click column key design-column column-number-" + (columnsCount + 1);
                        column = elements2.CreateDiv("", columnCss);
                        column.attr("column-number", columnsCount + 1);
                        column.attr("xs-column-size", columnSize);
                        column.css("min-height", "100px");
                        column.addClass("column-padding");
                        jQuery(this).closest(".row").append(column);
                        jQuery("#control-common-execute").click();
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                });
                jQuery("page a").not(".jq-logout").unbind("click");
                jQuery("page a").not(".jq-logout").click(function() {
                    impCommonCode.ControlCommon.Code.AnchorClicked = !0;
                });
                jQuery("page .jqte-editor").unbind("click");
                jQuery("page .jqte-editor").on("click", function() {
                    jQuery(".jqte-editor, .column").removeClass("current-editor-scope");
                    jQuery(this).addClass("current-editor-scope");
                });
                jQuery("page .column").unbind("click");
                jQuery("page .column").on("click", function() {
                    if ("none" == jQuery("#jqte-edit-stop").css("display")) {
                        jQuery(".jqte-editor, .column").removeClass("current-editor-scope");
                        jQuery(this).addClass("current-editor-scope");
                    }
                });
                jQuery("page .jqte-editor").unbind("keydown");
                jQuery("page .jqte-editor").on("keydown", function() {
                    Code.BackPassed = !0;
                });
                jQuery("page .jqte-editor").unbind("keyup");
                jQuery("page .jqte-editor").on("keyup", function() {
                    changed = !0;
                });
                jQuery("page .jqte-editor").unbind("focusout");
                jQuery("page .jqte-editor").on("focusout", function() {
                    if (1 == changed) {
                        changed = !1;
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                });
                jQuery(".empty-container-image").unbind("dblclick");
                jQuery(".empty-container-image").on("dblclick", function() {});
                jQuery(".empty-container-text").unbind("dblclick");
                jQuery(".empty-container-text").on("dblclick", function() {
                    $(".empty-container-text").draggable({
                        disabled: !1
                    });
                    jQuery("page .empty-container-text").find(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "move");
                    $("page .jq-text-block-content").removeAttr("contentEditable");
                    jQuery(".current-editor-scope").removeClass("current-editor-scope");
                    jQuery(this).find(".jq-text-block-content").addClass("current-editor-scope");
                    jQuery(".editor").show();
                    $(this).draggable({
                        disabled: !0
                    });
                    jQuery(".current-editor-scope").focus();
                    jQuery(".current-editor-scope").closest(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "text");
                    jQuery(".current-editor-scope").attr("contentEditable", "true");
                });
                jQuery("page .jqte-editor").unbind("mouseup");
                jQuery("page .jqte-editor").on("mouseup", function(e) {
                    impJQte.MyJQte.jqte.buttonEmphasize(e);
                });
                jQuery("page .column").unbind("mouseup");
                jQuery("page .column").on("mouseup", function(e) {
                    impJQte.MyJQte.jqte.buttonEmphasize(e);
                });
                jQuery(".jq-site-link").unbind("dblclick");
                jQuery(".jq-site-link").on("dblclick", function() {
                    jQuery(".editor").show();
                    jQuery(".current-editor-scope").focus();
                    jQuery(".current-editor-scope").closest(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "text");
                });
                jQuery("page").unbind("click");
                jQuery("page").on("click", function(e) {
                    impWatch.Watch.MouseJQ.ProcessClick(e);
                    jQuery("#contextMenu").hide(500);
                    jQuery("#smInsertNextPrev").hide(500);
                    if (1 == impCommonCode.ControlCommon.Code.AnchorClicked) {
                        impCommonCode.ControlCommon.Code.AnchorClicked = !1;
                        null != e.cancelBubble && (e.cancelBubble = !0);
                        e.stopPropagation && e.stopPropagation();
                        e.preventDefault && e.preventDefault();
                        null != e.returnValue && (e.returnValue = !1);
                        return !1;
                    }
                });
            };
            Code.BackPassed = !1;
            Code.BackPassedEdit = !1;
            return Code;
        }();
        OnInsert.Code = Code;
    }(OnInsert = exports.OnInsert || (exports.OnInsert = {}));
});

define("Undomanager/undomanager", [ "require", "exports", "../Controls/ControlCommonJQ", "../Preview/Preview", "../Watch/WatchMouseJQ", "../MalFormed/MalFormedJQ", "../jqte/OnInsert" ], function(require, exports, impControlsCommon, impPreview, impWatch, impmal, impOnInsert) {
    "use strict";
    window.undoActivityIndex = 999999;
    var Manager;
    !function(Manager) {
        var UndoManager = function() {
            function UndoManager() {
                this.isEnabled = !0;
                this.isUndoHit = !1;
                this.isRedoHit = !1;
            }
            UndoManager.prototype.EnableUndoManager = function(isEnable) {
                this.isEnabled = isEnable;
            };
            UndoManager.prototype.SetSelectElement = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selectedElement) {
                    var scopeId = selectedElement.attr("scopeId");
                    impWatch.Watch.MouseJQ.selectedElement = jQuery("div[scopeId='" + scopeId + "'").first();
                }
            };
            UndoManager.prototype.Undo = function() {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed) {
                    "none" != jQuery(".close-preview").css("display") && impPreview.Preview.PreviewJQ.ClosePreview();
                    var undoObj;
                    if (!(window.undoActivityIndex <= 0)) {
                        if (999999 == window.undoActivityIndex) {
                            if (void 0 != window.undoObjArray) {
                                window.undoActivityIndex = window.undoObjArray.length - 2;
                                undoObj = window.undoObjArray[window.undoActivityIndex];
                            }
                        } else {
                            window.undoActivityIndex--;
                            window.undoActivityIndex <= 0 && (this.isUndoHit = !0);
                            undoObj = window.undoObjArray[window.undoActivityIndex];
                        }
                        if (null != undoObj) {
                            var parent;
                            parent = jQuery(undoObj.parent);
                            jQuery("page").html(undoObj.html);
                            impControlsCommon.ControlCommon.Code.DestroyResizable();
                            impControlsCommon.ControlCommon.Code.Execute();
                            var c = new impOnInsert.OnInsert.Code();
                            c.Init();
                            this.SetSelectElement();
                        }
                    }
                }
            };
            UndoManager.prototype.Redo = function() {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed) {
                    "none" != jQuery(".close-preview").css("display") && impPreview.Preview.PreviewJQ.ClosePreview();
                    var undoObj;
                    -1 == window.undoActivityIndex && (window.undoActivityIndex = 0);
                    if (void 0 != window.undoObjArray) {
                        if (window.undoActivityIndex + 1 >= window.undoObjArray.length) return;
                        window.undoActivityIndex++;
                        undoObj = window.undoObjArray[window.undoActivityIndex];
                        if (null != undoObj) {
                            jQuery("page").html(undoObj.html);
                            impControlsCommon.ControlCommon.Code.DestroyResizable();
                            impControlsCommon.ControlCommon.Code.Execute();
                            var c = new impOnInsert.OnInsert.Code();
                            c.Init();
                            this.SetSelectElement();
                        }
                    }
                }
            };
            UndoManager.prototype.PushUndo = function(undo) {
                void 0 == window.undoObjArray && (window.undoObjArray = []);
                void 0 != undo && window.undoObjArray.push(undo);
            };
            UndoManager.prototype.PopUndo = function() {
                window.undoObjArray.pop();
            };
            UndoManager.prototype.ClearRedoOnChange = function() {};
            UndoManager.prototype.Clear = function() {};
            UndoManager.prototype.BeforeOperation = function(selectedParent) {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed && 0 == window.layoutCreating) {
                    try {
                        window.undoObjArray.splice(window.undoActivityIndex + 1);
                        window.undoActivityIndex = 999999;
                    } catch (ex) {}
                    selectedParent = jQuery("page");
                    var rootTemp;
                    rootTemp = selectedParent;
                    var undo = new UndoJQ();
                    undo.parent = rootTemp;
                    undo.html = rootTemp.html();
                    undo.Push();
                }
            };
            return UndoManager;
        }();
        Manager.UndoManager = UndoManager;
        var UndoJQ = function() {
            function UndoJQ() {}
            UndoJQ.prototype.Push = function() {
                var um = new UndoManager();
                um.PushUndo(this);
            };
            return UndoJQ;
        }();
        Manager.UndoJQ = UndoJQ;
    }(Manager = exports.Manager || (exports.Manager = {}));
});

define("SmartMenu/SmartMenuJQ", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../Undomanager/undomanager" ], function(require, exports, impError, impWatch, impCommon, impUndoManager) {
    "use strict";
    var Smart, isSmartMenuReady = !1, isChangedWidth = !1, prevWidthValue = 0;
    !function(Smart) {
        var SmartMenuJQ = function() {
            function SmartMenuJQ() {}
            SmartMenuJQ.prototype.Init = function() {
                SmartMenuJQ.AttachSmartMenu();
            };
            SmartMenuJQ.ImageHeightProcessing = function(selectedElement, heightVal, widthVal) {
                if (selectedElement.hasClass("jq-image-block-image")) {
                    if ("" != heightVal) {
                        var htv = Number(heightVal) + 55;
                        selectedElement.parent().closest(".key").css("height", htv + "px");
                        selectedElement.parent().closest(".jq-image-block").css("height", Number(heightVal) + 20 + "px");
                    }
                    if ("" != widthVal) {
                        var wtv = Number(widthVal) + 35;
                        selectedElement.parent().closest(".key").css("width", wtv + "px");
                        selectedElement.parent().closest(".jq-image-block").css("width", Number(widthVal) + 20 + "px");
                    }
                }
                if (selectedElement.hasClass("jq-image-block-container")) {
                    if ("" != heightVal) {
                        var htv = Number(heightVal) - 60;
                        selectedElement.find(".key").css("height", htv + "px");
                        selectedElement.find(".jq-image-block").css("height", Number(heightVal) - 30 + "px");
                    }
                    if ("" != widthVal) {
                        var wtv = Number(widthVal) - 35;
                        selectedElement.find(".key").css("width", wtv + "px");
                        selectedElement.find(".jq-image-block").css("width", Number(widthVal) - 15 + "px");
                    }
                }
            };
            SmartMenuJQ.TextBlockProcessing = function(selectedElement, heightVal, widthVal) {
                if (selectedElement.hasClass("jq-text-block")) {
                    if ("" != heightVal) {
                        var htv = Number(heightVal);
                        selectedElement.parent().closest(".key").css("height", htv + "px");
                    }
                    if ("" != widthVal) {
                        var wtv = Number(widthVal);
                        selectedElement.parent().closest(".key").css("width", wtv + "px");
                    }
                }
                if (selectedElement.hasClass("jq-text-block-container")) {
                    if ("" != heightVal) {
                        var htv = Number(heightVal);
                        selectedElement.find(".key").css("height", htv + "px");
                    }
                    if ("" != widthVal) {
                        var wtv = Number(widthVal);
                        selectedElement.find(".key").css("width", wtv + "px");
                    }
                }
            };
            SmartMenuJQ.AttachSmartMenu = function() {
                jQuery(document).ready(function() {
                    if (0 == isSmartMenuReady) {
                        isSmartMenuReady = !0;
                        jQuery("#sm").on("click", function() {});
                        jQuery(".smart-menu-width").spinner({
                            min: 0,
                            max: 2e3,
                            step: 1,
                            change: function(event, ui) {},
                            spin: function(event, ui) {},
                            stop: function(event, ui) {
                                prevWidthValue != jQuery(this).val() && (isChangedWidth = !0);
                                var flag = "-";
                                flag = prevWidthValue > jQuery(this).val() ? "+" : "-";
                                prevWidthValue = jQuery(this).val();
                                if (1 == isChangedWidth) {
                                    isChangedWidth = !1;
                                    0 == SmartMenuJQ.isSelectProcessing && SmartMenuJQ.OnChange(this, "width");
                                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                                    if (void 0 != selectedElement && !selectedElement.hasClass("row") && !selectedElement.hasClass("root-elements")) {
                                        var undo = new impUndoManager.Manager.UndoManager();
                                        undo.BeforeOperation();
                                    }
                                }
                            }
                        });
                        jQuery(".smart-menu-height").spinner({
                            min: 0,
                            max: 5e3,
                            step: 1,
                            change: function(event, ui) {
                                0 == SmartMenuJQ.isSelectProcessing && SmartMenuJQ.OnChange(this, "height");
                            },
                            slide: function(event, ui) {
                                0 == SmartMenuJQ.isSelectProcessing && SmartMenuJQ.OnChange(this, "height");
                            },
                            stop: function(event, ui) {
                                0 == SmartMenuJQ.isSelectProcessing && SmartMenuJQ.OnChange(this, "height");
                                var undo = (impWatch.Watch.MouseJQ.selectedElement, new impUndoManager.Manager.UndoManager());
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".smart-menu-collapse-close").on("click", function() {
                            jQuery("#sm").find(".smart-menu-controls").slideUp();
                            jQuery("#sm").find(".smart-menu-collapse-show").removeClass("hide");
                            jQuery(this).addClass("hide");
                        });
                        jQuery(".smart-menu-collapse-show").on("click", function() {
                            jQuery("#sm").find(".smart-menu-controls").slideDown();
                            jQuery("#sm").find(".smart-menu-collapse-close").removeClass("hide");
                            jQuery(this).addClass("hide");
                        });
                        jQuery(".smart-menu-controls").on("mouseenter", function() {});
                        jQuery(".smart-menu-controls").on("mouseleave", function() {
                            jQuery(impError.ErrorHandle.ErrorJQ.notifyId).html("");
                            jQuery(impError.ErrorHandle.ErrorJQ.notifyId).css("display", "none");
                        });
                        jQuery(".smart-menu-button-apply").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement, widthVal = (new impError.ErrorHandle.ErrorJQ(), 
                            $(this).closest(".smart-menu-controls-table").find(".smart-menu-width").spinner("value")), heightVal = $(this).closest(".smart-menu-controls-table").find(".smart-menu-height").spinner("value");
                            if (void 0 != selectedElement) if (selectedElement.hasClass("column")) {
                                SmartMenuJQ.ProcessColumnWidth(widthVal);
                                selectedElement.css("min-height", heightVal + "px");
                            } else {
                                selectedElement.css("width", widthVal + "px");
                                selectedElement.hasClass("row") || selectedElement.hasClass("column") ? selectedElement.css("min-height", heightVal + "px") : selectedElement.css("height", heightVal + "px");
                            }
                        });
                    }
                });
            };
            SmartMenuJQ.OnChange = function($this, whclass) {
                impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-text-block-container").first() : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image").first());
                if (void 0 != selectedElement) {
                    var widthVal = (new impError.ErrorHandle.ErrorJQ(), $($this).closest(".smart-menu-controls-table").find(".smart-menu-width").spinner("value")), heightVal = $($this).closest(".smart-menu-controls-table").find(".smart-menu-height").spinner("value");
                    if (selectedElement.hasClass("column")) {
                        "width" == whclass && SmartMenuJQ.ProcessColumnWidth(widthVal);
                        "height" == whclass && selectedElement.css("min-height", heightVal + "px");
                    } else {
                        "width" == whclass && (selectedElement.hasClass("root-elements") || selectedElement.hasClass("row") || selectedElement.css("width", widthVal + "px"));
                        if ("height" == whclass) if (selectedElement.hasClass("row") || selectedElement.hasClass("column") || selectedElement.hasClass("root-elements")) selectedElement.css("min-height", heightVal + "px"); else {
                            selectedElement.css("min-height", heightVal + "px");
                            selectedElement.css("height", heightVal + "px");
                        }
                    }
                }
            };
            SmartMenuJQ.ProcessColumnWidth = function(width) {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text").first() : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image").first());
                if (void 0 != selectedElement) {
                    var width = width, originalWidth = selectedElement.width(), rowWidth = jQuery(selectedElement).parent().width(), onePercentPixels = Math.floor(1 * rowWidth / 100), colXsOnePercentage = 2, colXsOnePixels = colXsOnePercentage * onePercentPixels, commonMethods = new impCommon.Common.CommonMethodsJQ();
                    jQuery(selectedElement).attr("style");
                    commonMethods.RemoveStyle(selectedElement, "min-width");
                    commonMethods.RemoveStyle(selectedElement, "width");
                    var twoFour = 48;
                    if (width > originalWidth) {
                        var emptyXsCount = 0, nextElements = jQuery(selectedElement).nextAll(".column");
                        try {
                            for (var columns = selectedElement.parent().children(".column"), count = 0, j = 0; j < columns.length; j++) {
                                var size = jQuery(columns[j]).attr("xs-column-size");
                                if (void 0 != size && "" != size) {
                                    var num = Number(size);
                                    count += num;
                                }
                            }
                            twoFour > count && (emptyXsCount = twoFour - count);
                            var extenedWidth = width - originalWidth, colXs = Math.floor(extenedWidth / colXsOnePixels);
                            0 == colXs && (colXs = 1);
                            var nextElementsCount = jQuery(selectedElement).nextAll(".column").length, eachXs = Math.floor(colXs / nextElementsCount);
                            0 == eachXs && (eachXs = 1);
                            for (var colXsTemp = colXs, i = 0; i < nextElements.length && colXsTemp > 0; i++) {
                                var nextXsSize = Number(jQuery(nextElements[i]).attr("xs-column-size"));
                                if (1 != nextXsSize) {
                                    var newNextXsSize = nextXsSize - eachXs;
                                    if (1 > newNextXsSize) {
                                        colXsTemp = colXsTemp - eachXs + 1;
                                        newNextXsSize = 1;
                                    } else colXsTemp -= eachXs;
                                    jQuery(nextElements[i]).removeClass("col-xs-" + nextXsSize);
                                    jQuery(nextElements[i]).addClass("col-xs-" + newNextXsSize);
                                    jQuery(nextElements[i]).attr("xs-column-size", newNextXsSize);
                                }
                            }
                            var xsSize = Number(selectedElement.attr("xs-column-size")), newXsSize = xsSize + colXs - colXsTemp;
                            colXs == colXsTemp && (newXsSize += colXsTemp);
                            var allXs = 0;
                            selectedElement.parent().children(".column").each(function() {
                                allXs += Number(jQuery(this).attr("xs-column-size"));
                            });
                            for (var overallMinusCurrent = allXs - xsSize, g = overallMinusCurrent + newXsSize; g > twoFour; ) {
                                newXsSize--;
                                g--;
                            }
                            jQuery(selectedElement).removeClass("col-xs-" + xsSize);
                            jQuery(selectedElement).addClass("col-xs-" + newXsSize);
                            selectedElement.attr("xs-column-size", newXsSize);
                        } catch (ex) {}
                        nextElements.show();
                    } else if (originalWidth > width) {
                        var nextElements = jQuery(selectedElement).nextAll(".column");
                        try {
                            var extenedWidth = originalWidth - width, colXs = Math.floor(extenedWidth / colXsOnePixels);
                            0 == colXs && (colXs = 1);
                            var eachXs = Math.floor(colXs / 1);
                            0 == eachXs && (eachXs = 1);
                            var xsSize = Number(selectedElement.attr("xs-column-size"));
                            if (xsSize > 1) {
                                var eachXsTemp = eachXs, newXsSize = xsSize - eachXs;
                                if (0 > newXsSize) {
                                    eachXsTemp = eachXs + newXsSize;
                                    newXsSize = 1;
                                }
                                if (0 == newXsSize) {
                                    eachXsTemp = eachXs - 1;
                                    newXsSize = 1;
                                }
                                jQuery(selectedElement).removeClass("col-xs-" + xsSize);
                                jQuery(selectedElement).addClass("col-xs-" + newXsSize);
                                selectedElement.attr("xs-column-size", newXsSize);
                                var colXsTemp = colXs;
                                if (colXsTemp > 0) {
                                    var nextXsSize = Number(jQuery(nextElements[0]).attr("xs-column-size")), newNextXsSize = nextXsSize + eachXsTemp, allXs = 0;
                                    selectedElement.parent().children(".column").each(function() {
                                        allXs += Number(jQuery(this).attr("xs-column-size"));
                                    });
                                    for (var overallMinusNext = allXs - Number(jQuery(nextElements[0]).attr("xs-column-size")), g = overallMinusNext + newNextXsSize; g > twoFour; ) {
                                        newNextXsSize--;
                                        g--;
                                    }
                                    jQuery(nextElements[0]).removeClass("col-xs-" + nextXsSize);
                                    jQuery(nextElements[0]).addClass("col-xs-" + newNextXsSize);
                                    jQuery(nextElements[0]).attr("xs-column-size", newNextXsSize);
                                }
                            }
                        } catch (ex) {}
                        nextElements.show();
                    }
                    var nextElementsToShow = jQuery(selectedElement).nextAll(".column");
                    nextElementsToShow.show();
                }
            };
            SmartMenuJQ.ProcessSelectedValues = function() {
                SmartMenuJQ.isSelectProcessing = !0;
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text").first() : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image").first());
                if (void 0 != selectedElement) {
                    var heightstr = selectedElement.css("height");
                    if (void 0 != heightstr) {
                        heightstr.replace("%", "");
                        heightstr.indexOf("%") > -1 || (heightstr = heightstr.replace("px", ""));
                    }
                    var widthstr = selectedElement.css("width");
                    if (void 0 != widthstr) {
                        widthstr.replace("%", "");
                        widthstr.indexOf("%") > -1 || (widthstr = widthstr.replace("px", ""));
                    }
                    jQuery(".smart-menu-height").spinner("value", heightstr);
                    jQuery(".smart-menu-width").spinner("value", widthstr);
                    SmartMenuJQ.isSelectProcessing = !1;
                }
            };
            SmartMenuJQ.ProcessSelectNotify = function() {
                SmartMenuJQ.ProcessSelectedValues();
            };
            SmartMenuJQ.smartMenuIconId = ".smart-menu-icon";
            SmartMenuJQ.smartMenuId = ".smart-menu";
            SmartMenuJQ.isSelectProcessing = !1;
            return SmartMenuJQ;
        }();
        Smart.SmartMenuJQ = SmartMenuJQ;
    }(Smart = exports.Smart || (exports.Smart = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Controls/ControlsJQ", [ "require", "exports", "../Page/Context/ContextJQ", "../_Classes/CssClass", "../Constants/ConstantsJQ", "../ControlNames/PageControlNamesJQ", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "./FontJQ", "./TextJQ", "../SmartMenu/SmartMenuJQ", "../Common/OperationJQ" ], function(require, exports, impPageCtx, impCss, impConsts, impPageControlNames, impError, impWatch, impFontList, impText, impSmartMenu, impOperaction) {
    "use strict";
    var Page;
    !function(Page) {
        var RequiredJQ = function() {
            function RequiredJQ() {}
            RequiredJQ.prototype.Prepare = function(pageId) {
                jQuery(pageId).find(".required-symbol").remove();
                jQuery(pageId).find(".required").after("<span class='required-symbol'>*</span");
            };
            return RequiredJQ;
        }();
        Page.RequiredJQ = RequiredJQ;
        var AddRowJQ = function(_super) {
            function AddRowJQ() {
                _super.call(this);
            }
            __extends(AddRowJQ, _super);
            AddRowJQ.prototype.Init = function() {
                this.AttachPageAddRowJQ();
                this.AttachFontJQ();
                this.AttachInsertTextJQ();
                this.AttachSmartMenu();
                this.AttachReset();
            };
            AddRowJQ.prototype.AttachReset = function() {
                jQuery("#btnResetAddRowControls").on("click", function() {
                    var ar = new AddRowJQ();
                    ar.ResetAddRowsControls();
                });
            };
            AddRowJQ.prototype.AttachSmartMenu = function() {
                new impSmartMenu.Smart.SmartMenuJQ().Init();
            };
            AddRowJQ.prototype.AttachFontJQ = function() {
                new impFontList.Font.FontJQ().Init();
            };
            AddRowJQ.prototype.AttachInsertTextJQ = function() {
                new impText.Text.TextJQ().Init();
            };
            AddRowJQ.prototype.AttachPageAddRowJQ = function() {
                this.LoadEvent();
                this.AddRow(this.ResetAddRowsControls);
                this.RowColumnNamesDDN();
                this.ControlColumns();
                this.ControlRowHeight();
                this.ControlColumnHeight();
                new RequiredJQ().Prepare(AddRowJQ.pageId);
            };
            AddRowJQ.prototype.LoadEvent = function() {
                jQuery(AddRowJQ.pageId).on("cust_loaded", function() {
                    if (impWatch.Watch.MouseJQ.selectedElement.hasClass("jq-Content")) {
                        AddRowJQ.SetRowHeightControl("400");
                        AddRowJQ.SetColumnHeightControl("400");
                    } else {
                        AddRowJQ.SetRowHeightControl(impConsts.Constants.ConstantsJQ.HEIGHTCONTROLRESETVALUE);
                        AddRowJQ.SetColumnHeightControl(impConsts.Constants.ConstantsJQ.HEIGHTCONTROLRESETVALUE);
                    }
                });
            };
            AddRowJQ.SetRowHeightControl = function(val) {
                jQuery(AddRowJQ.pageId).find(AddRowJQ.ROW_HEIGHT_CONTROL).val(val);
                jQuery(AddRowJQ.pageId).find(AddRowJQ.ROW_HEIGHT_VALUE_CONTROL).text(jQuery(AddRowJQ.ROW_HEIGHT_CONTROL).val() + " pixels");
            };
            AddRowJQ.SetColumnHeightControl = function(val) {
                jQuery(AddRowJQ.pageId).find(AddRowJQ.COLUMN_HEIGHT_CONTROL).val(val);
                jQuery(AddRowJQ.pageId).find(AddRowJQ.COLUMN_HEIGHT_VALUE_CONTROL).text(jQuery(AddRowJQ.COLUMN_HEIGHT_CONTROL).val() + " pixels");
            };
            AddRowJQ.prototype.RowColumnNamesDDN = function() {
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).on("change", function() {
                    var selectedRowOrColumn = jQuery("#rows-columns option:selected").val();
                    if (".jq-Content" == selectedRowOrColumn) {
                        AddRowJQ.SetColumnHeightControl("400");
                        AddRowJQ.SetRowHeightControl("400");
                    }
                });
            };
            AddRowJQ.prototype.ResetAddRowsControls = function() {
                var tempControl = new AddRowJQ();
                tempControl.LoadRowsAndColumnsNames();
                tempControl.ResetColumnControl();
                tempControl.ResetRowHeightControl();
                tempControl.ResetColumnHeightControl();
            };
            AddRowJQ.prototype.ResetColumnControl = function() {
                jQuery(AddRowJQ.CONTROL_COLUMNS).each(function() {
                    jQuery(this).attr("data-set", "0");
                    jQuery(this).removeClass("highlight-column");
                });
            };
            AddRowJQ.prototype.ResetRowHeightControl = function() {
                AddRowJQ.SetRowHeightControl(impConsts.Constants.ConstantsJQ.HEIGHTCONTROLRESETVALUE);
            };
            AddRowJQ.prototype.ResetColumnHeightControl = function() {
                AddRowJQ.SetColumnHeightControl(impConsts.Constants.ConstantsJQ.HEIGHTCONTROLRESETVALUE);
            };
            AddRowJQ.prototype.LoadRowsAndColumnsNames = function() {
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).empty();
                var rows = jQuery(".debug-row-css"), columns = jQuery(".debug-column-css"), selectOption = "<option value='select'>-- Select --</option>";
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(selectOption);
                var defaultOption = "<option value='.jq-Header'>Header</option>";
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(defaultOption);
                var defaultOption = "<option value='.jq-MenuBar'>MenuBar</option>";
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(defaultOption);
                defaultOption = "<option value='.jq-Content'>Body</option";
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(defaultOption);
                defaultOption = "<option value='.jq-Footer'>Footer</option";
                jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(defaultOption);
                if (rows.length > 0) for (var i = 0; i < rows.length; i++) {
                    var rowOption = "<option value='" + jQuery(rows[i]).text() + "'>" + jQuery(rows[i]).text() + "</option>";
                    jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(rowOption);
                }
                if (columns.length > 0) for (var i = 0; i < columns.length; i++) {
                    var columnOption = "<option value='" + jQuery(columns[i]).text() + "'>" + jQuery(columns[i]).text() + "</option>";
                    jQuery(AddRowJQ.pageId).find(AddRowJQ.DDN_ROWS_COLUMNS).append(columnOption);
                }
            };
            AddRowJQ.prototype.AddRow = function(callBackLoadRowAndColumnNames) {
                jQuery(".control-columns").on("click", function() {
                    var columnSet = jQuery(this).attr("data-set");
                    if ("1" == columnSet) {
                        jQuery(this).attr("data-set", "0");
                        jQuery(this).removeClass("highlight-column");
                    } else {
                        jQuery(this).attr("data-set", "1");
                        jQuery(this).addClass("highlight-column");
                    }
                    var errorHandler = new impError.ErrorHandle.ErrorJQ();
                    errorHandler.SetErrorClassName("page-add-row");
                    for (var cols = jQuery(".control-columns[data-set=1]"), colsClasses = "", colPrevNumber = 0, columnNumber = 0, i = 0; i < cols.length; i++) {
                        columnNumber = Number(jQuery(cols[i]).attr("data-number"));
                        i > 0 && (columnNumber -= colPrevNumber);
                        colPrevNumber = columnNumber + colPrevNumber;
                        colsClasses += 0 == i ? "col-xs-" + columnNumber : " col-xs-" + columnNumber;
                    }
                    var lastColClassNumber = 48 - colPrevNumber;
                    lastColClassNumber > 0 && (colsClasses += " col-xs-" + lastColClassNumber);
                    var ctx = new impPageCtx.Page.ContextJQ(), selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedRowOrColumn) {
                        var adjustRow = new impCss.CssClass.AdjustJQ(), adjustColumn = new impCss.CssClass.AdjustJQ();
                        adjustColumn.height = jQuery(AddRowJQ.pageId).find(AddRowJQ.COLUMN_HEIGHT_CONTROL).val();
                        selectedRowOrColumn.hasClass("empty-container") && (adjustColumn.height = adjustRow.height);
                        selectedRowOrColumn.attr("scopeId");
                        jQuery(".removable-row").remove();
                        impOperaction.Operation.AfterOperationJQ.Execute();
                        selectedRowOrColumn.children(".debug-column-css").hide();
                        selectedRowOrColumn.css("padding", "0");
                        var beforeAfter = void 0;
                        selectedRowOrColumn.hasClass("row") && (beforeAfter = !1);
                        selectedRowOrColumn.hasClass("image-text-other") && (beforeAfter = !1);
                        AddRowJQ.addedRow = ctx.Page.Any.AddRow(selectedRowOrColumn, colsClasses, "", adjustRow, adjustColumn, beforeAfter);
                        if (void 0 != AddRowJQ.addedRow) {
                            AddRowJQ.addedRow.addClass("removable-row");
                            AddRowJQ.addedRow.children(".column").addClass("columns-pending");
                        }
                        "none" != jQuery(".jq-show-plus").css("display") && jQuery(".jq-row-plus-container").hide();
                        jQuery("#control-common-execute").trigger("click");
                    }
                });
                jQuery(AddRowJQ.pageId).find(AddRowJQ.BTN_ADD_ROW).on("click", function(e, s) {
                    jQuery(".removable-row").removeClass("removable-row");
                    void 0 != callBackLoadRowAndColumnNames && callBackLoadRowAndColumnNames();
                });
            };
            AddRowJQ.prototype.ControlColumns = function() {
                jQuery(AddRowJQ.pageId).find(AddRowJQ.CONTROL_COLUMNS).on("click", function(e, s) {});
            };
            AddRowJQ.prototype.ControlRowHeight = function() {
                AddRowJQ.SetRowHeightControl(impConsts.Constants.ConstantsJQ.HEIGHTCONTROLRESETVALUE);
                jQuery(AddRowJQ.pageId).find(AddRowJQ.ROW_HEIGHT_CONTROL).on("change", function() {
                    jQuery(AddRowJQ.pageId).find(AddRowJQ.ROW_HEIGHT_VALUE_CONTROL).text(jQuery(this).val() + " pixels");
                });
            };
            AddRowJQ.prototype.ControlColumnHeight = function() {
                AddRowJQ.SetColumnHeightControl(impConsts.Constants.ConstantsJQ.HEIGHTCONTROLRESETVALUE);
                jQuery(AddRowJQ.pageId).find(AddRowJQ.COLUMN_HEIGHT_CONTROL).on("change", function() {
                    jQuery(AddRowJQ.pageId).find(AddRowJQ.COLUMN_HEIGHT_VALUE_CONTROL).text(jQuery(this).val() + " pixels");
                });
            };
            AddRowJQ.ProcessSelectNotify = function() {
                impWatch.Watch.MouseJQ.selectedElement;
                jQuery(".removable-row").removeClass("removable-row");
                jQuery(".columns-pending").removeClass("columns-pending");
                var ar = new AddRowJQ();
                ar.ResetColumnControl();
            };
            AddRowJQ.pageId = "#control-add-row";
            return AddRowJQ;
        }(impPageControlNames.PageControlNamesJQ.Page.AddRow.Controls);
        Page.AddRowJQ = AddRowJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Controls/ImageJQ", [ "require", "exports", "../Error/ErrorJQ", "../ControlNames/PageControlNamesJQ", "../Page/Context/ContextJQ", "../Watch/WatchMouseJQ", "./ControlCommonJQ", "../Common/OperationJQ", "../UndoManager/UndoManager" ], function(require, exports, impError, impPageControlNames, impPageCtx, impWatch, impCommonCode, impOperaction, impUndoManager) {
    "use strict";
    var Image, debug = !0, globalImageBlockId = 0, globalImageBlockContainerId = 0;
    !function(Image) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        Image.SmartObj = SmartObj;
        var SelfJQ = function(_super) {
            function SelfJQ() {
                _super.apply(this, arguments);
            }
            __extends(SelfJQ, _super);
            SelfJQ.prototype.Init = function() {
                this.AttachUserImages();
                this.AttachSelectImage();
                this.AttachInsertImage();
            };
            SelfJQ.prototype.GenerateTextBlockScopeId = function() {
                return "Image_Block_" + ++globalImageBlockId;
            };
            SelfJQ.prototype.GenerateContainerScopeId = function() {
                return "Image_Block_Container_" + ++globalImageBlockContainerId;
            };
            SelfJQ.prototype.AttachSelectImage = function() {
                jQuery("#control-image-bi-library").on("click", ".image-library-image", function() {
                    jQuery(".image-library-image").removeClass("image-library-select");
                    jQuery(".image-library-image").removeClass("image-library-bi-select");
                    jQuery(this).addClass("image-library-select");
                    jQuery(this).addClass("image-library-bi-select");
                });
                jQuery(SelfJQ.controlId).on("click", ".image-library-image", function() {
                    jQuery(".image-library-image").removeClass("image-library-select");
                    jQuery(this).addClass("image-library-select");
                });
            };
            SelfJQ.IsImageUrl = function(s) {
                var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
                if (1 == regexp.test(s) && s.length >= 5) for (var lowerUrl = s.toLowerCase(), types = [ "jpeg", "jpg", "png", "gif" ], i = 0; i < types.length; i++) {
                    var _type = lowerUrl.substr(lowerUrl.length - 5, 5), ts = _type.split(".");
                    if (ts.length >= 2 && ts[1] == types[i]) return !0;
                }
                return !1;
            };
            SelfJQ.prototype.AttachInsertImage = function() {
                jQuery(SelfJQ.controlId).find(".action-button-insert-image").on("click", function() {
                    "" != jQuery(".internet-image-url").val() ? SelfJQ.InsertImage(jQuery(".internet-image-url").val()) : SelfJQ.InsertImage(void 0);
                });
                jQuery(".action-button-change-image").on("click", function() {
                    var selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedRowOrColumn && selectedRowOrColumn.hasClass("empty-container-image")) {
                        var imgSrc = jQuery(".image-library-select").attr("src");
                        if ("" != imgSrc) {
                            selectedRowOrColumn.find(".jq-plus-container-image").find("img").attr("src", imgSrc);
                            var undo = new impUndoManager.Manager.UndoManager();
                            undo.BeforeOperation();
                        }
                    } else {
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionFail("please select a image change.");
                    }
                    jQuery("#control-image-library").hide();
                });
            };
            SelfJQ.ChangeImage = function() {
                jQuery(".action-button-insert-image").hide();
                jQuery(".action-button-change-image").show();
                jQuery("#control-image-library").show();
                jQuery("#control-image-library").trigger("custom_loaded");
            };
            SelfJQ.InsertImage = function(url) {
                var imageObj = new SelfJQ(), errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.SetErrorClassName("page-insert-image");
                var ctx = new impPageCtx.Page.ContextJQ(), selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                if (!selectedRowOrColumn.hasClass("column") && (null == window.smartObj || null == window.smartObj.currentObj)) {
                    window.smartObj = new SmartObj();
                    window.smartObj.currentObj = selectedRowOrColumn;
                    window.smartObj.command = "n";
                }
                void 0 == selectedRowOrColumn && (selectedRowOrColumn = jQuery("#nnnoelement"));
                if (void 0 != selectedRowOrColumn) {
                    var tbImageContainer = document.createElement("div"), tbImage = document.createElement("div"), tbImageWrapper = document.createElement("div"), tbImg = document.createElement("img");
                    jQuery(tbImg).addClass("jq-image-block-image ");
                    jQuery(tbImg).addClass("normal-element image-element");
                    jQuery(tbImageWrapper).addClass("jq-image-block-image-wrapper ");
                    var imgSrc;
                    imgSrc = void 0 == url ? jQuery(".image-library-select").attr("src") : url;
                    jQuery(tbImg).attr("src", imgSrc);
                    jQuery(tbImageWrapper).append(tbImg);
                    jQuery(tbImage).append(tbImageWrapper);
                    jQuery(tbImage).addClass(SelfJQ.CSSCLASS);
                    var tbScopeId = imageObj.GenerateTextBlockScopeId();
                    1 == debug && void 0 != tbImage && jQuery(tbImage).prepend("<span class='debug-image-block-css debug-css' scopeId='" + tbScopeId + "'> " + tbScopeId + " </span> ");
                    jQuery(tbImage).attr("scopeId", tbScopeId);
                    jQuery(tbImageContainer).append(tbImage);
                    var tbcScopeId = imageObj.GenerateContainerScopeId();
                    1 == debug && jQuery(tbImageContainer).append(" <span class='debug-image-block-container-css debug-css' scopeId='" + tbcScopeId + "'> " + tbcScopeId + " </span> ");
                    jQuery(tbImageContainer).addClass(SelfJQ.CONTAINER_CSS_CLASS);
                    jQuery(tbImageContainer).attr("scopeId", tbcScopeId);
                    if (1 == selectedRowOrColumn.hasClass("column") || null != window.smartObj) {
                        var plusContainer = jQuery(".jq-plus-container.jq-plus-container-not-used").clone();
                        plusContainer.removeClass("jq-plus-container-not-used");
                        plusContainer.addClass("jq-plus-container-image");
                        plusContainer.addClass("design-css");
                        plusContainer.addClass("design-empty-text-css");
                        plusContainer.removeClass("jq-plus-container");
                        plusContainer.find(".jq-plus-element-content").addClass("jq-plus-element-content-image");
                        var emptycontainer = document.createElement("div");
                        plusContainer.find(".adjust-image-text-other").remove();
                        plusContainer.css("height", "200px");
                        plusContainer.css("width", "200px");
                        var jEc = jQuery(emptycontainer);
                        jEc.prepend("<div class='adjust-image-text-other-left design-css design-adjust-image-text-other'></div>");
                        jEc.prepend("<div class='adjust-image-text-other design-css design-adjust-image-text-other'></div>");
                        jEc.addClass("empty-container-image image-text-other key design-css design-empty-text-css");
                        jEc.append(plusContainer);
                        plusContainer.find(".jq-plus-content").append(tbImageContainer);
                        impOperaction.Operation.AfterOperationJQ.Execute();
                        null == window.smartObj || "" == window.smartObj.command ? ctx.Page.Any.Add(selectedRowOrColumn, jEc, "", void 0, void 0, void 0, void 0) : ctx.Page.Any.Add(selectedRowOrColumn, jEc, "", void 0, void 0, !0, void 0);
                        if (selectedRowOrColumn.hasClass("jq-image-block-container")) {
                            var tbOrTbcWithScopeId = selectedRowOrColumn.attr("scopeId");
                            selectedRowOrColumn.find(".debug-image-block-container-css[scopeId=" + tbOrTbcWithScopeId + "]").remove();
                            void 0 != tbOrTbcWithScopeId && selectedRowOrColumn.append('<span class="debug-image-block-container-css debug-css" scopeId="' + tbOrTbcWithScopeId + '" > ' + tbOrTbcWithScopeId + "</span>");
                        }
                        jQuery(tbImageContainer).find(".debug-css").remove();
                        errorHandler.ActionSuccess("");
                        jQuery(SelfJQ.controlId).hide();
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                    } else errorHandler.ActionFail("You can only insert in a column block.");
                }
                jQuery(".image-library-image").removeClass("image-library-select");
                jQuery(".internet-image-url").val("");
            };
            SelfJQ.prototype.AttachUserImages = function() {
                jQuery(".load-more-images").on("click", function() {
                    SelfJQ.GetImages();
                });
                jQuery(SelfJQ.controlId).on("custom_loaded", function() {
                    SelfJQ.ClearImageGalaryPagingValue();
                    SelfJQ.GetImages();
                });
            };
            SelfJQ.SetImageGalaryPagingValue = function() {
                jQuery(".imges-get-start").val((Number(jQuery(".imges-get-start").val()) + 20).toString());
            };
            SelfJQ.GetImageGalaryPagingValue = function() {
                if (0 == jQuery(".imges-get-start").length) {
                    var pagingElement = jQuery(document.createElement("input"));
                    pagingElement.addClass("imges-get-start hide");
                    jQuery("body").append(pagingElement);
                    jQuery(".imges-get-start").val("0");
                }
                return jQuery(".imges-get-start").val();
            };
            SelfJQ.GetImages = function() {
                var data = {
                    start: SelfJQ.GetImageGalaryPagingValue(),
                    pageSize: 20
                }, dataStrfy = JSON.stringify(data);
                jQuery.ajax({
                    type: "POST",
                    url: "/services/ImageService.asmx/GetImages",
                    data: dataStrfy,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SelfJQ.OnGetImagesSuccess,
                    error: SelfJQ.OnGetImagesError
                });
            };
            SelfJQ.ClearImageGalaryPagingValue = function() {
                jQuery(".imges-get-start").val("0");
            };
            SelfJQ.OnGetImagesSuccess = function(data, status) {
                var resultImages;
                resultImages = data.d;
                if (resultImages.length > 0) {
                    "0" == SelfJQ.GetImageGalaryPagingValue() && jQuery(".image-library").html("");
                    SelfJQ.SetImageGalaryPagingValue();
                }
                for (var i = 0; i < resultImages.length; i++) {
                    var imageContainer = document.createElement("div");
                    jQuery(imageContainer).addClass("image-lib-container");
                    var image = document.createElement("img");
                    jQuery(image).attr("src", resultImages[i].Path);
                    jQuery(image).addClass("image-library-image");
                    jQuery(image).addClass("img-thumbnail");
                    jQuery(imageContainer).append(image);
                    jQuery(".image-library").append(imageContainer);
                }
            };
            SelfJQ.OnGetImagesError = function(request, status, error) {
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.ActionFail("Some Problem !. <br>Try again latter.");
            };
            SelfJQ.ProcessSelectNotify = function() {
                var selectedElement = (new impError.ErrorHandle.ErrorJQ(), impWatch.Watch.MouseJQ.selectedElement);
                void 0 != selectedElement && (selectedElement.hasClass("row") || selectedElement.hasClass("normal-element"));
            };
            SelfJQ.controlId = "#control-image-library";
            SelfJQ.CSSCLASS = "jq-image-block design-image-block normal-element";
            SelfJQ.CONTAINER_CSS_CLASS = "jq-image-block-container design-image-block normal-element jq-container";
            return SelfJQ;
        }(impPageControlNames.PageControlNamesJQ.Page.Image.Controls);
        Image.SelfJQ = SelfJQ;
    }(Image = exports.Image || (exports.Image = {}));
});

define("Controls/BorderJQ", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../UndoManager/UndoManager" ], function(require, exports, impError, impWatch, impCommon, impUndoManager) {
    "use strict";
    var Border, isBorderReady = !1, borderFirstTime = 0;
    !function(Border) {
        var BorderJQ = function() {
            function BorderJQ() {}
            BorderJQ.prototype.Init = function() {
                BorderJQ.AttachBorder();
            };
            BorderJQ.AttachBorder = function() {
                jQuery(document).ready(function() {
                    if (0 == isBorderReady) {
                        isBorderReady = !0;
                        jQuery(".border-style").on("click", function() {
                            jQuery(".border-style").parent().removeClass("border-style-selected");
                            jQuery(this).parent().addClass("border-style-selected");
                            BorderJQ.OnChange(this);
                        });
                        jQuery(".border-advanced-show").on("click", function() {
                            jQuery(".jq-border-advanced").fadeToggle(1);
                        });
                        jQuery(".control-border-thickness-radius").spinner({
                            min: 0,
                            max: 5e3,
                            step: 1,
                            change: function(event, ui) {
                                0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                            },
                            spin: function(event, ui) {
                                0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-border-thickness").spinner({
                            min: 0,
                            max: 50,
                            step: 1,
                            value: 0,
                            change: function(event, ui) {
                                0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                            },
                            spin: function(event, ui) {
                                0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".color-picker").colorpicker();
                        jQuery(".color-picker").on("change", function() {
                            0 == BorderJQ.isSelectProcessing && BorderJQ.OnChange(this);
                        });
                        jQuery(BorderJQ.controlBtnApply).on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                var common = (new impError.ErrorHandle.ErrorJQ(), new impCommon.Common.CommonMethodsJQ()), borderLeft = $(this).closest(".control-border-controls").find(".control-border-thickness-left").spinner("value"), borderTop = $(this).closest(".control-border-controls").find(".control-border-thickness-top").spinner("value"), borderRight = $(this).closest(".control-border-controls").find(".control-border-thickness-right").spinner("value"), borderBottom = $(this).closest(".control-border-controls").find(".control-border-thickness-bottom").spinner("value"), borderRadius = $(this).closest(".control-border-controls").find(".control-border-thickness-radius").spinner("value");
                                void 0 != borderRadius && selectedElement.css("border-radius", borderRadius + "px");
                                if (void 0 != borderLeft) {
                                    selectedElement.css("border-left-width", borderLeft + "px");
                                    var color = $(this).closest(".control-border-controls").find(".color-picker-left").val();
                                    selectedElement.css("border-left-color", "#" + color);
                                }
                                if (void 0 != borderTop) {
                                    selectedElement.css("border-top-width", borderTop + "px");
                                    var color = $(this).closest(".control-border-controls").find(".color-picker-top").val();
                                    selectedElement.css("border-top-color", "#" + color);
                                }
                                if (void 0 != borderRight) {
                                    selectedElement.css("border-right-width", borderRight + "px");
                                    var color = $(this).closest(".control-border-controls").find(".color-picker-right").val();
                                    selectedElement.css("border-right-color", "#" + color);
                                }
                                if (void 0 != borderBottom) {
                                    selectedElement.css("border-bottom-width", borderBottom + "px");
                                    var color = $(this).closest(".control-border-controls").find(".color-picker-bottom").val();
                                    selectedElement.css("border-bottom-color", "#" + color);
                                }
                                selectedElement.css("border-style", "solid");
                                if (0 == borderLeft && 0 == borderTop && 0 == borderRight && 0 == borderBottom) {
                                    common.RemoveStyle(selectedElement, "border-left-width");
                                    common.RemoveStyle(selectedElement, "border-top-width");
                                    common.RemoveStyle(selectedElement, "border-bottom-width");
                                    common.RemoveStyle(selectedElement, "border-right-width");
                                    common.RemoveStyle(selectedElement, "border-color");
                                    common.RemoveStyle(selectedElement, "border");
                                }
                            }
                        });
                    }
                });
            };
            BorderJQ.OnChange = function($this) {
                BorderJQ.isSelectProcessing = !0;
                try {
                    if (0 != borderFirstTime) {
                        borderFirstTime = 1;
                        impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                    }
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedElement) {
                        new impError.ErrorHandle.ErrorJQ();
                        jQuery($this).hasClass("control-border-thickness-all") && jQuery(".control-border-thickness").not(".control-border-thickness-all").not(".control-border-thickness-radius").spinner("value", jQuery($this).val());
                        $($this).hasClass("color-picker-left") && 0 == $(".control-border-thickness-left").spinner("value") && $(".control-border-thickness-left").spinner("value", 1);
                        $($this).hasClass("color-picker-top") && 0 == $(".control-border-thickness-top").spinner("value") && $(".control-border-thickness-top").spinner("value", 1);
                        $($this).hasClass("color-picker-right") && 0 == $(".control-border-thickness-right").spinner("value") && $(".control-border-thickness-right").spinner("value", 1);
                        $($this).hasClass("color-picker-bottom") && 0 == $(".control-border-thickness-bottom").spinner("value") && $(".control-border-thickness-bottom").spinner("value", 1);
                        if ($($this).hasClass("color-picker-all") && 0 == $(".control-border-thickness-all").spinner("value")) {
                            $(".control-border-thickness-left").spinner("value", 1);
                            $(".control-border-thickness-top").spinner("value", 1);
                            $(".control-border-thickness-right").spinner("value", 1);
                            $(".control-border-thickness-bottom").spinner("value", 1);
                            $(".control-border-thickness-all").spinner("value", 1);
                        }
                        var common = new impCommon.Common.CommonMethodsJQ(), borderLeft = $(".control-border-thickness-left").spinner("value"), borderTop = $(".control-border-thickness-top").spinner("value"), borderRight = $(".control-border-thickness-right").spinner("value"), borderBottom = $(".control-border-thickness-bottom").spinner("value"), borderRadius = $(".control-border-thickness-radius").spinner("value");
                        void 0 != borderRadius && selectedElement.css("border-radius", borderRadius + "px");
                        if (jQuery($this).hasClass("color-picker-all")) {
                            jQuery(".color-picker").val(jQuery($this).val());
                            jQuery(".color-picker").keyup();
                        }
                        if (void 0 != borderLeft) {
                            selectedElement.css("border-left-width", borderLeft + "px");
                            var color = $($this).closest(".control-border-controls").find(".color-picker-left").val();
                            selectedElement.css("border-left-color", "#" + color);
                        }
                        if (void 0 != borderTop) {
                            selectedElement.css("border-top-width", borderTop + "px");
                            var color = $($this).closest(".control-border-controls").find(".color-picker-top").val();
                            selectedElement.css("border-top-color", "#" + color);
                        }
                        if (void 0 != borderRight) {
                            selectedElement.css("border-right-width", borderRight + "px");
                            var color = $($this).closest(".control-border-controls").find(".color-picker-right").val();
                            selectedElement.css("border-right-color", "#" + color);
                        }
                        if (void 0 != borderBottom) {
                            selectedElement.css("border-bottom-width", borderBottom + "px");
                            var color = $($this).closest(".control-border-controls").find(".color-picker-bottom").val();
                            selectedElement.css("border-bottom-color", "#" + color);
                        }
                        jQuery(".border-style-selected").find(".border-style").hasClass("border-style-solid") ? selectedElement.css("border-style", "solid") : jQuery(".border-style-selected").find(".border-style").hasClass("border-style-dotted") ? selectedElement.css("border-style", "dotted") : jQuery(".border-style-selected").find(".border-style").hasClass("border-style-dashed") ? selectedElement.css("border-style", "dashed") : jQuery(".border-style-selected").find(".border-style").hasClass("border-style-groove") && selectedElement.css("border-style", "groove");
                        if (0 == borderLeft && 0 == borderTop && 0 == borderRight && 0 == borderBottom) {
                            common.RemoveStyle(selectedElement, "border-left-width");
                            common.RemoveStyle(selectedElement, "border-top-width");
                            common.RemoveStyle(selectedElement, "border-bottom-width");
                            common.RemoveStyle(selectedElement, "border-right-width");
                            common.RemoveStyle(selectedElement, "border-color");
                            common.RemoveStyle(selectedElement, "border");
                        }
                        selectedElement.removeClass("image-selection");
                    }
                } catch (ex) {}
                BorderJQ.isSelectProcessing = !1;
            };
            BorderJQ.ProcessSelectedValues = function() {
                BorderJQ.isSelectProcessing = !0;
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selectedElement) {
                    selectedElement.removeClass("image-selection");
                    var borderLeft = selectedElement.css("border-left-width"), borderTop = selectedElement.css("border-top-width"), borderRight = selectedElement.css("border-right-width"), borderBottom = selectedElement.css("border-bottom-width"), borderRadius = selectedElement.css("border-top-left-radius"), colorLeft = selectedElement.css("border-left-color"), colorTop = selectedElement.css("border-top-color"), colorRight = selectedElement.css("border-right-color"), colorBottom = selectedElement.css("border-bottom-color");
                    if (void 0 != borderRadius) {
                        borderRadius = borderRadius.replace("px", "");
                        jQuery(".control-border-thickness-radius").spinner("value", borderRadius);
                    }
                    if (void 0 != borderLeft) {
                        borderLeft = borderLeft.replace("px", "");
                        jQuery(".control-border-thickness-left").spinner("value", borderLeft);
                    }
                    if (void 0 != borderTop) {
                        borderTop = borderTop.replace("px", "");
                        jQuery(".control-border-thickness-top").spinner("value", borderTop);
                    }
                    if (void 0 != borderRight) {
                        borderRight = borderRight.replace("px", "");
                        jQuery(".control-border-thickness-right").spinner("value", borderRight);
                    }
                    if (void 0 != borderBottom) {
                        borderBottom = borderBottom.replace("px", "");
                        jQuery(".control-border-thickness-bottom").spinner("value", borderBottom);
                    }
                    borderLeft == borderTop && borderLeft == borderRight && borderLeft == borderBottom && jQuery(".control-border-thickness-all").spinner("value", borderLeft);
                    if (void 0 != colorLeft) {
                        colorLeft = BorderJQ.RgbToHex(colorLeft);
                        jQuery(".color-picker-left").val("#" + colorLeft);
                    }
                    if (void 0 != colorTop) {
                        colorTop = BorderJQ.RgbToHex(colorTop);
                        jQuery(".color-picker-top").val("#" + colorTop);
                    }
                    if (void 0 != colorRight) {
                        colorRight = BorderJQ.RgbToHex(colorRight);
                        jQuery(".color-picker-right").val("#" + colorRight);
                    }
                    if (void 0 != colorBottom) {
                        colorBottom = BorderJQ.RgbToHex(colorBottom);
                        jQuery(".color-picker-bottom").val("#" + colorBottom);
                    }
                    colorLeft == colorTop && colorLeft == colorRight && colorLeft == colorBottom && jQuery(".color-picker-all").val("#" + colorLeft);
                    jQuery(".color-picker").keyup();
                    "inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display") && selectedElement.addClass("image-selection");
                }
                BorderJQ.isSelectProcessing = !1;
            };
            BorderJQ.RgbToHex = function(str) {
                try {
                    var r, g, b, rgb = str.replace(/^(rgb|rgba)\(/, "").replace(/\)$/, "").replace(/\s/g, "").split(",");
                    r = Number(rgb[0]);
                    g = Number(rgb[1]);
                    b = Number(rgb[2]);
                    return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
                } catch (ex) {
                    return "";
                }
            };
            BorderJQ.ProcessSelectNotify = function() {
                BorderJQ.ProcessSelectedValues();
            };
            BorderJQ.controlId = ".control-border";
            BorderJQ.controlBtnApply = ".action-button-border-apply";
            BorderJQ.isSelectProcessing = !1;
            return BorderJQ;
        }();
        Border.BorderJQ = BorderJQ;
    }(Border = exports.Border || (exports.Border = {}));
});

define("common/commonmethodsjq", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var Common;
    !function(Common) {
        var CommonMethodsJQ = function() {
            function CommonMethodsJQ() {}
            CommonMethodsJQ.prototype.Trim = function(str) {
                return void 0 != str && "string" == typeof str.toLowerCase() ? this.TrimRight(this.TrimLeft(str)) : void 0;
            };
            CommonMethodsJQ.prototype.RemoveStyle = function(element, style) {
                if (void 0 != style) {
                    style = style.toLowerCase();
                    var search = new RegExp(style + "[^;]+;?", "g");
                    jQuery(element).each(function() {
                        $(this).attr("style", function(i, style) {
                            if (void 0 != style) {
                                var result = style.replace(search, "");
                                return result;
                            }
                        });
                    });
                }
            };
            CommonMethodsJQ.prototype.RemoveSingleStyle = function(element, style) {
                if (void 0 != style) {
                    style = style.toLowerCase();
                    var search = new RegExp(style + "s*:.*?;", "g");
                    jQuery(element).each(function() {
                        $(this).attr("style", function(i, style) {
                            if (void 0 != style) {
                                var result = style.replace(search, "");
                                return result;
                            }
                        });
                    });
                }
            };
            CommonMethodsJQ.prototype.TrimLeft = function(str) {
                if (void 0 != str && "string" == typeof str.toLowerCase()) {
                    for (var trimmedIndex = 0, i = 0; i < str.length; i++) {
                        " " == str[i] && (trimmedIndex = i + 1);
                        if (i + 1 < str.length && " " != str[i + 1]) break;
                    }
                    trimmedIndex < str.length && (str = str.toString().slice(trimmedIndex));
                }
                return str;
            };
            CommonMethodsJQ.prototype.TrimRight = function(str) {
                if (void 0 != str && "string" == typeof str.toLowerCase()) {
                    for (var trimmedIndex = str.length, i = str.length - 1; i > -1; i--) {
                        " " == str[i] && (trimmedIndex = i);
                        if (i - 1 > -1 && " " != str[i - 1]) break;
                    }
                    trimmedIndex > -1 && (str = str.toString().slice(0, trimmedIndex));
                    return str;
                }
            };
            CommonMethodsJQ.prototype.RemoveSpaces = function(str) {
                void 0 != str && "string" == typeof str.toLowerCase() && (str = str.replace(/ /g, ""));
                return str;
            };
            CommonMethodsJQ.prototype.Insert = function(index, sourceString, insertString) {
                return void 0 != sourceString && void 0 != insertString && "string" == typeof sourceString.toLowerCase() && "string" == typeof insertString.toLowerCase() ? index > 0 && index < sourceString.length ? sourceString.substring(0, index) + insertString + sourceString.substring(index, sourceString.length) : sourceString : void 0;
            };
            return CommonMethodsJQ;
        }();
        Common.CommonMethodsJQ = CommonMethodsJQ;
    }(Common = exports.Common || (exports.Common = {}));
});

define("Controls/ColorJQ", [ "require", "exports", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../common/commonmethodsjq" ], function(require, exports, impWatch, impUndoManager, impCommon) {
    "use strict";
    var Color, isColorReady = !1;
    !function(Color) {
        var ColorJQ = function() {
            function ColorJQ() {}
            ColorJQ.prototype.Init = function() {
                ColorJQ.AttachColor();
            };
            ColorJQ.AttachColor = function() {
                jQuery(document).ready(function() {
                    if (0 == isColorReady) {
                        isColorReady = !0;
                        jQuery(".remove-bi").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                var comm = new impCommon.Common.CommonMethodsJQ();
                                comm.RemoveSingleStyle(selectedElement, "background-image");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                                impWatch.Watch.MouseJQ.ResetAfterClear();
                            }
                        });
                        jQuery(".remove-border").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                var comm = new impCommon.Common.CommonMethodsJQ();
                                comm.RemoveStyle(selectedElement, "border");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                                impWatch.Watch.MouseJQ.ResetAfterClear();
                            }
                        });
                        jQuery(".remove-opacity").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                var comm = new impCommon.Common.CommonMethodsJQ();
                                comm.RemoveStyle(selectedElement, "opacity");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                                impWatch.Watch.MouseJQ.ResetAfterClear();
                            }
                        });
                        jQuery(".remove-padding").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                var comm = new impCommon.Common.CommonMethodsJQ();
                                comm.RemoveStyle(selectedElement, "padding");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                                impWatch.Watch.MouseJQ.ResetAfterClear();
                            }
                        });
                        jQuery(".remove-margin").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                var comm = new impCommon.Common.CommonMethodsJQ();
                                comm.RemoveStyle(selectedElement, "margin");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                                impWatch.Watch.MouseJQ.ResetAfterClear();
                            }
                        });
                        jQuery(".remove-gradient").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text") : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image"));
                            if (void 0 != selectedElement) {
                                var comm = new impCommon.Common.CommonMethodsJQ();
                                comm.RemoveSingleStyle(selectedElement, "background");
                                comm.RemoveSingleStyle(selectedElement, "background-color");
                                comm.RemoveSingleStyle(selectedElement, "color");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                                impWatch.Watch.MouseJQ.ResetAfterClear();
                            }
                        });
                        jQuery(".fb-color-picker-gradient").colorpicker();
                        jQuery(".fb-color-picker").colorpicker();
                        jQuery(".fb-color-picker").trigger("keyup");
                        jQuery(".fb-color-picker").on("change", function() {
                            if (0 == ColorJQ.isSelectProcessing) {
                                impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                                selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text") : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image"));
                                if (void 0 != selectedElement) {
                                    if (jQuery(this).hasClass("control-color-foreground-color")) {
                                        var colorForeground = $(this).closest(".control-color-controls").find(".control-color-foreground-color").val();
                                        colorForeground = colorForeground.replace("#", "");
                                        selectedElement.css("color", "#" + colorForeground);
                                        "" != colorForeground && selectedElement.each(function(index, $this) {
                                            var $$this = jQuery($this);
                                            if ($$this.hasClass("jq-editor-link") || $$this.hasClass("jq-normal-link")) {
                                                if (jQuery("page").find("." + $$this.find("a").first().attr("id")).length > 0) jQuery("page").find("." + $$this.find("a").first().attr("id")).html(""); else {
                                                    var style = "<style class='" + $$this.find("a").first().attr("id") + "'> </span>";
                                                    jQuery("page").append(style);
                                                }
                                                var linkId = "#" + $$this.find("a").first().attr("id"), linkColor = "#" + colorForeground, style = " " + linkId + ":link { color:" + linkColor + ";}" + linkId + ":visited { color:" + linkColor + ";}" + linkId + ":hover { color:" + linkColor + ";}" + linkId + ":active { color:" + linkColor + ";}";
                                                jQuery("page").find("." + $$this.find("a").first().attr("id")).html(style);
                                            }
                                        });
                                    } else if (jQuery(this).hasClass("control-color-background-color")) {
                                        var colorBackground = $(this).closest(".control-color-controls").find(".control-color-background-color").val();
                                        selectedElement.hasClass("empty-container-text");
                                        colorBackground = colorBackground.replace("#", "");
                                        selectedElement.css("background-color", "#" + colorBackground);
                                    }
                                    var undo = new impUndoManager.Manager.UndoManager();
                                    undo.BeforeOperation();
                                }
                            }
                        });
                        jQuery(".fb-color-picker-gradient").on("change", function() {
                            impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text") : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image"));
                            if (void 0 != selectedElement) {
                                var colorOne = $(this).closest(".control-color-controls").find(".control-color-gradient-color-1").val(), colorTwo = $(this).closest(".control-color-controls").find(".control-color-gradient-color-2").val();
                                colorOne = colorOne.replace("#", "");
                                colorTwo = colorTwo.replace("#", "");
                                for (var browserSpecificGradient = [ "-webkit-linear-gradient", "-o-linear-gradient", "-moz-linear-gradient", "linear-gradient" ], i = 0; i < browserSpecificGradient.length; i++) selectedElement.css("background", "" + browserSpecificGradient[i] + "(#" + colorOne + ",#" + colorTwo + ")");
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(ColorJQ.controlBtnApply).on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text") : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image"));
                            if (void 0 != selectedElement) {
                                var colorForeground = $(this).closest(".control-color-controls").find(".control-color-foreground-color").val();
                                selectedElement.css("color", "#" + colorForeground);
                                var colorBackground = $(this).closest(".control-color-controls").find(".control-color-background-color").val();
                                selectedElement.css("background-color", "#" + colorBackground);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            ColorJQ.ProcessSelectedValues = function() {
                ColorJQ.isSelectProcessing = !0;
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                selectedElement.hasClass("empty-container-text") ? selectedElement = selectedElement.find(".jq-plus-container-text") : selectedElement.hasClass("empty-container-image") && (selectedElement = selectedElement.find(".jq-plus-container-image"));
                if (void 0 != selectedElement) {
                    var str = selectedElement.css("color");
                    if (void 0 != str) {
                        str = ColorJQ.RgbToHex(str);
                        jQuery(".control-color-foreground-color").val("#" + str);
                        jQuery(".control-color-foreground-color").trigger("keyup");
                    }
                    var str = selectedElement.css("background-color");
                    if (void 0 != str && "transparent" != str && "rgba(0, 0, 0, 0)" != str) {
                        str = ColorJQ.RgbToHex(str);
                        jQuery(".control-color-background-color").val("#" + str);
                        jQuery(".control-color-background-color").trigger("keyup");
                    } else {
                        str = "transparent";
                        jQuery(".control-color-background-color").val(str);
                        jQuery(".control-color-background-color").trigger("keyup");
                    }
                }
                ColorJQ.isSelectProcessing = !1;
            };
            ColorJQ.RgbToHex = function(str) {
                try {
                    var r, g, b, rgb = str.replace(/^(rgb|rgba)\(/, "").replace(/\)$/, "").replace(/\s/g, "").split(",");
                    r = Number(rgb[0]);
                    g = Number(rgb[1]);
                    b = Number(rgb[2]);
                    return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
                } catch (ex) {
                    return "";
                }
            };
            ColorJQ.ProcessSelectNotify = function() {
                ColorJQ.ProcessSelectedValues();
            };
            ColorJQ.controlId = "#control-color";
            ColorJQ.controlBtnApply = ".action-button-color-apply";
            ColorJQ.isSelectProcessing = !1;
            return ColorJQ;
        }();
        Color.ColorJQ = ColorJQ;
    }(Color = exports.Color || (exports.Color = {}));
});

define("Watch/ClipBoardJQ", [ "require", "exports", "../Controls/ImageJQ" ], function(require, exports, impImage) {
    "use strict";
    var ClipBoard;
    !function(ClipBoard) {
        var ClipBoardJQ = function() {
            function ClipBoardJQ() {}
            ClipBoardJQ.prototype.InsertImage = function(url) {
                impImage.Image.SelfJQ.InsertImage(url);
            };
            ClipBoardJQ.prototype.InsertText = function(text) {};
            return ClipBoardJQ;
        }();
        ClipBoard.ClipBoardJQ = ClipBoardJQ;
    }(ClipBoard = exports.ClipBoard || (exports.ClipBoard = {}));
});

define("Watch/CopyPasteJQ", [ "require", "exports", "./WatchMouseJQ", "../Error/ErrorJQ", "../Controls/ControlCommonJQ", "../UndoManager/UndoManager", "./ClipBoardJQ", "../Common/OperationJQ" ], function(require, exports, impWatch, impError, impCommonCode, impUndoManager, impClipboard, impOperaction) {
    "use strict";
    var CopiedElement, CopyPaste, isCut = !1, ClipBorad = function() {
        function ClipBorad() {}
        return ClipBorad;
    }();
    !function(CopyPaste) {
        var CopyPasteJQ = function() {
            function CopyPasteJQ() {}
            CopyPasteJQ.Const = function() {
                CopyPasteJQ.ClipBoardData = new ClipBorad();
            };
            CopyPasteJQ.prototype.Init = function() {};
            CopyPasteJQ.SetClipBoard = function(clipText) {
                CopyPasteJQ.ClipBoardData.data = clipText;
            };
            CopyPasteJQ.IsImageUrl = function(s) {
                var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
                if (1 == regexp.test(s) && s.length >= 5) for (var lowerUrl = s.toLowerCase(), types = [ "jpeg", "jpg", "png", "gif" ], i = 0; i < types.length; i++) {
                    var _type = lowerUrl.substr(lowerUrl.length - 5, 5), ts = _type.split(".");
                    if (ts.length >= 2 && ts[1] == types[i]) return !0;
                }
                return !1;
            };
            CopyPasteJQ.CreateLinkContainer = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                void 0 == selectedElement && (selectedElement = jQuery("#nononoelement"));
                var container = jQuery(document.createElement("div"));
                impOperaction.Operation.AfterOperationJQ.Execute();
                container.addClass("key empty-container links-container image-text-other");
                selectedElement.append(container);
                var undo = new impUndoManager.Manager.UndoManager();
                undo.BeforeOperation();
                impCommonCode.ControlCommon.Code.DestroyResizable();
                impCommonCode.ControlCommon.Code.Execute();
            };
            CopyPasteJQ.Delete = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                new impError.ErrorHandle.ErrorJQ();
                if (void 0 != selectedElement) {
                    if (selectedElement.hasClass("jq-Header") || selectedElement.hasClass("jq-MenuBar") || selectedElement.hasClass("jq-Content") || selectedElement.hasClass("jq-Footer")) selectedElement.hide(); else if (selectedElement.hasClass("jq-image-block-image")) selectedElement.closest(".jq-plus-container").remove(); else if (selectedElement.hasClass("jq-text-block")) selectedElement.closest(".jq-plus-container").remove(); else if (selectedElement.hasClass("column")) {
                        var columnsCount = selectedElement.closest(".row").children(".column").length, columnSize = "", columnClass = "";
                        if (2 == columnsCount) {
                            columnClass = "col-xs-48";
                            columnSize = "48";
                        }
                        if (3 == columnsCount) {
                            columnClass = "col-xs-24";
                            columnSize = "24";
                        }
                        if (4 == columnsCount) {
                            columnClass = "col-xs-16";
                            columnSize = "16";
                        }
                        var lastColumn;
                        selectedElement.closest(".row").children(".column").each(function() {
                            lastColumn = jQuery(this);
                            var prevSize = jQuery(this).attr("xs-column-size"), cssClass = "col-xs-" + prevSize;
                            if (cssClass != columnClass) {
                                jQuery(this).addClass(columnClass);
                                jQuery(this).attr("xs-column-size", columnSize);
                                jQuery(this).removeClass(cssClass);
                            }
                        });
                        selectedElement.remove();
                    } else selectedElement.remove();
                    var undomanager = new impUndoManager.Manager.UndoManager();
                    undomanager.BeforeOperation();
                }
            };
            CopyPasteJQ.Cut = function() {
                isCut = !0;
                var selecedElement = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selecedElement) {
                    selecedElement.removeClass("image-selection");
                    if (selecedElement.hasClass("root-elements")) {
                        CopiedElement = jQuery("#noelement--x");
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionFail("You can only cut Text , Image.");
                    } else CopiedElement = selecedElement.hasClass("jq-image-block-image") ? selecedElement.closest(".jq-plus-container") : selecedElement.hasClass("jqte") ? selecedElement.closest(".jq-plus-container") : selecedElement;
                }
            };
            CopyPasteJQ.Copy = function() {
                isCut = !1;
                var selecedElement = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selecedElement) if (selecedElement.hasClass("root-elements")) {
                    CopiedElement = jQuery("#noelement--x");
                    var errorHandler = new impError.ErrorHandle.ErrorJQ();
                    errorHandler.ActionSuccess("You can only copy Text , Image.");
                } else {
                    selecedElement.removeClass("image-selection");
                    impCommonCode.ControlCommon.Code.DestroyResizable();
                    CopiedElement = selecedElement.hasClass("jq-image-block-image") ? selecedElement.closest(".jq-plus-container").clone() : selecedElement.hasClass("jqte") ? selecedElement.closest(".jq-plus-container").clone() : selecedElement.clone();
                    impCommonCode.ControlCommon.Code.DestroyResizable();
                    impCommonCode.ControlCommon.Code.Execute();
                }
            };
            CopyPasteJQ.Paste = function() {
                var selecedElement = impWatch.Watch.MouseJQ.selectedElement, errorHandler = new impError.ErrorHandle.ErrorJQ();
                if (0 != jQuery(CopiedElement).length) {
                    if (void 0 != selecedElement) if (selecedElement.hasClass("column") || selecedElement.hasClass("image-text-other")) {
                        if (jQuery.contains(CopiedElement[0], selecedElement[0])) errorHandler.ActionFail("You can only cut and paste element in to same element."); else {
                            CopiedElement.children(".ui-resizable-handle").css("margin", "0px");
                            1 == isCut && impCommonCode.ControlCommon.Code.DestroyResizable();
                            impOperaction.Operation.AfterOperationJQ.Execute();
                            selecedElement.hasClass("column") ? impWatch.Watch.MouseJQ.nearestElement.length > 0 ? impWatch.Watch.MouseJQ.nearestElement.after(CopiedElement) : selecedElement.append(CopiedElement) : selecedElement.after(CopiedElement);
                        }
                        1 == isCut && (CopiedElement = jQuery("#noelement--x"));
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                        isCut = !1;
                    } else errorHandler.ActionFail("Please select a [Column] to paste.");
                } else errorHandler.ActionFail("Please copy/cut a element.");
            };
            CopyPasteJQ.PasteClipBoard = function() {
                var selecedElement = impWatch.Watch.MouseJQ.selectedElement, errorHandler = new impError.ErrorHandle.ErrorJQ();
                if (void 0 != selecedElement) {
                    if (selecedElement.hasClass("empty-container") || selecedElement.hasClass("column")) {
                        if (void 0 != CopyPasteJQ.ClipBoardData.data && "" != CopyPasteJQ.ClipBoardData.data) if (CopyPasteJQ.IsImageUrl(CopyPasteJQ.ClipBoardData.data)) {
                            var clp = new impClipboard.ClipBoard.ClipBoardJQ();
                            clp.InsertImage(CopyPasteJQ.ClipBoardData.data);
                        } else {
                            var clp = new impClipboard.ClipBoard.ClipBoardJQ();
                            clp.InsertText(CopyPasteJQ.ClipBoardData.data);
                        }
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                } else errorHandler.ActionFail("You can only paste element to a column and empty blocks.");
            };
            CopyPasteJQ.staticRun = CopyPasteJQ.Const();
            return CopyPasteJQ;
        }();
        CopyPaste.CopyPasteJQ = CopyPasteJQ;
    }(CopyPaste = exports.CopyPaste || (exports.CopyPaste = {}));
});

define("cssManager/cssManagerJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var CssManager;
    !function(CssManager) {
        var Menu = function() {
            function Menu() {}
            return Menu;
        }();
        CssManager.Menu = Menu;
        var CssManagerJQ = function() {
            function CssManagerJQ() {
                this.cssPath = "/Content/Menus/[MenuName]/[Color]/menu.css";
                this.jsPath = "/Content/Menus/[MenuName]/[Color]/menu.js";
                this.htmlPath = "/Content/Menus/[MenuName]/[Color]/index.html";
                this.Menus = [ {
                    Id: 1,
                    MenuName: "2",
                    Color: "green",
                    HtmlPath: "",
                    MenuId: 2
                }, {
                    Id: 2,
                    MenuName: "2",
                    Color: "blue",
                    HtmlPath: "",
                    MenuId: 3
                } ];
            }
            CssManagerJQ.prototype.GetHtml = function(fileId) {
                try {
                    this.Menus[fileId];
                    var m;
                    m = this.Menus[fileId];
                    var html = this.htmlPath.replace("[MenuName]", m.MenuName);
                    html = html.replace("[Color]", m.Color);
                    return html;
                } catch (ex) {}
            };
            CssManagerJQ.prototype.Add = function(fileId) {
                try {
                    this.Menus[fileId];
                    var m;
                    m = this.Menus[fileId];
                    var css = this.cssPath.replace("[MenuName]", m.MenuName);
                    css = css.replace("[Color]", m.Color);
                    var js = this.jsPath.replace("[MenuName]", m.MenuName);
                    js = js.replace("[Color]", m.Color);
                    jQuery("head").append("<link menu-id='" + m.Id + "' rel='stylesheet' href='" + css + "'/>");
                    jQuery("head").append("<script menu-id='" + m.Id + "' type='text/javascript' src='" + js + "'> </script>");
                } catch (ex) {}
            };
            CssManagerJQ.prototype.Remove = function(fileId) {
                try {
                    this.Menus[fileId];
                    jQuery("link[menu-id=' " + fileId + "']").remove();
                    jQuery("script[menu-id='" + fileId + "']").remove();
                } catch (ex) {}
            };
            return CssManagerJQ;
        }();
        CssManager.CssManagerJQ = CssManagerJQ;
    }(CssManager = exports.CssManager || (exports.CssManager = {}));
});

define("Menu/MenuLinksJQ", [ "require", "exports", "../Error/ErrorJQ" ], function(require, exports, impError) {
    "use strict";
    var Page;
    !function(Page) {
        var Menu;
        !function(Menu) {
            var MenuLinksJQ = function() {
                function MenuLinksJQ() {}
                MenuLinksJQ.prototype.Get = function(id) {
                    var MenuLinks;
                    if (1 == id) return MenuLinks = [ {
                        name: "home",
                        pageLocation: "#",
                        text: "Home",
                        subLinks: [ {
                            name: "SubLink Home 1",
                            pageLocation: "/x2",
                            text: "SubLink Home 1",
                            subLinks: [ {
                                name: "SubLink Home 1.1",
                                pageLocation: "/x1",
                                text: "SubLink Home 1.1   ",
                                subLinks: [ {
                                    name: "SubLink Home 1.1.1",
                                    pageLocation: "x2",
                                    text: "SubLink Home 1.1.1",
                                    subLinks: []
                                } ]
                            } ]
                        } ]
                    }, {
                        name: "Contact",
                        pageLocation: "/eventvideos",
                        text: "Contact Us",
                        subLinks: []
                    }, {
                        name: "About",
                        pageLocation: "#",
                        text: "About Us",
                        subLinks: [ {
                            name: "SubLink Home 1",
                            pageLocation: "/x2",
                            text: "SubLink Home 1",
                            subLinks: [ {
                                name: "SubLink Home 1.1",
                                pageLocation: "/x1",
                                text: "SubLink Home 1.1   ",
                                subLinks: [ {
                                    name: "SubLink Home 1.1.1",
                                    pageLocation: "x2",
                                    text: "SubLink Home 1.1.1",
                                    subLinks: []
                                } ]
                            } ]
                        } ]
                    } ];
                    if (2 == id) return [ {
                        name: "Home",
                        pageLocation: "/x1",
                        text: "Home",
                        subLinks: [ {
                            name: "SubLink Home 1",
                            pageLocation: "/x2",
                            text: "SubLink Home 1",
                            subLinks: [ {
                                name: "SubLink Home 1.1",
                                pageLocation: "/x1",
                                text: "SubLink Home 1.1   ",
                                subLinks: [ {
                                    name: "SubLink Home 1.1.1",
                                    pageLocation: "x2",
                                    text: "SubLink Home 1.1.1",
                                    subLinks: []
                                } ]
                            } ]
                        } ]
                    }, {
                        name: "About",
                        pageLocation: "x1",
                        text: "About",
                        externalLocation: !0,
                        subLinks: [ {
                            name: "SubLink About 1",
                            pageLocation: "/x2",
                            text: "SubLink About 1",
                            subLinks: [ {
                                name: "SubLink About 1.1",
                                pageLocation: "/x1",
                                text: "SubLink About 1.1",
                                subLinks: [ {
                                    name: "SubLink About 1.1.1",
                                    pageLocation: "x2",
                                    text: "SubLink About 1.1.1",
                                    subLinks: []
                                } ]
                            } ]
                        } ]
                    } ];
                    if (3 == id) return [ {
                        name: "Home",
                        pageLocation: "/nopage",
                        text: "Home",
                        subLinks: [ {
                            name: "SubLink Home 1",
                            pageLocation: "x1",
                            text: "SubLink Home 1",
                            subLinks: []
                        } ]
                    }, {
                        name: "About",
                        pageLocation: "x2",
                        text: "About",
                        externalLocation: !0,
                        subLinks: []
                    }, {
                        name: "Video Samples",
                        pageLocation: "http://www.http.com",
                        text: "Video Samples",
                        subLinks: []
                    }, {
                        name: "Event",
                        pageLocation: "/eventvideos",
                        text: "Event",
                        subLinks: [ {
                            name: "Videos",
                            pageLocation: "/eventvideos",
                            text: "Videos",
                            subLinks: []
                        } ]
                    } ];
                    new impError.ErrorHandle.ErrorJQ().LogMessage("menu not found");
                };
                return MenuLinksJQ;
            }();
            Menu.MenuLinksJQ = MenuLinksJQ;
        }(Menu = Page.Menu || (Page.Menu = {}));
    }(Page = exports.Page || (exports.Page = {}));
});

define("Menu/MenuTemplateJQ", [ "require", "exports", "../_Classes/UrlJQ", "../Menu/MenuLinksJQ" ], function(require, exports, impCommonUrl, impMenuLinks) {
    "use strict";
    var Page, firstElementActive = !1;
    !function(Page) {
        var Menu;
        !function(Menu) {
            var MenuTemplateJQ = function() {
                function MenuTemplateJQ() {
                    this.menuOneId = 1;
                    this.menuTwoId = 2;
                    this.menuThreeId = 3;
                    this.menuFourId = 4;
                    this.menuFiveId = 5;
                }
                MenuTemplateJQ.prototype.CreateMenuTemplate = function(id, className, menuLinks, menuDesignId) {
                    if (void 0 == menuLinks) {
                        menuLinks = new impMenuLinks.Page.Menu.MenuLinksJQ().Get(id);
                        this.currentMenuLinks = menuLinks;
                    }
                    var menuContainer;
                    if (void 0 != menuLinks && menuLinks.length > 0) {
                        menuContainer = jQuery("<div  id='menu-" + menuDesignId + "' class='jqMenuContainer" + className + "'> </div>");
                        var menuUl = this.CreateUL("menu", menuLinks);
                        menuContainer.append(menuUl);
                        menuContainer.prepend("<div class='rotator'></div>");
                    }
                    return menuContainer;
                };
                MenuTemplateJQ.prototype.CreateUL = function(ulName, menuLinks, level) {
                    void 0 === level && (level = 1);
                    for (var menuUl = jQuery("<ul class='" + ulName + "'> </ul>"), urlJQ = new impCommonUrl.Common.UrlJQ(), i = 0; i < menuLinks.length; i++) {
                        var pageLocation = menuLinks[i].pageLocation, href = urlJQ.PreparePageHref(pageLocation), parent = "";
                        void 0 != menuLinks[i].subLinks && menuLinks[i].subLinks.length > 0 && (parent = "has-children");
                        var menuitemLink = ' <a class="li ' + parent + '" href="' + href + '"> ' + menuLinks[i].text + "</a> ";
                        void 0 == menuitemLink && (menuitemLink = "");
                        var idName = menuLinks[i].name;
                        if (void 0 != idName) {
                            idName = idName.toString().replace(/\s+/g, "");
                            idName = idName.toUpperCase();
                            idName = "jqPrimaryMenu-" + idName;
                        }
                        var menuitem = jQuery("<li> " + menuitemLink + "</li> ");
                        menuUl.append(menuitem);
                        var subMenuUl;
                        if (void 0 != menuLinks[i].subLinks && menuLinks[i].subLinks.length > 0) {
                            level++;
                            subMenuUl = this.CreateUL("jqSubMenuUl", menuLinks[i].subLinks, level);
                            level--;
                        }
                        void 0 != subMenuUl && jQuery(menuitem).append(subMenuUl);
                        if (1 == level && 0 == firstElementActive) {
                            firstElementActive = !0;
                            menuitem.addClass("active");
                            menuitem.find(".li").first().addClass("active-link");
                        }
                        menuitem.addClass("level-" + level);
                    }
                    return menuUl;
                };
                return MenuTemplateJQ;
            }();
            Menu.MenuTemplateJQ = MenuTemplateJQ;
        }(Menu = Page.Menu || (Page.Menu = {}));
    }(Page = exports.Page || (exports.Page = {}));
});

define("Controls/Menujq", [ "require", "exports", "../Error/ErrorJQ", "../Page/Context/ContextJQ", "../Watch/WatchMouseJQ", "./ControlCommonJQ", "../cssManager/cssManagerJQ", "../Menu/MenuTemplateJQ" ], function(require, exports, impError, impPageCtx, impWatch, impCommonCode, impCssManager, impMenuTemplate) {
    "use strict";
    var Menu, globalMenuontainerId = 0, isMenuJQReady = !1, isTextInit = !1, nextId = 0;
    !function(Menu) {
        var MenuJQ = function() {
            function MenuJQ() {}
            MenuJQ.prototype.InitInsert = function() {};
            MenuJQ.prototype.GenerateContainerScopeId = function() {
                return "Menu_Container_" + ++globalMenuontainerId;
            };
            MenuJQ.prototype.Init = function() {
                if (0 == isTextInit) {
                    isTextInit = !0;
                    jQuery(document).ready(function() {
                        if (0 == isMenuJQReady) {
                            isMenuJQReady = !0;
                            MenuJQ.AttachClose();
                            MenuJQ.AttachInsertMenu();
                            MenuJQ.AttachNextMenu();
                            MenuJQ.AttachPrevMenu();
                        }
                    });
                }
            };
            MenuJQ.AttachNextMenu = function() {
                jQuery(".control-menu-next").on("click", function() {
                    var cssman = new impCssManager.CssManager.CssManagerJQ();
                    nextId++;
                    if (nextId < cssman.Menus.length) {
                        var src = cssman.GetHtml(nextId), iframe = jQuery(document.createElement("iframe"));
                        iframe.attr("src", src);
                        iframe.addClass("menu-iframe");
                        jQuery(".control-menu-styles").html("");
                        jQuery(".control-menu-styles").append(iframe);
                    } else nextId = cssman.Menus.length - 1;
                });
            };
            MenuJQ.AttachPrevMenu = function() {
                jQuery(".control-menu-prev").on("click", function() {
                    var cssman = new impCssManager.CssManager.CssManagerJQ();
                    nextId--;
                    if (nextId >= 0) {
                        var src = cssman.GetHtml(nextId), iframe = jQuery(document.createElement("iframe"));
                        iframe.attr("src", src);
                        iframe.addClass("menu-iframe");
                        jQuery(".control-menu-styles").html("");
                        jQuery(".control-menu-styles").append(iframe);
                    } else nextId = 0;
                });
            };
            MenuJQ.AttachClose = function() {
                jQuery(".control-menu").find(".close-button").on("click", function() {
                    jQuery(this).closest(".control-page").hide();
                    jQuery(impError.ErrorHandle.ErrorJQ.notifyId).css("display", "none");
                    jQuery(impError.ErrorHandle.ErrorJQ.notifyId).html("");
                });
            };
            MenuJQ.AttachInsertMenu = function() {
                jQuery(".control-menu").find(".control-menu-insert").on("click", function(e, s) {
                    var cssMan = new impCssManager.CssManager.CssManagerJQ();
                    if (nextId >= 0 && nextId < cssMan.Menus.length) {
                        var menuDesignId = cssMan.Menus[nextId].MenuId, mt = new impMenuTemplate.Page.Menu.MenuTemplateJQ(), menu = mt.CreateMenuTemplate(1, "", void 0, menuDesignId), menuObj = new MenuJQ(), ctx = new impPageCtx.Page.ContextJQ(), selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                        if (void 0 != selectedRowOrColumn) {
                            var tbContainer = document.createElement("div");
                            jQuery(tbContainer).append(menu);
                            var tbcScopeId = menuObj.GenerateContainerScopeId();
                            jQuery(tbContainer).attr("scopeId", tbcScopeId);
                            if (1 == selectedRowOrColumn.hasClass("column") || selectedRowOrColumn.hasClass("empty-container")) {
                                var emptyc = document.createElement("span");
                                jQuery(emptyc).addClass("empty-container-menu key image-text-other ");
                                jQuery(emptyc).css("font-size", "14px");
                                var plusContainer = jQuery(".jq-plus-container.jq-plus-container-not-used").clone();
                                plusContainer.removeClass("jq-plus-container");
                                plusContainer.addClass("jq-plus-container-text");
                                plusContainer.removeClass("jq-plus-container-not-used");
                                plusContainer.find(".jq-plus-content").append(tbContainer);
                                jQuery(emptyc).append(plusContainer);
                                ctx.Page.Any.Add(selectedRowOrColumn, jQuery(emptyc), "", void 0, void 0, !0, void 0);
                                impCommonCode.ControlCommon.Code.DestroyResizable();
                                impCommonCode.ControlCommon.Code.Execute();
                            }
                            cssMan.Add(nextId);
                        }
                    }
                });
            };
            MenuJQ.ProcessShow = function() {
                var cssman = new impCssManager.CssManager.CssManagerJQ();
                nextId = 0;
                var src = cssman.GetHtml(nextId), iframe = jQuery(document.createElement("iframe"));
                iframe.attr("src", src);
                iframe.addClass("menu-iframe");
                jQuery(".control-menu-styles").html("");
                jQuery(".control-menu-styles").append(iframe);
            };
            MenuJQ.ProcessSelectNotify = function() {
                var errorHandler = new impError.ErrorHandle.ErrorJQ(), selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                void 0 != selectedElement && (selectedElement.hasClass("row") || selectedElement.hasClass("normal-element")) && errorHandler.ActionHelp("Help : You cannot [Text] insert here.");
            };
            return MenuJQ;
        }();
        Menu.MenuJQ = MenuJQ;
    }(Menu = exports.Menu || (exports.Menu = {}));
});

define("controls/JQueryUI", [ "require", "exports", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../UndoManager/UndoManager", "../Controls/TextJQ" ], function(require, exports, impWatch, impCommonMethods, impUndoManager, impText) {
    "use strict";
    var JQueryUI;
    !function(JQueryUI) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        JQueryUI.SmartObj = SmartObj;
        var UIHelper = function() {
            function UIHelper() {}
            return UIHelper;
        }();
        JQueryUI.UIHelper = UIHelper;
        var CommonCode = function() {
            function CommonCode() {}
            CommonCode.Draggable = function(element, cancelableCss) {
                jQuery(element).draggable({
                    cancel: cancelableCss,
                    revert: "invalid",
                    helper: "clone",
                    appendTo: "body",
                    distance: 5,
                    start: function(event, ui) {
                        CommonCode.DragStopped = !1;
                        jQuery("#interface_bottom").hide();
                        jQuery(ui.helper).addClass("jq-dragging");
                        jQuery("page").addClass("dragging");
                        CommonCode.DroppableEventCount = 0;
                        CommonCode.droppableCount++;
                        ui.helper.css("z-index", "9999999999");
                        ui.helper.css("opacity", "0.8");
                    },
                    stop: function(event, ui) {
                        CommonCode.DragStopped = !0;
                        jQuery("#interface_bottom").show();
                        jQuery(ui.helper).removeClass("jq-dragging");
                        jQuery("page").removeClass("dragging");
                        CommonCode.droppableCount = 2;
                        jQuery(".image-selection-drag").removeClass("image-selection-drag");
                        ui.helper.css("opacity", "1");
                        ui.helper.css("z-index", "0");
                    },
                    drag: function(event, ui) {
                        var element = jQuery(event.target).hasClass("key") ? jQuery(event.target) : jQuery(event.target).closest(".key");
                        element.addClass("image-selection-drag");
                    }
                });
            };
            CommonCode.ResizableImage = function() {
                var handleDefault = "e,se,s";
                $(".image-element").resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    delay: 0,
                    start: function(event, ui) {
                        var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-width");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "width");
                    },
                    stop: function(event, ui) {
                        var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-width");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "width");
                    },
                    resize: function(event, ui) {
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                        var uiHelper = new UIHelper();
                        uiHelper.helper = $(this).closest(".column");
                        CommonCode.commonHeight(100, uiHelper);
                    }
                });
            };
            CommonCode.commonHeight = function(height, ui) {
                return "error";
            };
            CommonCode.ResizableColumn = function() {
                var handleDefault = "e,s";
                $(".column").resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    distance: 0,
                    start: function(event, ui) {
                        jQuery("page").addClass("resizing");
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                        jQuery(ui.element).children(".ui-resizable-handle").find(".jq-square-" + axis).parent().addClass("ui-resizable-handle-hover");
                        if ("se" == jQuery(ui.element).data("ui-resizable").axis || "s" == $(ui.element).data("ui-resizable").axis) {
                            ui.element.height(ui.element.height());
                            CommonCode.originalHeightBeforeDragStartStr = $(ui.helper).css("min-height");
                            var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                            commonMethods.RemoveStyle(ui.helper, "min-height");
                        }
                        var nextElements = jQuery(ui.helper).nextAll(".column");
                        nextElements.hide();
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                    },
                    stop: function(event, ui) {
                        jQuery("page").removeClass("resizing");
                        jQuery(ui.element).find(".ui-resizable-handle").removeClass("ui-resizable-handle-hover");
                        jQuery(".ui-resizable-se").removeClass("selected-resizable");
                        var height = ui.size.height, width = ui.size.width, originalHeight = ui.originalSize.height, originalWidth = ui.originalSize.width, rowWidth = jQuery(ui.helper).parent().width(), onePercentPixels = Math.floor(1 * rowWidth / 100), colXsOnePercentage = 2, colXsOnePixels = colXsOnePercentage * onePercentPixels, commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                        jQuery(ui.helper).attr("style");
                        if (height != originalHeight) {
                            CommonCode.commonHeight(height, ui);
                            commonMethods.RemoveSingleStyle(ui.helper, "height");
                            jQuery(ui.helper).css("min-height", height);
                        }
                        commonMethods.RemoveStyle(ui.helper, "min-width");
                        commonMethods.RemoveStyle(ui.helper, "width");
                        var twoFour = 48;
                        if (width > originalWidth) {
                            var emptyXsCount = 0, nextElements = jQuery(ui.helper).nextAll(".column");
                            try {
                                for (var columns = ui.helper.parent().children(".column"), count = 0, j = 0; j < columns.length; j++) {
                                    var size = jQuery(columns[j]).attr("xs-column-size");
                                    if (void 0 != size && "" != size) {
                                        var num = Number(size);
                                        count += num;
                                    }
                                }
                                twoFour > count && (emptyXsCount = twoFour - count);
                                var extenedWidth = width - originalWidth, colXs = Math.floor(extenedWidth / colXsOnePixels);
                                0 == colXs && (colXs = 1);
                                var nextElementsCount = jQuery(ui.helper).nextAll(".column").length, eachXs = Math.floor(colXs / nextElementsCount);
                                0 == eachXs && (eachXs = 1);
                                for (var colXsTemp = colXs, i = 0; i < nextElements.length && colXsTemp > 0; i++) {
                                    var nextXsSize = Number(jQuery(nextElements[i]).attr("xs-column-size"));
                                    if (1 != nextXsSize) {
                                        var newNextXsSize = nextXsSize - eachXs;
                                        if (1 > newNextXsSize) {
                                            colXsTemp = colXsTemp - eachXs + 1;
                                            newNextXsSize = 1;
                                        } else colXsTemp -= eachXs;
                                        jQuery(nextElements[i]).removeClass("col-xs-" + nextXsSize);
                                        jQuery(nextElements[i]).addClass("col-xs-" + newNextXsSize);
                                        jQuery(nextElements[i]).attr("xs-column-size", newNextXsSize);
                                    }
                                }
                                var xsSize = Number(ui.helper.attr("xs-column-size")), newXsSize = xsSize + colXs - colXsTemp;
                                colXs == colXsTemp && (newXsSize += colXsTemp);
                                var allXs = 0;
                                ui.helper.parent().children(".column").each(function() {
                                    allXs += Number(jQuery(this).attr("xs-column-size"));
                                });
                                for (var overallMinusCurrent = allXs - xsSize, g = overallMinusCurrent + newXsSize; g > twoFour; ) {
                                    newXsSize--;
                                    g--;
                                }
                                jQuery(ui.helper).removeClass("col-xs-" + xsSize);
                                jQuery(ui.helper).addClass("col-xs-" + newXsSize);
                                ui.helper.attr("xs-column-size", newXsSize);
                            } catch (ex) {}
                            nextElements.show();
                        } else if (originalWidth > width) {
                            var nextElements = jQuery(ui.helper).nextAll(".column");
                            try {
                                var extenedWidth = originalWidth - width, colXs = Math.floor(extenedWidth / colXsOnePixels);
                                0 == colXs && (colXs = 1);
                                var eachXs = Math.floor(colXs / 1);
                                0 == eachXs && (eachXs = 1);
                                var xsSize = Number(ui.helper.attr("xs-column-size"));
                                if (xsSize > 1) {
                                    var eachXsTemp = eachXs, newXsSize = xsSize - eachXs;
                                    if (0 > newXsSize) {
                                        eachXsTemp = eachXs + newXsSize;
                                        newXsSize = 1;
                                    }
                                    if (0 == newXsSize) {
                                        eachXsTemp = eachXs - 1;
                                        newXsSize = 1;
                                    }
                                    jQuery(ui.helper).removeClass("col-xs-" + xsSize);
                                    jQuery(ui.helper).addClass("col-xs-" + newXsSize);
                                    ui.helper.attr("xs-column-size", newXsSize);
                                    var colXsTemp = colXs;
                                    if (colXsTemp > 0) {
                                        var nextXsSize = Number(jQuery(nextElements[0]).attr("xs-column-size")), newNextXsSize = nextXsSize + eachXsTemp, allXs = 0;
                                        ui.helper.parent().children(".column").each(function() {
                                            allXs += Number(jQuery(this).attr("xs-column-size"));
                                        });
                                        for (var overallMinusNext = allXs - Number(jQuery(nextElements[0]).attr("xs-column-size")), g = overallMinusNext + newNextXsSize; g > twoFour; ) {
                                            newNextXsSize--;
                                            g--;
                                        }
                                        jQuery(nextElements[0]).removeClass("col-xs-" + nextXsSize);
                                        jQuery(nextElements[0]).addClass("col-xs-" + newNextXsSize);
                                        jQuery(nextElements[0]).attr("xs-column-size", newNextXsSize);
                                    }
                                }
                            } catch (ex) {}
                            nextElements.show();
                        }
                        var nextElementsToShow = jQuery(ui.helper).nextAll(".column");
                        nextElementsToShow.show();
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {}
                });
            };
            CommonCode.OnResize = function(event, ui) {
                "se" == jQuery(ui.element).data("ui-resizable").axis || ("s" == $(ui.element).data("ui-resizable").axis ? ui.helper.height(ui.helper.height() + 20) : "s" == $(ui.element).data("ui-resizable").axis);
            };
            CommonCode.JustResizable = function(elementCss, handle) {
                var handleDefault = "e,se,s";
                void 0 != handle && "" != handle && (handleDefault = handle);
                $(elementCss).resizable({
                    handles: handleDefault,
                    minHeight: 0,
                    minWidth: 0,
                    delay: 0,
                    start: function(event, ui) {
                        jQuery("page").addClass("resizing");
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                        jQuery(ui.element).children(".ui-resizable-handle").find(".jq-square-" + axis).parent().addClass("ui-resizable-handle-hover");
                    },
                    stop: function(event, ui) {
                        jQuery("page").removeClass("resizing");
                        jQuery(ui.element).find(".ui-resizable-handle").removeClass("ui-resizable-handle-hover");
                        ui.size.height, ui.size.width;
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                        var uiHelper = new UIHelper();
                        uiHelper.helper = $(this).closest(".column");
                        CommonCode.commonHeight(100, uiHelper);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {}
                });
            };
            CommonCode.ResizableRootElements = function(elementCss, handle) {
                var handleDefault = "e,se,s";
                void 0 != handle && "" != handle && (handleDefault = handle);
                $(elementCss).resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    delay: 0,
                    start: function(event, ui) {
                        if ("se" == jQuery(ui.element).data("ui-resizable").axis || "s" == $(ui.element).data("ui-resizable").axis) {
                            var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                            commonMethods.RemoveStyle(ui.helper, "min-height");
                            commonMethods.RemoveStyle(ui.helper, "height");
                        }
                    },
                    stop: function(event, ui) {
                        var height = ui.size.height;
                        ui.size.width;
                        if (jQuery(this).hasClass("empty-container-text") || jQuery(this).hasClass("root-elements")) {
                            var common = new impCommonMethods.Common.CommonMethodsJQ();
                            common.RemoveStyle(jQuery(this), "min-height");
                            common.RemoveStyle(jQuery(this), "height");
                            jQuery(this).css("min-height", height);
                        }
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                    }
                });
            };
            CommonCode.ResizeCommon = function(selectedElement) {
                try {
                    var box = jQuery(selectedElement)[0].getBoundingClientRect(), circleLeftTopElement = jQuery("<div class='circle-deg' style='width:12px; border-radius:50%; height:12px; position:absolute; background-color:#00A1FF;'></div>"), circleRightTopElement = jQuery(circleLeftTopElement).clone(), circleLeftBottomElement = jQuery(circleLeftTopElement).clone(), circleRightBottomElement = jQuery(circleLeftTopElement).clone();
                    circleRightBottomElement.addClass("z-index-back");
                    var body = document.body, docElem = document.documentElement, scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop, scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft, clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, top = box.top + scrollTop - clientTop, left = box.left + scrollLeft - clientLeft, width = jQuery(selectedElement).css("width"), height = jQuery(selectedElement).css("height"), widthf = parseFloat(width.replace("px", "")), heightf = parseFloat(height.replace("px", ""));
                    circleLeftTopElement.css("left", left - 5);
                    circleLeftTopElement.css("top", top - 5);
                    circleLeftBottomElement.css("left", left - 5);
                    circleLeftBottomElement.css("top", top + heightf - 5);
                    circleRightTopElement.css("left", left + widthf - 5);
                    circleRightTopElement.css("top", top - 5);
                    circleRightBottomElement.css("left", left + widthf - 5);
                    circleRightBottomElement.css("top", top + heightf - 5);
                    jQuery(".circle-deg").remove();
                    jQuery("body").append(circleLeftTopElement);
                    jQuery("body").append(circleLeftBottomElement);
                    jQuery("body").append(circleRightTopElement);
                    jQuery("body").append(circleRightBottomElement);
                } catch (ex) {}
            };
            CommonCode.Resizable = function(elementCss, handle) {
                var handleDefault = "e,se,s";
                void 0 != handle && "" != handle && (handleDefault = handle);
                $(elementCss).resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    distance: 0,
                    start: function(event, ui) {
                        jQuery("page").addClass("resizing");
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                        jQuery(ui.element).children(".ui-resizable-handle").find(".jq-square-" + axis).parent().addClass("ui-resizable-handle-hover");
                        $(ui.helper).closest(".key").after("<div class='height float-right dummy-div'></div>");
                        jQuery(".dummy-div").height(ui.helper.height() + 2);
                        if ("se" == jQuery(ui.element).data("ui-resizable").axis || "s" == $(ui.element).data("ui-resizable").axis) {
                            ui.helper.css("height", ui.helper.css("min-height"));
                            var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                            commonMethods.RemoveStyle(ui.helper, "min-height");
                        }
                    },
                    stop: function(event, ui) {
                        jQuery("page").removeClass("resizing");
                        jQuery(".dummy-div").remove();
                        var height = ui.size.height;
                        ui.size.width;
                        if (jQuery(this).hasClass("empty-container-text") || jQuery(this).hasClass("empty-container-image") || jQuery(this).hasClass("empty-container") || jQuery(this).hasClass("jq-plus-container-text") || jQuery(this).hasClass("jq-plus-container-image") || jQuery(this).hasClass("jq-text-block-container") || jQuery(this).hasClass("root-elements")) if (jQuery(this).hasClass("jq-plus-container-image") || jQuery(this).hasClass("empty-container-spacer")) {
                            jQuery(this).css("height", height);
                            jQuery(this).css("min-height", height);
                        } else {
                            jQuery(this).css("height", height);
                            jQuery(this).css("min-height", height);
                        }
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                        var uiHelper = new UIHelper();
                        uiHelper.helper = $(this).closest(".column");
                        CommonCode.commonHeight(100, uiHelper);
                        jQuery(ui.element).find(".ui-resizable-handle").removeClass("ui-resizable-handle-hover");
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {
                        window.setTimeout(function() {
                            jQuery(".dummy-div").height() < ui.helper.height() && jQuery(".dummy-div").height(jQuery(".dummy-div").height() + 2);
                        }, 10);
                    }
                });
            };
            CommonCode.Droppable = function(elementCss) {
                $(elementCss).droppable({
                    greedy: !0,
                    tolerance: "pointer",
                    accept: ".bldr-draggable, .image-text-other",
                    drop: function(event, ui) {
                        if (1 != CommonCode.DroppableEventCount) {
                            CommonCode.DroppableEventCount = 1;
                            try {
                                window.smartObj = new JQueryUI.SmartObj();
                                window.smartObj.currentObj = void 0;
                                window.smartObj.command = "";
                                impWatch.Watch.MouseJQ.nearestElement = jQuery("#nononononelement");
                                var x = event.clientX, y = event.clientY + $(document).scrollTop();
                                jQuery(".nearest-element").removeClass("nearest-element");
                                impWatch.Watch.MouseJQ.selectedElement.hasClass("image-text-other") && (impWatch.Watch.MouseJQ.selectedElement = impWatch.Watch.MouseJQ.selectedElement.closest(".column"));
                                if (impWatch.Watch.MouseJQ.selectedElement.hasClass("column")) {
                                    var $elements = impWatch.Watch.MouseJQ.selectedElement.find(".image-text-other"), nearestLeftArray = [], nearestTopArray = [];
                                    if ($elements.length > 0) {
                                        $elements.each(function(index, _this) {
                                            var $this = $(_this), top = parseFloat($this.attr("top")), bottom = parseFloat($this.attr("bottom")), left = parseFloat($this.attr("left"));
                                            if (y >= top && bottom >= y && x >= left) {
                                                nearestLeftArray.push(left);
                                                nearestTopArray.push(top);
                                            }
                                        });
                                        var nearestLeft = 0, nearestTop = 0;
                                        nearestLeftArray.length > 0 && (nearestLeft = Math.max.apply(Math, nearestLeftArray));
                                        nearestTopArray.length > 0 && (nearestTop = Math.max.apply(Math, nearestTopArray));
                                        impWatch.Watch.MouseJQ.selectedElement.find(".image-text-other[left='" + nearestLeft + "'][top='" + nearestTop + "']").addClass("nearest-element");
                                        impWatch.Watch.MouseJQ.nearestElement = jQuery(".nearest-element").first();
                                        if (impWatch.Watch.MouseJQ.nearestElement.length > 0) {
                                            window.smartObj.currentObj = impWatch.Watch.MouseJQ.nearestElement;
                                            window.smartObj.command = "n";
                                        }
                                    }
                                }
                            } catch (ex) {}
                            impWatch.Watch.MouseJQ.selectedElement = jQuery(".image-selection-drag");
                            if (CommonCode.droppableCount >= 2 && void 0 != CommonCode.currentTarget && !ui.draggable.hasClass("control-drag-anywhere") && !ui.draggable.hasClass("bldr-draggable")) {
                                CommonCode.droppableCount++;
                                ui.draggable.css("opacity", "1");
                                if (ui.draggable.find(".jq-image-block-image").length > 0) {
                                    ui.draggable.css("position", "relative").css("left", "").css("top", "");
                                    void 0 != impWatch.Watch.MouseJQ.nearestElement && impWatch.Watch.MouseJQ.nearestElement.length > 0 ? impWatch.Watch.MouseJQ.nearestElement.after(ui.draggable.closest(".empty-container-image")) : CommonCode.currentTarget.closest(".key").hasClass("column") ? CommonCode.currentTarget.closest(".key").append(ui.draggable.closest(".empty-container-image")) : CommonCode.currentTarget.closest(".key").after(ui.draggable.closest(".empty-container-image"));
                                } else void 0 != impWatch.Watch.MouseJQ.nearestElement && impWatch.Watch.MouseJQ.nearestElement.length > 0 ? impWatch.Watch.MouseJQ.nearestElement.after(ui.draggable.css("position", "relative").css("left", "").css("top", "")) : CommonCode.currentTarget.closest(".key").hasClass("column") ? CommonCode.currentTarget.closest(".key").append(ui.draggable.css("position", "relative").css("left", "").css("top", "")) : CommonCode.currentTarget.closest(".key").after(ui.draggable.css("position", "relative").css("left", "").css("top", ""));
                                jQuery(".image-selection").removeClass("image-selection");
                                event.stopPropagation();
                                CommonCode.currentTarget = null;
                                var undomanager = new impUndoManager.Manager.UndoManager();
                                undomanager.BeforeOperation();
                            } else if (!ui.draggable.hasClass("control-drag-anywhere")) {
                                ui.draggable.css("position", "relative").css("left", "").css("top", "");
                                if (ui.draggable.hasClass("bldr-draggable")) {
                                    var id = ui.draggable.attr("id");
                                    switch (id) {
                                      case "bldr-drgb-text":
                                        impText.Text.TextJQ.InsertTextBlock("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.");
                                        break;

                                      case "bldr-drgb-title":
                                        impText.Text.TextJQ.InsertTextBlock("<h2>Title Here.</h2>");
                                    }
                                }
                            }
                            jQuery(".image-text-other").each(function(index, _this) {
                                var $this = jQuery(_this), bottom = $this.offset().top + $this.height(), top = $this.offset().top, left = $this.offset().left;
                                $this.attr("top", top);
                                $this.attr("bottom", bottom);
                                $this.attr("left", left);
                            });
                            jQuery(".image-selection-drag").removeClass("image-selection-drag");
                            jQuery(".empty").removeClass("empty");
                            jQuery("#control-common-execute").trigger("click");
                        }
                    },
                    out: function(event, ui) {
                        CommonCode.droppableCount++;
                    },
                    over: function(event, ui) {
                        jQuery(".image-selection-drag").removeClass("image-selection-drag");
                        CommonCode.currentTarget = jQuery(event.target);
                        if (jQuery(event.target).hasClass("key")) {
                            if ("inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display")) {
                                jQuery(event.target).addClass("image-selection-drag");
                                impWatch.Watch.MouseJQ.selectedElement = jQuery(event.target);
                            }
                        } else if ("inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display")) {
                            jQuery(event.target).closest(".key").addClass("image-selection-drag");
                            impWatch.Watch.MouseJQ.selectedElement = jQuery(event.target).closest(".key");
                        }
                    }
                });
            };
            CommonCode.DraggableDestroy = function(element) {
                jQuery(element).each(function(index, _this) {
                    try {
                        var $this = $(_this);
                        $this.draggable("destroy");
                    } catch (ex) {}
                });
            };
            CommonCode.DroppableDestroy = function(elementCss) {
                jQuery(elementCss).each(function(index, _this) {
                    try {
                        var $this = $(_this);
                        $this.droppable("destroy");
                        $this.removeClass("ui-droppable");
                    } catch (ex) {}
                });
            };
            CommonCode.ResizableDestroy = function(elementCss) {
                jQuery(elementCss).each(function(index, _this) {
                    try {
                        var $this = $(_this);
                        $this.resizable("destroy");
                        jQuery($this).find("div").remove(".ui-resizable-handle");
                    } catch (ex) {
                        jQuery($this).find("div").remove(".ui-resizable-handle");
                    }
                });
            };
            CommonCode.droppableCount = 2;
            CommonCode.DroppableEventCount = 0;
            CommonCode.DragStopped = !0;
            CommonCode.originalHeightBeforeDragStartStr = "";
            return CommonCode;
        }();
        JQueryUI.CommonCode = CommonCode;
    }(JQueryUI = exports.JQueryUI || (exports.JQueryUI = {}));
});

define("page/PageElementBaseJQ", [ "require", "exports", "../PageElements/ElementJQ", "../Error/ErrorJQ", "../Common/CommonMethodsJQ", "../_Classes/UrlJQ", "../_Classes/Auth", "../Constants/ConstantsJQ", "../UndoManager/UndoManager", "../MalFormed/MalFormedJQ" ], function(require, exports, impElements, impError, impCommon, impUrl, impAuth, impConstants, impUndoManager, impmal) {
    "use strict";
    var Page, uniqureId = 5;
    !function(Page) {
        var debug, globalColumnId, globalRowId;
        globalColumnId = 0;
        globalRowId = 0;
        debug = !0;
        var PageElementBaseJQ = function() {
            function PageElementBaseJQ(page, typeName, paramRootWrapper, extra) {
                this.scopeId = "body";
                this.typeName = typeName;
                this.rootWrapper = paramRootWrapper;
                this.cssClassName = "jq-" + this.typeName;
                this.cssBackClassName = "jq-back-" + this.typeName;
                this.cssAdditionalStylingClassName = "jq-additional-" + this.typeName;
                this.templatePath = this.typeName;
                this.templateName = this.typeName + ".html";
                this.qualifiedTemplatePath = this.templatePath + "/" + this.templateName;
            }
            PageElementBaseJQ.prototype.GenerateColumnScopeId = function() {
                return "Column_" + ++globalColumnId;
            };
            PageElementBaseJQ.prototype.GenerateRowScopeId = function() {
                return "Row_" + ++globalRowId;
            };
            PageElementBaseJQ.prototype.Log = function(msg) {
                new impError.ErrorHandle.ErrorJQ().LogMessage(this.typeName + "JQ : " + msg);
            };
            PageElementBaseJQ.prototype.GetClassName = function() {
                return this.cssClassName;
            };
            PageElementBaseJQ.prototype.GetDotClassName = function() {
                return "." + this.GetClassName();
            };
            PageElementBaseJQ.prototype.GetScope = function() {
                if (void 0 == this.scopeId || "" == this.scopeId) {
                    this.scopeId = "body";
                    return jQuery(this.scopeId);
                }
                return jQuery(this.scopeId);
            };
            PageElementBaseJQ.prototype.SetScope = function(scopeid) {
                this.scopeId = scopeid;
                return this;
            };
            PageElementBaseJQ.prototype.Get = function() {
                return jQuery(this.GetScope()).find(this.GetDotClassName());
            };
            PageElementBaseJQ.prototype.Remove = function() {
                jQuery(this.Get()).remove();
            };
            PageElementBaseJQ.prototype.GetWrapper = function() {
                return 1 == this.ProcessKey() ? "body" == this.rootWrapper.toString().toLowerCase() ? jQuery(this.rootWrapper) : jQuery(this.GetScope()).find(this.rootWrapper) : void 0;
            };
            PageElementBaseJQ.prototype.Create = function(className) {
                if (1 == this.ProcessKey()) {
                    if (0 == this.Get().length) {
                        var elements = new impElements.Page.Elements.ElementJQ();
                        this.Add(this.GetWrapper(), elements.CreateDiv("", this.GetClassName() + " " + this.cssBackClassName + " " + this.cssAdditionalStylingClassName + "  key design-row row root-elements page-element jqMargin-0 "), void 0, void 0, void 0, void 0, void 0);
                    }
                    return this;
                }
            };
            PageElementBaseJQ.prototype.CreateNotExist = function() {
                0 == this.Get().length && this.Create(void 0);
            };
            PageElementBaseJQ.prototype.AddRow = function(root, colClassNames, className, adjustRow, adjustColumn, beforeAfter) {
                if (1 == this.ProcessKey()) {
                    var row;
                    0 == this.Get().length && this.Create(void 0);
                    if (void 0 != colClassNames && colClassNames.length > 0) {
                        var cols;
                        cols = colClassNames.toString().split(" ");
                        var elements = new impElements.Page.Elements.ElementJQ();
                        row = elements.CreateDiv("", "row key jqRootRow design-row");
                        for (var commonMethods = new impCommon.Common.CommonMethodsJQ(), i = 0; i < cols.length; i++) {
                            var colClassName = "", columnSize = "";
                            if (void 0 != cols[i] && "" != commonMethods.Trim(cols[i])) {
                                colClassName = cols[i].toString().replace(/,/g, " ");
                                columnSize = colClassName.toString().replace("col-xs-", "");
                                var column, elements2 = new impElements.Page.Elements.ElementJQ(), columnCss = colClassName + " " + className + " column key design-column column-number-" + i, contentClassName = "", contentCssClass = "";
                                if ("Content" == this.typeName || jQuery(root).hasClass("jq-Content")) {
                                    contentCssClass = "";
                                    0 == i ? contentCssClass = "SideBarLeft" : 1 == i ? contentCssClass = "MiddleContent" : 2 == i && (contentCssClass = "SideBarRight");
                                    contentClassName = "jq-" + contentCssClass + " jq-back-" + contentCssClass + " jq-additional-" + contentCssClass;
                                }
                                column = elements2.CreateDiv("", columnCss + " " + contentClassName);
                                var columnScopeId = this.GenerateColumnScopeId();
                                1 == debug && void 0 != column && column.append("<span class='debug-column-css debug-css' scopeId='" + columnScopeId + "'> " + columnScopeId + " </span> ");
                                column.attr("scopeId", columnScopeId);
                                column.attr("column-number", i);
                                column.attr("xs-column-size", columnSize);
                                column.css("min-height", "100px");
                                column.addClass("column-padding");
                                "" != contentClassName ? column.attr("key-css", ".jq-" + contentClassName) : void 0 != root ? column.attr("key-css", jQuery(root).attr("key-css") + " column") : column.attr("key-css", this.GetDotClassName() + " column");
                                void 0 != root ? row.attr("key-css", jQuery(root).attr("key-css") + " row") : row.attr("key-css", this.GetDotClassName() + " row");
                                jQuery(row).append(column);
                                void 0 != adjustColumn && this.AdjustElement(column, adjustColumn);
                            }
                        }
                    }
                    var rowScopeId = this.GenerateRowScopeId();
                    row.attr("scopeId", rowScopeId);
                    var nextPlus = "<div class='jq-row-plus-container jq-next-row-container'> <span class='jq-row-plus jq-next-row'> + </span> </div>", prevPlus = "<div class='jq-row-plus-container jq-prev-row-container'> <span class='jq-row-plus jq-prev-row'> + </span> </div>";
                    if (void 0 != row) {
                        row.prepend(prevPlus);
                        row.append(nextPlus);
                    }
                    void 0 != adjustRow && this.AdjustElement(row, adjustRow);
                    void 0 == root && (root = this.Get());
                    jQuery(row).prepend("<span title='Row' class=\"design-page-row \"> <span class='design-square-row'>Row</span> <span class='columns-add-text'>Columns <button class='jq-add-column btn btn-xs btn-danger'>+</button></span> </span>");
                    this.Add(root, row, void 0, void 0, void 0, void 0, beforeAfter);
                    if ((root.hasClass("empty-container-image") || root.hasClass("empty-container-text")) && !row.hasClass("row")) {
                        row.wrap("<div class='table-row'></div>");
                        row.before("<div class='table-cell'></div>");
                        row.addClass("table-cell");
                        return row.parent();
                    }
                    return row;
                }
            };
            PageElementBaseJQ.prototype.AdjustElement = function(element, adjust) {
                if (1 == this.ProcessKey() && void 0 != element && void 0 != adjust) {
                    void 0 != adjust.height && jQuery(element).css("min-height", adjust.height + "px");
                    void 0 != adjust.width && jQuery(element).css("width", adjust.width + "px");
                    if (void 0 != adjust.padding) {
                        var padding = adjust.padding;
                        if (void 0 != padding.all) jQuery(element).css("padding", padding.all + "px"); else {
                            void 0 != padding.left && jQuery(element).css("padding-left", padding.left + "px");
                            void 0 != padding.top && jQuery(element).css("padding-top", padding.top + "px");
                            void 0 != padding.right && jQuery(element).css("padding-right", padding.right + "px");
                            void 0 != padding.bottom && jQuery(element).css("padding-bottom", padding.bottom + "px");
                        }
                    }
                    if (void 0 != adjust.margin) {
                        var margin = adjust.margin;
                        if (void 0 != margin.all) jQuery(element).css("margin", margin.all + "px"); else {
                            void 0 != margin.left && jQuery(element).css("margin-left", margin.left + "px");
                            void 0 != margin.top && jQuery(element).css("margin-top", margin.top + "px");
                            void 0 != margin.right && jQuery(element).css("margin-right", margin.right + "px");
                            void 0 != margin.bottom && jQuery(element).css("margin-bottom", margin.bottom + "px");
                        }
                    }
                }
            };
            PageElementBaseJQ.prototype.Add = function(root, element, className, rowcolumn, front, useSmartObj, beforeAfter) {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed && 1 == this.ProcessKey()) {
                    void 0 != element && element.find(".debug-css").html("");
                    var row = 0, column = 0;
                    void 0 == root && (root = this.Get());
                    if (void 0 != rowcolumn) {
                        if ("" != rowcolumn) {
                            var rowcolumNumber = rowcolumn.toString().split(" ");
                            try {
                                var tempForTry = Number(rowcolumNumber[0]);
                                tempForTry = Number(rowcolumNumber[1]);
                            } catch (ex) {
                                this.Log("Add(): Row or Column is not a number : provided values (" + rowcolumn + ")");
                                return;
                            }
                            if (void 0 != rowcolumNumber && rowcolumNumber.length > 1) {
                                row = Number(rowcolumNumber[0]) + 1;
                                column = Number(rowcolumNumber[1]);
                            }
                        }
                        if (!(jQuery(root).find(".jqRootRow:nth-child(" + row + ")").children().eq(column).length > 0)) {
                            this.Log(" Add() : [" + jQuery(root).attr("class") + "] do not have row column [" + row + "," + column + "] to add element");
                            return;
                        }
                        root = jQuery(root).find(".jqRootRow:nth-child(" + row + ")").children().eq(column);
                    } else this.Log("Warning : Please Add Row to  [" + jQuery(root).attr("class") + "] ");
                    if (void 0 != element) {
                        if ("object" != typeof element) {
                            var tempElement = document.createElement("span");
                            jQuery(tempElement).append(element);
                            element = jQuery(tempElement);
                        }
                        jQuery(element).addClass(className);
                    }
                    element.attr("class");
                    if (1 == useSmartObj && null != window.smartObj && null != window.smartObj.currentObj && "" != window.smartObj.command) if ("n" == window.smartObj.command || "" == window.smartObj.command) {
                        $(window.smartObj.currentObj).after(element);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    } else {
                        $(window.smartObj.currentObj).before(element);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    } else if (1 == front) jQuery("div[src='xa.xml']").length > 2 && 1 == impAuth.Auth.AuthJQ.IsAuth && $(root).prepend(element); else if (jQuery("div[src='xa.xml']").length > 2 && 1 == impAuth.Auth.AuthJQ.IsAuth) {
                        if (void 0 == jQuery(root).attr("unique-id")) {
                            uniqureId++;
                            jQuery(root).attr("unique-id", uniqureId);
                        }
                        void 0 == beforeAfter ? $(root).append(element) : 1 == beforeAfter ? $(root).before(element) : $(root).after(element);
                        if (jQuery(element).hasClass("jq-Any")) {
                            var undomanager = new impUndoManager.Manager.UndoManager();
                            undomanager.BeforeOperation();
                        } else {
                            var undomanager = new impUndoManager.Manager.UndoManager();
                            undomanager.BeforeOperation();
                        }
                    }
                }
            };
            PageElementBaseJQ.prototype.AddContent = function(content, className, rowcolumn, front) {
                this.CreateNotExist();
                void 0 != content && "" != content && this.Add(this.Get(), content, className, rowcolumn, front, void 0, void 0);
            };
            PageElementBaseJQ.prototype.AddTemplate = function(root, template, className, rowcolumn) {
                if (void 0 != root) {
                    (void 0 == template || "" == template) && (template = this.qualifiedTemplatePath);
                    template.indexOf(".html") > 0 ? this.Add(jQuery(root), jQuery('<div class="' + className + '" ng-include="\'/static/' + template + "'\"></div>"), className, rowcolumn, !1, void 0, void 0) : this.Add(jQuery(root), jQuery('<div class="' + className + '" ng-include="\'' + template + "'\"></div>"), className, rowcolumn, !1, void 0, void 0);
                } else new impError.ErrorHandle.ErrorJQ().LogMessage(" AddTemlate() > root is undefined");
            };
            PageElementBaseJQ.prototype.RemoveColumn = function(rowNumber, columnNumber) {
                var row = jQuery(this.Get()).find(".jqRootRow:nth-child(" + rowNumber + ")");
                jQuery(row).length > 0 ? jQuery(jQuery(row).children().eq(columnNumber)).remove() : this.Log("[" + rowNumber + "," + columnNumber + "] column not found");
            };
            PageElementBaseJQ.prototype.GetRow = function(rowNumber) {
                var row = jQuery(this.Get()).find(".jqRootRow:nth-child(" + rowNumber + ")");
                if (jQuery(row).length > 0) return jQuery(row);
                this.Log("[" + rowNumber + "] row not found");
            };
            PageElementBaseJQ.prototype.GetColumn = function(rowNumber, columnNumber) {
                rowNumber += 1;
                var row = jQuery(this.Get()).find(".jqRootRow:nth-child(" + rowNumber + ")");
                if (jQuery(row).length > 0) return jQuery(row).children().eq(columnNumber);
                this.Log("[" + rowNumber + "," + columnNumber + "] column not found");
            };
            PageElementBaseJQ.prototype.ProcessKey = function() {
                try {
                    var str = this.GetKey();
                    if (1 == this.IsInIframe()) return !1;
                    if (7 != impConstants.Constants.ConstantsJQ.SecureStrLength) return !1;
                    for (var j = 0, i = 6; i >= 0; i--) {
                        if (this.NextChar(str[j]) != impConstants.Constants.ConstantsJQ.Str[i]) return !1;
                        j++;
                    }
                    return !0;
                } catch (ex) {
                    return !1;
                }
            };
            PageElementBaseJQ.prototype.GetKey = function() {
                return new impUrl.Common.UrlJQ().GetDocumentLocation();
            };
            PageElementBaseJQ.prototype.IsInIframe = function() {
                try {
                    return window.self !== window.top;
                } catch (e) {
                    return !0;
                }
            };
            PageElementBaseJQ.prototype.NextChar = function(c) {
                return String.fromCharCode(c.charCodeAt(0) + 1);
            };
            return PageElementBaseJQ;
        }();
        Page.PageElementBaseJQ = PageElementBaseJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("page/anyjq", [ "require", "exports", "./PageElementBaseJQ", "../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var AnyJQ = function(_super) {
            function AnyJQ(extra) {
                _super.call(this, null, "Any", impConsts.Constants.ConstantsJQ.PAGEROOT, null);
            }
            __extends(AnyJQ, _super);
            return AnyJQ;
        }(impPage.Page.PageElementBaseJQ);
        Page.AnyJQ = AnyJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

define("common/on", [ "require", "exports", "../page/anyjq", "../Watch/WatchMouseJQ" ], function(require, exports, impAny, impWatch) {
    "use strict";
    var On;
    !function(On) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        On.SmartObj = SmartObj;
        var Code = function() {
            function Code() {}
            Code.Execute = function() {
                Code.BindPlus();
                Code.BindEC();
            };
            Code.BindEC = function() {
                jQuery(".empty-container").unbind("click");
                jQuery(".empty-container").on("click", function() {
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    void 0 != selectedElement && selectedElement.hasClass("empty-container");
                });
            };
            Code.BindPlus = function() {
                jQuery(".jq-prev-row").unbind("click");
                jQuery(".jq-prev-row").on("click", function() {
                    var currentRow = jQuery(this).parentsUntil(".row"), anyjq = new impAny.Page.AnyJQ("");
                    anyjq.AddRow(currentRow, "col-xs-48", "", void 0, void 0, !0);
                });
                jQuery(".jq-next-row").unbind("click");
                jQuery(".jq-next-row").on("click", function() {
                    var currentRow = jQuery(this).parentsUntil(".row"), anyjq = new impAny.Page.AnyJQ("");
                    anyjq.AddRow(currentRow, "col-xs-48", "", void 0, void 0, !1);
                });
                jQuery(".jq-plus-prev").unbind("click");
                jQuery(".jq-plus-prev").on("click", function(e) {
                    window.smartObj = new SmartObj();
                    jQuery(this).hasClass("image-text-other") ? window.smartObj.currentObj = jQuery(this) : window.smartObj.currentObj = jQuery(this).closest(".image-text-other");
                    window.smartObj.command = "p";
                    window.smartObj.isDirty = !1;
                    e.stopPropagation();
                    var pageY = e.pageY;
                    jQuery(window).scrollTop() + pageY >= jQuery(window).height() - 250 && (pageY = e.pageY - 250);
                    var pageX = e.pageX;
                    e.pageX > $(document).width() - 200 && (pageX = e.pageX - 150);
                    jQuery("#smInsertNextPrev").css("left", pageX + "px");
                    jQuery("#smInsertNextPrev").css("top", pageY + "px");
                    jQuery("#smInsertNextPrev").fadeIn(500);
                });
                jQuery(".jq-plus-next").unbind("click");
                jQuery(".jq-plus-next").on("click", function(e) {
                    window.smartObj = new SmartObj();
                    jQuery(this).hasClass("image-text-other") ? window.smartObj.currentObj = jQuery(this) : window.smartObj.currentObj = jQuery(this).closest(".image-text-other");
                    window.smartObj.command = "n";
                    window.smartObj.isDirty = !1;
                    e.stopPropagation();
                    var pageY = e.pageY;
                    jQuery(window).scrollTop() + pageY >= jQuery(window).height() - 250 && (pageY = e.pageY - 180);
                    var pageX = e.pageX;
                    e.pageX > $(document).width() - 200 && (pageX = e.pageX - 150);
                    jQuery("#smInsertNextPrev").css("left", pageX + "px");
                    jQuery("#smInsertNextPrev").css("top", pageY + "px");
                    jQuery("#smInsertNextPrev").fadeIn(500);
                });
            };
            return Code;
        }();
        On.Code = Code;
    }(On = exports.On || (exports.On = {}));
});

define("JQte/OnInsert", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../Controls/ControlCommonJQ", "../jqte/MyJQte", "../PageElements/ElementJQ" ], function(require, exports, impError, impWatch, impUndoManager, impCommonCode, impJQte, impElements) {
    "use strict";
    var OnInsert, changed = !1;
    !function(OnInsert) {
        var Code = function() {
            function Code() {}
            Code.prototype.Init = function() {
                jQuery("page .jq-add-column").unbind("click");
                jQuery("page .jq-add-column").on("click", function() {
                    var columnsCount = jQuery(this).closest(".row").children(".column").length;
                    if (columnsCount >= 4) {
                        var error = new impError.ErrorHandle.ErrorJQ();
                        error.ActionHelp("Cannot add more than 4 columns");
                    } else {
                        var columnSize = "", columnClass = "";
                        if (1 == columnsCount) {
                            columnClass = "col-xs-24";
                            columnSize = "24";
                        }
                        if (2 == columnsCount) {
                            columnClass = "col-xs-16";
                            columnSize = "16";
                        }
                        if (3 == columnsCount) {
                            columnClass = "col-xs-12";
                            columnSize = "12";
                        }
                        var lastColumn;
                        jQuery(this).closest(".row").children(".column").each(function() {
                            lastColumn = jQuery(this);
                            var prevSize = jQuery(this).attr("xs-column-size"), cssClass = "col-xs-" + prevSize;
                            if (cssClass != columnClass) {
                                jQuery(this).addClass(columnClass);
                                jQuery(this).attr("xs-column-size", columnSize);
                                jQuery(this).removeClass(cssClass);
                            }
                        });
                        var column, elements2 = new impElements.Page.Elements.ElementJQ(), columnCss = columnClass + "  from-column-add-click column key design-column column-number-" + (columnsCount + 1);
                        column = elements2.CreateDiv("", columnCss);
                        column.attr("column-number", columnsCount + 1);
                        column.attr("xs-column-size", columnSize);
                        column.css("min-height", "100px");
                        column.addClass("column-padding");
                        jQuery(this).closest(".row").append(column);
                        jQuery("#control-common-execute").click();
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                });
                jQuery("page a").not(".jq-logout").unbind("click");
                jQuery("page a").not(".jq-logout").click(function() {
                    impCommonCode.ControlCommon.Code.AnchorClicked = !0;
                });
                jQuery("page .jqte-editor").unbind("click");
                jQuery("page .jqte-editor").on("click", function() {
                    jQuery(".jqte-editor, .column").removeClass("current-editor-scope");
                    jQuery(this).addClass("current-editor-scope");
                });
                jQuery("page .column").unbind("click");
                jQuery("page .column").on("click", function() {
                    if ("none" == jQuery("#jqte-edit-stop").css("display")) {
                        jQuery(".jqte-editor, .column").removeClass("current-editor-scope");
                        jQuery(this).addClass("current-editor-scope");
                    }
                });
                jQuery("page .jqte-editor").unbind("keydown");
                jQuery("page .jqte-editor").on("keydown", function() {
                    Code.BackPassed = !0;
                });
                jQuery("page .jqte-editor").unbind("keyup");
                jQuery("page .jqte-editor").on("keyup", function() {
                    changed = !0;
                });
                jQuery("page .jqte-editor").unbind("focusout");
                jQuery("page .jqte-editor").on("focusout", function() {
                    if (1 == changed) {
                        changed = !1;
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    }
                });
                jQuery(".empty-container-image").unbind("dblclick");
                jQuery(".empty-container-image").on("dblclick", function() {});
                jQuery(".empty-container-text").unbind("dblclick");
                jQuery(".empty-container-text").on("dblclick", function() {
                    $(".empty-container-text").draggable({
                        disabled: !1
                    });
                    jQuery("page .empty-container-text").find(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "move");
                    $("page .jq-text-block-content").removeAttr("contentEditable");
                    jQuery(".current-editor-scope").removeClass("current-editor-scope");
                    jQuery(this).find(".jq-text-block-content").addClass("current-editor-scope");
                    jQuery(".editor").show();
                    $(this).draggable({
                        disabled: !0
                    });
                    jQuery(".current-editor-scope").focus();
                    jQuery(".current-editor-scope").closest(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "text");
                    jQuery(".current-editor-scope").attr("contentEditable", "true");
                });
                jQuery("page .jqte-editor").unbind("mouseup");
                jQuery("page .jqte-editor").on("mouseup", function(e) {
                    impJQte.MyJQte.jqte.buttonEmphasize(e);
                });
                jQuery("page .column").unbind("mouseup");
                jQuery("page .column").on("mouseup", function(e) {
                    impJQte.MyJQte.jqte.buttonEmphasize(e);
                });
                jQuery(".jq-site-link").unbind("dblclick");
                jQuery(".jq-site-link").on("dblclick", function() {
                    jQuery(".editor").show();
                    jQuery(".current-editor-scope").focus();
                    jQuery(".current-editor-scope").closest(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "text");
                });
                jQuery("page").unbind("click");
                jQuery("page").on("click", function(e) {
                    impWatch.Watch.MouseJQ.ProcessClick(e);
                    jQuery("#contextMenu").hide(500);
                    jQuery("#smInsertNextPrev").hide(500);
                    if (1 == impCommonCode.ControlCommon.Code.AnchorClicked) {
                        impCommonCode.ControlCommon.Code.AnchorClicked = !1;
                        null != e.cancelBubble && (e.cancelBubble = !0);
                        e.stopPropagation && e.stopPropagation();
                        e.preventDefault && e.preventDefault();
                        null != e.returnValue && (e.returnValue = !1);
                        return !1;
                    }
                });
            };
            Code.BackPassed = !1;
            Code.BackPassedEdit = !1;
            return Code;
        }();
        OnInsert.Code = Code;
    }(OnInsert = exports.OnInsert || (exports.OnInsert = {}));
});

define("controls/ControlCommonJQ", [ "require", "exports", "./JQueryUI", "../common/on", "../JQte/OnInsert" ], function(require, exports, impJQueryUI, impOn, impJqteOnInsert) {
    "use strict";
    var ControlCommon;
    !function(ControlCommon) {
        var Code = function() {
            function Code() {}
            Code.AttachClick = function() {
                jQuery("#control-common-execute").on("click", function() {
                    Code.DestroyResizable();
                    Code.Execute();
                });
            };
            Code.Execute = function() {
                window.setTimeout(function() {
                    impOn.On.Code.Execute();
                    new impJqteOnInsert.OnInsert.Code().Init();
                    impJQueryUI.JQueryUI.CommonCode.ResizableColumn();
                    impJQueryUI.JQueryUI.CommonCode.Resizable(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other", "s");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other-left", "e");
                    impJQueryUI.JQueryUI.CommonCode.Draggable(".jq-normal-link .empty-container, .empty-container-menu, .empty-container-text, .empty-container-image, .empty-container-spacer", "");
                    jQuery(".empty-container-text, .empty-container-image").css("z-index", "0");
                    jQuery(".column").each(function() {
                        if (0 == jQuery(this).children(".image-text-other.empty-container-image, .image-text-other.empty-container-text, .row, .column").length) {
                            jQuery(this).addClass("empty");
                            0 == jQuery(this).find(".empty-drop-element").length && jQuery(this).append("<div class='image-text-other empty-drop-element' ></div>");
                        } else {
                            jQuery(this).removeClass("empty");
                            jQuery(this).find(".empty-drop-element").remove();
                        }
                    });
                    jQuery(".image-text-other, .empty-container-empty").each(function(index, _this) {
                        var $this = jQuery(_this), bottom = $this.offset().top + $this.height(), top = $this.offset().top, left = $this.offset().left;
                        $this.attr("top", top);
                        $this.attr("bottom", bottom);
                        $this.attr("left", left);
                    });
                    impJQueryUI.JQueryUI.CommonCode.Droppable(".column, .empty-container, .image-text-other");
                    jQuery(".ui-resizable-e").html("<div class='jq-square jq-square-e'></div>");
                    jQuery(".ui-resizable-se").html("<div class='jq-square jq-square-se'></div>");
                    jQuery(".ui-resizable-s").html("<div class='jq-square jq-square-s'></div>");
                }, 10);
            };
            Code.DestroyResizable = function() {
                impJQueryUI.JQueryUI.CommonCode.DroppableDestroy(".column, .empty-container, .image-text-other");
                impJQueryUI.JQueryUI.CommonCode.DraggableDestroy(".jq-normal-link, .empty-container, .empty-container-menu, .empty-container-text .empty-container-image, .empty-container-spacer");
                impJQueryUI.JQueryUI.CommonCode.ResizableDestroy(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image, .column, .empty-container, .root-elements, .adjust-image-text-other, .adjust-image-text-other-left");
            };
            Code.AnchorClicked = !1;
            return Code;
        }();
        ControlCommon.Code = Code;
    }(ControlCommon = exports.ControlCommon || (exports.ControlCommon = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("controls/imagejq", [ "require", "exports", "../Error/ErrorJQ", "../ControlNames/PageControlNamesJQ", "../Page/Context/ContextJQ", "../Watch/WatchMouseJQ", "./ControlCommonJQ", "../Common/OperationJQ", "../UndoManager/UndoManager" ], function(require, exports, impError, impPageControlNames, impPageCtx, impWatch, impCommonCode, impOperaction, impUndoManager) {
    "use strict";
    var Image, debug = !0, globalImageBlockId = 0, globalImageBlockContainerId = 0;
    !function(Image) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        Image.SmartObj = SmartObj;
        var SelfJQ = function(_super) {
            function SelfJQ() {
                _super.apply(this, arguments);
            }
            __extends(SelfJQ, _super);
            SelfJQ.prototype.Init = function() {
                this.AttachUserImages();
                this.AttachSelectImage();
                this.AttachInsertImage();
            };
            SelfJQ.prototype.GenerateTextBlockScopeId = function() {
                return "Image_Block_" + ++globalImageBlockId;
            };
            SelfJQ.prototype.GenerateContainerScopeId = function() {
                return "Image_Block_Container_" + ++globalImageBlockContainerId;
            };
            SelfJQ.prototype.AttachSelectImage = function() {
                jQuery("#control-image-bi-library").on("click", ".image-library-image", function() {
                    jQuery(".image-library-image").removeClass("image-library-select");
                    jQuery(".image-library-image").removeClass("image-library-bi-select");
                    jQuery(this).addClass("image-library-select");
                    jQuery(this).addClass("image-library-bi-select");
                });
                jQuery(SelfJQ.controlId).on("click", ".image-library-image", function() {
                    jQuery(".image-library-image").removeClass("image-library-select");
                    jQuery(this).addClass("image-library-select");
                });
            };
            SelfJQ.IsImageUrl = function(s) {
                var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
                if (1 == regexp.test(s) && s.length >= 5) for (var lowerUrl = s.toLowerCase(), types = [ "jpeg", "jpg", "png", "gif" ], i = 0; i < types.length; i++) {
                    var _type = lowerUrl.substr(lowerUrl.length - 5, 5), ts = _type.split(".");
                    if (ts.length >= 2 && ts[1] == types[i]) return !0;
                }
                return !1;
            };
            SelfJQ.prototype.AttachInsertImage = function() {
                jQuery(SelfJQ.controlId).find(".action-button-insert-image").on("click", function() {
                    "" != jQuery(".internet-image-url").val() ? SelfJQ.InsertImage(jQuery(".internet-image-url").val()) : SelfJQ.InsertImage(void 0);
                });
                jQuery(".action-button-change-image").on("click", function() {
                    var selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedRowOrColumn && selectedRowOrColumn.hasClass("empty-container-image")) {
                        var imgSrc = jQuery(".image-library-select").attr("src");
                        if ("" != imgSrc) {
                            selectedRowOrColumn.find(".jq-plus-container-image").find("img").attr("src", imgSrc);
                            var undo = new impUndoManager.Manager.UndoManager();
                            undo.BeforeOperation();
                        }
                    } else {
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionFail("please select a image change.");
                    }
                    jQuery("#control-image-library").hide();
                });
            };
            SelfJQ.ChangeImage = function() {
                jQuery(".action-button-insert-image").hide();
                jQuery(".action-button-change-image").show();
                jQuery("#control-image-library").show();
                jQuery("#control-image-library").trigger("custom_loaded");
            };
            SelfJQ.InsertImage = function(url) {
                var imageObj = new SelfJQ(), errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.SetErrorClassName("page-insert-image");
                var ctx = new impPageCtx.Page.ContextJQ(), selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                if (!selectedRowOrColumn.hasClass("column") && (null == window.smartObj || null == window.smartObj.currentObj)) {
                    window.smartObj = new SmartObj();
                    window.smartObj.currentObj = selectedRowOrColumn;
                    window.smartObj.command = "n";
                }
                void 0 == selectedRowOrColumn && (selectedRowOrColumn = jQuery("#nnnoelement"));
                if (void 0 != selectedRowOrColumn) {
                    var tbImageContainer = document.createElement("div"), tbImage = document.createElement("div"), tbImageWrapper = document.createElement("div"), tbImg = document.createElement("img");
                    jQuery(tbImg).addClass("jq-image-block-image ");
                    jQuery(tbImg).addClass("normal-element image-element");
                    jQuery(tbImageWrapper).addClass("jq-image-block-image-wrapper ");
                    var imgSrc;
                    imgSrc = void 0 == url ? jQuery(".image-library-select").attr("src") : url;
                    jQuery(tbImg).attr("src", imgSrc);
                    jQuery(tbImageWrapper).append(tbImg);
                    jQuery(tbImage).append(tbImageWrapper);
                    jQuery(tbImage).addClass(SelfJQ.CSSCLASS);
                    var tbScopeId = imageObj.GenerateTextBlockScopeId();
                    1 == debug && void 0 != tbImage && jQuery(tbImage).prepend("<span class='debug-image-block-css debug-css' scopeId='" + tbScopeId + "'> " + tbScopeId + " </span> ");
                    jQuery(tbImage).attr("scopeId", tbScopeId);
                    jQuery(tbImageContainer).append(tbImage);
                    var tbcScopeId = imageObj.GenerateContainerScopeId();
                    1 == debug && jQuery(tbImageContainer).append(" <span class='debug-image-block-container-css debug-css' scopeId='" + tbcScopeId + "'> " + tbcScopeId + " </span> ");
                    jQuery(tbImageContainer).addClass(SelfJQ.CONTAINER_CSS_CLASS);
                    jQuery(tbImageContainer).attr("scopeId", tbcScopeId);
                    if (1 == selectedRowOrColumn.hasClass("column") || null != window.smartObj) {
                        var plusContainer = jQuery(".jq-plus-container.jq-plus-container-not-used").clone();
                        plusContainer.removeClass("jq-plus-container-not-used");
                        plusContainer.addClass("jq-plus-container-image");
                        plusContainer.addClass("design-css");
                        plusContainer.addClass("design-empty-text-css");
                        plusContainer.removeClass("jq-plus-container");
                        plusContainer.find(".jq-plus-element-content").addClass("jq-plus-element-content-image");
                        var emptycontainer = document.createElement("div");
                        plusContainer.find(".adjust-image-text-other").remove();
                        plusContainer.css("height", "200px");
                        plusContainer.css("width", "200px");
                        var jEc = jQuery(emptycontainer);
                        jEc.prepend("<div class='adjust-image-text-other-left design-css design-adjust-image-text-other'></div>");
                        jEc.prepend("<div class='adjust-image-text-other design-css design-adjust-image-text-other'></div>");
                        jEc.addClass("empty-container-image image-text-other key design-css design-empty-text-css");
                        jEc.append(plusContainer);
                        plusContainer.find(".jq-plus-content").append(tbImageContainer);
                        impOperaction.Operation.AfterOperationJQ.Execute();
                        null == window.smartObj || "" == window.smartObj.command ? ctx.Page.Any.Add(selectedRowOrColumn, jEc, "", void 0, void 0, void 0, void 0) : ctx.Page.Any.Add(selectedRowOrColumn, jEc, "", void 0, void 0, !0, void 0);
                        if (selectedRowOrColumn.hasClass("jq-image-block-container")) {
                            var tbOrTbcWithScopeId = selectedRowOrColumn.attr("scopeId");
                            selectedRowOrColumn.find(".debug-image-block-container-css[scopeId=" + tbOrTbcWithScopeId + "]").remove();
                            void 0 != tbOrTbcWithScopeId && selectedRowOrColumn.append('<span class="debug-image-block-container-css debug-css" scopeId="' + tbOrTbcWithScopeId + '" > ' + tbOrTbcWithScopeId + "</span>");
                        }
                        jQuery(tbImageContainer).find(".debug-css").remove();
                        errorHandler.ActionSuccess("");
                        jQuery(SelfJQ.controlId).hide();
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                    } else errorHandler.ActionFail("You can only insert in a column block.");
                }
                jQuery(".image-library-image").removeClass("image-library-select");
                jQuery(".internet-image-url").val("");
            };
            SelfJQ.prototype.AttachUserImages = function() {
                jQuery(".load-more-images").on("click", function() {
                    SelfJQ.GetImages();
                });
                jQuery(SelfJQ.controlId).on("custom_loaded", function() {
                    SelfJQ.ClearImageGalaryPagingValue();
                    SelfJQ.GetImages();
                });
            };
            SelfJQ.SetImageGalaryPagingValue = function() {
                jQuery(".imges-get-start").val((Number(jQuery(".imges-get-start").val()) + 20).toString());
            };
            SelfJQ.GetImageGalaryPagingValue = function() {
                if (0 == jQuery(".imges-get-start").length) {
                    var pagingElement = jQuery(document.createElement("input"));
                    pagingElement.addClass("imges-get-start hide");
                    jQuery("body").append(pagingElement);
                    jQuery(".imges-get-start").val("0");
                }
                return jQuery(".imges-get-start").val();
            };
            SelfJQ.GetImages = function() {
                var data = {
                    start: SelfJQ.GetImageGalaryPagingValue(),
                    pageSize: 20
                }, dataStrfy = JSON.stringify(data);
                jQuery.ajax({
                    type: "POST",
                    url: "/services/ImageService.asmx/GetImages",
                    data: dataStrfy,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SelfJQ.OnGetImagesSuccess,
                    error: SelfJQ.OnGetImagesError
                });
            };
            SelfJQ.ClearImageGalaryPagingValue = function() {
                jQuery(".imges-get-start").val("0");
            };
            SelfJQ.OnGetImagesSuccess = function(data, status) {
                var resultImages;
                resultImages = data.d;
                if (resultImages.length > 0) {
                    "0" == SelfJQ.GetImageGalaryPagingValue() && jQuery(".image-library").html("");
                    SelfJQ.SetImageGalaryPagingValue();
                }
                for (var i = 0; i < resultImages.length; i++) {
                    var imageContainer = document.createElement("div");
                    jQuery(imageContainer).addClass("image-lib-container");
                    var image = document.createElement("img");
                    jQuery(image).attr("src", resultImages[i].Path);
                    jQuery(image).addClass("image-library-image");
                    jQuery(image).addClass("img-thumbnail");
                    jQuery(imageContainer).append(image);
                    jQuery(".image-library").append(imageContainer);
                }
            };
            SelfJQ.OnGetImagesError = function(request, status, error) {
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.ActionFail("Some Problem !. <br>Try again latter.");
            };
            SelfJQ.ProcessSelectNotify = function() {
                var selectedElement = (new impError.ErrorHandle.ErrorJQ(), impWatch.Watch.MouseJQ.selectedElement);
                void 0 != selectedElement && (selectedElement.hasClass("row") || selectedElement.hasClass("normal-element"));
            };
            SelfJQ.controlId = "#control-image-library";
            SelfJQ.CSSCLASS = "jq-image-block design-image-block normal-element";
            SelfJQ.CONTAINER_CSS_CLASS = "jq-image-block-container design-image-block normal-element jq-container";
            return SelfJQ;
        }(impPageControlNames.PageControlNamesJQ.Page.Image.Controls);
        Image.SelfJQ = SelfJQ;
    }(Image = exports.Image || (exports.Image = {}));
});

define("Controls/BIjq", [ "require", "exports", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../controls/imagejq" ], function(require, exports, impWatch, impUnodManager, impImage) {
    "use strict";
    var BI, isBIJQReady = !1;
    !function(BI) {
        var BIJQ = function() {
            function BIJQ() {}
            BIJQ.prototype.Init = function() {
                jQuery(document).ready(function() {
                    if (0 == isBIJQReady) {
                        isBIJQReady = !0;
                        jQuery(".smart-menu-bi-control").spinner({
                            min: 0,
                            max: 2e3,
                            step: 1,
                            change: function(event, ui) {},
                            spin: function(event, ui) {
                                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                                if (void 0 != selectedElement) {
                                    var height = jQuery(".smart-menu-bi-height").spinner("value"), width = jQuery(".smart-menu-bi-width").spinner("value");
                                    selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                }
                            },
                            stop: function(event, ui) {
                                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                                if (void 0 != selectedElement) {
                                    var height = jQuery(".smart-menu-bi-height").spinner("value"), width = jQuery(".smart-menu-bi-width").spinner("value");
                                    selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                    var undo = new impUnodManager.Manager.UndoManager();
                                    undo.BeforeOperation();
                                }
                            }
                        });
                        jQuery(".bi-browse").on("click", function() {
                            impImage.Image.SelfJQ.GetImages();
                            jQuery("#control-image-bi-library").show();
                        });
                        jQuery(".make-100").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                jQuery(".ddn-bi-pixel-type").val("%");
                                var height = 100;
                                jQuery(".smart-menu-bi-height").spinner("value", height);
                                var width = 100;
                                jQuery(".smart-menu-bi-width").spinner("value", width);
                                selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".ddn-bi-pixel-type").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                var height = jQuery(".smart-menu-bi-height").spinner("value"), width = jQuery(".smart-menu-bi-width").spinner("value");
                                selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".action-button-insert-bi-image").on("click", function() {
                            var src = jQuery(".image-library-bi-select").first().attr("src");
                            jQuery(".bi-selected-image").val(src).change();
                            jQuery(".image-library-image").removeClass("image-library-bi-select");
                            jQuery("#control-image-bi-library").hide();
                        });
                        jQuery(".control-bi-controls .bi-selected-image").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement, applyToBody = jQuery(".bi-body").is(":checked");
                            if (1 == applyToBody) {
                                jQuery("page").css("background-image", "url('" + jQuery(this).val() + "')");
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            } else if (void 0 != selectedElement) {
                                selectedElement.css("background-image", "url('" + jQuery(this).val() + "')");
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .internet-bi-image-url").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-image", "url(" + jQuery(this).val() + ")");
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .ddn-bi-repeat").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-repeat", jQuery(this).val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .ddn-bi-attachment").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-attachment", jQuery(this).val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .ddn-bi-position").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-position", jQuery(this).val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            BIJQ.ProcessSelectNotify = function() {
                BIJQ.isSelectProcessing = !0;
                try {
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedElement) {
                        var bi = selectedElement.css("background-image").replace("url(", "").replace(")", "");
                        jQuery(".bi-selected-image").val(bi);
                        var repeat = selectedElement.css("background-repeat");
                        jQuery(".ddn-bi-repeat").val(repeat);
                        var attachment = selectedElement.css("background-attachment");
                        jQuery(".ddn-bi-attachment").val(attachment);
                        var position = selectedElement.css("background-position");
                        jQuery(".ddn-bi-position").val(position);
                        var backgroundSize = selectedElement.css("background-size");
                        if (void 0 != backgroundSize) {
                            var wh = backgroundSize.split(" ");
                            if (wh.length >= 2) {
                                var width = wh[0], heigth = wh[1];
                                jQuery(".ddn-bi-pixel-type").val("px");
                                width = width.replace("px", "");
                                heigth = heigth.replace("px", "");
                                jQuery(".smart-menu-bi-height").spinner("value", heigth);
                                jQuery(".smart-menu-bi-width").spinner("value", width);
                            } else {
                                jQuery(".smart-menu-bi-height").spinner("value", 0);
                                jQuery(".smart-menu-bi-width").spinner("value", 0);
                            }
                        }
                    }
                } catch (ex) {}
                BIJQ.isSelectProcessing = !1;
            };
            BIJQ.isSelectProcessing = !1;
            return BIJQ;
        }();
        BI.BIJQ = BIJQ;
    }(BI = exports.BI || (exports.BI = {}));
});

define("Controls/SpacerJQ", [ "require", "exports", "../Watch/WatchMouseJQ", "../Page/Context/ContextJQ" ], function(require, exports, impWatch, impPageCtx) {
    "use strict";
    var Spacer;
    !function(Spacer) {
        var SpacerJQ = function() {
            function SpacerJQ() {}
            SpacerJQ.InsertSpacer = function() {
                var selectedRowOrColumn = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selectedRowOrColumn && (1 == selectedRowOrColumn.hasClass("column") || selectedRowOrColumn.hasClass("empty-container-text") || selectedRowOrColumn.hasClass("empty-container-image") || selectedRowOrColumn.hasClass("empty-container") || null != window.smartObj)) {
                    var ctx = new impPageCtx.Page.ContextJQ(), emptyc = document.createElement("span");
                    jQuery(emptyc).addClass("empty-container empty-container-spacer key image-text-other design-css design-empty-css");
                    jQuery(emptyc).css("font-size", "14px");
                    var plusContainer = jQuery(".jq-plus-container.jq-plus-container-not-used").clone();
                    plusContainer.removeClass("jq-plus-container-not-used");
                    var spacer = jQuery(document.createElement("div"));
                    spacer.addClass("empty-spacer");
                    spacer.html("<center></center>");
                    plusContainer.find(".jq-plus-content").append(spacer);
                    jQuery(emptyc).append(plusContainer);
                    null == window.smartObj || "" == window.smartObj.command ? ctx.Page.Any.Add(selectedRowOrColumn, jQuery(emptyc), "", void 0, void 0, void 0, void 0) : ctx.Page.Any.Add(selectedRowOrColumn, jQuery(emptyc), "", void 0, void 0, !0, void 0);
                }
            };
            return SpacerJQ;
        }();
        Spacer.SpacerJQ = SpacerJQ;
    }(Spacer = exports.Spacer || (exports.Spacer = {}));
});

define("Controls/../../SiteManager_TS/Site/SiteJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var Site;
    !function(Site) {
        var SiteJQ = function() {
            function SiteJQ() {}
            SiteJQ.prototype.Init = function() {};
            SiteJQ.prototype.CreatePage = function(siteName, pageName) {
                var obj = {
                    siteName: siteName,
                    pageName: pageName
                }, createData = JSON.stringify(obj);
                jQuery.ajax({
                    type: "POST",
                    url: "/services/pageService.asmx/createPage",
                    data: createData,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SiteJQ.OnCreatePageSuccess,
                    error: SiteJQ.OnCreatePageError
                });
            };
            SiteJQ.OnCreatePageSuccess = function(data, status) {
                var site = new SiteJQ();
                site.GetPages(jQuery(".input-site-name-primary").val());
                jQuery(".control-page").hide();
                jQuery(".loading").hide();
            };
            SiteJQ.OnCreatePageError = function(request, status, error) {
                jQuery(".loading").hide();
            };
            SiteJQ.prototype.CreateSite = function(siteName) {
                var obj = {
                    siteName: siteName
                }, createData = JSON.stringify(obj);
                jQuery.ajax({
                    type: "POST",
                    url: "/services/pageService.asmx/createSite",
                    data: createData,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SiteJQ.OnCreateSiteSuccess,
                    error: SiteJQ.OnCreateSiteError
                });
            };
            SiteJQ.OnCreateSiteSuccess = function(data, status) {
                var site = new SiteJQ();
                site.GetSites();
                jQuery(".control-page").hide();
                jQuery(".loading").hide();
            };
            SiteJQ.OnCreateSiteError = function(request, status, error) {
                jQuery(".loading").hide();
            };
            SiteJQ.prototype.GetPages = function(siteName, success, error) {
                void 0 == success && (success = SiteJQ.OnGetPagesSuccess);
                void 0 == error && (error = SiteJQ.OnGetPagesError);
                var data = {
                    siteName: siteName
                }, pageData = JSON.stringify(data);
                jQuery.ajax({
                    type: "POST",
                    url: "/services/pageService.asmx/getPages",
                    data: pageData,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: success,
                    error: error
                });
            };
            SiteJQ.OnGetPagesSuccess = function(data, status) {
                jQuery(".loading").hide();
                jQuery("#nestable3").html("");
                var result = data.d, list = jQuery(".jq-pages-list.hide").clone(), item = jQuery(".jq-page-item.hide").clone(), rootlist = list.clone();
                rootlist.removeClass("hide");
                jQuery("#nestable3").append(rootlist);
                for (var i = 0; i < result.length; i++) {
                    var newitem = item.clone();
                    newitem.removeClass("hide");
                    newitem.attr("data-id", result[i].Id);
                    newitem.find(".jq-page-item-name").text(result[i].Name);
                    var a = jQuery(document.createElement("a")), link = result[i].Link;
                    link = link.replace("?", "&");
                    a.attr("href", "/shiv/designer.aspx?PageName=" + link + "&SiteName=" + jQuery(".input-site-name-primary").val());
                    a.addClass("white-link");
                    a.append("Open");
                    a.css("float", "right");
                    a.addClass("btn btn-primary btn-xs");
                    newitem.find(".jq-page-item-name").append(a);
                    rootlist.append(newitem);
                }
                for (var i = 0; i < result.length; i++) if ("" != result[i].Extra) {
                    if (0 == jQuery(".jq-page-item[data-id='" + result[i].Extra + "']").children("ol").length) {
                        var childrenList = list.clone();
                        childrenList.removeClass("hide");
                        jQuery(".jq-page-item[data-id='" + result[i].Extra + "']").append(childrenList);
                    }
                    jQuery(".jq-page-item[data-id='" + result[i].Extra + "']").children("ol").append(jQuery(".jq-page-item[data-id='" + result[i].Id + "']"));
                }
                $("#nestable3").nestable();
            };
            SiteJQ.OnGetPagesError = function(request, status, error) {
                jQuery(".loading").hide();
            };
            SiteJQ.prototype.GetSites = function() {
                jQuery.ajax({
                    type: "POST",
                    url: "/services/pageService.asmx/getSites",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SiteJQ.OnGetSitesSuccess,
                    error: SiteJQ.OnGetSitesError
                });
            };
            SiteJQ.OnGetSitesSuccess = function(data, status) {
                jQuery(".loading").hide();
                var result = data.d;
                jQuery(".site-manager-data").html("");
                for (var i = 0; i < result.length; i++) {
                    var sitedata = jQuery(".site-data.hide").clone();
                    sitedata.removeClass("hide");
                    sitedata.find(".site-name").html(result[i].Name);
                    var a = jQuery(document.createElement("a"));
                    a.attr("href", "/shiv/PageManager.aspx?SiteName=" + result[i].Name);
                    a.addClass("white-link");
                    a.append("Open");
                    sitedata.find(".open-site").append(a);
                    jQuery(".site-manager-data").append(sitedata);
                }
            };
            SiteJQ.OnGetSitesError = function(request, status, error) {
                jQuery(".loading").hide();
            };
            SiteJQ.prototype.AttachOpenEvent = function() {};
            SiteJQ.prototype.AttachCreateEvent = function() {};
            SiteJQ.prototype.AttachEditEvent = function() {};
            return SiteJQ;
        }();
        Site.SiteJQ = SiteJQ;
    }(Site = exports.Site || (exports.Site = {}));
});

define("error/errorjq", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var ErrorHandle;
    !function(ErrorHandle) {
        var ErrorJQ = function() {
            function ErrorJQ() {}
            ErrorJQ.prototype.HandleError = function(handle) {
                handle === !0 && (window.onerror = this.WindowHandleError);
            };
            ErrorJQ.prototype.WindowHandleError = function(err, url, line) {
                alert(err + "\n on page: " + url + "\n on line: " + line);
            };
            ErrorJQ.prototype.SetErrorClassName = function(errorClassName) {
                this.errorClassName = errorClassName;
            };
            ErrorJQ.prototype.NotifyHelp = function(helpmsg) {
                jQuery("#notify").clearQueue();
                jQuery("#notify").html("");
                jQuery("#notify").append(helpmsg);
                jQuery("#notify").css("display", "block");
                this.TriggerHideNotify();
            };
            ErrorJQ.prototype.Notify = function(error) {
                jQuery("#notify").clearQueue();
                jQuery("#notify").html(error);
                jQuery("#notify").css("display", "block");
                this.TriggerHideNotify();
            };
            ErrorJQ.prototype.TriggerHideNotify = function() {
                window.clearTimeout(ErrorJQ.interval);
                ErrorJQ.interval = window.setTimeout(this.TimeOutHandler, 1e4);
            };
            ErrorJQ.prototype.TimeOutHandler = function() {
                jQuery("#notify").css("display", "none");
                window.clearTimeout(ErrorJQ.interval);
            };
            ErrorJQ.prototype.AddErrorControl = function(element) {
                jQuery(element).addClass("error-" + this.errorClassName);
            };
            ErrorJQ.prototype.ActionFail = function(errorMessage) {
                jQuery(".error-" + this.errorClassName).css("border", "2px solid red");
                errorMessage = void 0 == errorMessage || "" == errorMessage ? "Action Failed" : "<div class='error-notify-block'>Action Failed </div><br/>" + errorMessage;
                jQuery(this.GetNotifyElement()).removeClass("success-notify-background");
                jQuery(this.GetNotifyElement()).addClass("error-notify-background");
                this.Notify(errorMessage);
            };
            ErrorJQ.prototype.ActionHelp = function(helpMessage, changeColor) {
                if (void 0 != helpMessage) {
                    var index = helpMessage.toLowerCase().indexOf("page loaded");
                    -1 != index && jQuery(".jq-loading").hide();
                }
                var helpContainer = jQuery(document.createElement("div"));
                void 0 != changeColor ? helpContainer.addClass("yellow-green-notify-background") : helpContainer.addClass("yellow-notify-background");
                helpContainer.html("");
                helpContainer.append(helpMessage);
                jQuery(this.GetNotifyElement()).removeClass("error-notify-background");
                jQuery(this.GetNotifyElement()).removeClass("success-notify-background");
                this.NotifyHelp(helpContainer);
            };
            ErrorJQ.prototype.ActionSuccess = function(successMessage) {
                jQuery(".error-" + this.errorClassName).css("border", "1px solid green");
                jQuery(".error-" + this.errorClassName).removeClass("error-" + this.errorClassName);
                (void 0 == successMessage || "" == successMessage) && (successMessage = "Action Success");
                jQuery(this.GetNotifyElement()).removeClass("error-notify-background");
                jQuery(this.GetNotifyElement()).addClass("success-notify-background");
                this.Notify(successMessage);
            };
            ErrorJQ.prototype.GetNotifyElement = function() {
                return jQuery("#notify");
            };
            ErrorJQ.prototype.LogMessage = function(message) {
                try {} catch (e) {}
            };
            ErrorJQ.prototype.Try = function(callback) {
                if ("function" == typeof callback) try {
                    callback();
                } catch (ex) {
                    alert(ex);
                    this.LogMessage(ex);
                } else this.LogMessage("method is not a function");
            };
            ErrorJQ.notifyId = "#notify";
            return ErrorJQ;
        }();
        ErrorHandle.ErrorJQ = ErrorJQ;
    }(ErrorHandle = exports.ErrorHandle || (exports.ErrorHandle = {}));
});

define("Controls/LinkJQ", [ "require", "exports", "../../SiteManager_TS/Site/SiteJQ", "../error/errorjq", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../Controls/ControlCommonJQ", "../Common/OperationJQ", "../Constants/ConstantsJQ" ], function(require, exports, impPage, impError, impWatch, impUndoManager, impCommonCode, impOperaction, impStatic) {
    "use strict";
    var Link, initOnceFlag = !1;
    !function(Link) {
        var LinkJQ = function() {
            function LinkJQ() {}
            LinkJQ.prototype.Init = function() {
                if (0 == initOnceFlag) {
                    initOnceFlag = !0;
                    this.AttachEvents();
                }
            };
            LinkJQ.LoadLinks = function() {
                var site = new impPage.Site.SiteJQ();
                site.GetPages(jQuery(".input-site-name").val(), LinkJQ.OnGetPagesSuccess, LinkJQ.OnGetPagesError);
            };
            LinkJQ.OnGetPagesSuccess = function(data, status) {
                jQuery(".jq-loading").hide();
                var result = data.d;
                jQuery(".insert-link-links").html("");
                for (var i = 0; i < result.length; i++) {
                    var select;
                    select = 0 == i ? "<option selected value='" + result[i].Name + "'>" + result[i].Name.replace(".html", "") + "</option>" : "<option value='" + result[i].Name + "'>" + result[i].Name.replace(".html", "") + "</option>";
                    jQuery(".insert-link-links").append(select);
                }
                jQuery(".insert-link-name").val(jQuery(".insert-link-links").find("option:selected").text());
                var previewlink = LinkJQ.CreateCurrentLink(!0);
                jQuery(".insert-link-preview").html(previewlink);
            };
            LinkJQ.OnGetPagesError = function(request, status, error) {
                jQuery(".jq-loading").hide();
                jQuery(".insert-link-links").html("");
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.ActionFail("Something went wrong<br>Try again later!");
            };
            LinkJQ.GenerateId = function() {
                return "NormalLink" + ++impStatic.Constants.StaticJQ.normalLinkId;
            };
            LinkJQ.prototype.AttachEvents = function() {
                jQuery("#insert-internet-link-url").on("change", function() {
                    LinkJQ.IsExternalUrl = !0;
                    jQuery("#insert-internet-link-name").val("Give Name");
                    var value;
                    value = jQuery("#insert-internet-link-url").val();
                    if (value.length > 0) for (;" " == value.charAt(0); ) value = value.substring(1);
                    if ("" != value) {
                        var i = value.indexOf("http://"), j = value.indexOf("https://"), k = value.indexOf("//");
                        0 != i && 0 != j && 0 != k && jQuery(this).val("//" + jQuery(this).val());
                    } else {
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionHelp("Please provide External Link Url.");
                    }
                    var previewlink = LinkJQ.CreateCurrentLink(!0, jQuery(this).val(), jQuery("#insert-internet-link-name").val());
                    jQuery(".insert-link-preview").html(previewlink);
                });
                jQuery("#insert-internet-link-name").on("change", function() {
                    LinkJQ.IsExternalUrl = !0;
                    if ("Give Name" != jQuery(this).val()) {
                        var previewlink = LinkJQ.CreateCurrentLink(!0, jQuery("#insert-internet-link-url").val(), jQuery(this).val());
                        jQuery(".insert-link-preview").html(previewlink);
                        var value = jQuery("#insert-internet-link-url").val();
                        if (value.length > 0) for (;" " == value.charAt(0); ) value = value.substring(1);
                        if ("" == value) {
                            var errorHandler = new impError.ErrorHandle.ErrorJQ();
                            errorHandler.ActionHelp("Please provide External Link Url.");
                        }
                    }
                });
                jQuery(".btn-style").on("click", function() {
                    jQuery(".btn-style").removeClass("btn-style-selected");
                    jQuery(this).addClass("btn-style-selected");
                    var previewlink;
                    previewlink = 1 == LinkJQ.IsExternalUrl ? LinkJQ.CreateCurrentLink(!0, jQuery("#insert-internet-link-url").val(), jQuery("#insert-internet-link-name").val()) : LinkJQ.CreateCurrentLink(!0);
                    jQuery(".insert-link-preview").html(previewlink);
                });
                jQuery(".action-button-insert-link").on("click", function() {
                    var linkToInsert;
                    linkToInsert = 1 == LinkJQ.IsExternalUrl ? LinkJQ.CreateCurrentLink(!1, jQuery("#insert-internet-link-url").val(), jQuery("#insert-internet-link-name").val()) : LinkJQ.CreateCurrentLink(!1);
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedElement) {
                        impOperaction.Operation.AfterOperationJQ.Execute();
                        selectedElement.append(linkToInsert);
                        var undo = new impUndoManager.Manager.UndoManager();
                        undo.BeforeOperation();
                        jQuery("page a").not(".jq-logout").unbind("click");
                        jQuery("page a").not(".jq-logout").on("click", function() {
                            impCommonCode.ControlCommon.Code.AnchorClicked = !0;
                        });
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                    }
                    jQuery("#control-insert-link").hide();
                });
                jQuery(".insert-link-name").on("change", function() {
                    LinkJQ.IsExternalUrl = !1;
                    LinkJQ.CreateCurrentLink(!0);
                    jQuery(".insert-link-preview").find("a").text(jQuery(this).val());
                });
                jQuery("#control-insert-link").on("change", ".insert-link-links", function() {
                    LinkJQ.IsExternalUrl = !1;
                    jQuery(".insert-link-name").val(jQuery(".insert-link-links").find("option:selected").text());
                    var previewlink = LinkJQ.CreateCurrentLink(!0);
                    jQuery(".insert-link-preview").html(previewlink);
                    jQuery("#insert-internet-link-name").val("");
                    jQuery("#insert-internet-link-url").val("");
                });
            };
            LinkJQ.CreateCurrentLink = function(blankTarget, url, name) {
                var link, id;
                0 == blankTarget && (id = LinkJQ.GenerateId());
                void 0 == url && (url = jQuery(".insert-link-links").find("option:selected").val());
                var btnStyle = jQuery(".btn-style-selected").attr("btn-style");
                void 0 == btnStyle && (btnStyle = " btn-default ");
                void 0 == name && (name = jQuery(".insert-link-name").val());
                link = 1 == blankTarget ? "<span style='display:inline-block;;float:none;' class='key jq-normal-link jq-site-link-container  btn " + btnStyle + "'><a contentEditable='true' target='_blank' class='jq-site-link jqte-editor' href='" + url + "?nocache=true'>" + name + "</a></span>" : "<span style='display:inline-block' class='key jq-normal-link jq-site-link-container  btn " + btnStyle + "'><a contentEditable='true' id='" + id + "' class='jq-site-link jqte-editor ' href='" + url + "?nocache=true'>" + name + "</a></span>";
                return link;
            };
            LinkJQ.Show = function() {
                jQuery("#control-insert-link").show();
                jQuery(".jq-loading").show();
                LinkJQ.LoadLinks();
            };
            LinkJQ.Close = function() {};
            LinkJQ.ProcessSelectNotify = function() {};
            return LinkJQ;
        }();
        Link.LinkJQ = LinkJQ;
    }(Link = exports.Link || (exports.Link = {}));
});

define("Controls/HtmlJQ", [ "require", "exports", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../Controls/ControlCommonJQ" ], function(require, exports, impWatch, impUndoManager, impCommonCode) {
    "use strict";
    var Html, initOnceFlag = !1;
    !function(Html) {
        var HtmlJQ = function() {
            function HtmlJQ() {}
            HtmlJQ.prototype.Init = function() {
                if (0 == initOnceFlag) {
                    initOnceFlag = !0;
                    this.AttachEvents();
                }
            };
            HtmlJQ.prototype.AttachEvents = function() {
                jQuery(".action-button-insert-html-clear").on("click", function() {
                    jQuery(".input-html").val("");
                });
                jQuery(".action-button-insert-html").on("click", function() {
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedElement) {
                        var html = jQuery(".input-html").val(), htmlObj = jQuery(document.createElement("div"));
                        htmlObj.css("float", "left");
                        htmlObj.addClass("key empty-container design-empty-css");
                        htmlObj.css("height", "100px");
                        htmlObj.append(jQuery.parseHTML(html, document, !0));
                        jQuery(htmlObj).html();
                        selectedElement.append(htmlObj);
                        var undo = new impUndoManager.Manager.UndoManager();
                        undo.BeforeOperation();
                        impCommonCode.ControlCommon.Code.DestroyResizable();
                        impCommonCode.ControlCommon.Code.Execute();
                    }
                    jQuery("#control-insert-html").hide();
                });
            };
            HtmlJQ.Show = function() {
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-insert-html").addClass("control-active");
                jQuery("#control-insert-html").show();
                jQuery(".input-html").val("");
            };
            HtmlJQ.Close = function() {};
            HtmlJQ.ProcessSelectNotify = function() {};
            return HtmlJQ;
        }();
        Html.HtmlJQ = HtmlJQ;
    }(Html = exports.Html || (exports.Html = {}));
});

define("Controls/MarginJQ", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../UndoManager/UndoManager" ], function(require, exports, impError, impWatch, impCommon, impUndoManager) {
    "use strict";
    var Margin, isBorderReady = !1, borderFirstTime = 0;
    !function(Margin) {
        var MarginJQ = function() {
            function MarginJQ() {}
            MarginJQ.prototype.Init = function() {
                MarginJQ.AttachMargin();
            };
            MarginJQ.AttachMargin = function() {
                jQuery(document).ready(function() {
                    if (0 == isBorderReady) {
                        isBorderReady = !0;
                        jQuery(".margin-advanced-show").on("click", function() {
                            jQuery(".jq-margin-advanced").fadeToggle(1);
                        });
                        jQuery(".control-margin-margin").spinner({
                            min: -1500,
                            max: 1500,
                            step: 1,
                            value: 0,
                            change: function(event, ui) {
                                0 == MarginJQ.isSelectProcessing && MarginJQ.OnChange(this);
                            },
                            spin: function(event, ui) {
                                0 == MarginJQ.isSelectProcessing && MarginJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == MarginJQ.isSelectProcessing && MarginJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            MarginJQ.OnChange = function($this) {
                MarginJQ.isSelectProcessing = !0;
                try {
                    if (0 != borderFirstTime) {
                        borderFirstTime = 1;
                        impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                    }
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedElement) {
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        if (selectedElement.hasClass("column")) errorHandler.ActionHelp("Cannot change margin for [Column] blocks"); else {
                            jQuery($this).hasClass("control-margin-all") && $($this).closest(".control-margin-controls").find(".control-margin-margin").not(".control-margin-all").spinner("value", jQuery($this).val());
                            var common = new impCommon.Common.CommonMethodsJQ(), left = $($this).closest(".control-margin-controls").find(".control-margin-left").spinner("value"), top = $($this).closest(".control-margin-controls").find(".control-margin-top").spinner("value"), right = $($this).closest(".control-margin-controls").find(".control-margin-right").spinner("value"), bottom = $($this).closest(".control-margin-controls").find(".control-margin-bottom").spinner("value");
                            void 0 != left && selectedElement.css("margin-left", left + "px");
                            void 0 != top && selectedElement.css("margin-top", top + "px");
                            void 0 != right && selectedElement.css("margin-right", right + "px");
                            void 0 != bottom && selectedElement.css("margin-bottom", bottom + "px");
                            if (0 == left && 0 == top && 0 == right && 0 == bottom) {
                                common.RemoveStyle(selectedElement, "margin-left");
                                common.RemoveStyle(selectedElement, "margin-top");
                                common.RemoveStyle(selectedElement, "margin-bottom");
                                common.RemoveStyle(selectedElement, "margin-right");
                                common.RemoveStyle(selectedElement, "margin");
                            }
                        }
                    }
                } catch (ex) {}
                MarginJQ.isSelectProcessing = !1;
            };
            MarginJQ.ProcessSelectedValues = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                MarginJQ.isSelectProcessing = !0;
                if (void 0 != selectedElement) {
                    var left = selectedElement.css("margin-left"), top = selectedElement.css("margin-top"), right = selectedElement.css("margin-right"), bottom = selectedElement.css("margin-bottom");
                    if (void 0 != left) {
                        left = left.replace("px", "");
                        jQuery(".control-margin-left").spinner("value", left);
                    }
                    if (void 0 != top) {
                        top = top.replace("px", "");
                        jQuery(".control-margin-top").spinner("value", top);
                    }
                    if (void 0 != right) {
                        right = right.replace("px", "");
                        jQuery(".control-margin-right").spinner("value", right);
                    }
                    if (void 0 != bottom) {
                        bottom = bottom.replace("px", "");
                        jQuery(".control-margin-bottom").spinner("value", bottom);
                    }
                    left == top && left == right && left == bottom && jQuery(".control-margin-all").spinner("value", left);
                }
                MarginJQ.isSelectProcessing = !1;
            };
            MarginJQ.ProcessSelectNotify = function() {
                MarginJQ.ProcessSelectedValues();
            };
            MarginJQ.controlId = ".control-margin";
            MarginJQ.isSelectProcessing = !1;
            return MarginJQ;
        }();
        Margin.MarginJQ = MarginJQ;
    }(Margin = exports.Margin || (exports.Margin = {}));
});

define("Controls/PaddingJQ", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../UndoManager/UndoManager" ], function(require, exports, impError, impWatch, impCommon, impUndoManager) {
    "use strict";
    var Padding, isBorderReady = !1, borderFirstTime = 0;
    !function(Padding) {
        var PaddingJQ = function() {
            function PaddingJQ() {}
            PaddingJQ.prototype.Init = function() {
                PaddingJQ.AttachPadding();
            };
            PaddingJQ.AttachPadding = function() {
                jQuery(document).ready(function() {
                    if (0 == isBorderReady) {
                        isBorderReady = !0;
                        jQuery(".padding-advanced-show").on("click", function() {
                            jQuery(".jq-padding-advanced").fadeToggle(1);
                        });
                        jQuery(".control-padding-padding").spinner({
                            min: 1,
                            max: 1500,
                            step: 1,
                            value: 0,
                            change: function(event, ui) {
                                0 == PaddingJQ.isSelectProcessing && PaddingJQ.OnChange(this);
                            },
                            spin: function(event, ui) {
                                0 == PaddingJQ.isSelectProcessing && PaddingJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == PaddingJQ.isSelectProcessing && PaddingJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            PaddingJQ.OnChange = function($this) {
                PaddingJQ.isSelectProcessing = !0;
                try {
                    if (0 != borderFirstTime) {
                        borderFirstTime = 1;
                        impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                    }
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedElement) {
                        new impError.ErrorHandle.ErrorJQ();
                        jQuery($this).hasClass("control-padding-all") && jQuery(".control-padding-padding").not(".control-padding-all").spinner("value", jQuery($this).val());
                        var common = new impCommon.Common.CommonMethodsJQ(), left = $(".control-padding-left").spinner("value"), top = $(".control-padding-top").spinner("value"), right = $(".control-padding-right").spinner("value"), bottom = $(".control-padding-bottom").spinner("value");
                        void 0 != left && selectedElement.css("padding-left", left + "px");
                        void 0 != top && selectedElement.css("padding-top", top + "px");
                        void 0 != right && selectedElement.css("padding-right", right + "px");
                        void 0 != bottom && selectedElement.css("padding-bottom", bottom + "px");
                        if (0 == left && 0 == top && 0 == right && 0 == bottom) {
                            common.RemoveStyle(selectedElement, "padding-left");
                            common.RemoveStyle(selectedElement, "padding-top");
                            common.RemoveStyle(selectedElement, "padding-bottom");
                            common.RemoveStyle(selectedElement, "padding-right");
                            common.RemoveStyle(selectedElement, "padding");
                        }
                    }
                } catch (ex) {}
                PaddingJQ.isSelectProcessing = !1;
            };
            PaddingJQ.ProcessSelectedValues = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                PaddingJQ.isSelectProcessing = !0;
                if (void 0 != selectedElement) {
                    var left = selectedElement.css("padding-left"), top = selectedElement.css("padding-top"), right = selectedElement.css("padding-right"), bottom = selectedElement.css("padding-bottom");
                    if (void 0 != left) {
                        left = left.replace("px", "");
                        jQuery(".control-padding-left").spinner("value", left);
                    }
                    if (void 0 != top) {
                        top = top.replace("px", "");
                        jQuery(".control-padding-top").spinner("value", top);
                    }
                    if (void 0 != right) {
                        right = right.replace("px", "");
                        jQuery(".control-padding-right").spinner("value", right);
                    }
                    if (void 0 != bottom) {
                        bottom = bottom.replace("px", "");
                        jQuery(".control-padding-bottom").spinner("value", bottom);
                    }
                    left == top && left == right && left == bottom && jQuery(".control-padding-all").spinner("value", left);
                }
                PaddingJQ.isSelectProcessing = !1;
            };
            PaddingJQ.ProcessSelectNotify = function() {
                PaddingJQ.ProcessSelectedValues();
            };
            PaddingJQ.controlId = ".control-padding";
            PaddingJQ.isSelectProcessing = !1;
            return PaddingJQ;
        }();
        Padding.PaddingJQ = PaddingJQ;
    }(Padding = exports.Padding || (exports.Padding = {}));
});

define("Controls/FrontBackJQ", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager" ], function(require, exports, impError, impWatch, impUndoManager) {
    "use strict";
    var FrontBack, isFrontBackReady = !1, borderFirstTime = 0;
    !function(FrontBack) {
        var FrontBackJQ = function() {
            function FrontBackJQ() {}
            FrontBackJQ.prototype.Init = function() {
                FrontBackJQ.AttachFrontBack();
            };
            FrontBackJQ.AttachFrontBack = function() {
                jQuery(document).ready(function() {
                    if (0 == isFrontBackReady) {
                        isFrontBackReady = !0;
                        jQuery(".control-z-zindex").slider({
                            min: 1,
                            max: 500,
                            step: 1,
                            value: 0,
                            change: function(event, ui) {
                                0 == FrontBackJQ.isSelectProcessing && FrontBackJQ.OnChange(this);
                            },
                            spin: function(event, ui) {
                                0 == FrontBackJQ.isSelectProcessing && FrontBackJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == FrontBackJQ.isSelectProcessing && FrontBackJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            FrontBackJQ.OnChange = function($this) {
                FrontBackJQ.isSelectProcessing = !0;
                try {
                    if (0 != borderFirstTime) {
                        borderFirstTime = 1;
                        impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                    }
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedElement) {
                        new impError.ErrorHandle.ErrorJQ();
                        if (selectedElement.hasClass("image-text-other")) {
                            var zIndex = jQuery(".control-z-zindex").slider("value");
                            selectedElement.css("z-index", zIndex);
                        }
                    }
                } catch (ex) {}
                FrontBackJQ.isSelectProcessing = !1;
            };
            FrontBackJQ.ProcessSelectedValues = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                FrontBackJQ.isSelectProcessing = !0;
                if (void 0 != selectedElement && selectedElement.hasClass("image-text-other")) {
                    var zindex = selectedElement.css("z-index");
                    jQuery(".control-z-zindex").slider("value", zindex);
                }
                FrontBackJQ.isSelectProcessing = !1;
            };
            FrontBackJQ.ProcessSelectNotify = function() {
                FrontBackJQ.ProcessSelectedValues();
            };
            FrontBackJQ.isSelectProcessing = !1;
            return FrontBackJQ;
        }();
        FrontBack.FrontBackJQ = FrontBackJQ;
    }(FrontBack = exports.FrontBack || (exports.FrontBack = {}));
});

define("Controls/OpacityJQ", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager" ], function(require, exports, impError, impWatch, impUndoManager) {
    "use strict";
    var Opacity, isOpacityReady = !1, borderFirstTime = 0;
    !function(Opacity) {
        var OpacityJQ = function() {
            function OpacityJQ() {}
            OpacityJQ.prototype.Init = function() {
                OpacityJQ.AttachOpacity();
            };
            OpacityJQ.AttachOpacity = function() {
                jQuery(document).ready(function() {
                    if (0 == isOpacityReady) {
                        isOpacityReady = !0;
                        jQuery(".control-o-opacity").slider({
                            min: 0,
                            max: 1,
                            step: .1,
                            value: 1,
                            change: function(event, ui) {
                                0 == OpacityJQ.isSelectProcessing && OpacityJQ.OnChange(this);
                            },
                            slide: function(event, ui) {
                                0 == OpacityJQ.isSelectProcessing && OpacityJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == OpacityJQ.isSelectProcessing && OpacityJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            OpacityJQ.OnChange = function($this) {
                OpacityJQ.isSelectProcessing = !0;
                try {
                    if (0 != borderFirstTime) {
                        borderFirstTime = 1;
                        impWatch.Watch.MouseJQ.RemoveAndResetRemovableRow();
                    }
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedElement) {
                        var opacity = (new impError.ErrorHandle.ErrorJQ(), jQuery(".control-o-opacity").slider("value"));
                        selectedElement.css("opacity", opacity);
                    }
                } catch (ex) {}
                OpacityJQ.isSelectProcessing = !1;
            };
            OpacityJQ.ProcessSelectedValues = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                OpacityJQ.isSelectProcessing = !0;
                if (void 0 != selectedElement) {
                    var opacity = selectedElement.css("opacity");
                    jQuery(".control-o-opacity").slider("value", opacity);
                }
                OpacityJQ.isSelectProcessing = !1;
            };
            OpacityJQ.ProcessSelectNotify = function() {
                OpacityJQ.ProcessSelectedValues();
            };
            OpacityJQ.isSelectProcessing = !1;
            return OpacityJQ;
        }();
        Opacity.OpacityJQ = OpacityJQ;
    }(Opacity = exports.Opacity || (exports.Opacity = {}));
});

define("Controls/BorderShadow", [ "require", "exports", "../Error/ErrorJQ", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../UndoManager/UndoManager" ], function(require, exports, impError, impWatch, impCommon, impUndoManager) {
    "use strict";
    var BorderShadow, isBorderReady = !1;
    !function(BorderShadow) {
        var BorderShadowJQ = function() {
            function BorderShadowJQ() {}
            BorderShadowJQ.prototype.Init = function() {
                BorderShadowJQ.AttachBorder();
            };
            BorderShadowJQ.AttachBorder = function() {
                jQuery(document).ready(function() {
                    if (0 == isBorderReady) {
                        isBorderReady = !0;
                        jQuery(".b-s-remove").on("click", function() {
                            var cm = new impCommon.Common.CommonMethodsJQ();
                            jQuery(".control-b-s").spinner("value", 0);
                            jQuery(".b-s-color").val("000000").keyup();
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            cm.RemoveStyle(selectedElement, "box-shadow");
                            var undo = new impUndoManager.Manager.UndoManager();
                            undo.BeforeOperation();
                        });
                        jQuery(".b-s-glow").on("click", function() {
                            jQuery(".control-b-s").spinner("value", 0);
                            jQuery(".control-b-s-blur").spinner("value", 35);
                            jQuery(".b-s-color").val("0000FF").keyup();
                            var undo = new impUndoManager.Manager.UndoManager();
                            undo.BeforeOperation();
                        });
                        jQuery(".b-s-color").colorpicker();
                        jQuery(".b-s-colorr").trigger("keyup");
                        jQuery(".b-s-color").on("change", function() {
                            BorderShadowJQ.OnChange(this);
                        });
                        jQuery(".control-b-s").spinner({
                            min: -800,
                            max: 800,
                            step: 1,
                            value: 1,
                            change: function(event, ui) {
                                0 == BorderShadowJQ.isSelectProcessing && BorderShadowJQ.OnChange(this);
                            },
                            spin: function(event, ui) {
                                0 == BorderShadowJQ.isSelectProcessing && BorderShadowJQ.OnChange(this);
                            },
                            stop: function(event, ui) {
                                0 == BorderShadowJQ.isSelectProcessing && BorderShadowJQ.OnChange(this);
                                var undo = new impUndoManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            BorderShadowJQ.OnChange = function($this) {
                BorderShadowJQ.isSelectProcessing = !0;
                try {
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedElement) {
                        var h = (new impError.ErrorHandle.ErrorJQ(), jQuery(".control-b-s-h").spinner("value")), v = jQuery(".control-b-s-v").spinner("value"), blur = jQuery(".control-b-s-blur").spinner("value"), color = jQuery(".b-s-color").val();
                        if ("" == color) color = "#000000"; else {
                            color = color.replace("#", "");
                            color = "#" + color;
                        }
                        var borderShadow = h + "px " + v + "px " + blur + "px " + color;
                        selectedElement.css("box-shadow", borderShadow);
                    }
                } catch (ex) {}
                BorderShadowJQ.isSelectProcessing = !1;
            };
            BorderShadowJQ.ProcessSelectedValues = function() {
                impWatch.Watch.MouseJQ.selectedElement;
            };
            BorderShadowJQ.ProcessSelectNotify = function() {
                BorderShadowJQ.ProcessSelectedValues();
            };
            BorderShadowJQ.i = 0;
            BorderShadowJQ.isSelectProcessing = !1;
            return BorderShadowJQ;
        }();
        BorderShadow.BorderShadowJQ = BorderShadowJQ;
    }(BorderShadow = exports.BorderShadow || (exports.BorderShadow = {}));
});

define("ContextMenu/Contextmenujq", [ "require", "exports", "../Watch/WatchMouseJQ", "../Controls/ControlsJQ", "../Watch/CopyPasteJQ", "../Controls/ImageJQ", "../Controls/BorderJQ", "../Controls/ColorJQ", "../Controls/TextJQ", "../SmartMenu/SmartMenuJQ", "../Controls/Menujq", "../Controls/BIjq", "../Controls/SpacerJQ", "../Controls/LinkJQ", "../Controls/HtmlJQ", "../Controls/MarginJQ", "../Controls/PaddingJQ", "../Controls/FrontBackJQ", "../Controls/OpacityJQ", "../Controls/BorderShadow" ], function(require, exports, impWatch, impAddRowControl, impCopy, impInsertImage, impBorder, impColor, impText, impHeightWidth, impMenuControl, impBi, impSpacer, impLink, impHtml, impMargin, impPadding, impFrontBack, impOpacity, impBorderShadow) {
    "use strict";
    var ContextMenu, G_isAttachedContextMenu = !1, CTX_MENU_DISABLED_CLASS = "ctx-menu-disabled", ctxMenuIsReady = !1;
    !function(ContextMenu) {
        var ContextMenuJQ = function() {
            function ContextMenuJQ(extra) {
                this.controlId = "#contextMenu";
            }
            ContextMenuJQ.prototype.Init = function() {
                this.MainEvents();
            };
            ContextMenuJQ.ContextMenuBinding = function() {
                jQuery(document).on("click", function(e) {
                    var contextMenu = new ContextMenuJQ();
                    contextMenu.DetectContextMenu();
                });
                jQuery(document).bind("contextmenu", function(e) {
                    impWatch.Watch.MouseJQ.ProcessClick(e);
                    window.setTimeout(function() {
                        try {
                            impWatch.Watch.MouseJQ.nearestElement = jQuery("#nononononelement");
                            var x = e.clientX, y = e.clientY + $(document).scrollTop();
                            jQuery(".nearest-element").removeClass("nearest-element");
                            var column = impWatch.Watch.MouseJQ.selectedElement;
                            impWatch.Watch.MouseJQ.selectedElement.hasClass("image-text-other") && (column = impWatch.Watch.MouseJQ.selectedElement.closest(".column"));
                            if (column.hasClass("column")) {
                                var $elements = impWatch.Watch.MouseJQ.selectedElement.find(".image-text-other"), nearestLeftArray = [], nearestTopArray = [];
                                if ($elements.length > 0) {
                                    $elements.each(function(index, _this) {
                                        var $this = $(_this), top = parseFloat($this.attr("top")), bottom = parseFloat($this.attr("bottom")), left = parseFloat($this.attr("left"));
                                        if (y >= top && bottom >= y && x >= left) {
                                            nearestLeftArray.push(left);
                                            nearestTopArray.push(top);
                                        }
                                    });
                                    var nearestLeft = 0, nearestTop = 0;
                                    nearestLeftArray.length > 0 && (nearestLeft = Math.max.apply(Math, nearestLeftArray));
                                    nearestTopArray.length > 0 && (nearestTop = Math.max.apply(Math, nearestTopArray));
                                    column.find(".image-text-other[left='" + nearestLeft + "'][top='" + nearestTop + "']").addClass("nearest-element");
                                    impWatch.Watch.MouseJQ.nearestElement = jQuery(".nearest-element").first();
                                }
                            }
                        } catch (ex) {}
                    }, 5);
                    e.preventDefault();
                    var contextMenu = new ContextMenuJQ();
                    contextMenu.DetectContextMenu();
                    var pageY = e.clientY;
                    pageY >= 350 && (pageY -= jQuery("#contextMenu").height());
                    var pageX = e.clientX;
                    pageX > jQuery(document).width() - 200 && (pageX -= 150);
                    jQuery(contextMenu.controlId).css("left", pageX + "px");
                    jQuery(contextMenu.controlId).css("top", pageY + "px");
                    jQuery(contextMenu.controlId).fadeIn(500);
                    e.cancelBubble = !1;
                });
            };
            ContextMenuJQ.prototype.DetectContextMenu = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selectedElement) {
                    jQuery(".ctx-menu-add-row").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-cut").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-copy").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-paste").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-text").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-image").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-youtube").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-html").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-css").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-menu").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-empty-space").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-link").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-object").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-delete-element").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    selectedElement.hasClass("root-elements") && jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    if (selectedElement.hasClass("jqRootRow")) {
                        jQuery(".ctx-menu-cut").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-copy").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-paste").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    }
                    if (selectedElement.hasClass("column")) {
                        jQuery(".ctx-menu-paste").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert-image").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    }
                    if (selectedElement.hasClass("image-text-other")) {
                        jQuery(".ctx-menu-cut").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-copy").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-paste").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert-image").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    }
                    if (selectedElement.hasClass("page")) {
                        jQuery(".ctx-menu-add-row").parent().addClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-height-width").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    }
                }
            };
            ContextMenuJQ.AttachDeleteElement = function() {
                jQuery(".li.ctx-menu-delete-element").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.DeleteElement();
                });
            };
            ContextMenuJQ.AttachInsertLinkContainer = function() {
                jQuery(".li.ctx-menu-insert-link-container").on("click", function() {
                    window.smartObj = null;
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || impCopy.CopyPaste.CopyPasteJQ.CreateLinkContainer();
                });
            };
            ContextMenuJQ.AttachInsertLink = function() {
                new impLink.Link.LinkJQ().Init();
                jQuery(".ctx-menu-insert-link").on("click", function() {
                    window.smartObj = null;
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowControlInsertLink();
                        impLink.Link.LinkJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachInsertHTML = function() {
                new impHtml.Html.HtmlJQ().Init();
                jQuery(".ctx-menu-insert-html").on("click", function() {
                    window.smartObj = null;
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.ShowControlInsertHTML();
                });
            };
            ContextMenuJQ.AttachInsertText = function() {
                jQuery(".li.smart-menu-insert-text").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("Sample text to edit");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".li.ctx-menu-insert-text").on("click", function() {
                    window.smartObj = null;
                    impText.Text.TextJQ.InsertTextBlock("Sample text to edit");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-normal-text").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock(" Sample text to edit");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-1").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h1> Heading1 to edit</h1>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-2").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h2> Heading2 to edit</h2>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-3").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h3> Heading3 to edit</h3>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-4").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h4> Heading4 to edit</h4>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-5").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h5> Heading5 to edit</h5>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
            };
            ContextMenuJQ.AttachControlPageClose = function() {
                jQuery(".control-templates").find(".close-button").on("click", function() {
                    jQuery(".control-page").removeClass("control-active");
                    ContextMenuJQ.ShowProperties();
                });
                jQuery(".control-page").find(".close-button").on("click", function() {
                    jQuery(".control-page").removeClass("control-active");
                    ContextMenuJQ.ShowProperties();
                    jQuery(".internet-bi-image-url").val("");
                    jQuery(".internet-image-url").val("");
                });
            };
            ContextMenuJQ.ShowProperties = function() {
                jQuery(".jq-properties-all").hasClass("forced-hide") || jQuery(".jq-properties-all").show();
            };
            ContextMenuJQ.ControlPageHide = function() {
                jQuery(".control-page").hide();
                jQuery(".control-page").attr("style", "");
                jQuery(".control-page").css("display", "none");
                jQuery(".control-page").removeClass("control-active");
                if ("block" == jQuery(".jq-properties-all").css("display")) {
                    jQuery(".jq-properties-all").addClass("normal-hide");
                    jQuery(".jq-properties-all").hide();
                } else jQuery(".jq-properties-all").hasClass("forced-hide") || jQuery(".jq-properties-all").show();
            };
            ContextMenuJQ.ShowControlInsertLink = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-insert-link").addClass("control-active");
                impLink.Link.LinkJQ.Show();
            };
            ContextMenuJQ.ShowControlInsertHTML = function() {
                ContextMenuJQ.ControlPageHide();
                impHtml.Html.HtmlJQ.Show();
            };
            ContextMenuJQ.ShowControlInsertText = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".editor").show();
                jQuery(".jqte-editor, .column").removeClass("current-editor-scope");
                jQuery(this).find(".jqte-editor").addClass("current-editor-scope");
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-insert-text").addClass("control-active");
                jQuery("#control-insert-text").show();
                jQuery("#control-insert-text").trigger("cust_loaded");
            };
            ContextMenuJQ.ShowControlAddRow = function() {
                ContextMenuJQ.ControlPageHide();
                var controlId = impAddRowControl.Page.AddRowJQ.pageId;
                jQuery(".control-page").removeClass("control-active");
                jQuery(controlId).addClass("control-active");
                jQuery(controlId).show();
                jQuery(controlId).trigger("cust_loaded");
            };
            ContextMenuJQ.ShowMenu = function() {
                new impMenuControl.Menu.MenuJQ().Init();
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery(".control-menu").addClass("control-active");
                jQuery(".control-menu").show();
                impMenuControl.Menu.MenuJQ.ProcessShow();
            };
            ContextMenuJQ.InsertImage = function() {
                ContextMenuJQ.ControlPageHide();
                var controlId = impInsertImage.Image.SelfJQ.controlId;
                jQuery(".control-page").removeClass("control-active");
                jQuery(controlId).addClass("control-active");
                jQuery(".action-button-insert-image").show();
                jQuery(".action-button-change-image").hide();
                jQuery(controlId).show();
                jQuery(controlId).trigger("custom_loaded");
            };
            ContextMenuJQ.CopyElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Copy();
            };
            ContextMenuJQ.DeleteElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Delete();
            };
            ContextMenuJQ.CutElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Cut();
            };
            ContextMenuJQ.PasteElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Paste();
            };
            ContextMenuJQ.PasteClipBorad = function() {
                jQuery(".jq-clipboard").html("");
                jQuery("#control-insert-clipboard").show();
            };
            ContextMenuJQ.ShowControlHeightWidth = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-height-width").addClass("control-active");
                jQuery("#control-height-width").show();
            };
            ContextMenuJQ.ShowBorderControl = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-border").addClass("control-active");
                jQuery("#control-border").show();
            };
            ContextMenuJQ.ShowMarginControl = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-margin").addClass("control-active");
                jQuery("#control-margin").show();
            };
            ContextMenuJQ.ShowPaddingControl = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-padding").addClass("control-active");
                jQuery("#control-padding").show();
            };
            ContextMenuJQ.ShowOpacity = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-opacity").addClass("control-active");
                jQuery("#control-opacity").show();
            };
            ContextMenuJQ.ShowZindex = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-zindex").addClass("control-active");
                jQuery("#control-zindex").show();
            };
            ContextMenuJQ.ShowBS = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-border-shadow").addClass("control-active");
                jQuery("#control-border-shadow").show();
            };
            ContextMenuJQ.ShowColor = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-color").addClass("control-active");
                jQuery("#control-color").show();
            };
            ContextMenuJQ.ShowBackgroundImage = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-bi").addClass("control-active");
                jQuery("#control-bi").show();
            };
            ContextMenuJQ.AttachAddRow = function() {
                jQuery(".li.ctx-menu-add-row").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowControlAddRow();
                        impAddRowControl.Page.AddRowJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachHeightWidth = function() {
                jQuery(".li.ctx-menu-height-width").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowControlHeightWidth();
                        impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachBorder = function() {
                new impBorder.Border.BorderJQ().Init();
                jQuery(".li.ctx-menu-border").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowBorderControl();
                        impBorder.Border.BorderJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachMargin = function() {
                new impMargin.Margin.MarginJQ().Init();
                jQuery(".li.ctx-menu-margin").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowMarginControl();
                        impMargin.Margin.MarginJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachPadding = function() {
                new impPadding.Padding.PaddingJQ().Init();
                jQuery(".li.ctx-menu-padding").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowPaddingControl();
                        impPadding.Padding.PaddingJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachOpacity = function() {
                new impOpacity.Opacity.OpacityJQ().Init();
                jQuery(".li.ctx-menu-opacity").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowOpacity();
                        impOpacity.Opacity.OpacityJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachZindex = function() {
                new impFrontBack.FrontBack.FrontBackJQ().Init();
                jQuery(".li.ctx-menu-z-index").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowZindex();
                        impFrontBack.FrontBack.FrontBackJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachBorderShadow = function() {
                new impBorderShadow.BorderShadow.BorderShadowJQ().Init();
                jQuery(".li.ctx-menu-border-shadow").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowBS();
                        impBorderShadow.BorderShadow.BorderShadowJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachCopy = function() {
                jQuery(".li.ctx-menu-copy").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.CopyElement();
                });
            };
            ContextMenuJQ.AttachCut = function() {
                jQuery(".li.ctx-menu-cut").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.CutElement();
                });
            };
            ContextMenuJQ.AttachPaste = function() {
                jQuery(".li.ctx-menu-paste").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.PasteElement();
                });
            };
            ContextMenuJQ.AttachPasteClipBorad = function() {
                jQuery(".li.ctx-menu-paste-clipborad").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.PasteClipBorad();
                });
            };
            ContextMenuJQ.AttachSpacer = function() {
                jQuery(".smart-menu-insert-empty-space").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || impSpacer.Spacer.SpacerJQ.InsertSpacer();
                });
                jQuery(".ctx-menu-insert-empty-space").on("click", function() {
                    window.smartObj = null;
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || impSpacer.Spacer.SpacerJQ.InsertSpacer();
                });
            };
            ContextMenuJQ.AttachInsertImage = function() {
                new impInsertImage.Image.SelfJQ().Init();
                jQuery(".li.smart-menu-insert-image").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.InsertImage();
                        impInsertImage.Image.SelfJQ.ProcessSelectNotify();
                    }
                });
                jQuery(".li.ctx-menu-insert-image").on("click", function() {
                    window.smartObj = null;
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.InsertImage();
                        impInsertImage.Image.SelfJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachBackgroundImage = function() {
                new impBi.BI.BIJQ().Init();
                jQuery(".li.ctx-menu-background-image").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowBackgroundImage();
                        impBi.BI.BIJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachInsertMenu = function() {
                jQuery(".li.ctx-menu-insert-menu").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowMenu();
                        impMenuControl.Menu.MenuJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachColor = function() {
                new impColor.Color.ColorJQ().Init();
                jQuery(".li.ctx-menu-color").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowColor();
                        impColor.Color.ColorJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.ContextInnerMenuShowHide = function() {
                jQuery("#contextMenuitems").find(".li").on("mouseenter", function(e) {
                    var left = 147;
                    e.pageX > $(document).width() - 200 && (left = -150);
                    jQuery(this).parent().find(".innerListContainer").first().css("left", left + "px");
                    jQuery(this).parent().find(".innerListContainer").first().css("display", "block");
                });
                jQuery("#contextMenuitems").find("li").on("mouseleave", function(e) {
                    jQuery(this).find(".innerListContainer").first().css("display", "none");
                });
            };
            ContextMenuJQ.LiClick = function() {
                jQuery("#contextMenuitems > li").on("click", function() {});
            };
            ContextMenuJQ.prototype.MainEvents = function() {
                jQuery(document).ready(function() {
                    if (0 == ctxMenuIsReady) {
                        ctxMenuIsReady = !0;
                        jQuery(document).on("click", function() {
                            jQuery("#contextMenu").hide(500);
                            jQuery("#smInsertNextPrev").hide(500);
                        });
                        if (0 == G_isAttachedContextMenu) {
                            G_isAttachedContextMenu = !0;
                            ContextMenuJQ.ContextMenuBinding();
                            ContextMenuJQ.LiClick();
                            ContextMenuJQ.ContextInnerMenuShowHide();
                            ContextMenuJQ.AttachInsertLinkContainer();
                            ContextMenuJQ.AttachInsertLink();
                            ContextMenuJQ.AttachInsertHTML();
                            ContextMenuJQ.AttachInsertText();
                            ContextMenuJQ.AttachAddRow();
                            ContextMenuJQ.AttachDeleteElement();
                            ContextMenuJQ.AttachHeightWidth();
                            ContextMenuJQ.AttachCopy();
                            ContextMenuJQ.AttachPaste();
                            ContextMenuJQ.AttachPasteClipBorad();
                            ContextMenuJQ.AttachCut();
                            ContextMenuJQ.AttachInsertImage();
                            ContextMenuJQ.AttachSpacer();
                            ContextMenuJQ.AttachBorder();
                            ContextMenuJQ.AttachMargin();
                            ContextMenuJQ.AttachZindex();
                            ContextMenuJQ.AttachBorderShadow();
                            ContextMenuJQ.AttachOpacity();
                            ContextMenuJQ.AttachPadding();
                            ContextMenuJQ.AttachColor();
                            ContextMenuJQ.AttachInsertMenu();
                            ContextMenuJQ.AttachBackgroundImage();
                            ContextMenuJQ.AttachControlPageClose();
                        }
                    }
                });
            };
            return ContextMenuJQ;
        }();
        ContextMenu.ContextMenuJQ = ContextMenuJQ;
    }(ContextMenu = exports.ContextMenu || (exports.ContextMenu = {}));
});

define("controls/bijq", [ "require", "exports", "../Watch/WatchMouseJQ", "../UndoManager/UndoManager", "../controls/imagejq" ], function(require, exports, impWatch, impUnodManager, impImage) {
    "use strict";
    var BI, isBIJQReady = !1;
    !function(BI) {
        var BIJQ = function() {
            function BIJQ() {}
            BIJQ.prototype.Init = function() {
                jQuery(document).ready(function() {
                    if (0 == isBIJQReady) {
                        isBIJQReady = !0;
                        jQuery(".smart-menu-bi-control").spinner({
                            min: 0,
                            max: 2e3,
                            step: 1,
                            change: function(event, ui) {},
                            spin: function(event, ui) {
                                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                                if (void 0 != selectedElement) {
                                    var height = jQuery(".smart-menu-bi-height").spinner("value"), width = jQuery(".smart-menu-bi-width").spinner("value");
                                    selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                }
                            },
                            stop: function(event, ui) {
                                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                                if (void 0 != selectedElement) {
                                    var height = jQuery(".smart-menu-bi-height").spinner("value"), width = jQuery(".smart-menu-bi-width").spinner("value");
                                    selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                    var undo = new impUnodManager.Manager.UndoManager();
                                    undo.BeforeOperation();
                                }
                            }
                        });
                        jQuery(".bi-browse").on("click", function() {
                            impImage.Image.SelfJQ.GetImages();
                            jQuery("#control-image-bi-library").show();
                        });
                        jQuery(".make-100").on("click", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                jQuery(".ddn-bi-pixel-type").val("%");
                                var height = 100;
                                jQuery(".smart-menu-bi-height").spinner("value", height);
                                var width = 100;
                                jQuery(".smart-menu-bi-width").spinner("value", width);
                                selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".ddn-bi-pixel-type").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                var height = jQuery(".smart-menu-bi-height").spinner("value"), width = jQuery(".smart-menu-bi-width").spinner("value");
                                selectedElement.css("background-size", width + jQuery(".ddn-bi-pixel-type").val() + " " + height + jQuery(".ddn-bi-pixel-type").val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".action-button-insert-bi-image").on("click", function() {
                            var src = jQuery(".image-library-bi-select").first().attr("src");
                            jQuery(".bi-selected-image").val(src).change();
                            jQuery(".image-library-image").removeClass("image-library-bi-select");
                            jQuery("#control-image-bi-library").hide();
                        });
                        jQuery(".control-bi-controls .bi-selected-image").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement, applyToBody = jQuery(".bi-body").is(":checked");
                            if (1 == applyToBody) {
                                jQuery("page").css("background-image", "url('" + jQuery(this).val() + "')");
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            } else if (void 0 != selectedElement) {
                                selectedElement.css("background-image", "url('" + jQuery(this).val() + "')");
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .internet-bi-image-url").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-image", "url(" + jQuery(this).val() + ")");
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .ddn-bi-repeat").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-repeat", jQuery(this).val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .ddn-bi-attachment").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-attachment", jQuery(this).val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                        jQuery(".control-bi-controls .ddn-bi-position").on("change", function() {
                            var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                            if (void 0 != selectedElement) {
                                selectedElement.css("background-position", jQuery(this).val());
                                var undo = new impUnodManager.Manager.UndoManager();
                                undo.BeforeOperation();
                            }
                        });
                    }
                });
            };
            BIJQ.ProcessSelectNotify = function() {
                BIJQ.isSelectProcessing = !0;
                try {
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    if (void 0 != selectedElement) {
                        var bi = selectedElement.css("background-image").replace("url(", "").replace(")", "");
                        jQuery(".bi-selected-image").val(bi);
                        var repeat = selectedElement.css("background-repeat");
                        jQuery(".ddn-bi-repeat").val(repeat);
                        var attachment = selectedElement.css("background-attachment");
                        jQuery(".ddn-bi-attachment").val(attachment);
                        var position = selectedElement.css("background-position");
                        jQuery(".ddn-bi-position").val(position);
                        var backgroundSize = selectedElement.css("background-size");
                        if (void 0 != backgroundSize) {
                            var wh = backgroundSize.split(" ");
                            if (wh.length >= 2) {
                                var width = wh[0], heigth = wh[1];
                                jQuery(".ddn-bi-pixel-type").val("px");
                                width = width.replace("px", "");
                                heigth = heigth.replace("px", "");
                                jQuery(".smart-menu-bi-height").spinner("value", heigth);
                                jQuery(".smart-menu-bi-width").spinner("value", width);
                            } else {
                                jQuery(".smart-menu-bi-height").spinner("value", 0);
                                jQuery(".smart-menu-bi-width").spinner("value", 0);
                            }
                        }
                    }
                } catch (ex) {}
                BIJQ.isSelectProcessing = !1;
            };
            BIJQ.isSelectProcessing = !1;
            return BIJQ;
        }();
        BI.BIJQ = BIJQ;
    }(BI = exports.BI || (exports.BI = {}));
});

define("Watch/WatchMouseJQ", [ "require", "exports", "../Common/CommonMethodsJQ", "../Controls/ControlsJQ", "../Controls/TextJQ", "../Controls/ImageJQ", "../Controls/FontJQ", "../Controls/BorderJQ", "../Controls/ColorJQ", "../SmartMenu/SmartMenuJQ", "../Error/ErrorJQ", "../ContextMenu/Contextmenujq", "../controls/bijq", "../JQte/OnInsert", "../MalFormed/MalFormedJQ", "../Controls/ControlCommonJQ", "../Controls/MarginJQ", "../Controls/PaddingJQ", "../Controls/FrontBackJQ", "../Watch/CopyPasteJQ", "../Controls/OpacityJQ" ], function(require, exports, impCommon, impAddRow, impText, impImage, impFont, impBorder, impColor, impHeightWidth, impError, impCtxMenu, impBi, impOnInsert, impmal, impCommonCode, impMargin, impPadding, impFrontBack, impCopy, impOpacity) {
    "use strict";
    var Watch, G_isAttachedWatch = !1;
    !function(Watch) {
        var MouseJQ = function() {
            function MouseJQ() {}
            MouseJQ.RemoveAndResetRemovableRow = function() {
                if (jQuery(".removable-row").length > 0) {
                    jQuery(".removable-row").removeClass("removable-row");
                    jQuery(".columns-pending").removeClass("columns-pending");
                    MouseJQ.selectedElement = jQuery("#nononoelement");
                }
                if (void 0 == MouseJQ.selectedElement) {
                    var errorHandler = new impError.ErrorHandle.ErrorJQ();
                    errorHandler.ActionHelp("Please select a element.");
                }
            };
            MouseJQ.ProcessMove = function(e) {
                if (!jQuery("page").hasClass("dragging") && !jQuery("page").hasClass("resizing")) {
                    var $target = jQuery(event.target);
                    $target.hasClass("key") || ($target = $target.closest(".key"));
                    if ($target.hasClass("key")) {
                        jQuery(".design-page-row").hide();
                        $target.hasClass("row") ? $target.children(".design-page-row").show() : $target.closest(".row").children(".design-page-row").show();
                    }
                }
            };
            MouseJQ.ProcessClick = function(e) {
                new impCommon.Common.CommonMethodsJQ();
                if ("inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display") && 1 != impmal.MalFormed.MalFormedJQ.IsMalFormed) {
                    if (void 0 != MouseJQ.selectedElement && 0 == e.ctrlKey) {
                        MouseJQ.selectedElement.removeClass("image-selection");
                        MouseJQ.selectedElement.removeClass("design-select-element-just-mark");
                    }
                    0 == e.ctrlKey && jQuery(".image-selection").removeClass("image-selection");
                    MouseJQ.selectedElement = jQuery(e.target);
                    MouseJQ.selectedElement = MouseJQ.selectedElement.closest(".key");
                    0 == MouseJQ.selectedElement.hasClass("key") && (MouseJQ.selectedElement = jQuery("#noelement"));
                    MouseJQ.selectedElement.hasClass("column") ? jQuery(".selected-display-element").text("Column") : MouseJQ.selectedElement.hasClass("row") ? jQuery(".selected-display-element").text("Row") : MouseJQ.selectedElement.hasClass("empty-container-text") ? jQuery(".selected-display-element").text("Text Block") : MouseJQ.selectedElement.hasClass("empty-container-image") ? jQuery(".selected-display-element").text("Image") : MouseJQ.selectedElement.hasClass("jq-normal-link") ? jQuery(".selected-display-element").text("Link") : MouseJQ.selectedElement.hasClass("page") && jQuery(".selected-display-element").text("Page");
                    if (!MouseJQ.selectedElement.hasClass("empty-container-text")) {
                        $(".empty-container-text").draggable({
                            disabled: !1
                        });
                        jQuery(".editor").hide();
                        jQuery("page .empty-container-text").find(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "move");
                    }
                    if (1 == MouseJQ.selectedElement.hasClass("column")) {
                        jQuery(".design-page-row").hide();
                        MouseJQ.selectedElement.parent().children(".design-page-row").show();
                    } else if (1 == MouseJQ.selectedElement.hasClass("row")) {
                        jQuery(".design-page-row").hide();
                        MouseJQ.selectedElement.children(".design-page-row").show();
                    } else if (1 == MouseJQ.selectedElement.hasClass("image-text-other")) {
                        jQuery(".design-page-row").hide();
                        MouseJQ.selectedElement.parent().parent().children(".design-page-row").show();
                    } else jQuery(".design-page-row").hide();
                    MouseJQ.selectedElement.addClass("design-select-element-just-mark");
                    impAddRow.Page.AddRowJQ.ProcessSelectNotify();
                    var activeControl = MouseJQ.GetActiveControl(), activeSBControl = MouseJQ.GetActiveSidebarControl();
                    if (void 0 != activeControl && "" != activeControl) switch (activeControl.toLowerCase()) {
                      case "add-row":
                        break;

                      case "height-width":
                        impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                        break;

                      case "image-library":
                        impImage.Image.SelfJQ.ProcessSelectNotify();
                        break;

                      case "color":
                        impColor.Color.ColorJQ.ProcessSelectNotify();
                        break;

                      case "border":
                        impBorder.Border.BorderJQ.ProcessSelectNotify();
                        break;

                      case "insert-text":
                        impText.Text.TextJQ.ProcessSelectNotify();
                        break;

                      case "bi":
                        impBi.BI.BIJQ.ProcessSelectNotify();
                        break;

                      case "margin":
                        impMargin.Margin.MarginJQ.ProcessSelectNotify();
                        break;

                      case "padding":
                        impPadding.Padding.PaddingJQ.ProcessSelectNotify();
                        break;

                      case "zindex":
                        impFrontBack.FrontBack.FrontBackJQ.ProcessSelectNotify();
                        break;

                      case "opacity":
                        impOpacity.Opacity.OpacityJQ.ProcessSelectNotify();
                    }
                    if (void 0 != activeSBControl && "" != activeSBControl) switch (activeSBControl.toLowerCase()) {
                      case "add-row":
                        break;

                      case "height-width":
                        impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                        break;

                      case "image-library":
                        impImage.Image.SelfJQ.ProcessSelectNotify();
                        break;

                      case "color":
                        impColor.Color.ColorJQ.ProcessSelectNotify();
                        break;

                      case "border":
                        impBorder.Border.BorderJQ.ProcessSelectNotify();
                        break;

                      case "insert-text":
                        impText.Text.TextJQ.ProcessSelectNotify();
                        break;

                      case "bi":
                        impBi.BI.BIJQ.ProcessSelectNotify();
                        break;

                      case "margin":
                        impMargin.Margin.MarginJQ.ProcessSelectNotify();
                        break;

                      case "padding":
                        impPadding.Padding.PaddingJQ.ProcessSelectNotify();
                        break;

                      case "zindex":
                        impFrontBack.FrontBack.FrontBackJQ.ProcessSelectNotify();
                        break;

                      case "opacity":
                        impOpacity.Opacity.OpacityJQ.ProcessSelectNotify();
                    }
                    try {
                        if ("none" != jQuery(".jq-properties-all").css("display").toLowerCase()) {
                            impColor.Color.ColorJQ.ProcessSelectNotify();
                            impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                            impBorder.Border.BorderJQ.ProcessSelectNotify();
                            impFont.Font.FontJQ.ProcessSelectNotify();
                            impBi.BI.BIJQ.ProcessSelectNotify();
                        }
                    } catch (ex) {}
                    if (void 0 != MouseJQ.selectedElement && !MouseJQ.selectedElement.hasClass("jqte") && "inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display")) {
                        1 == e.ctrlKey && MouseJQ.selectedElement.hasClass("image-selection") ? MouseJQ.selectedElement.removeClass("image-selection") : MouseJQ.selectedElement.addClass("image-selection");
                        1 == e.ctrlKey && (MouseJQ.selectedElement = jQuery(".image-selection"));
                    }
                    try {
                        var box = jQuery(MouseJQ.selectedElement)[0].getBoundingClientRect(), circleLeftTopElement = jQuery("<div class='circle-deg' style='width:14px; border-radius:50%; height:14px; border:2px solid white; position:absolute; background-color:#00A1FF;'></div>"), circleRightTopElement = jQuery(circleLeftTopElement).clone(), circleLeftBottomElement = jQuery(circleLeftTopElement).clone(), circleRightBottomElement = jQuery(circleLeftTopElement).clone();
                        circleRightBottomElement.addClass("z-index-back");
                        var body = document.body, docElem = document.documentElement, scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop, scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft, clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, top = box.top + scrollTop - clientTop, left = box.left + scrollLeft - clientLeft, width = jQuery(MouseJQ.selectedElement).css("width"), height = jQuery(MouseJQ.selectedElement).css("height"), widthf = parseFloat(width.replace("px", "")), heightf = parseFloat(height.replace("px", ""));
                        circleLeftTopElement.css("left", left - 5);
                        circleLeftTopElement.css("top", top - 5);
                        circleLeftBottomElement.css("left", left - 5);
                        circleLeftBottomElement.css("top", top + heightf - 5);
                        circleRightTopElement.css("left", left + widthf - 7);
                        circleRightTopElement.css("top", top - 5);
                        circleRightBottomElement.css("left", left + widthf - 7);
                        circleRightBottomElement.css("top", top + heightf - 5);
                        jQuery(".circle-deg").remove();
                        jQuery("body").append(circleLeftTopElement);
                        jQuery("body").append(circleLeftBottomElement);
                        jQuery("body").append(circleRightTopElement);
                        jQuery("body").append(circleRightBottomElement);
                    } catch (ex) {}
                }
            };
            MouseJQ.GetActiveControl = function() {
                for (var activeControl = "", controls = jQuery(".control-page"), i = 0; i < controls.length; i++) if ("block" == jQuery(controls[i]).css("display")) {
                    activeControl = jQuery(controls[i]).attr("name");
                    break;
                }
                return activeControl;
            };
            MouseJQ.ResetAfterClear = function() {
                var activeSBControl = MouseJQ.GetActiveSidebarControl();
                if (void 0 != activeSBControl && "" != activeSBControl) switch (activeSBControl.toLowerCase()) {
                  case "add-row":
                    break;

                  case "height-width":
                    impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                    break;

                  case "image-library":
                    impImage.Image.SelfJQ.ProcessSelectNotify();
                    break;

                  case "color":
                    impColor.Color.ColorJQ.ProcessSelectNotify();
                    break;

                  case "border":
                    impBorder.Border.BorderJQ.ProcessSelectNotify();
                    break;

                  case "insert-text":
                    impText.Text.TextJQ.ProcessSelectNotify();
                    break;

                  case "bi":
                    impBi.BI.BIJQ.ProcessSelectNotify();
                    break;

                  case "margin":
                    impMargin.Margin.MarginJQ.ProcessSelectNotify();
                    break;

                  case "padding":
                    impPadding.Padding.PaddingJQ.ProcessSelectNotify();
                    break;

                  case "zindex":
                    impFrontBack.FrontBack.FrontBackJQ.ProcessSelectNotify();
                    break;

                  case "opacity":
                    impOpacity.Opacity.OpacityJQ.ProcessSelectNotify();
                }
            };
            MouseJQ.GetActiveSidebarControl = function() {
                var activeControl = "", activeControl = jQuery(".prop-sb.ui-accordion-header-active").first().attr("name");
                return activeControl;
            };
            MouseJQ.prototype.WatchPage = function() {
                jQuery(document).ready(function() {
                    if (0 == G_isAttachedWatch) {
                        G_isAttachedWatch = !0;
                        jQuery(".prop-sb").click(function() {
                            impAddRow.Page.AddRowJQ.ProcessSelectNotify();
                            var activeSBControl = MouseJQ.GetActiveSidebarControl();
                            if (void 0 != activeSBControl && "" != activeSBControl) switch (activeSBControl.toLowerCase()) {
                              case "add-row":
                                break;

                              case "height-width":
                                impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                                break;

                              case "image-library":
                                impImage.Image.SelfJQ.ProcessSelectNotify();
                                break;

                              case "color":
                                impColor.Color.ColorJQ.ProcessSelectNotify();
                                break;

                              case "border":
                                impBorder.Border.BorderJQ.ProcessSelectNotify();
                                break;

                              case "insert-text":
                                impText.Text.TextJQ.ProcessSelectNotify();
                                break;

                              case "bi":
                                impBi.BI.BIJQ.ProcessSelectNotify();
                                break;

                              case "margin":
                                impMargin.Margin.MarginJQ.ProcessSelectNotify();
                                break;

                              case "padding":
                                impPadding.Padding.PaddingJQ.ProcessSelectNotify();
                                break;

                              case "zindex":
                                impFrontBack.FrontBack.FrontBackJQ.ProcessSelectNotify();
                                break;

                              case "opacity":
                                impOpacity.Opacity.OpacityJQ.ProcessSelectNotify();
                            }
                        });
                        jQuery("page").on("click", function(e) {
                            MouseJQ.ProcessClick(e);
                            if (1 == impCommonCode.ControlCommon.Code.AnchorClicked) {
                                impCommonCode.ControlCommon.Code.AnchorClicked = !1;
                                null != e.cancelBubble && (e.cancelBubble = !0);
                                e.stopPropagation && e.stopPropagation();
                                e.preventDefault && e.preventDefault();
                                null != e.returnValue && (e.returnValue = !1);
                                return !1;
                            }
                        });
                        jQuery("input").on("keydown", function(e) {
                            var BACK = 8;
                            e.which == BACK && (impOnInsert.OnInsert.Code.BackPassed = !0);
                        });
                        jQuery("textarea").on("keydown", function(e) {
                            var BACK = 8;
                            e.which == BACK && (impOnInsert.OnInsert.Code.BackPassed = !0);
                        });
                        jQuery(".jqte-editor").on("keydown", function(e) {
                            var BACK = 8;
                            e.which == BACK && (impOnInsert.OnInsert.Code.BackPassed = !0);
                        });
                        jQuery(document).on("keydown", function(e) {
                            var BACK = 8;
                            if (e.which == BACK) {
                                if (0 == impOnInsert.OnInsert.Code.BackPassed && 0 == impOnInsert.OnInsert.Code.BackPassedEdit) {
                                    null != e.cancelBubble && (e.cancelBubble = !0);
                                    e.stopPropagation && e.stopPropagation();
                                    e.preventDefault && e.preventDefault();
                                    null != e.returnValue && (e.returnValue = !1);
                                    return !1;
                                }
                                impOnInsert.OnInsert.Code.BackPassed = !1;
                            }
                            if (e.ctrlKey || e.metaKey) switch (String.fromCharCode(e.which).toLowerCase()) {
                              case "s":
                                try {
                                    console.log("ctrl + s pressed");
                                } catch (ex) {}
                                event.preventDefault();
                                jQuery(".jq-save").click();
                                return !1;

                              case "z":
                                if (!MouseJQ.selectedElement.hasClass("empty-container-text") || 1 != MouseJQ.selectedElement.length || "text" != MouseJQ.selectedElement.find(".jq-text-block-content").css("cursor")) {
                                    try {
                                        console.log("ctrl + z pressed");
                                    } catch (ex) {}
                                    event.preventDefault();
                                    jQuery(".jq-undo").click();
                                    return !1;
                                }
                                break;

                              case "y":
                                try {
                                    console.log("ctrl + y pressed");
                                } catch (ex) {}
                                event.preventDefault();
                                jQuery(".jq-redo").click();
                                return !1;
                            }
                        });
                        $("page").bind("copy", function() {
                            impCopy.CopyPaste.CopyPasteJQ.Copy();
                        });
                        $("page").bind("paste", function() {
                            if (MouseJQ.selectedElement.hasClass("column")) impCopy.CopyPaste.CopyPasteJQ.Paste(); else {
                                var eh = new impError.ErrorHandle.ErrorJQ();
                                eh.ActionHelp("Please select a [Column] to paste.");
                            }
                        });
                        jQuery("page").bind("cut", function() {
                            impCopy.CopyPaste.CopyPasteJQ.Cut();
                        });
                        $(window).on("beforeunload", function() {
                            jQuery(".control-page").hide();
                            jQuery(".control-page").removeClass("control-active");
                            jQuery("#control-save").addClass("control-active");
                            jQuery("#control-save").show();
                            return "Note: Unsaved changes will be lost!";
                        });
                        jQuery(document).keyup(function(e) {
                            var ESC = 27;
                            if (e.which === ESC) {
                                $(".empty-container-text").draggable({
                                    disabled: !1
                                });
                                $(".empty-container-image").draggable({
                                    disabled: !1
                                });
                                $("page .jq-text-block-content").removeAttr("contentEditable");
                                jQuery("page .empty-container-text").find(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "move");
                                jQuery(".editor").hide();
                                impCtxMenu.ContextMenu.ContextMenuJQ.ControlPageHide();
                                null != e.cancelBubble && (e.cancelBubble = !0);
                                e.stopPropagation && e.stopPropagation();
                                e.preventDefault && e.preventDefault();
                                null != e.returnValue && (e.returnValue = !1);
                                return !1;
                            }
                        });
                    }
                });
            };
            return MouseJQ;
        }();
        Watch.MouseJQ = MouseJQ;
    }(Watch = exports.Watch || (exports.Watch = {}));
});

define("Controls/JQueryUI", [ "require", "exports", "../Watch/WatchMouseJQ", "../Common/CommonMethodsJQ", "../UndoManager/UndoManager", "../Controls/TextJQ" ], function(require, exports, impWatch, impCommonMethods, impUndoManager, impText) {
    "use strict";
    var JQueryUI;
    !function(JQueryUI) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        JQueryUI.SmartObj = SmartObj;
        var UIHelper = function() {
            function UIHelper() {}
            return UIHelper;
        }();
        JQueryUI.UIHelper = UIHelper;
        var CommonCode = function() {
            function CommonCode() {}
            CommonCode.Draggable = function(element, cancelableCss) {
                jQuery(element).draggable({
                    cancel: cancelableCss,
                    revert: "invalid",
                    helper: "clone",
                    appendTo: "body",
                    distance: 5,
                    start: function(event, ui) {
                        CommonCode.DragStopped = !1;
                        jQuery("#interface_bottom").hide();
                        jQuery(ui.helper).addClass("jq-dragging");
                        jQuery("page").addClass("dragging");
                        CommonCode.DroppableEventCount = 0;
                        CommonCode.droppableCount++;
                        ui.helper.css("z-index", "9999999999");
                        ui.helper.css("opacity", "0.8");
                    },
                    stop: function(event, ui) {
                        CommonCode.DragStopped = !0;
                        jQuery("#interface_bottom").show();
                        jQuery(ui.helper).removeClass("jq-dragging");
                        jQuery("page").removeClass("dragging");
                        CommonCode.droppableCount = 2;
                        jQuery(".image-selection-drag").removeClass("image-selection-drag");
                        ui.helper.css("opacity", "1");
                        ui.helper.css("z-index", "0");
                    },
                    drag: function(event, ui) {
                        var element = jQuery(event.target).hasClass("key") ? jQuery(event.target) : jQuery(event.target).closest(".key");
                        element.addClass("image-selection-drag");
                    }
                });
            };
            CommonCode.ResizableImage = function() {
                var handleDefault = "e,se,s";
                $(".image-element").resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    delay: 0,
                    start: function(event, ui) {
                        var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-width");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "width");
                    },
                    stop: function(event, ui) {
                        var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "height");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "min-width");
                        commonMethods.RemoveStyle(ui.helper.closest(".ui-wrapper"), "width");
                    },
                    resize: function(event, ui) {
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                        var uiHelper = new UIHelper();
                        uiHelper.helper = $(this).closest(".column");
                        CommonCode.commonHeight(100, uiHelper);
                    }
                });
            };
            CommonCode.commonHeight = function(height, ui) {
                return "error";
            };
            CommonCode.ResizableColumn = function() {
                var handleDefault = "e,s";
                $(".column").resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    distance: 0,
                    start: function(event, ui) {
                        jQuery("page").addClass("resizing");
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                        jQuery(ui.element).children(".ui-resizable-handle").find(".jq-square-" + axis).parent().addClass("ui-resizable-handle-hover");
                        if ("se" == jQuery(ui.element).data("ui-resizable").axis || "s" == $(ui.element).data("ui-resizable").axis) {
                            ui.element.height(ui.element.height());
                            CommonCode.originalHeightBeforeDragStartStr = $(ui.helper).css("min-height");
                            var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                            commonMethods.RemoveStyle(ui.helper, "min-height");
                        }
                        var nextElements = jQuery(ui.helper).nextAll(".column");
                        nextElements.hide();
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                    },
                    stop: function(event, ui) {
                        jQuery("page").removeClass("resizing");
                        jQuery(ui.element).find(".ui-resizable-handle").removeClass("ui-resizable-handle-hover");
                        jQuery(".ui-resizable-se").removeClass("selected-resizable");
                        var height = ui.size.height, width = ui.size.width, originalHeight = ui.originalSize.height, originalWidth = ui.originalSize.width, rowWidth = jQuery(ui.helper).parent().width(), onePercentPixels = Math.floor(1 * rowWidth / 100), colXsOnePercentage = 2, colXsOnePixels = colXsOnePercentage * onePercentPixels, commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                        jQuery(ui.helper).attr("style");
                        if (height != originalHeight) {
                            CommonCode.commonHeight(height, ui);
                            commonMethods.RemoveSingleStyle(ui.helper, "height");
                            jQuery(ui.helper).css("min-height", height);
                        }
                        commonMethods.RemoveStyle(ui.helper, "min-width");
                        commonMethods.RemoveStyle(ui.helper, "width");
                        var twoFour = 48;
                        if (width > originalWidth) {
                            var emptyXsCount = 0, nextElements = jQuery(ui.helper).nextAll(".column");
                            try {
                                for (var columns = ui.helper.parent().children(".column"), count = 0, j = 0; j < columns.length; j++) {
                                    var size = jQuery(columns[j]).attr("xs-column-size");
                                    if (void 0 != size && "" != size) {
                                        var num = Number(size);
                                        count += num;
                                    }
                                }
                                twoFour > count && (emptyXsCount = twoFour - count);
                                var extenedWidth = width - originalWidth, colXs = Math.floor(extenedWidth / colXsOnePixels);
                                0 == colXs && (colXs = 1);
                                var nextElementsCount = jQuery(ui.helper).nextAll(".column").length, eachXs = Math.floor(colXs / nextElementsCount);
                                0 == eachXs && (eachXs = 1);
                                for (var colXsTemp = colXs, i = 0; i < nextElements.length && colXsTemp > 0; i++) {
                                    var nextXsSize = Number(jQuery(nextElements[i]).attr("xs-column-size"));
                                    if (1 != nextXsSize) {
                                        var newNextXsSize = nextXsSize - eachXs;
                                        if (1 > newNextXsSize) {
                                            colXsTemp = colXsTemp - eachXs + 1;
                                            newNextXsSize = 1;
                                        } else colXsTemp -= eachXs;
                                        jQuery(nextElements[i]).removeClass("col-xs-" + nextXsSize);
                                        jQuery(nextElements[i]).addClass("col-xs-" + newNextXsSize);
                                        jQuery(nextElements[i]).attr("xs-column-size", newNextXsSize);
                                    }
                                }
                                var xsSize = Number(ui.helper.attr("xs-column-size")), newXsSize = xsSize + colXs - colXsTemp;
                                colXs == colXsTemp && (newXsSize += colXsTemp);
                                var allXs = 0;
                                ui.helper.parent().children(".column").each(function() {
                                    allXs += Number(jQuery(this).attr("xs-column-size"));
                                });
                                for (var overallMinusCurrent = allXs - xsSize, g = overallMinusCurrent + newXsSize; g > twoFour; ) {
                                    newXsSize--;
                                    g--;
                                }
                                jQuery(ui.helper).removeClass("col-xs-" + xsSize);
                                jQuery(ui.helper).addClass("col-xs-" + newXsSize);
                                ui.helper.attr("xs-column-size", newXsSize);
                            } catch (ex) {}
                            nextElements.show();
                        } else if (originalWidth > width) {
                            var nextElements = jQuery(ui.helper).nextAll(".column");
                            try {
                                var extenedWidth = originalWidth - width, colXs = Math.floor(extenedWidth / colXsOnePixels);
                                0 == colXs && (colXs = 1);
                                var eachXs = Math.floor(colXs / 1);
                                0 == eachXs && (eachXs = 1);
                                var xsSize = Number(ui.helper.attr("xs-column-size"));
                                if (xsSize > 1) {
                                    var eachXsTemp = eachXs, newXsSize = xsSize - eachXs;
                                    if (0 > newXsSize) {
                                        eachXsTemp = eachXs + newXsSize;
                                        newXsSize = 1;
                                    }
                                    if (0 == newXsSize) {
                                        eachXsTemp = eachXs - 1;
                                        newXsSize = 1;
                                    }
                                    jQuery(ui.helper).removeClass("col-xs-" + xsSize);
                                    jQuery(ui.helper).addClass("col-xs-" + newXsSize);
                                    ui.helper.attr("xs-column-size", newXsSize);
                                    var colXsTemp = colXs;
                                    if (colXsTemp > 0) {
                                        var nextXsSize = Number(jQuery(nextElements[0]).attr("xs-column-size")), newNextXsSize = nextXsSize + eachXsTemp, allXs = 0;
                                        ui.helper.parent().children(".column").each(function() {
                                            allXs += Number(jQuery(this).attr("xs-column-size"));
                                        });
                                        for (var overallMinusNext = allXs - Number(jQuery(nextElements[0]).attr("xs-column-size")), g = overallMinusNext + newNextXsSize; g > twoFour; ) {
                                            newNextXsSize--;
                                            g--;
                                        }
                                        jQuery(nextElements[0]).removeClass("col-xs-" + nextXsSize);
                                        jQuery(nextElements[0]).addClass("col-xs-" + newNextXsSize);
                                        jQuery(nextElements[0]).attr("xs-column-size", newNextXsSize);
                                    }
                                }
                            } catch (ex) {}
                            nextElements.show();
                        }
                        var nextElementsToShow = jQuery(ui.helper).nextAll(".column");
                        nextElementsToShow.show();
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {}
                });
            };
            CommonCode.OnResize = function(event, ui) {
                "se" == jQuery(ui.element).data("ui-resizable").axis || ("s" == $(ui.element).data("ui-resizable").axis ? ui.helper.height(ui.helper.height() + 20) : "s" == $(ui.element).data("ui-resizable").axis);
            };
            CommonCode.JustResizable = function(elementCss, handle) {
                var handleDefault = "e,se,s";
                void 0 != handle && "" != handle && (handleDefault = handle);
                $(elementCss).resizable({
                    handles: handleDefault,
                    minHeight: 0,
                    minWidth: 0,
                    delay: 0,
                    start: function(event, ui) {
                        jQuery("page").addClass("resizing");
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                        jQuery(ui.element).children(".ui-resizable-handle").find(".jq-square-" + axis).parent().addClass("ui-resizable-handle-hover");
                    },
                    stop: function(event, ui) {
                        jQuery("page").removeClass("resizing");
                        jQuery(ui.element).find(".ui-resizable-handle").removeClass("ui-resizable-handle-hover");
                        ui.size.height, ui.size.width;
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                        var uiHelper = new UIHelper();
                        uiHelper.helper = $(this).closest(".column");
                        CommonCode.commonHeight(100, uiHelper);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {}
                });
            };
            CommonCode.ResizableRootElements = function(elementCss, handle) {
                var handleDefault = "e,se,s";
                void 0 != handle && "" != handle && (handleDefault = handle);
                $(elementCss).resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    delay: 0,
                    start: function(event, ui) {
                        if ("se" == jQuery(ui.element).data("ui-resizable").axis || "s" == $(ui.element).data("ui-resizable").axis) {
                            var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                            commonMethods.RemoveStyle(ui.helper, "min-height");
                            commonMethods.RemoveStyle(ui.helper, "height");
                        }
                    },
                    stop: function(event, ui) {
                        var height = ui.size.height;
                        ui.size.width;
                        if (jQuery(this).hasClass("empty-container-text") || jQuery(this).hasClass("root-elements")) {
                            var common = new impCommonMethods.Common.CommonMethodsJQ();
                            common.RemoveStyle(jQuery(this), "min-height");
                            common.RemoveStyle(jQuery(this), "height");
                            jQuery(this).css("min-height", height);
                        }
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                    }
                });
            };
            CommonCode.ResizeCommon = function(selectedElement) {
                try {
                    var box = jQuery(selectedElement)[0].getBoundingClientRect(), circleLeftTopElement = jQuery("<div class='circle-deg' style='width:12px; border-radius:50%; height:12px; position:absolute; background-color:#00A1FF;'></div>"), circleRightTopElement = jQuery(circleLeftTopElement).clone(), circleLeftBottomElement = jQuery(circleLeftTopElement).clone(), circleRightBottomElement = jQuery(circleLeftTopElement).clone();
                    circleRightBottomElement.addClass("z-index-back");
                    var body = document.body, docElem = document.documentElement, scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop, scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft, clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, top = box.top + scrollTop - clientTop, left = box.left + scrollLeft - clientLeft, width = jQuery(selectedElement).css("width"), height = jQuery(selectedElement).css("height"), widthf = parseFloat(width.replace("px", "")), heightf = parseFloat(height.replace("px", ""));
                    circleLeftTopElement.css("left", left - 5);
                    circleLeftTopElement.css("top", top - 5);
                    circleLeftBottomElement.css("left", left - 5);
                    circleLeftBottomElement.css("top", top + heightf - 5);
                    circleRightTopElement.css("left", left + widthf - 5);
                    circleRightTopElement.css("top", top - 5);
                    circleRightBottomElement.css("left", left + widthf - 5);
                    circleRightBottomElement.css("top", top + heightf - 5);
                    jQuery(".circle-deg").remove();
                    jQuery("body").append(circleLeftTopElement);
                    jQuery("body").append(circleLeftBottomElement);
                    jQuery("body").append(circleRightTopElement);
                    jQuery("body").append(circleRightBottomElement);
                } catch (ex) {}
            };
            CommonCode.Resizable = function(elementCss, handle) {
                var handleDefault = "e,se,s";
                void 0 != handle && "" != handle && (handleDefault = handle);
                $(elementCss).resizable({
                    handles: handleDefault,
                    autoHide: !0,
                    distance: 0,
                    start: function(event, ui) {
                        jQuery("page").addClass("resizing");
                        var axis = jQuery(ui.element).data("ui-resizable").axis;
                        jQuery(ui.element).children(".ui-resizable-handle").find(".jq-square-" + axis).parent().addClass("ui-resizable-handle-hover");
                        $(ui.helper).closest(".key").after("<div class='height float-right dummy-div'></div>");
                        jQuery(".dummy-div").height(ui.helper.height() + 2);
                        if ("se" == jQuery(ui.element).data("ui-resizable").axis || "s" == $(ui.element).data("ui-resizable").axis) {
                            ui.helper.css("height", ui.helper.css("min-height"));
                            var commonMethods = new impCommonMethods.Common.CommonMethodsJQ();
                            commonMethods.RemoveStyle(ui.helper, "min-height");
                        }
                    },
                    stop: function(event, ui) {
                        jQuery("page").removeClass("resizing");
                        jQuery(".dummy-div").remove();
                        var height = ui.size.height;
                        ui.size.width;
                        if (jQuery(this).hasClass("empty-container-text") || jQuery(this).hasClass("empty-container-image") || jQuery(this).hasClass("empty-container") || jQuery(this).hasClass("jq-plus-container-text") || jQuery(this).hasClass("jq-plus-container-image") || jQuery(this).hasClass("jq-text-block-container") || jQuery(this).hasClass("root-elements")) if (jQuery(this).hasClass("jq-plus-container-image") || jQuery(this).hasClass("empty-container-spacer")) {
                            jQuery(this).css("height", height);
                            jQuery(this).css("min-height", height);
                        } else {
                            jQuery(this).css("height", height);
                            jQuery(this).css("min-height", height);
                        }
                        JQueryUI.CommonCode.ResizeCommon(ui.element);
                        var uiHelper = new UIHelper();
                        uiHelper.helper = $(this).closest(".column");
                        CommonCode.commonHeight(100, uiHelper);
                        jQuery(ui.element).find(".ui-resizable-handle").removeClass("ui-resizable-handle-hover");
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    },
                    resize: function(event, ui) {
                        window.setTimeout(function() {
                            jQuery(".dummy-div").height() < ui.helper.height() && jQuery(".dummy-div").height(jQuery(".dummy-div").height() + 2);
                        }, 10);
                    }
                });
            };
            CommonCode.Droppable = function(elementCss) {
                $(elementCss).droppable({
                    greedy: !0,
                    tolerance: "pointer",
                    accept: ".bldr-draggable, .image-text-other",
                    drop: function(event, ui) {
                        if (1 != CommonCode.DroppableEventCount) {
                            CommonCode.DroppableEventCount = 1;
                            try {
                                window.smartObj = new JQueryUI.SmartObj();
                                window.smartObj.currentObj = void 0;
                                window.smartObj.command = "";
                                impWatch.Watch.MouseJQ.nearestElement = jQuery("#nononononelement");
                                var x = event.clientX, y = event.clientY + $(document).scrollTop();
                                jQuery(".nearest-element").removeClass("nearest-element");
                                impWatch.Watch.MouseJQ.selectedElement.hasClass("image-text-other") && (impWatch.Watch.MouseJQ.selectedElement = impWatch.Watch.MouseJQ.selectedElement.closest(".column"));
                                if (impWatch.Watch.MouseJQ.selectedElement.hasClass("column")) {
                                    var $elements = impWatch.Watch.MouseJQ.selectedElement.find(".image-text-other"), nearestLeftArray = [], nearestTopArray = [];
                                    if ($elements.length > 0) {
                                        $elements.each(function(index, _this) {
                                            var $this = $(_this), top = parseFloat($this.attr("top")), bottom = parseFloat($this.attr("bottom")), left = parseFloat($this.attr("left"));
                                            if (y >= top && bottom >= y && x >= left) {
                                                nearestLeftArray.push(left);
                                                nearestTopArray.push(top);
                                            }
                                        });
                                        var nearestLeft = 0, nearestTop = 0;
                                        nearestLeftArray.length > 0 && (nearestLeft = Math.max.apply(Math, nearestLeftArray));
                                        nearestTopArray.length > 0 && (nearestTop = Math.max.apply(Math, nearestTopArray));
                                        impWatch.Watch.MouseJQ.selectedElement.find(".image-text-other[left='" + nearestLeft + "'][top='" + nearestTop + "']").addClass("nearest-element");
                                        impWatch.Watch.MouseJQ.nearestElement = jQuery(".nearest-element").first();
                                        if (impWatch.Watch.MouseJQ.nearestElement.length > 0) {
                                            window.smartObj.currentObj = impWatch.Watch.MouseJQ.nearestElement;
                                            window.smartObj.command = "n";
                                        }
                                    }
                                }
                            } catch (ex) {}
                            impWatch.Watch.MouseJQ.selectedElement = jQuery(".image-selection-drag");
                            if (CommonCode.droppableCount >= 2 && void 0 != CommonCode.currentTarget && !ui.draggable.hasClass("control-drag-anywhere") && !ui.draggable.hasClass("bldr-draggable")) {
                                CommonCode.droppableCount++;
                                ui.draggable.css("opacity", "1");
                                if (ui.draggable.find(".jq-image-block-image").length > 0) {
                                    ui.draggable.css("position", "relative").css("left", "").css("top", "");
                                    void 0 != impWatch.Watch.MouseJQ.nearestElement && impWatch.Watch.MouseJQ.nearestElement.length > 0 ? impWatch.Watch.MouseJQ.nearestElement.after(ui.draggable.closest(".empty-container-image")) : CommonCode.currentTarget.closest(".key").hasClass("column") ? CommonCode.currentTarget.closest(".key").append(ui.draggable.closest(".empty-container-image")) : CommonCode.currentTarget.closest(".key").after(ui.draggable.closest(".empty-container-image"));
                                } else void 0 != impWatch.Watch.MouseJQ.nearestElement && impWatch.Watch.MouseJQ.nearestElement.length > 0 ? impWatch.Watch.MouseJQ.nearestElement.after(ui.draggable.css("position", "relative").css("left", "").css("top", "")) : CommonCode.currentTarget.closest(".key").hasClass("column") ? CommonCode.currentTarget.closest(".key").append(ui.draggable.css("position", "relative").css("left", "").css("top", "")) : CommonCode.currentTarget.closest(".key").after(ui.draggable.css("position", "relative").css("left", "").css("top", ""));
                                jQuery(".image-selection").removeClass("image-selection");
                                event.stopPropagation();
                                CommonCode.currentTarget = null;
                                var undomanager = new impUndoManager.Manager.UndoManager();
                                undomanager.BeforeOperation();
                            } else if (!ui.draggable.hasClass("control-drag-anywhere")) {
                                ui.draggable.css("position", "relative").css("left", "").css("top", "");
                                if (ui.draggable.hasClass("bldr-draggable")) {
                                    var id = ui.draggable.attr("id");
                                    switch (id) {
                                      case "bldr-drgb-text":
                                        impText.Text.TextJQ.InsertTextBlock("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.");
                                        break;

                                      case "bldr-drgb-title":
                                        impText.Text.TextJQ.InsertTextBlock("<h2>Title Here.</h2>");
                                    }
                                }
                            }
                            jQuery(".image-text-other").each(function(index, _this) {
                                var $this = jQuery(_this), bottom = $this.offset().top + $this.height(), top = $this.offset().top, left = $this.offset().left;
                                $this.attr("top", top);
                                $this.attr("bottom", bottom);
                                $this.attr("left", left);
                            });
                            jQuery(".image-selection-drag").removeClass("image-selection-drag");
                            jQuery(".empty").removeClass("empty");
                            jQuery("#control-common-execute").trigger("click");
                        }
                    },
                    out: function(event, ui) {
                        CommonCode.droppableCount++;
                    },
                    over: function(event, ui) {
                        jQuery(".image-selection-drag").removeClass("image-selection-drag");
                        CommonCode.currentTarget = jQuery(event.target);
                        if (jQuery(event.target).hasClass("key")) {
                            if ("inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display")) {
                                jQuery(event.target).addClass("image-selection-drag");
                                impWatch.Watch.MouseJQ.selectedElement = jQuery(event.target);
                            }
                        } else if ("inline-block" != jQuery(".close-preview").css("display") && "block" != jQuery(".close-preview").css("display")) {
                            jQuery(event.target).closest(".key").addClass("image-selection-drag");
                            impWatch.Watch.MouseJQ.selectedElement = jQuery(event.target).closest(".key");
                        }
                    }
                });
            };
            CommonCode.DraggableDestroy = function(element) {
                jQuery(element).each(function(index, _this) {
                    try {
                        var $this = $(_this);
                        $this.draggable("destroy");
                    } catch (ex) {}
                });
            };
            CommonCode.DroppableDestroy = function(elementCss) {
                jQuery(elementCss).each(function(index, _this) {
                    try {
                        var $this = $(_this);
                        $this.droppable("destroy");
                        $this.removeClass("ui-droppable");
                    } catch (ex) {}
                });
            };
            CommonCode.ResizableDestroy = function(elementCss) {
                jQuery(elementCss).each(function(index, _this) {
                    try {
                        var $this = $(_this);
                        $this.resizable("destroy");
                        jQuery($this).find("div").remove(".ui-resizable-handle");
                    } catch (ex) {
                        jQuery($this).find("div").remove(".ui-resizable-handle");
                    }
                });
            };
            CommonCode.droppableCount = 2;
            CommonCode.DroppableEventCount = 0;
            CommonCode.DragStopped = !0;
            CommonCode.originalHeightBeforeDragStartStr = "";
            return CommonCode;
        }();
        JQueryUI.CommonCode = CommonCode;
    }(JQueryUI = exports.JQueryUI || (exports.JQueryUI = {}));
});

define("Controls/ControlCommonJQ", [ "require", "exports", "./JQueryUI", "../common/on", "../JQte/OnInsert" ], function(require, exports, impJQueryUI, impOn, impJqteOnInsert) {
    "use strict";
    var ControlCommon;
    !function(ControlCommon) {
        var Code = function() {
            function Code() {}
            Code.AttachClick = function() {
                jQuery("#control-common-execute").on("click", function() {
                    Code.DestroyResizable();
                    Code.Execute();
                });
            };
            Code.Execute = function() {
                window.setTimeout(function() {
                    impOn.On.Code.Execute();
                    new impJqteOnInsert.OnInsert.Code().Init();
                    impJQueryUI.JQueryUI.CommonCode.ResizableColumn();
                    impJQueryUI.JQueryUI.CommonCode.Resizable(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other", "s");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other-left", "e");
                    impJQueryUI.JQueryUI.CommonCode.Draggable(".jq-normal-link .empty-container, .empty-container-menu, .empty-container-text, .empty-container-image, .empty-container-spacer", "");
                    jQuery(".empty-container-text, .empty-container-image").css("z-index", "0");
                    jQuery(".column").each(function() {
                        if (0 == jQuery(this).children(".image-text-other.empty-container-image, .image-text-other.empty-container-text, .row, .column").length) {
                            jQuery(this).addClass("empty");
                            0 == jQuery(this).find(".empty-drop-element").length && jQuery(this).append("<div class='image-text-other empty-drop-element' ></div>");
                        } else {
                            jQuery(this).removeClass("empty");
                            jQuery(this).find(".empty-drop-element").remove();
                        }
                    });
                    jQuery(".image-text-other, .empty-container-empty").each(function(index, _this) {
                        var $this = jQuery(_this), bottom = $this.offset().top + $this.height(), top = $this.offset().top, left = $this.offset().left;
                        $this.attr("top", top);
                        $this.attr("bottom", bottom);
                        $this.attr("left", left);
                    });
                    impJQueryUI.JQueryUI.CommonCode.Droppable(".column, .empty-container, .image-text-other");
                    jQuery(".ui-resizable-e").html("<div class='jq-square jq-square-e'></div>");
                    jQuery(".ui-resizable-se").html("<div class='jq-square jq-square-se'></div>");
                    jQuery(".ui-resizable-s").html("<div class='jq-square jq-square-s'></div>");
                }, 10);
            };
            Code.DestroyResizable = function() {
                impJQueryUI.JQueryUI.CommonCode.DroppableDestroy(".column, .empty-container, .image-text-other");
                impJQueryUI.JQueryUI.CommonCode.DraggableDestroy(".jq-normal-link, .empty-container, .empty-container-menu, .empty-container-text .empty-container-image, .empty-container-spacer");
                impJQueryUI.JQueryUI.CommonCode.ResizableDestroy(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image, .column, .empty-container, .root-elements, .adjust-image-text-other, .adjust-image-text-other-left");
            };
            Code.AnchorClicked = !1;
            return Code;
        }();
        ControlCommon.Code = Code;
    }(ControlCommon = exports.ControlCommon || (exports.ControlCommon = {}));
});

define("UndoManager/UndoManager", [ "require", "exports", "../Controls/ControlCommonJQ", "../Preview/Preview", "../Watch/WatchMouseJQ", "../MalFormed/MalFormedJQ", "../jqte/OnInsert" ], function(require, exports, impControlsCommon, impPreview, impWatch, impmal, impOnInsert) {
    "use strict";
    window.undoActivityIndex = 999999;
    var Manager;
    !function(Manager) {
        var UndoManager = function() {
            function UndoManager() {
                this.isEnabled = !0;
                this.isUndoHit = !1;
                this.isRedoHit = !1;
            }
            UndoManager.prototype.EnableUndoManager = function(isEnable) {
                this.isEnabled = isEnable;
            };
            UndoManager.prototype.SetSelectElement = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selectedElement) {
                    var scopeId = selectedElement.attr("scopeId");
                    impWatch.Watch.MouseJQ.selectedElement = jQuery("div[scopeId='" + scopeId + "'").first();
                }
            };
            UndoManager.prototype.Undo = function() {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed) {
                    "none" != jQuery(".close-preview").css("display") && impPreview.Preview.PreviewJQ.ClosePreview();
                    var undoObj;
                    if (!(window.undoActivityIndex <= 0)) {
                        if (999999 == window.undoActivityIndex) {
                            if (void 0 != window.undoObjArray) {
                                window.undoActivityIndex = window.undoObjArray.length - 2;
                                undoObj = window.undoObjArray[window.undoActivityIndex];
                            }
                        } else {
                            window.undoActivityIndex--;
                            window.undoActivityIndex <= 0 && (this.isUndoHit = !0);
                            undoObj = window.undoObjArray[window.undoActivityIndex];
                        }
                        if (null != undoObj) {
                            var parent;
                            parent = jQuery(undoObj.parent);
                            jQuery("page").html(undoObj.html);
                            impControlsCommon.ControlCommon.Code.DestroyResizable();
                            impControlsCommon.ControlCommon.Code.Execute();
                            var c = new impOnInsert.OnInsert.Code();
                            c.Init();
                            this.SetSelectElement();
                        }
                    }
                }
            };
            UndoManager.prototype.Redo = function() {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed) {
                    "none" != jQuery(".close-preview").css("display") && impPreview.Preview.PreviewJQ.ClosePreview();
                    var undoObj;
                    -1 == window.undoActivityIndex && (window.undoActivityIndex = 0);
                    if (void 0 != window.undoObjArray) {
                        if (window.undoActivityIndex + 1 >= window.undoObjArray.length) return;
                        window.undoActivityIndex++;
                        undoObj = window.undoObjArray[window.undoActivityIndex];
                        if (null != undoObj) {
                            jQuery("page").html(undoObj.html);
                            impControlsCommon.ControlCommon.Code.DestroyResizable();
                            impControlsCommon.ControlCommon.Code.Execute();
                            var c = new impOnInsert.OnInsert.Code();
                            c.Init();
                            this.SetSelectElement();
                        }
                    }
                }
            };
            UndoManager.prototype.PushUndo = function(undo) {
                void 0 == window.undoObjArray && (window.undoObjArray = []);
                void 0 != undo && window.undoObjArray.push(undo);
            };
            UndoManager.prototype.PopUndo = function() {
                window.undoObjArray.pop();
            };
            UndoManager.prototype.ClearRedoOnChange = function() {};
            UndoManager.prototype.Clear = function() {};
            UndoManager.prototype.BeforeOperation = function(selectedParent) {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed && 0 == window.layoutCreating) {
                    try {
                        window.undoObjArray.splice(window.undoActivityIndex + 1);
                        window.undoActivityIndex = 999999;
                    } catch (ex) {}
                    selectedParent = jQuery("page");
                    var rootTemp;
                    rootTemp = selectedParent;
                    var undo = new UndoJQ();
                    undo.parent = rootTemp;
                    undo.html = rootTemp.html();
                    undo.Push();
                }
            };
            return UndoManager;
        }();
        Manager.UndoManager = UndoManager;
        var UndoJQ = function() {
            function UndoJQ() {}
            UndoJQ.prototype.Push = function() {
                var um = new UndoManager();
                um.PushUndo(this);
            };
            return UndoJQ;
        }();
        Manager.UndoJQ = UndoJQ;
    }(Manager = exports.Manager || (exports.Manager = {}));
});

define("Page/PageElementBaseJQ", [ "require", "exports", "../PageElements/ElementJQ", "../Error/ErrorJQ", "../Common/CommonMethodsJQ", "../_Classes/UrlJQ", "../_Classes/Auth", "../Constants/ConstantsJQ", "../UndoManager/UndoManager", "../MalFormed/MalFormedJQ" ], function(require, exports, impElements, impError, impCommon, impUrl, impAuth, impConstants, impUndoManager, impmal) {
    "use strict";
    var Page, uniqureId = 5;
    !function(Page) {
        var debug, globalColumnId, globalRowId;
        globalColumnId = 0;
        globalRowId = 0;
        debug = !0;
        var PageElementBaseJQ = function() {
            function PageElementBaseJQ(page, typeName, paramRootWrapper, extra) {
                this.scopeId = "body";
                this.typeName = typeName;
                this.rootWrapper = paramRootWrapper;
                this.cssClassName = "jq-" + this.typeName;
                this.cssBackClassName = "jq-back-" + this.typeName;
                this.cssAdditionalStylingClassName = "jq-additional-" + this.typeName;
                this.templatePath = this.typeName;
                this.templateName = this.typeName + ".html";
                this.qualifiedTemplatePath = this.templatePath + "/" + this.templateName;
            }
            PageElementBaseJQ.prototype.GenerateColumnScopeId = function() {
                return "Column_" + ++globalColumnId;
            };
            PageElementBaseJQ.prototype.GenerateRowScopeId = function() {
                return "Row_" + ++globalRowId;
            };
            PageElementBaseJQ.prototype.Log = function(msg) {
                new impError.ErrorHandle.ErrorJQ().LogMessage(this.typeName + "JQ : " + msg);
            };
            PageElementBaseJQ.prototype.GetClassName = function() {
                return this.cssClassName;
            };
            PageElementBaseJQ.prototype.GetDotClassName = function() {
                return "." + this.GetClassName();
            };
            PageElementBaseJQ.prototype.GetScope = function() {
                if (void 0 == this.scopeId || "" == this.scopeId) {
                    this.scopeId = "body";
                    return jQuery(this.scopeId);
                }
                return jQuery(this.scopeId);
            };
            PageElementBaseJQ.prototype.SetScope = function(scopeid) {
                this.scopeId = scopeid;
                return this;
            };
            PageElementBaseJQ.prototype.Get = function() {
                return jQuery(this.GetScope()).find(this.GetDotClassName());
            };
            PageElementBaseJQ.prototype.Remove = function() {
                jQuery(this.Get()).remove();
            };
            PageElementBaseJQ.prototype.GetWrapper = function() {
                return 1 == this.ProcessKey() ? "body" == this.rootWrapper.toString().toLowerCase() ? jQuery(this.rootWrapper) : jQuery(this.GetScope()).find(this.rootWrapper) : void 0;
            };
            PageElementBaseJQ.prototype.Create = function(className) {
                if (1 == this.ProcessKey()) {
                    if (0 == this.Get().length) {
                        var elements = new impElements.Page.Elements.ElementJQ();
                        this.Add(this.GetWrapper(), elements.CreateDiv("", this.GetClassName() + " " + this.cssBackClassName + " " + this.cssAdditionalStylingClassName + "  key design-row row root-elements page-element jqMargin-0 "), void 0, void 0, void 0, void 0, void 0);
                    }
                    return this;
                }
            };
            PageElementBaseJQ.prototype.CreateNotExist = function() {
                0 == this.Get().length && this.Create(void 0);
            };
            PageElementBaseJQ.prototype.AddRow = function(root, colClassNames, className, adjustRow, adjustColumn, beforeAfter) {
                if (1 == this.ProcessKey()) {
                    var row;
                    0 == this.Get().length && this.Create(void 0);
                    if (void 0 != colClassNames && colClassNames.length > 0) {
                        var cols;
                        cols = colClassNames.toString().split(" ");
                        var elements = new impElements.Page.Elements.ElementJQ();
                        row = elements.CreateDiv("", "row key jqRootRow design-row");
                        for (var commonMethods = new impCommon.Common.CommonMethodsJQ(), i = 0; i < cols.length; i++) {
                            var colClassName = "", columnSize = "";
                            if (void 0 != cols[i] && "" != commonMethods.Trim(cols[i])) {
                                colClassName = cols[i].toString().replace(/,/g, " ");
                                columnSize = colClassName.toString().replace("col-xs-", "");
                                var column, elements2 = new impElements.Page.Elements.ElementJQ(), columnCss = colClassName + " " + className + " column key design-column column-number-" + i, contentClassName = "", contentCssClass = "";
                                if ("Content" == this.typeName || jQuery(root).hasClass("jq-Content")) {
                                    contentCssClass = "";
                                    0 == i ? contentCssClass = "SideBarLeft" : 1 == i ? contentCssClass = "MiddleContent" : 2 == i && (contentCssClass = "SideBarRight");
                                    contentClassName = "jq-" + contentCssClass + " jq-back-" + contentCssClass + " jq-additional-" + contentCssClass;
                                }
                                column = elements2.CreateDiv("", columnCss + " " + contentClassName);
                                var columnScopeId = this.GenerateColumnScopeId();
                                1 == debug && void 0 != column && column.append("<span class='debug-column-css debug-css' scopeId='" + columnScopeId + "'> " + columnScopeId + " </span> ");
                                column.attr("scopeId", columnScopeId);
                                column.attr("column-number", i);
                                column.attr("xs-column-size", columnSize);
                                column.css("min-height", "100px");
                                column.addClass("column-padding");
                                "" != contentClassName ? column.attr("key-css", ".jq-" + contentClassName) : void 0 != root ? column.attr("key-css", jQuery(root).attr("key-css") + " column") : column.attr("key-css", this.GetDotClassName() + " column");
                                void 0 != root ? row.attr("key-css", jQuery(root).attr("key-css") + " row") : row.attr("key-css", this.GetDotClassName() + " row");
                                jQuery(row).append(column);
                                void 0 != adjustColumn && this.AdjustElement(column, adjustColumn);
                            }
                        }
                    }
                    var rowScopeId = this.GenerateRowScopeId();
                    row.attr("scopeId", rowScopeId);
                    var nextPlus = "<div class='jq-row-plus-container jq-next-row-container'> <span class='jq-row-plus jq-next-row'> + </span> </div>", prevPlus = "<div class='jq-row-plus-container jq-prev-row-container'> <span class='jq-row-plus jq-prev-row'> + </span> </div>";
                    if (void 0 != row) {
                        row.prepend(prevPlus);
                        row.append(nextPlus);
                    }
                    void 0 != adjustRow && this.AdjustElement(row, adjustRow);
                    void 0 == root && (root = this.Get());
                    jQuery(row).prepend("<span title='Row' class=\"design-page-row \"> <span class='design-square-row'>Row</span> <span class='columns-add-text'>Columns <button class='jq-add-column btn btn-xs btn-danger'>+</button></span> </span>");
                    this.Add(root, row, void 0, void 0, void 0, void 0, beforeAfter);
                    if ((root.hasClass("empty-container-image") || root.hasClass("empty-container-text")) && !row.hasClass("row")) {
                        row.wrap("<div class='table-row'></div>");
                        row.before("<div class='table-cell'></div>");
                        row.addClass("table-cell");
                        return row.parent();
                    }
                    return row;
                }
            };
            PageElementBaseJQ.prototype.AdjustElement = function(element, adjust) {
                if (1 == this.ProcessKey() && void 0 != element && void 0 != adjust) {
                    void 0 != adjust.height && jQuery(element).css("min-height", adjust.height + "px");
                    void 0 != adjust.width && jQuery(element).css("width", adjust.width + "px");
                    if (void 0 != adjust.padding) {
                        var padding = adjust.padding;
                        if (void 0 != padding.all) jQuery(element).css("padding", padding.all + "px"); else {
                            void 0 != padding.left && jQuery(element).css("padding-left", padding.left + "px");
                            void 0 != padding.top && jQuery(element).css("padding-top", padding.top + "px");
                            void 0 != padding.right && jQuery(element).css("padding-right", padding.right + "px");
                            void 0 != padding.bottom && jQuery(element).css("padding-bottom", padding.bottom + "px");
                        }
                    }
                    if (void 0 != adjust.margin) {
                        var margin = adjust.margin;
                        if (void 0 != margin.all) jQuery(element).css("margin", margin.all + "px"); else {
                            void 0 != margin.left && jQuery(element).css("margin-left", margin.left + "px");
                            void 0 != margin.top && jQuery(element).css("margin-top", margin.top + "px");
                            void 0 != margin.right && jQuery(element).css("margin-right", margin.right + "px");
                            void 0 != margin.bottom && jQuery(element).css("margin-bottom", margin.bottom + "px");
                        }
                    }
                }
            };
            PageElementBaseJQ.prototype.Add = function(root, element, className, rowcolumn, front, useSmartObj, beforeAfter) {
                if (1 != impmal.MalFormed.MalFormedJQ.IsMalFormed && 1 == this.ProcessKey()) {
                    void 0 != element && element.find(".debug-css").html("");
                    var row = 0, column = 0;
                    void 0 == root && (root = this.Get());
                    if (void 0 != rowcolumn) {
                        if ("" != rowcolumn) {
                            var rowcolumNumber = rowcolumn.toString().split(" ");
                            try {
                                var tempForTry = Number(rowcolumNumber[0]);
                                tempForTry = Number(rowcolumNumber[1]);
                            } catch (ex) {
                                this.Log("Add(): Row or Column is not a number : provided values (" + rowcolumn + ")");
                                return;
                            }
                            if (void 0 != rowcolumNumber && rowcolumNumber.length > 1) {
                                row = Number(rowcolumNumber[0]) + 1;
                                column = Number(rowcolumNumber[1]);
                            }
                        }
                        if (!(jQuery(root).find(".jqRootRow:nth-child(" + row + ")").children().eq(column).length > 0)) {
                            this.Log(" Add() : [" + jQuery(root).attr("class") + "] do not have row column [" + row + "," + column + "] to add element");
                            return;
                        }
                        root = jQuery(root).find(".jqRootRow:nth-child(" + row + ")").children().eq(column);
                    } else this.Log("Warning : Please Add Row to  [" + jQuery(root).attr("class") + "] ");
                    if (void 0 != element) {
                        if ("object" != typeof element) {
                            var tempElement = document.createElement("span");
                            jQuery(tempElement).append(element);
                            element = jQuery(tempElement);
                        }
                        jQuery(element).addClass(className);
                    }
                    element.attr("class");
                    if (1 == useSmartObj && null != window.smartObj && null != window.smartObj.currentObj && "" != window.smartObj.command) if ("n" == window.smartObj.command || "" == window.smartObj.command) {
                        $(window.smartObj.currentObj).after(element);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    } else {
                        $(window.smartObj.currentObj).before(element);
                        var undomanager = new impUndoManager.Manager.UndoManager();
                        undomanager.BeforeOperation();
                    } else if (1 == front) jQuery("div[src='xa.xml']").length > 2 && 1 == impAuth.Auth.AuthJQ.IsAuth && $(root).prepend(element); else if (jQuery("div[src='xa.xml']").length > 2 && 1 == impAuth.Auth.AuthJQ.IsAuth) {
                        if (void 0 == jQuery(root).attr("unique-id")) {
                            uniqureId++;
                            jQuery(root).attr("unique-id", uniqureId);
                        }
                        void 0 == beforeAfter ? $(root).append(element) : 1 == beforeAfter ? $(root).before(element) : $(root).after(element);
                        if (jQuery(element).hasClass("jq-Any")) {
                            var undomanager = new impUndoManager.Manager.UndoManager();
                            undomanager.BeforeOperation();
                        } else {
                            var undomanager = new impUndoManager.Manager.UndoManager();
                            undomanager.BeforeOperation();
                        }
                    }
                }
            };
            PageElementBaseJQ.prototype.AddContent = function(content, className, rowcolumn, front) {
                this.CreateNotExist();
                void 0 != content && "" != content && this.Add(this.Get(), content, className, rowcolumn, front, void 0, void 0);
            };
            PageElementBaseJQ.prototype.AddTemplate = function(root, template, className, rowcolumn) {
                if (void 0 != root) {
                    (void 0 == template || "" == template) && (template = this.qualifiedTemplatePath);
                    template.indexOf(".html") > 0 ? this.Add(jQuery(root), jQuery('<div class="' + className + '" ng-include="\'/static/' + template + "'\"></div>"), className, rowcolumn, !1, void 0, void 0) : this.Add(jQuery(root), jQuery('<div class="' + className + '" ng-include="\'' + template + "'\"></div>"), className, rowcolumn, !1, void 0, void 0);
                } else new impError.ErrorHandle.ErrorJQ().LogMessage(" AddTemlate() > root is undefined");
            };
            PageElementBaseJQ.prototype.RemoveColumn = function(rowNumber, columnNumber) {
                var row = jQuery(this.Get()).find(".jqRootRow:nth-child(" + rowNumber + ")");
                jQuery(row).length > 0 ? jQuery(jQuery(row).children().eq(columnNumber)).remove() : this.Log("[" + rowNumber + "," + columnNumber + "] column not found");
            };
            PageElementBaseJQ.prototype.GetRow = function(rowNumber) {
                var row = jQuery(this.Get()).find(".jqRootRow:nth-child(" + rowNumber + ")");
                if (jQuery(row).length > 0) return jQuery(row);
                this.Log("[" + rowNumber + "] row not found");
            };
            PageElementBaseJQ.prototype.GetColumn = function(rowNumber, columnNumber) {
                rowNumber += 1;
                var row = jQuery(this.Get()).find(".jqRootRow:nth-child(" + rowNumber + ")");
                if (jQuery(row).length > 0) return jQuery(row).children().eq(columnNumber);
                this.Log("[" + rowNumber + "," + columnNumber + "] column not found");
            };
            PageElementBaseJQ.prototype.ProcessKey = function() {
                try {
                    var str = this.GetKey();
                    if (1 == this.IsInIframe()) return !1;
                    if (7 != impConstants.Constants.ConstantsJQ.SecureStrLength) return !1;
                    for (var j = 0, i = 6; i >= 0; i--) {
                        if (this.NextChar(str[j]) != impConstants.Constants.ConstantsJQ.Str[i]) return !1;
                        j++;
                    }
                    return !0;
                } catch (ex) {
                    return !1;
                }
            };
            PageElementBaseJQ.prototype.GetKey = function() {
                return new impUrl.Common.UrlJQ().GetDocumentLocation();
            };
            PageElementBaseJQ.prototype.IsInIframe = function() {
                try {
                    return window.self !== window.top;
                } catch (e) {
                    return !0;
                }
            };
            PageElementBaseJQ.prototype.NextChar = function(c) {
                return String.fromCharCode(c.charCodeAt(0) + 1);
            };
            return PageElementBaseJQ;
        }();
        Page.PageElementBaseJQ = PageElementBaseJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Page/HeaderJQ", [ "require", "exports", "./PageElementBaseJQ", "../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var HeaderJQ = function(_super) {
            function HeaderJQ(extra, typeName) {
                void 0 != typeName || (typeName = "Header");
                _super.call(this, null, typeName, impConsts.Constants.ConstantsJQ.PAGEROOT, null);
            }
            __extends(HeaderJQ, _super);
            return HeaderJQ;
        }(impPage.Page.PageElementBaseJQ);
        Page.HeaderJQ = HeaderJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Page/MenuBarJQ", [ "require", "exports", "./PageElementBaseJQ", "../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var MenuBarJQ = function(_super) {
            function MenuBarJQ(extra, typeName) {
                void 0 != typeName || (typeName = "MenuBar");
                _super.call(this, null, typeName, impConsts.Constants.ConstantsJQ.PAGEROOT, null);
            }
            __extends(MenuBarJQ, _super);
            return MenuBarJQ;
        }(impPage.Page.PageElementBaseJQ);
        Page.MenuBarJQ = MenuBarJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Page/ContentJQ", [ "require", "exports", "./PageElementBaseJQ", "../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var ContentJQ = function(_super) {
            function ContentJQ(extra, typeName) {
                void 0 != typeName || (typeName = "Content");
                _super.call(this, null, typeName, impConsts.Constants.ConstantsJQ.PAGEROOT, null);
            }
            __extends(ContentJQ, _super);
            return ContentJQ;
        }(impPage.Page.PageElementBaseJQ);
        Page.ContentJQ = ContentJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Page/FooterJQ", [ "require", "exports", "./PageElementBaseJQ", "../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var FooterJQ = function(_super) {
            function FooterJQ(extra, typeName) {
                void 0 != typeName || (typeName = "Footer");
                _super.call(this, null, typeName, impConsts.Constants.ConstantsJQ.PAGEROOT, null);
            }
            __extends(FooterJQ, _super);
            return FooterJQ;
        }(impPage.Page.PageElementBaseJQ);
        Page.FooterJQ = FooterJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

var __extends = this && this.__extends || function(d, b) {
    function __() {
        this.constructor = d;
    }
    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
};

define("Page/AnyJQ", [ "require", "exports", "./PageElementBaseJQ", "../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var AnyJQ = function(_super) {
            function AnyJQ(extra) {
                _super.call(this, null, "Any", impConsts.Constants.ConstantsJQ.PAGEROOT, null);
            }
            __extends(AnyJQ, _super);
            return AnyJQ;
        }(impPage.Page.PageElementBaseJQ);
        Page.AnyJQ = AnyJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

define("Page/PageJQ", [ "require", "exports", "./HeaderJQ", "./MenuBarJQ", "./ContentJQ", "./FooterJQ", "./AnyJQ", "../Menu/MenuTemplateJQ" ], function(require, exports, impHeader, impMenuBar, impContent, impFooter, impAny, impMenuTemplate) {
    "use strict";
    var Page;
    !function(Page) {
        var PageJQ = function() {
            function PageJQ(configuration) {
                this.pageConfiguration = configuration;
                this.Header = new impHeader.Page.HeaderJQ(null);
                this.MenuBar = new impMenuBar.Page.MenuBarJQ(null);
                this.MenuTemplate = new impMenuTemplate.Page.Menu.MenuTemplateJQ();
                this.Content = new impContent.Page.ContentJQ(null);
                this.Footer = new impFooter.Page.FooterJQ(null);
                this.Any = new impAny.Page.AnyJQ(null);
            }
            return PageJQ;
        }();
        Page.PageJQ = PageJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

define("Page/Context/ContextJQ", [ "require", "exports", "../PageJQ", "../../Constants/ConstantsJQ" ], function(require, exports, impPage, impConsts) {
    "use strict";
    var Page;
    !function(Page) {
        var ContextJQ = function() {
            function ContextJQ() {
                this.Page = new impPage.Page.PageJQ(null);
                this.Constants = new impConsts.Constants.ConstantsJQ();
            }
            return ContextJQ;
        }();
        Page.ContextJQ = ContextJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

define("ContextMenu/ContextMenuJQ", [ "require", "exports", "../Watch/WatchMouseJQ", "../Controls/ControlsJQ", "../Watch/CopyPasteJQ", "../Controls/ImageJQ", "../Controls/BorderJQ", "../Controls/ColorJQ", "../Controls/TextJQ", "../SmartMenu/SmartMenuJQ", "../Controls/Menujq", "../Controls/BIjq", "../Controls/SpacerJQ", "../Controls/LinkJQ", "../Controls/HtmlJQ", "../Controls/MarginJQ", "../Controls/PaddingJQ", "../Controls/FrontBackJQ", "../Controls/OpacityJQ", "../Controls/BorderShadow" ], function(require, exports, impWatch, impAddRowControl, impCopy, impInsertImage, impBorder, impColor, impText, impHeightWidth, impMenuControl, impBi, impSpacer, impLink, impHtml, impMargin, impPadding, impFrontBack, impOpacity, impBorderShadow) {
    "use strict";
    var ContextMenu, G_isAttachedContextMenu = !1, CTX_MENU_DISABLED_CLASS = "ctx-menu-disabled", ctxMenuIsReady = !1;
    !function(ContextMenu) {
        var ContextMenuJQ = function() {
            function ContextMenuJQ(extra) {
                this.controlId = "#contextMenu";
            }
            ContextMenuJQ.prototype.Init = function() {
                this.MainEvents();
            };
            ContextMenuJQ.ContextMenuBinding = function() {
                jQuery(document).on("click", function(e) {
                    var contextMenu = new ContextMenuJQ();
                    contextMenu.DetectContextMenu();
                });
                jQuery(document).bind("contextmenu", function(e) {
                    impWatch.Watch.MouseJQ.ProcessClick(e);
                    window.setTimeout(function() {
                        try {
                            impWatch.Watch.MouseJQ.nearestElement = jQuery("#nononononelement");
                            var x = e.clientX, y = e.clientY + $(document).scrollTop();
                            jQuery(".nearest-element").removeClass("nearest-element");
                            var column = impWatch.Watch.MouseJQ.selectedElement;
                            impWatch.Watch.MouseJQ.selectedElement.hasClass("image-text-other") && (column = impWatch.Watch.MouseJQ.selectedElement.closest(".column"));
                            if (column.hasClass("column")) {
                                var $elements = impWatch.Watch.MouseJQ.selectedElement.find(".image-text-other"), nearestLeftArray = [], nearestTopArray = [];
                                if ($elements.length > 0) {
                                    $elements.each(function(index, _this) {
                                        var $this = $(_this), top = parseFloat($this.attr("top")), bottom = parseFloat($this.attr("bottom")), left = parseFloat($this.attr("left"));
                                        if (y >= top && bottom >= y && x >= left) {
                                            nearestLeftArray.push(left);
                                            nearestTopArray.push(top);
                                        }
                                    });
                                    var nearestLeft = 0, nearestTop = 0;
                                    nearestLeftArray.length > 0 && (nearestLeft = Math.max.apply(Math, nearestLeftArray));
                                    nearestTopArray.length > 0 && (nearestTop = Math.max.apply(Math, nearestTopArray));
                                    column.find(".image-text-other[left='" + nearestLeft + "'][top='" + nearestTop + "']").addClass("nearest-element");
                                    impWatch.Watch.MouseJQ.nearestElement = jQuery(".nearest-element").first();
                                }
                            }
                        } catch (ex) {}
                    }, 5);
                    e.preventDefault();
                    var contextMenu = new ContextMenuJQ();
                    contextMenu.DetectContextMenu();
                    var pageY = e.clientY;
                    pageY >= 350 && (pageY -= jQuery("#contextMenu").height());
                    var pageX = e.clientX;
                    pageX > jQuery(document).width() - 200 && (pageX -= 150);
                    jQuery(contextMenu.controlId).css("left", pageX + "px");
                    jQuery(contextMenu.controlId).css("top", pageY + "px");
                    jQuery(contextMenu.controlId).fadeIn(500);
                    e.cancelBubble = !1;
                });
            };
            ContextMenuJQ.prototype.DetectContextMenu = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                if (void 0 != selectedElement) {
                    jQuery(".ctx-menu-add-row").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-cut").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-copy").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-paste").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-text").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-image").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-youtube").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-html").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-css").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-menu").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-empty-space").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-link").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-insert-object").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    jQuery(".ctx-menu-delete-element").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    selectedElement.hasClass("root-elements") && jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    if (selectedElement.hasClass("jqRootRow")) {
                        jQuery(".ctx-menu-cut").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-copy").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-paste").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    }
                    if (selectedElement.hasClass("column")) {
                        jQuery(".ctx-menu-paste").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert-image").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    }
                    if (selectedElement.hasClass("image-text-other")) {
                        jQuery(".ctx-menu-cut").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-copy").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-paste").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-insert-image").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-delete-element").parent().removeClass(CTX_MENU_DISABLED_CLASS);
                    }
                    if (selectedElement.hasClass("page")) {
                        jQuery(".ctx-menu-add-row").parent().addClass(CTX_MENU_DISABLED_CLASS);
                        jQuery(".ctx-menu-height-width").parent().addClass(CTX_MENU_DISABLED_CLASS);
                    }
                }
            };
            ContextMenuJQ.AttachDeleteElement = function() {
                jQuery(".li.ctx-menu-delete-element").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.DeleteElement();
                });
            };
            ContextMenuJQ.AttachInsertLinkContainer = function() {
                jQuery(".li.ctx-menu-insert-link-container").on("click", function() {
                    window.smartObj = null;
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || impCopy.CopyPaste.CopyPasteJQ.CreateLinkContainer();
                });
            };
            ContextMenuJQ.AttachInsertLink = function() {
                new impLink.Link.LinkJQ().Init();
                jQuery(".ctx-menu-insert-link").on("click", function() {
                    window.smartObj = null;
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowControlInsertLink();
                        impLink.Link.LinkJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachInsertHTML = function() {
                new impHtml.Html.HtmlJQ().Init();
                jQuery(".ctx-menu-insert-html").on("click", function() {
                    window.smartObj = null;
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.ShowControlInsertHTML();
                });
            };
            ContextMenuJQ.AttachInsertText = function() {
                jQuery(".li.smart-menu-insert-text").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("Sample text to edit");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".li.ctx-menu-insert-text").on("click", function() {
                    window.smartObj = null;
                    impText.Text.TextJQ.InsertTextBlock("Sample text to edit");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-normal-text").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock(" Sample text to edit");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-1").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h1> Heading1 to edit</h1>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-2").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h2> Heading2 to edit</h2>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-3").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h3> Heading3 to edit</h3>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-4").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h4> Heading4 to edit</h4>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
                jQuery(".tool-heading-5").on("click", function() {
                    impText.Text.TextJQ.InsertTextBlock("<h5> Heading5 to edit</h5>");
                    impText.Text.TextJQ.ProcessSelectNotify();
                });
            };
            ContextMenuJQ.AttachControlPageClose = function() {
                jQuery(".control-templates").find(".close-button").on("click", function() {
                    jQuery(".control-page").removeClass("control-active");
                    ContextMenuJQ.ShowProperties();
                });
                jQuery(".control-page").find(".close-button").on("click", function() {
                    jQuery(".control-page").removeClass("control-active");
                    ContextMenuJQ.ShowProperties();
                    jQuery(".internet-bi-image-url").val("");
                    jQuery(".internet-image-url").val("");
                });
            };
            ContextMenuJQ.ShowProperties = function() {
                jQuery(".jq-properties-all").hasClass("forced-hide") || jQuery(".jq-properties-all").show();
            };
            ContextMenuJQ.ControlPageHide = function() {
                jQuery(".control-page").hide();
                jQuery(".control-page").attr("style", "");
                jQuery(".control-page").css("display", "none");
                jQuery(".control-page").removeClass("control-active");
                if ("block" == jQuery(".jq-properties-all").css("display")) {
                    jQuery(".jq-properties-all").addClass("normal-hide");
                    jQuery(".jq-properties-all").hide();
                } else jQuery(".jq-properties-all").hasClass("forced-hide") || jQuery(".jq-properties-all").show();
            };
            ContextMenuJQ.ShowControlInsertLink = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-insert-link").addClass("control-active");
                impLink.Link.LinkJQ.Show();
            };
            ContextMenuJQ.ShowControlInsertHTML = function() {
                ContextMenuJQ.ControlPageHide();
                impHtml.Html.HtmlJQ.Show();
            };
            ContextMenuJQ.ShowControlInsertText = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".editor").show();
                jQuery(".jqte-editor, .column").removeClass("current-editor-scope");
                jQuery(this).find(".jqte-editor").addClass("current-editor-scope");
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-insert-text").addClass("control-active");
                jQuery("#control-insert-text").show();
                jQuery("#control-insert-text").trigger("cust_loaded");
            };
            ContextMenuJQ.ShowControlAddRow = function() {
                ContextMenuJQ.ControlPageHide();
                var controlId = impAddRowControl.Page.AddRowJQ.pageId;
                jQuery(".control-page").removeClass("control-active");
                jQuery(controlId).addClass("control-active");
                jQuery(controlId).show();
                jQuery(controlId).trigger("cust_loaded");
            };
            ContextMenuJQ.ShowMenu = function() {
                new impMenuControl.Menu.MenuJQ().Init();
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery(".control-menu").addClass("control-active");
                jQuery(".control-menu").show();
                impMenuControl.Menu.MenuJQ.ProcessShow();
            };
            ContextMenuJQ.InsertImage = function() {
                ContextMenuJQ.ControlPageHide();
                var controlId = impInsertImage.Image.SelfJQ.controlId;
                jQuery(".control-page").removeClass("control-active");
                jQuery(controlId).addClass("control-active");
                jQuery(".action-button-insert-image").show();
                jQuery(".action-button-change-image").hide();
                jQuery(controlId).show();
                jQuery(controlId).trigger("custom_loaded");
            };
            ContextMenuJQ.CopyElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Copy();
            };
            ContextMenuJQ.DeleteElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Delete();
            };
            ContextMenuJQ.CutElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Cut();
            };
            ContextMenuJQ.PasteElement = function() {
                impCopy.CopyPaste.CopyPasteJQ.Paste();
            };
            ContextMenuJQ.PasteClipBorad = function() {
                jQuery(".jq-clipboard").html("");
                jQuery("#control-insert-clipboard").show();
            };
            ContextMenuJQ.ShowControlHeightWidth = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-height-width").addClass("control-active");
                jQuery("#control-height-width").show();
            };
            ContextMenuJQ.ShowBorderControl = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-border").addClass("control-active");
                jQuery("#control-border").show();
            };
            ContextMenuJQ.ShowMarginControl = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-margin").addClass("control-active");
                jQuery("#control-margin").show();
            };
            ContextMenuJQ.ShowPaddingControl = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-padding").addClass("control-active");
                jQuery("#control-padding").show();
            };
            ContextMenuJQ.ShowOpacity = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-opacity").addClass("control-active");
                jQuery("#control-opacity").show();
            };
            ContextMenuJQ.ShowZindex = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-zindex").addClass("control-active");
                jQuery("#control-zindex").show();
            };
            ContextMenuJQ.ShowBS = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-border-shadow").addClass("control-active");
                jQuery("#control-border-shadow").show();
            };
            ContextMenuJQ.ShowColor = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-color").addClass("control-active");
                jQuery("#control-color").show();
            };
            ContextMenuJQ.ShowBackgroundImage = function() {
                ContextMenuJQ.ControlPageHide();
                jQuery(".control-page").removeClass("control-active");
                jQuery("#control-bi").addClass("control-active");
                jQuery("#control-bi").show();
            };
            ContextMenuJQ.AttachAddRow = function() {
                jQuery(".li.ctx-menu-add-row").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowControlAddRow();
                        impAddRowControl.Page.AddRowJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachHeightWidth = function() {
                jQuery(".li.ctx-menu-height-width").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowControlHeightWidth();
                        impHeightWidth.Smart.SmartMenuJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachBorder = function() {
                new impBorder.Border.BorderJQ().Init();
                jQuery(".li.ctx-menu-border").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowBorderControl();
                        impBorder.Border.BorderJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachMargin = function() {
                new impMargin.Margin.MarginJQ().Init();
                jQuery(".li.ctx-menu-margin").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowMarginControl();
                        impMargin.Margin.MarginJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachPadding = function() {
                new impPadding.Padding.PaddingJQ().Init();
                jQuery(".li.ctx-menu-padding").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowPaddingControl();
                        impPadding.Padding.PaddingJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachOpacity = function() {
                new impOpacity.Opacity.OpacityJQ().Init();
                jQuery(".li.ctx-menu-opacity").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowOpacity();
                        impOpacity.Opacity.OpacityJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachZindex = function() {
                new impFrontBack.FrontBack.FrontBackJQ().Init();
                jQuery(".li.ctx-menu-z-index").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowZindex();
                        impFrontBack.FrontBack.FrontBackJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachBorderShadow = function() {
                new impBorderShadow.BorderShadow.BorderShadowJQ().Init();
                jQuery(".li.ctx-menu-border-shadow").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowBS();
                        impBorderShadow.BorderShadow.BorderShadowJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachCopy = function() {
                jQuery(".li.ctx-menu-copy").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.CopyElement();
                });
            };
            ContextMenuJQ.AttachCut = function() {
                jQuery(".li.ctx-menu-cut").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.CutElement();
                });
            };
            ContextMenuJQ.AttachPaste = function() {
                jQuery(".li.ctx-menu-paste").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.PasteElement();
                });
            };
            ContextMenuJQ.AttachPasteClipBorad = function() {
                jQuery(".li.ctx-menu-paste-clipborad").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || ContextMenuJQ.PasteClipBorad();
                });
            };
            ContextMenuJQ.AttachSpacer = function() {
                jQuery(".smart-menu-insert-empty-space").on("click", function() {
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || impSpacer.Spacer.SpacerJQ.InsertSpacer();
                });
                jQuery(".ctx-menu-insert-empty-space").on("click", function() {
                    window.smartObj = null;
                    jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS) || impSpacer.Spacer.SpacerJQ.InsertSpacer();
                });
            };
            ContextMenuJQ.AttachInsertImage = function() {
                new impInsertImage.Image.SelfJQ().Init();
                jQuery(".li.smart-menu-insert-image").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.InsertImage();
                        impInsertImage.Image.SelfJQ.ProcessSelectNotify();
                    }
                });
                jQuery(".li.ctx-menu-insert-image").on("click", function() {
                    window.smartObj = null;
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.InsertImage();
                        impInsertImage.Image.SelfJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachBackgroundImage = function() {
                new impBi.BI.BIJQ().Init();
                jQuery(".li.ctx-menu-background-image").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowBackgroundImage();
                        impBi.BI.BIJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachInsertMenu = function() {
                jQuery(".li.ctx-menu-insert-menu").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowMenu();
                        impMenuControl.Menu.MenuJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.AttachColor = function() {
                new impColor.Color.ColorJQ().Init();
                jQuery(".li.ctx-menu-color").on("click", function() {
                    if (!jQuery(this).parent().hasClass(CTX_MENU_DISABLED_CLASS)) {
                        ContextMenuJQ.ShowColor();
                        impColor.Color.ColorJQ.ProcessSelectNotify();
                    }
                });
            };
            ContextMenuJQ.ContextInnerMenuShowHide = function() {
                jQuery("#contextMenuitems").find(".li").on("mouseenter", function(e) {
                    var left = 147;
                    e.pageX > $(document).width() - 200 && (left = -150);
                    jQuery(this).parent().find(".innerListContainer").first().css("left", left + "px");
                    jQuery(this).parent().find(".innerListContainer").first().css("display", "block");
                });
                jQuery("#contextMenuitems").find("li").on("mouseleave", function(e) {
                    jQuery(this).find(".innerListContainer").first().css("display", "none");
                });
            };
            ContextMenuJQ.LiClick = function() {
                jQuery("#contextMenuitems > li").on("click", function() {});
            };
            ContextMenuJQ.prototype.MainEvents = function() {
                jQuery(document).ready(function() {
                    if (0 == ctxMenuIsReady) {
                        ctxMenuIsReady = !0;
                        jQuery(document).on("click", function() {
                            jQuery("#contextMenu").hide(500);
                            jQuery("#smInsertNextPrev").hide(500);
                        });
                        if (0 == G_isAttachedContextMenu) {
                            G_isAttachedContextMenu = !0;
                            ContextMenuJQ.ContextMenuBinding();
                            ContextMenuJQ.LiClick();
                            ContextMenuJQ.ContextInnerMenuShowHide();
                            ContextMenuJQ.AttachInsertLinkContainer();
                            ContextMenuJQ.AttachInsertLink();
                            ContextMenuJQ.AttachInsertHTML();
                            ContextMenuJQ.AttachInsertText();
                            ContextMenuJQ.AttachAddRow();
                            ContextMenuJQ.AttachDeleteElement();
                            ContextMenuJQ.AttachHeightWidth();
                            ContextMenuJQ.AttachCopy();
                            ContextMenuJQ.AttachPaste();
                            ContextMenuJQ.AttachPasteClipBorad();
                            ContextMenuJQ.AttachCut();
                            ContextMenuJQ.AttachInsertImage();
                            ContextMenuJQ.AttachSpacer();
                            ContextMenuJQ.AttachBorder();
                            ContextMenuJQ.AttachMargin();
                            ContextMenuJQ.AttachZindex();
                            ContextMenuJQ.AttachBorderShadow();
                            ContextMenuJQ.AttachOpacity();
                            ContextMenuJQ.AttachPadding();
                            ContextMenuJQ.AttachColor();
                            ContextMenuJQ.AttachInsertMenu();
                            ContextMenuJQ.AttachBackgroundImage();
                            ContextMenuJQ.AttachControlPageClose();
                        }
                    }
                });
            };
            return ContextMenuJQ;
        }();
        ContextMenu.ContextMenuJQ = ContextMenuJQ;
    }(ContextMenu = exports.ContextMenu || (exports.ContextMenu = {}));
});

define("_Classes/LoadingJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var Loading;
    !function(Loading) {
        var LoadingJQ = function() {
            function LoadingJQ(controlId) {
                this.src = "/content/loading/colors.gif";
                this.controlId = controlId;
                this.Create();
            }
            LoadingJQ.prototype.Create = function() {
                var loading = jQuery(".loading.clonable").clone();
                loading.removeClass("clonable");
                loading.addClass("new");
                loading.removeClass("hide");
                loading.find("img").first().attr("src", this.src);
                jQuery(this.controlId).find(".loading.new").remove();
                jQuery(this.controlId).append(loading);
            };
            LoadingJQ.prototype.Init = function() {
                this.Show();
            };
            LoadingJQ.prototype.IsExist = function() {
                return jQuery(this.controlId).find(".loading.new").length > 0 ? !0 : !1;
            };
            LoadingJQ.prototype.Show = function() {
                if (this.IsExist()) jQuery(this.controlId).find(".loading.new").first().show(); else {
                    this.Create();
                    jQuery(this.controlId).find(".loading.new").first().show();
                }
            };
            LoadingJQ.prototype.Hide = function() {
                jQuery(this.controlId).find(".loading.new").first().hide();
            };
            return LoadingJQ;
        }();
        Loading.LoadingJQ = LoadingJQ;
    }(Loading = exports.Loading || (exports.Loading = {}));
});

define("controls/controlcommonjq", [ "require", "exports", "./JQueryUI", "../common/on", "../JQte/OnInsert" ], function(require, exports, impJQueryUI, impOn, impJqteOnInsert) {
    "use strict";
    var ControlCommon;
    !function(ControlCommon) {
        var Code = function() {
            function Code() {}
            Code.AttachClick = function() {
                jQuery("#control-common-execute").on("click", function() {
                    Code.DestroyResizable();
                    Code.Execute();
                });
            };
            Code.Execute = function() {
                window.setTimeout(function() {
                    impOn.On.Code.Execute();
                    new impJqteOnInsert.OnInsert.Code().Init();
                    impJQueryUI.JQueryUI.CommonCode.ResizableColumn();
                    impJQueryUI.JQueryUI.CommonCode.Resizable(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other", "s");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other-left", "e");
                    impJQueryUI.JQueryUI.CommonCode.Draggable(".jq-normal-link .empty-container, .empty-container-menu, .empty-container-text, .empty-container-image, .empty-container-spacer", "");
                    jQuery(".empty-container-text, .empty-container-image").css("z-index", "0");
                    jQuery(".column").each(function() {
                        if (0 == jQuery(this).children(".image-text-other.empty-container-image, .image-text-other.empty-container-text, .row, .column").length) {
                            jQuery(this).addClass("empty");
                            0 == jQuery(this).find(".empty-drop-element").length && jQuery(this).append("<div class='image-text-other empty-drop-element' ></div>");
                        } else {
                            jQuery(this).removeClass("empty");
                            jQuery(this).find(".empty-drop-element").remove();
                        }
                    });
                    jQuery(".image-text-other, .empty-container-empty").each(function(index, _this) {
                        var $this = jQuery(_this), bottom = $this.offset().top + $this.height(), top = $this.offset().top, left = $this.offset().left;
                        $this.attr("top", top);
                        $this.attr("bottom", bottom);
                        $this.attr("left", left);
                    });
                    impJQueryUI.JQueryUI.CommonCode.Droppable(".column, .empty-container, .image-text-other");
                    jQuery(".ui-resizable-e").html("<div class='jq-square jq-square-e'></div>");
                    jQuery(".ui-resizable-se").html("<div class='jq-square jq-square-se'></div>");
                    jQuery(".ui-resizable-s").html("<div class='jq-square jq-square-s'></div>");
                }, 10);
            };
            Code.DestroyResizable = function() {
                impJQueryUI.JQueryUI.CommonCode.DroppableDestroy(".column, .empty-container, .image-text-other");
                impJQueryUI.JQueryUI.CommonCode.DraggableDestroy(".jq-normal-link, .empty-container, .empty-container-menu, .empty-container-text .empty-container-image, .empty-container-spacer");
                impJQueryUI.JQueryUI.CommonCode.ResizableDestroy(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image, .column, .empty-container, .root-elements, .adjust-image-text-other, .adjust-image-text-other-left");
            };
            Code.AnchorClicked = !1;
            return Code;
        }();
        ControlCommon.Code = Code;
    }(ControlCommon = exports.ControlCommon || (exports.ControlCommon = {}));
});

define("Themes/EmptyLayout/EmptyLayoutJQ", [ "require", "exports", "../../Page/HeaderJQ", "../../Page/MenuBarJQ", "../../Page/ContentJQ", "../../Page/FooterJQ", "../../_Classes/CssClass", "../../_Classes/LoadingJQ", "../../page/anyjq", "../../Error/ErrorJQ", "../../UndoManager/UndoManager", "../../Preview/Preview", "../../ContextMenu/ContextMenuJQ", "../../controls/controlcommonjq" ], function(require, exports, impHeader, impMenuBar, impBody, impFooter, impCss, impLoading, impAny, impError, impUndoManager, impPreview, impCtxMenu, impControlCommon) {
    "use strict";
    window.layoutCreating = !0;
    var Themes;
    !function(Themes) {
        var Empty;
        !function(Empty) {
            var LayoutJQ = function() {
                function LayoutJQ() {
                    this.controlId = "#control-templates";
                    window.layoutCreating = !0;
                    LayoutJQ.loading = new impLoading.Loading.LoadingJQ(this.controlId);
                    LayoutJQ.loading.Init();
                }
                LayoutJQ.prototype.Init = function() {
                    try {
                        this.Layout(LayoutJQ.layout);
                        this.Layout(LayoutJQ.layout3);
                        this.Layout(LayoutJQ.layout6);
                        this.Layout(LayoutJQ.layout1);
                        this.Layout(LayoutJQ.layout4);
                        this.Layout(LayoutJQ.layout7);
                        this.Layout(LayoutJQ.layout2);
                        this.Layout(LayoutJQ.layout5);
                        this.Layout(LayoutJQ.layout8);
                        jQuery(".empty-layout-templates").find(".ui-resizable-handle").hide();
                        jQuery(".empty-layout-templates .row").removeClass("design-row");
                        jQuery(".empty-layout-templates .column").css("outline", "1px solid #282424");
                        jQuery(".empty-layout-templates .root-elements").css("padding", "0");
                        this.Attach();
                    } catch (ex) {}
                    window.layoutCreating = !1;
                    var undo = new impUndoManager.Manager.UndoManager();
                    undo.BeforeOperation();
                };
                LayoutJQ.prototype.Attach = function() {
                    jQuery(".empty-layout").on("click", function() {
                        jQuery(".empty-layout").removeClass("empty-layout-select");
                        jQuery(this).addClass("empty-layout-select");
                    });
                    jQuery(".create-layout-show-button").on("click", function() {
                        impPreview.Preview.PreviewJQ.ClosePreview();
                        jQuery(".jq-row-plus-container").hide();
                        impCtxMenu.ContextMenu.ContextMenuJQ.ControlPageHide();
                        jQuery(".control-templates").show();
                        jQuery(".control-templates").addClass("control-active");
                        jQuery(".empty-layout-templates .row").removeClass("padding-root-elements");
                        jQuery(".empty-layout-templates").find(".ui-resizable-handle").hide();
                        jQuery(".empty-layout-templates .row").removeClass("design-row");
                        jQuery(".empty-layout-templates .column").addClass("design-column");
                        jQuery(".empty-layout-templates .root-elements").css("padding", "0");
                    });
                    jQuery(".control-templates .close-button").click(function() {
                        (void 0 == jQuery(".empty-layout-select").attr("layout-id") || "" == jQuery(".empty-layout-select").attr("layout-id")) && LayoutJQ.CreateLayout("0", this);
                        jQuery(".column").removeClass("column-layout-border-yellow");
                        jQuery(".column").removeClass("column-layout-border-brown");
                    });
                    jQuery(".action-button-layout-create").on("click", function() {
                        LayoutJQ.CreateLayout(void 0, this);
                    });
                };
                LayoutJQ.CreateLayout = function(layoutId, $this) {
                    void 0 == layoutId && (layoutId = jQuery(".empty-layout-select").attr("layout-id"));
                    var errorHandler = new impError.ErrorHandle.ErrorJQ();
                    if (void 0 != layoutId) {
                        var layout = void 0;
                        switch (layoutId) {
                          case "0":
                            layout = LayoutJQ.layout;
                            break;

                          case "1":
                            layout = LayoutJQ.layout1;
                            break;

                          case "2":
                            layout = LayoutJQ.layout2;
                            break;

                          case "3":
                            layout = LayoutJQ.layout3;
                            break;

                          case "4":
                            layout = LayoutJQ.layout4;
                            break;

                          case "5":
                            layout = LayoutJQ.layout5;
                            break;

                          case "6":
                            layout = LayoutJQ.layout6;
                            break;

                          case "7":
                            layout = LayoutJQ.layout7;
                            break;

                          case "8":
                            layout = LayoutJQ.layout8;
                        }
                        if (void 0 != layout) {
                            var anyJQ = new impAny.Page.AnyJQ(""), staticElement = '<span title class="page-static-element-circle design-root-elements-static"> </span>';
                            jQuery("page .root-elements").html("");
                            anyJQ.AddRow(jQuery(".jq-Header"), layout.header.cols, "layout-column", void 0, void 0);
                            var newStaticElementWithTitle = staticElement.replace("title", "title='Header'");
                            jQuery(".jq-Header").prepend(newStaticElementWithTitle);
                            var adjustColumnHeightMB = new impCss.CssClass.AdjustJQ();
                            adjustColumnHeightMB.height = 50;
                            anyJQ.AddRow(jQuery(".jq-MenuBar"), layout.menuBar.cols, "layout-column", void 0, adjustColumnHeightMB);
                            newStaticElementWithTitle = staticElement.replace("title", "title='Menu Bar'");
                            jQuery(".jq-MenuBar").prepend(newStaticElementWithTitle);
                            var adjustColumnHeight = new impCss.CssClass.AdjustJQ();
                            adjustColumnHeight.height = 500;
                            anyJQ.AddRow(jQuery(".jq-Content"), layout.body.cols, "layout-column", void 0, adjustColumnHeight);
                            newStaticElementWithTitle = staticElement.replace("title", "title='Body'");
                            jQuery(".jq-Content").prepend(newStaticElementWithTitle);
                            anyJQ.AddRow(jQuery(".jq-Footer"), layout.footer.cols, "layout-column", void 0, void 0);
                            newStaticElementWithTitle = staticElement.replace("title", "title='Footer'");
                            jQuery(".jq-Footer").prepend(newStaticElementWithTitle);
                            errorHandler.ActionSuccess("Layout Created");
                            jQuery($this).closest(".control-page").hide();
                            var undoManager = new impUndoManager.Manager.UndoManager();
                            undoManager.PopUndo();
                            undoManager.PopUndo();
                            undoManager.PopUndo();
                            undoManager.PopUndo();
                            jQuery(".page").show();
                            impControlCommon.ControlCommon.Code.DestroyResizable();
                            impControlCommon.ControlCommon.Code.Execute();
                            undoManager.BeforeOperation();
                        } else errorHandler.ActionFail("Please try after some time.");
                    } else errorHandler.ActionFail("Please select a layout.!");
                    jQuery(".jq-row-plus-container").hide();
                };
                LayoutJQ.prototype.Layout = function(layout) {
                    var templateId = "template-" + layout.templateNumber, templateWrapper = jQuery(document.createElement("div"));
                    templateWrapper.addClass("empty-template-wrapper");
                    var template = jQuery(document.createElement("div")), dotTemplateId = ".template-" + layout.templateNumber;
                    template.addClass("float-left");
                    template.addClass("empty-layout");
                    template.addClass(templateId);
                    template.attr("layout-id", layout.templateNumber + "");
                    templateWrapper.append(template);
                    jQuery(".empty-layout-templates").append(templateWrapper);
                    var commonId = "T" + layout.templateNumber, headerId = commonId + "Header", header = new impHeader.Page.HeaderJQ("", headerId);
                    header.rootWrapper = dotTemplateId;
                    header.scopeId = ".empty-layout-templates";
                    var menuBarId = commonId + "MenuBar", menuBar = new impMenuBar.Page.MenuBarJQ("", menuBarId);
                    menuBar.rootWrapper = dotTemplateId;
                    menuBar.scopeId = ".empty-layout-templates";
                    var bodyId = commonId + "Body", body = new impBody.Page.ContentJQ("", bodyId);
                    body.rootWrapper = dotTemplateId;
                    body.scopeId = ".empty-layout-templates";
                    var footerId = commonId + "Footer", footer = new impFooter.Page.FooterJQ("", footerId);
                    footer.rootWrapper = dotTemplateId;
                    footer.scopeId = ".empty-layout-templates";
                    var adjustRow = new impCss.CssClass.AdjustJQ(), adjustColumn = new impCss.CssClass.AdjustJQ();
                    adjustRow.height = layout.header.height;
                    adjustColumn.height = layout.header.height;
                    header.AddRow(void 0, layout.header.cols, "layout-column", adjustRow, adjustColumn);
                    try {
                        header.GetColumn(1, 0).text("H");
                    } catch (ex) {}
                    adjustRow.height = layout.menuBar.height;
                    adjustColumn.height = layout.menuBar.height;
                    menuBar.AddRow(void 0, layout.menuBar.cols, "layout-column", adjustRow, adjustColumn);
                    try {
                        menuBar.GetColumn(1, 0).text("M");
                    } catch (ex) {}
                    adjustRow.height = layout.body.height;
                    adjustColumn.height = layout.body.height;
                    body.AddRow(void 0, layout.body.cols, "layout-column", adjustRow, adjustColumn);
                    try {
                        var column = body.GetColumn(1, 0);
                        column.text("B");
                    } catch (ex) {}
                    adjustRow.height = layout.footer.height;
                    adjustColumn.height = layout.footer.height;
                    footer.AddRow(void 0, layout.footer.cols, "layout-column", adjustRow, adjustColumn);
                    try {
                        var column = footer.GetColumn(1, 0);
                        column.text("F");
                    } catch (ex) {}
                };
                LayoutJQ.layout = {
                    templateNumber: 0,
                    header: {
                        height: 41,
                        cols: "col-xs-48"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-48"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout1 = {
                    templateNumber: 1,
                    header: {
                        height: 41,
                        cols: "col-xs-48"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-12 col-xs-36"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout2 = {
                    templateNumber: 2,
                    header: {
                        height: 41,
                        cols: "col-xs-48"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-12 col-xs-24 col-xs-12"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout3 = {
                    templateNumber: 3,
                    header: {
                        height: 41,
                        cols: "col-xs-12 col-xs-36"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-48"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout4 = {
                    templateNumber: 4,
                    header: {
                        height: 41,
                        cols: "col-xs-12 col-xs-36"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-12 col-xs-36"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout5 = {
                    templateNumber: 5,
                    header: {
                        height: 41,
                        cols: "col-xs-12 col-xs-36"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-12 col-xs-24 col-xs-12"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout6 = {
                    templateNumber: 6,
                    header: {
                        height: 41,
                        cols: "col-xs-12 col-xs-20 col-xs-16"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-48"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout7 = {
                    templateNumber: 7,
                    header: {
                        height: 41,
                        cols: "col-xs-12 col-xs-20 col-xs-16"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-12 col-xs-36"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                LayoutJQ.layout8 = {
                    templateNumber: 8,
                    header: {
                        height: 41,
                        cols: "col-xs-12 col-xs-20 col-xs-16"
                    },
                    menuBar: {
                        height: 5,
                        cols: "col-xs-48"
                    },
                    body: {
                        height: 70,
                        cols: "col-xs-12 col-xs-24 col-xs-12"
                    },
                    footer: {
                        height: 5,
                        cols: "col-xs-48"
                    }
                };
                return LayoutJQ;
            }();
            Empty.LayoutJQ = LayoutJQ;
        }(Empty = Themes.Empty || (Themes.Empty = {}));
    }(Themes = exports.Themes || (exports.Themes = {}));
});

define("Common/on", [ "require", "exports", "../page/anyjq", "../Watch/WatchMouseJQ" ], function(require, exports, impAny, impWatch) {
    "use strict";
    var On;
    !function(On) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        On.SmartObj = SmartObj;
        var Code = function() {
            function Code() {}
            Code.Execute = function() {
                Code.BindPlus();
                Code.BindEC();
            };
            Code.BindEC = function() {
                jQuery(".empty-container").unbind("click");
                jQuery(".empty-container").on("click", function() {
                    var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                    void 0 != selectedElement && selectedElement.hasClass("empty-container");
                });
            };
            Code.BindPlus = function() {
                jQuery(".jq-prev-row").unbind("click");
                jQuery(".jq-prev-row").on("click", function() {
                    var currentRow = jQuery(this).parentsUntil(".row"), anyjq = new impAny.Page.AnyJQ("");
                    anyjq.AddRow(currentRow, "col-xs-48", "", void 0, void 0, !0);
                });
                jQuery(".jq-next-row").unbind("click");
                jQuery(".jq-next-row").on("click", function() {
                    var currentRow = jQuery(this).parentsUntil(".row"), anyjq = new impAny.Page.AnyJQ("");
                    anyjq.AddRow(currentRow, "col-xs-48", "", void 0, void 0, !1);
                });
                jQuery(".jq-plus-prev").unbind("click");
                jQuery(".jq-plus-prev").on("click", function(e) {
                    window.smartObj = new SmartObj();
                    jQuery(this).hasClass("image-text-other") ? window.smartObj.currentObj = jQuery(this) : window.smartObj.currentObj = jQuery(this).closest(".image-text-other");
                    window.smartObj.command = "p";
                    window.smartObj.isDirty = !1;
                    e.stopPropagation();
                    var pageY = e.pageY;
                    jQuery(window).scrollTop() + pageY >= jQuery(window).height() - 250 && (pageY = e.pageY - 250);
                    var pageX = e.pageX;
                    e.pageX > $(document).width() - 200 && (pageX = e.pageX - 150);
                    jQuery("#smInsertNextPrev").css("left", pageX + "px");
                    jQuery("#smInsertNextPrev").css("top", pageY + "px");
                    jQuery("#smInsertNextPrev").fadeIn(500);
                });
                jQuery(".jq-plus-next").unbind("click");
                jQuery(".jq-plus-next").on("click", function(e) {
                    window.smartObj = new SmartObj();
                    jQuery(this).hasClass("image-text-other") ? window.smartObj.currentObj = jQuery(this) : window.smartObj.currentObj = jQuery(this).closest(".image-text-other");
                    window.smartObj.command = "n";
                    window.smartObj.isDirty = !1;
                    e.stopPropagation();
                    var pageY = e.pageY;
                    jQuery(window).scrollTop() + pageY >= jQuery(window).height() - 250 && (pageY = e.pageY - 180);
                    var pageX = e.pageX;
                    e.pageX > $(document).width() - 200 && (pageX = e.pageX - 150);
                    jQuery("#smInsertNextPrev").css("left", pageX + "px");
                    jQuery("#smInsertNextPrev").css("top", pageY + "px");
                    jQuery("#smInsertNextPrev").fadeIn(500);
                });
            };
            return Code;
        }();
        On.Code = Code;
    }(On = exports.On || (exports.On = {}));
});

define("_Classes/SaveJq", [ "require", "exports", "../Error/ErrorJQ" ], function(require, exports, impError) {
    "use strict";
    var Save;
    !function(Save) {
        var SaveJQ = function() {
            function SaveJQ() {}
            SaveJQ.prototype.Download = function(downloadData) {
                jQuery.ajax({
                    type: "POST",
                    url: "/services/pageService.asmx/download",
                    data: downloadData,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SaveJQ.OnDownloadSuccess,
                    error: SaveJQ.OnDownloadError
                });
            };
            SaveJQ.OnDownloadSuccess = function(data, status) {
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                "" != data.d.Error && null != data.d.Error || 1 != data.d.Success ? errorHandler.ActionFail("Unable to generate download link...") : errorHandler.ActionSuccess("Click on the download link below  <br> <a target='_blank' class='download-site-link' href='" + data.d.Link + "' > click here </a>");
            };
            SaveJQ.OnDownloadError = function(request, status, error) {
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.ActionFail("Unable to generate download link...");
            };
            SaveJQ.prototype.SavePage = function(saveData) {
                jQuery.ajax({
                    type: "POST",
                    url: "/services/pageService.asmx/savepage",
                    data: saveData,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: SaveJQ.OnSaveSuccess,
                    error: SaveJQ.OnSaveError
                });
            };
            SaveJQ.OnSaveSuccess = function(data, status) {
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                "" != data.d.Error ? errorHandler.ActionSuccess("Page saved") : errorHandler.ActionFail("Save Failed! <br> Try again later.");
            };
            SaveJQ.OnSaveError = function(request, status, error) {
                var errorHandler = new impError.ErrorHandle.ErrorJQ();
                errorHandler.ActionFail("Save Failed! <br> Try again later.");
            };
            SaveJQ.IsDownloadStarted = !1;
            return SaveJQ;
        }();
        Save.SaveJQ = SaveJQ;
    }(Save = exports.Save || (exports.Save = {}));
});

define("Controls/NoUi", [ "require", "exports", "../UndoManager/UndoManager", "../Watch/WatchMouseJQ", "../Error/ErrorJQ" ], function(require, exports, impUndoManager, impWatch, impError) {
    "use strict";
    var NoUI;
    !function(NoUI) {
        var AlignJQ = function() {
            function AlignJQ() {}
            AlignJQ.Common = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                return void 0 != selectedElement ? selectedElement.hasClass("column") || selectedElement.hasClass("row") || selectedElement.hasClass("root-elements") ? jQuery("#nononoelement") : selectedElement : jQuery("#nononoelement");
            };
            AlignJQ.Center = function() {
                var selectedElement = AlignJQ.Common();
                selectedElement.css("float", "none");
                selectedElement.closest(".column").css("text-align", "center");
                if (selectedElement.length > 0) {
                    var undo = new impUndoManager.Manager.UndoManager();
                    undo.BeforeOperation();
                }
            };
            AlignJQ.Left = function() {
                var selectedElement = AlignJQ.Common();
                selectedElement.css("float", "left");
                if (selectedElement.length > 0) {
                    var undo = new impUndoManager.Manager.UndoManager();
                    undo.BeforeOperation();
                }
            };
            AlignJQ.Right = function() {
                var selectedElement = AlignJQ.Common();
                selectedElement.css("float", "right");
                if (selectedElement.length > 0) {
                    var undo = new impUndoManager.Manager.UndoManager();
                    undo.BeforeOperation();
                }
            };
            return AlignJQ;
        }();
        NoUI.AlignJQ = AlignJQ;
        var MoveJQ = function() {
            function MoveJQ() {}
            MoveJQ.Common = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                return void 0 != selectedElement ? selectedElement.hasClass("root-elements") ? jQuery("#nononoelement") : selectedElement : jQuery("#nononoelement");
            };
            MoveJQ.CommonUpDown = function() {
                var selectedElement = impWatch.Watch.MouseJQ.selectedElement;
                return void 0 != selectedElement ? selectedElement : jQuery("#nononoelement");
            };
            MoveJQ.Left = function() {
                var selectedElement = MoveJQ.Common();
                if ("none" == selectedElement.css("float")) {
                    if (selectedElement.prevAll(".key").first().length > 0 && ("right" == selectedElement.prevAll(".key").first().css("float") || "left" == selectedElement.prevAll(".key").first().css("float")) || 0 == selectedElement.prevAll(".key").first().length) {
                        var eh = new impError.ErrorHandle.ErrorJQ();
                        eh.ActionHelp("Help : Current element is dependent on all [Align Center] elements.");
                    }
                    selectedElement.insertBefore(selectedElement.prevAll(".key").first());
                } else if ("left" == selectedElement.css("float")) {
                    if (selectedElement.prevAll(".key").first().length > 0 && ("right" == selectedElement.prevAll(".key").first().css("float") || "none" == selectedElement.prevAll(".key").first().css("float")) || 0 == selectedElement.prevAll(".key").first().length) {
                        var eh = new impError.ErrorHandle.ErrorJQ();
                        eh.ActionHelp("Help : Current element is dependent on all [Align Left] elements.");
                    }
                    selectedElement.insertBefore(selectedElement.prevAll(".key").first());
                } else {
                    if (selectedElement.nextAll(".key").first().length > 0 && ("left" == selectedElement.nextAll(".key").first().css("float") || "none" == selectedElement.nextAll(".key").first().css("float")) || 0 == selectedElement.nextAll(".key").first().length) {
                        var eh = new impError.ErrorHandle.ErrorJQ();
                        eh.ActionHelp("Help : Current element is dependent on all [Align Right] elements.");
                    }
                    selectedElement.insertAfter(selectedElement.nextAll(".key").first());
                }
                if (selectedElement.length > 0) {
                    var undo = new impUndoManager.Manager.UndoManager();
                    undo.BeforeOperation();
                }
            };
            MoveJQ.Right = function() {
                var selectedElement = MoveJQ.Common();
                if ("none" == selectedElement.css("float")) {
                    if (selectedElement.nextAll(".key").first().length > 0 && ("right" == selectedElement.nextAll(".key").first().css("float") || "left" == selectedElement.nextAll(".key").first().css("float")) || 0 == selectedElement.nextAll(".key").first().length) {
                        var eh = new impError.ErrorHandle.ErrorJQ();
                        eh.ActionHelp("Help : Current element is dependent on all [Align Center] elements.");
                    }
                    selectedElement.insertAfter(selectedElement.nextAll(".key").first());
                } else if ("left" == selectedElement.css("float")) {
                    if (selectedElement.nextAll(".key").first().length > 0 && ("right" == selectedElement.nextAll(".key").first().css("float") || "none" == selectedElement.nextAll(".key").first().css("float")) || 0 == selectedElement.nextAll(".key").first().length) {
                        var eh = new impError.ErrorHandle.ErrorJQ();
                        eh.ActionHelp("Help : Current element is dependent on all [Align Left] elements.");
                    }
                    selectedElement.insertAfter(selectedElement.nextAll(".key").first());
                } else {
                    if (selectedElement.prevAll(".key").first().length > 0 && ("left" == selectedElement.prevAll(".key").first().css("float") || "none" == selectedElement.prevAll(".key").first().css("float")) || 0 == selectedElement.prevAll(".key").first().length) {
                        var eh = new impError.ErrorHandle.ErrorJQ();
                        eh.ActionHelp("Help : Current element is dependent on all [Align Right] elements.");
                    }
                    selectedElement.insertBefore(selectedElement.prevAll(".key").first());
                }
                if (selectedElement.length > 0) {
                    var undo = new impUndoManager.Manager.UndoManager();
                    undo.BeforeOperation();
                }
            };
            MoveJQ.Up = function() {
                var selectedElement = MoveJQ.CommonUpDown();
                selectedElement.hasClass("row") || (selectedElement = selectedElement.closest(".row"));
                var lastElement = selectedElement.prevAll(".row").first();
                0 == lastElement.length && (lastElement = selectedElement.prevAll(".key").last());
                selectedElement.insertBefore(lastElement);
            };
            MoveJQ.Down = function() {
                var selectedElement = MoveJQ.CommonUpDown();
                selectedElement.hasClass("row") || (selectedElement = selectedElement.closest(".row"));
                var lastElement = selectedElement.nextAll(".row").first();
                0 == lastElement.length && (lastElement = selectedElement.nextAll(".key").last());
                selectedElement.insertAfter(lastElement);
            };
            return MoveJQ;
        }();
        NoUI.MoveJQ = MoveJQ;
    }(NoUI = exports.NoUI || (exports.NoUI = {}));
});

define("Common/CommonEvents", [ "require", "exports", "../Controls/JQueryUI", "../UndoManager/UndoManager", "../Themes/EmptyLayout/EmptyLayoutJQ", "../_Classes/Auth", "../Error/ErrorJQ", "../Common/on", "../_Classes/SaveJq", "../MalFormed/MalFormedJQ", "../Controls/NoUi", "../Controls/ImageJQ" ], function(require, exports, impJQueryUI, impUndoManager, impLayout, impAuth, impError, impOn, impSaveClass, impmal, impNoUi, impImage) {
    "use strict";
    var themeHandle, imageFiles, Common;
    !function(Common) {
        var SmartObj = function() {
            function SmartObj() {
                this.command = "";
                this.isDirty = !1;
            }
            return SmartObj;
        }();
        Common.SmartObj = SmartObj;
        var CommonEvents = function() {
            function CommonEvents() {
                this.isCommonEventsAdded = !1;
            }
            CommonEvents.GetCookie = function(cname) {
                for (var name = cname + "=", ca = document.cookie.split(";"), i = 0; i < ca.length; i++) {
                    for (var c = ca[i]; " " == c.charAt(0); ) c = c.substring(1);
                    if (0 == c.indexOf(name)) return c.substring(name.length, c.length);
                }
                return "";
            };
            CommonEvents.CheckMal = function() {
                return CommonEvents.GetCookie("jQuery") == jQuery("#viewstate").val() ? !0 : !1;
            };
            CommonEvents.UploadImages = function() {
                for (var files = imageFiles, data = new FormData(), i = 0; i < files.length; i++) data.append(files[i].name, files[i]);
                $.ajax({
                    type: "POST",
                    url: "/Services/PageService.asmx/UploadImages",
                    contentType: !1,
                    processData: !1,
                    data: data,
                    success: function() {
                        impImage.Image.SelfJQ.ClearImageGalaryPagingValue();
                        impImage.Image.SelfJQ.GetImages();
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionSuccess("Images Uploaded Sucessfully.");
                    },
                    error: function(request, status, error) {
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionFail("Images Uploaded Failed.(Please check file type or file size.)");
                    }
                });
            };
            CommonEvents.PrepareUpload = function(event) {
                imageFiles = event.target.files;
                CommonEvents.UploadImages();
            };
            CommonEvents.prototype.Init = function() {
                0 == CommonEvents.CheckMal() && (impmal.MalFormed.MalFormedJQ.IsMalFormed = !0);
                jQuery(".button-change-image").on("click", function() {
                    impImage.Image.SelfJQ.ChangeImage();
                });
                if (!jQuery(".bldr-draggable").hasClass("event-added")) {
                    jQuery(".bldr-draggable").addClass("event-added");
                    impJQueryUI.JQueryUI.CommonCode.Draggable(".bldr-draggable", "");
                }
                jQuery(".jq-full-page").on("click", function() {
                    jQuery(".page-margin").css("width", "auto");
                });
                jQuery(".jq-small-page").on("click", function() {
                    jQuery(".page-margin").css("width", "980px");
                });
                jQuery(".show-hide-menu-btn").hide();
                jQuery(".hide-menu").show();
                jQuery(".show-menu, .hide-menu").on("click", function() {
                    jQuery("#hideMenuHelpTop").hide();
                    if ("none" != jQuery(".hide-menu").css("display")) {
                        jQuery(".hide-menu").hide();
                        jQuery(".show-menu").show();
                        jQuery(".top-row-container").hide();
                        jQuery("rootx").css("top", "0");
                        jQuery(".editor").css("top", "0");
                        jQuery(".properties-sidebar-container").css("top", "0");
                    } else {
                        jQuery(".hide-menu").show();
                        jQuery(".show-menu").hide();
                        jQuery("rootx").css("top", "56px");
                        jQuery(".editor").css("top", "56px");
                        jQuery(".properties-sidebar-container").css("top", "56px");
                        jQuery(".top-row-container").show();
                    }
                });
                jQuery(".hide-left-menu").show();
                jQuery(".hide-left-menu, .show-left-menu").on("click", function() {
                    jQuery("#hideLeftMenuHelp").hide();
                    if ("none" != jQuery(".hide-left-menu").css("display")) {
                        jQuery(".hide-left-menu").hide();
                        jQuery(".show-left-menu").show();
                        jQuery("#property-sidebar-page-column").hide();
                        jQuery("#main-page-column").addClass("col-xs-48").removeClass("col-xs-36");
                    } else {
                        jQuery(".hide-left-menu").show();
                        jQuery(".show-left-menu").hide();
                        jQuery("#main-page-column").addClass("col-xs-36").removeClass("col-xs-48");
                        jQuery("#property-sidebar-page-column").show();
                    }
                });
                $(".image-file-upload").on("change", CommonEvents.PrepareUpload);
                jQuery(".button-align-left").on("click", function() {
                    impNoUi.NoUI.AlignJQ.Left();
                });
                jQuery(".button-align-right").on("click", function() {
                    impNoUi.NoUI.AlignJQ.Right();
                });
                jQuery(".button-align-center").on("click", function() {
                    impNoUi.NoUI.AlignJQ.Center();
                });
                jQuery(".button-move-left").on("click", function() {
                    impNoUi.NoUI.MoveJQ.Left();
                });
                jQuery(".button-move-right").on("click", function() {
                    impNoUi.NoUI.MoveJQ.Right();
                });
                jQuery(".button-move-up").on("click", function() {
                    impNoUi.NoUI.MoveJQ.Up();
                });
                jQuery(".button-move-down").on("click", function() {
                    impNoUi.NoUI.MoveJQ.Down();
                });
                jQuery("#control-align").draggable({
                    revert: !1
                });
                jQuery("#control-object-move").draggable({
                    revert: !1
                });
                var liveUrl = jQuery(".input-current-location").val() + "/" + jQuery(".input-site-id").val() + "/" + jQuery(".input-site-name").val() + "/" + jQuery(".input-page-name").val();
                jQuery(".anchor-show-live-preview").attr("href", liveUrl);
                jQuery("#notify").on("click", function() {
                    jQuery(this).hide();
                });
                jQuery(".btn-help").on("click", function() {
                    jQuery("#site-help").slideToggle();
                });
                jQuery("#site-help").on("click", function() {
                    jQuery(this).slideUp();
                });
                themeHandle = window.setInterval(function() {
                    if (1 == impAuth.Auth.AuthJQ.IsAuth) {
                        impAuth.Auth.AuthJQ.HideLoading();
                        window.clearInterval(themeHandle);
                        var layout = new impLayout.Themes.Empty.LayoutJQ();
                        layout.Init();
                        void 0 != impLayout.Themes.Empty.LayoutJQ.loading && impLayout.Themes.Empty.LayoutJQ.loading.Hide();
                    } else void 0 != impLayout.Themes.Empty.LayoutJQ.loading && impLayout.Themes.Empty.LayoutJQ.loading.Show();
                }, 1e3);
                jQuery(".jq-show-plus").on("click", function() {
                    jQuery(".jq-row-plus-container").show();
                    jQuery(".jq-show-plus").hide();
                    jQuery(".jq-hide-plus").show();
                });
                jQuery(".jq-hide-plus").on("click", function() {
                    jQuery(".jq-row-plus-container").hide();
                    jQuery(".jq-hide-plus").hide();
                    jQuery(".jq-show-plus").show();
                });
                jQuery(".button-download-site").on("click", function() {
                    var save = new impSaveClass.Save.SaveJQ(), data = {
                        siteName: jQuery(".input-site-name").val()
                    }, downloadData = JSON.stringify(data), eh = new impError.ErrorHandle.ErrorJQ();
                    eh.ActionHelp("Download will start in few seconds...");
                    save.Download(downloadData);
                });
                jQuery(".jq-save").on("click", function() {
                    var eh = new impError.ErrorHandle.ErrorJQ();
                    eh.ActionHelp("Please Wait...");
                    var scripts = jQuery(document.createElement("scripts")), styles = jQuery(document.createElement("styles")), page = jQuery(document.createElement("page")), fullbody = '<html><head><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta http-equiv="Content-Type" content="text/html;charset=utf-8" /> </head><body>', fullbodyEnd = "</body></html>", styleSheetExtra = '<script type=" text/javascript" class="add-to-page jquery" src= "jquery/jquery-1.11.2.min.js" > </script><link rel="stylesheet" type= "text/css" class="add-to-page" href= "bootstrap/bootstrap-customzed-48.min.css" /><link class="add-to-page" type= "text/css" href= "theme/theme.css" rel= "stylesheet" type= "text/css" /><link class="add-to-page"  href= "theme/jqplus.css" rel= "stylesheet" /> <style>  @media (max-width: 980px) { .page-margin { width: auto !important; } .empty-container-text {display:inline-block; } .jq-text-block-container{max-width:100%;} .jq-text-block-container {height:auto !important;} .jq-plus-container-text{display:inline-block; height:auto !important; } }   .jq-plus-element { display:none !important; }  .jq-row-plus-container { display:none !important; }  .row { margin:0; padding:2px; clear:both; } .root-elements{ padding:0;}  .column { margin:0; padding:0; } .page-static-element { display:none !important;} .page-static-element-circle{display:none !important;} .design-adjust-image-text-other{margin:1px;} .image-text-other .adjust-image-text-other-left{ float: left; } .page-marker{display:none !important;} .design-page-row{display:none !important;}</style>';
                    jQuery(".image-selection").removeClass("image-selection");
                    jQuery(".add-to-page").each(function() {
                        "SCRIPT" == jQuery(this).prop("tagName") && scripts.append($(this).clone());
                        "LINK" == jQuery(this).prop("tagName") && styles.append($(this).clone());
                        if ("PAGE" == jQuery(this).prop("tagName")) {
                            page.append($(this).clone());
                            page.find(".jqte-editor").removeAttr("contentEditable").removeAttr("tabindex").css("cursor", "initial");
                            page.prepend(styleSheetExtra);
                        }
                    });
                    var save = new impSaveClass.Save.SaveJQ();
                    save.scripts = scripts.html();
                    save.styles = styles.html();
                    save.page = fullbody + page.html() + fullbodyEnd;
                    var data = {
                        Obj: save,
                        siteName: jQuery(".input-site-name").val(),
                        pageName: jQuery(".input-page-name").val()
                    }, saveData = JSON.stringify(data);
                    save.SavePage(saveData);
                });
                jQuery(".jq-undo").on("click", function() {
                    var undoManager = new impUndoManager.Manager.UndoManager();
                    undoManager.Undo();
                });
                jQuery(".jq-redo").on("click", function() {
                    var undoManager = new impUndoManager.Manager.UndoManager();
                    undoManager.Redo();
                });
                jQuery(".properties-button").on("click", function() {
                    "block" == jQuery(".control-properties").css("display") ? jQuery(".control-properties").addClass("forced-hide") : jQuery(".control-properties").removeClass("forced-hide");
                    jQuery(".control-properties").fadeToggle();
                });
                window.smartObj = new SmartObj();
                impOn.On.Code.Execute();
            };
            CommonEvents.ResizableClickCode = function($this) {
                jQuery(".ui-resizable-se").removeClass("selected-resizable");
                jQuery(".ui-resizable-s").removeClass("selected-resizable");
                jQuery($this).addClass("selected-resizable");
            };
            return CommonEvents;
        }();
        Common.CommonEvents = CommonEvents;
    }(Common = exports.Common || (exports.Common = {}));
});

define("Controls/ControlMoveJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var control, Control, clicking = !1;
    !function(Control) {
        var ControlMoveJQ = function() {
            function ControlMoveJQ() {}
            ControlMoveJQ.prototype.Init = function() {
                this.MouseDown();
                this.MouseUp();
                this.MouseMove();
            };
            ControlMoveJQ.prototype.MouseDown = function() {
                jQuery(".control-move-area").on("mousedown", function(e) {
                    control = jQuery(this).closest(".control-page");
                    0 == control.length && (control = jQuery(this).closest(".control-properties"));
                    clicking = !0;
                });
            };
            ControlMoveJQ.prototype.MouseUp = function() {
                jQuery(document).on("mouseup", function(e) {
                    clicking = !1;
                });
            };
            ControlMoveJQ.prototype.MouseMove = function() {
                jQuery(document).on("mousemove", function(e) {
                    if (0 != clicking && !(e.clientX + 20 > jQuery(window).width() || e.clientY + 20 > jQuery(window).height() || e.clientY < 0)) {
                        var width = jQuery(control).css("width");
                        if (void 0 != width) {
                            width = width.replace("px", "");
                            var center = Number(width) / 2, x = e.clientX - (center - 10), y = e.clientY - 10;
                            jQuery(control).css("left", x);
                            jQuery(control).css("top", y + "px");
                            jQuery(control).css("outline", "0");
                        }
                    }
                });
            };
            return ControlMoveJQ;
        }();
        Control.ControlMoveJQ = ControlMoveJQ;
    }(Control = exports.Control || (exports.Control = {}));
});

define("Template/TemplateJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var Template, isTemplateReady = !1;
    !function(Template) {
        var TemplateJQ = function() {
            function TemplateJQ() {}
            TemplateJQ.prototype.Init = function() {
                this.Process();
            };
            TemplateJQ.ProcessImmediate = function() {
                jQuery(".jq-template").each(function() {
                    var templateId = $(this).attr("template-id");
                    $(this).append(jQuery(jQuery("#" + templateId).html()).clone());
                });
            };
            TemplateJQ.prototype.Process = function() {
                jQuery(document).ready(function() {
                    if (0 == isTemplateReady) {
                        isTemplateReady = !0;
                        TemplateJQ.ProcessImmediate();
                    }
                });
            };
            return TemplateJQ;
        }();
        Template.TemplateJQ = TemplateJQ;
    }(Template = exports.Template || (exports.Template = {}));
});

define("Controls/controlcommonjq", [ "require", "exports", "./JQueryUI", "../common/on", "../JQte/OnInsert" ], function(require, exports, impJQueryUI, impOn, impJqteOnInsert) {
    "use strict";
    var ControlCommon;
    !function(ControlCommon) {
        var Code = function() {
            function Code() {}
            Code.AttachClick = function() {
                jQuery("#control-common-execute").on("click", function() {
                    Code.DestroyResizable();
                    Code.Execute();
                });
            };
            Code.Execute = function() {
                window.setTimeout(function() {
                    impOn.On.Code.Execute();
                    new impJqteOnInsert.OnInsert.Code().Init();
                    impJQueryUI.JQueryUI.CommonCode.ResizableColumn();
                    impJQueryUI.JQueryUI.CommonCode.Resizable(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other", "s");
                    impJQueryUI.JQueryUI.CommonCode.JustResizable(".adjust-image-text-other-left", "e");
                    impJQueryUI.JQueryUI.CommonCode.Draggable(".jq-normal-link .empty-container, .empty-container-menu, .empty-container-text, .empty-container-image, .empty-container-spacer", "");
                    jQuery(".empty-container-text, .empty-container-image").css("z-index", "0");
                    jQuery(".column").each(function() {
                        if (0 == jQuery(this).children(".image-text-other.empty-container-image, .image-text-other.empty-container-text, .row, .column").length) {
                            jQuery(this).addClass("empty");
                            0 == jQuery(this).find(".empty-drop-element").length && jQuery(this).append("<div class='image-text-other empty-drop-element' ></div>");
                        } else {
                            jQuery(this).removeClass("empty");
                            jQuery(this).find(".empty-drop-element").remove();
                        }
                    });
                    jQuery(".image-text-other, .empty-container-empty").each(function(index, _this) {
                        var $this = jQuery(_this), bottom = $this.offset().top + $this.height(), top = $this.offset().top, left = $this.offset().left;
                        $this.attr("top", top);
                        $this.attr("bottom", bottom);
                        $this.attr("left", left);
                    });
                    impJQueryUI.JQueryUI.CommonCode.Droppable(".column, .empty-container, .image-text-other");
                    jQuery(".ui-resizable-e").html("<div class='jq-square jq-square-e'></div>");
                    jQuery(".ui-resizable-se").html("<div class='jq-square jq-square-se'></div>");
                    jQuery(".ui-resizable-s").html("<div class='jq-square jq-square-s'></div>");
                }, 10);
            };
            Code.DestroyResizable = function() {
                impJQueryUI.JQueryUI.CommonCode.DroppableDestroy(".column, .empty-container, .image-text-other");
                impJQueryUI.JQueryUI.CommonCode.DraggableDestroy(".jq-normal-link, .empty-container, .empty-container-menu, .empty-container-text .empty-container-image, .empty-container-spacer");
                impJQueryUI.JQueryUI.CommonCode.ResizableDestroy(".jq-normal-link, .jq-plus-container-text, .jq-plus-container-image, .column, .empty-container, .root-elements, .adjust-image-text-other, .adjust-image-text-other-left");
            };
            Code.AnchorClicked = !1;
            return Code;
        }();
        ControlCommon.Code = Code;
    }(ControlCommon = exports.ControlCommon || (exports.ControlCommon = {}));
});

define("Document/DocumentJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var Document, isDocumentReady = !1;
    !function(Document) {
        var DocumentJQ = function() {
            function DocumentJQ() {}
            DocumentJQ.prototype.Init = function() {
                this.Attach();
            };
            DocumentJQ.prototype.Attach = function() {
                jQuery(document).ready(function() {
                    0 == isDocumentReady && (isDocumentReady = !0);
                });
            };
            return DocumentJQ;
        }();
        Document.DocumentJQ = DocumentJQ;
    }(Document = exports.Document || (exports.Document = {}));
});

define("InsertTool/InsertToolJQ", [ "require", "exports" ], function(require, exports) {
    "use strict";
    var InsertTool, isInsertToolReady = !1;
    !function(InsertTool) {
        var InsertToolJQ = function() {
            function InsertToolJQ() {}
            InsertToolJQ.prototype.Init = function() {
                this.Process();
            };
            InsertToolJQ.ShowInsertTool = function() {};
            InsertToolJQ.prototype.Process = function() {
                jQuery(document).ready(function() {
                    if (0 == isInsertToolReady) {
                        isInsertToolReady = !0;
                        InsertToolJQ.ShowInsertTool();
                    }
                });
            };
            return InsertToolJQ;
        }();
        InsertTool.InsertToolJQ = InsertToolJQ;
    }(InsertTool = exports.InsertTool || (exports.InsertTool = {}));
});

define("Page/LoadJQ", [ "require", "exports", "../Controls/ControlCommonJQ", "../UndoManager/UndoManager", "../Error/ErrorJQ", "../_Classes/Auth", "../Preview/Preview", "../Constants/ConstantsJQ", "../InsertTool/InsertToolJQ", "../jqte/OnInsert" ], function(require, exports, impCommonCode, impUndoManager, impError, impAuth, impPreview, impStatic, impInsertTool, impOnInsert) {
    "use strict";
    var Page;
    !function(Page) {
        var LoadJQ = function() {
            function LoadJQ() {}
            LoadJQ.LoadPage = function(siteId, siteName, pageName) {
                var url = "/services/sites/" + jQuery(".input-site-id").val() + "/" + jQuery(".input-site-name").val() + "/" + jQuery(".input-page-name").val();
                $.ajax({
                    url: url,
                    type: "GET",
                    cache: !1,
                    success: function(data) {
                        impAuth.Auth.AuthJQ.HideLoading();
                        var e = jQuery(document.createElement("div")), pg = jQuery(document.createElement("div"));
                        e.html(data);
                        pg.append(e.html());
                        var pgResizableRemoved = pg;
                        if (pgResizableRemoved.find("page").length > 0) {
                            jQuery("page").html(pgResizableRemoved.find("page").html());
                            try {
                                jQuery("page").attr("style", pgResizableRemoved.find("page").attr("style"));
                            } catch (ex) {}
                            jQuery(".main-page-column").css("border", "1px solid #29adef");
                            jQuery("page .empty-container-text").find(".jq-text-block-container").find("*").not(".ui-resizable-handle").css("cursor", "move");
                            jQuery("page .jqte-editor").attr("tabindex", "1");
                            impStatic.Constants.StaticJQ.normalLinkId = jQuery("page .jq-normal-link").length + 10;
                            impStatic.Constants.StaticJQ.editorLinkId = jQuery("page .jq-editor-link").length + 10;
                            jQuery(".page").show();
                            impPreview.Preview.PreviewJQ.ClosePreview();
                            jQuery("#control-templates").hide();
                            var c = new impOnInsert.OnInsert.Code();
                            c.Init();
                            impCommonCode.ControlCommon.Code.DestroyResizable();
                            impCommonCode.ControlCommon.Code.Execute();
                            var insert = new impInsertTool.InsertTool.InsertToolJQ();
                            insert.Process();
                            var undo = new impUndoManager.Manager.UndoManager();
                            undo.BeforeOperation();
                            $(window).scrollTop();
                        } else jQuery("#control-templates").show();
                        jQuery(".jq-row-plus-container").hide();
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionSuccess("Your page is loading. <br>Please wait...");
                    },
                    error: function(e) {
                        impAuth.Auth.AuthJQ.HideLoading();
                        var errorHandler = new impError.ErrorHandle.ErrorJQ();
                        errorHandler.ActionFail("Page Loading Failed ! <br> Try again latter");
                    }
                });
            };
            return LoadJQ;
        }();
        Page.LoadJQ = LoadJQ;
    }(Page = exports.Page || (exports.Page = {}));
});

define("mainJQ", [ "require", "exports", "./Page/Context/ContextJQ", "./Controls/ControlsJQ", "./ContextMenu/ContextMenuJQ", "./Watch/WatchMouseJQ", "./_Classes/Auth", "./Common/CommonEvents", "./Preview/Preview", "./jqte/MyJQte", "./Controls/ControlMoveJQ", "./Template/TemplateJQ", "./Controls/controlcommonjq", "./Document/DocumentJQ", "./Page/LoadJQ" ], function(require, exports, impPageCtx, impControls, impCtxMenu, impWatch, impAuth, impCommon, impPreview, impJqte, impControlMove, impTemplate, impCommonControls, impDocument, impPageLoad) {
    "use strict";
    function DesignerPadding() {
        jQuery(".jq-text-block-container").addClass("jq-text-block-container-padding");
        jQuery(".column").addClass("column-padding");
    }
    var isMainReady = (new impPageCtx.Page.ContextJQ(), !1);
    jQuery(document).ready(function() {
        if (0 == isMainReady) {
            isMainReady = !0;
            var element = jQuery(document.createElement("div"));
            element.attr("src", "xa.xml");
            jQuery("body").find("div").first().append(element);
            jQuery("body").find("div").first().append(element.clone());
            jQuery("body").find("div").first().append(element.clone());
            impCommonControls.ControlCommon.Code.AttachClick();
            jQuery(".row").removeClass("design-row");
            jQuery(".column").removeClass("design-column");
            jQuery(".jq-loading").show();
            "" != jQuery("inpu-page-name").val() && "" != jQuery("inpu-site-name").val() && impPageLoad.Page.LoadJQ.LoadPage("site", "site1", "page1");
            var doc = new impDocument.Document.DocumentJQ();
            doc.Init();
            var smart = new impCommon.Common.CommonEvents();
            smart.Init();
            var preview = new impPreview.Preview.PreviewJQ();
            preview.Init();
            DesignerPadding();
            var jqteObj = new impJqte.MyJQte.jqte("");
            jqteObj.Init();
            var addRow = new impControls.Page.AddRowJQ();
            addRow.Init();
            var contextmenu = new impCtxMenu.ContextMenu.ContextMenuJQ();
            contextmenu.Init();
            var watch = new impWatch.Watch.MouseJQ();
            watch.WatchPage();
            var controlMove = new impControlMove.Control.ControlMoveJQ();
            controlMove.Init();
            var templating = new impTemplate.Template.TemplateJQ();
            templating.Init();
            var Auth = new impAuth.Auth.AuthJQ();
            Auth.Call();
        }
    });
});

requirejs.config({
    baseUrl: "../../shiv/TypeScript",
    urlArgs: "bust=" + new Date().getTime(),
    wrapShim: !0,
    paths: {
        jquery: "../../Library/jquery-1.11.2.min",
        jqueryUi: "../../Library/jquery-ui",
        colPicker: "../../Scripts/evoluteur.colorpicker/colorpicker-master/js/evol.colorpicker",
        mainJQ: "./MainJQ"
    },
    shim: {
        jqueryUi: {
            deps: [ "jquery" ],
            exports: "$"
        },
        colPicker: {
            deps: [ "jquery", "jqueryUi" ],
            exports: "jQuery"
        },
        mainJQ: {
            deps: [ "jquery", "jqueryUi", "colPicker" ],
            exports: "MainJQ"
        }
    }
});

requirejs([ "mainJQ" ]);

define("app", function() {});

require([ "app" ]);